<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thought Paradise]]></title>
  <link href="http://mutaphore.github.io/atom.xml" rel="self"/>
  <link href="http://mutaphore.github.io/"/>
  <updated>2016-01-24T16:24:29-05:00</updated>
  <id>http://mutaphore.github.io/</id>
  <author>
    <name><![CDATA[Dewei Chen]]></name>
    <email><![CDATA[dewei.chen@cs.nyu.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Paxos Consensus Protocol, Part 1]]></title>
    <link href="http://mutaphore.github.io/blog/2015/12/30/my-experience-with-the-paxos-consensus-protocol/"/>
    <updated>2015-12-30T12:40:43-05:00</updated>
    <id>http://mutaphore.github.io/blog/2015/12/30/my-experience-with-the-paxos-consensus-protocol</id>
    <content type="html"><![CDATA[<p>Paxos is a protocol created by Leslie Lamport that allow distributed nodes to reach agreement on mutually shared state. You can read the original paper <a href="http://news.cs.nyu.edu/~jinyang/fa08/papers/paxos-simple.pdf">here</a>. What makes this protocol powerful is its ability to preserve linearizability across node failures and network partitions. I had the fortunate experience of implementing a paxos library for a distributed systems school project. Here I will talk about, from my perspective, what &ldquo;preserving linearizability&rdquo; mean and how Paxos works at an implementation level.</p>

<!-- more -->


<h2>Linearizability</h2>

<p>To see what Paxos does for us, we must first understand the concept of linearizability. The term linearizability is usually brought up when we talk about concurrent operations performed on objects. Although linearizability could be said about transactions as well, here I will just stick to linearizability as applied to operations on objects. For examples provided here, we will use a simple key-value store (the object) which we can apply operations Put, Append and Get. We will see examples that tell us whether concurrent executions of these ops are linearizable. Linearizability requires satisfying the following 2 constraints with regards to concurrent operations:</p>

<ul>
<li>Each node preserves the operations order given by sequential execution of the program (local property).</li>
<li>Completion-to-invocation order between operations <strong>across</strong> nodes is preserved (global property).</li>
</ul>


<p>Why do we care if a distributed system is linearizable? Systems that behave in a linearizable fashion are easy to reason about by programmers. This makes programming it much easier! Imagine writing a program using a key-value store that returns the latest value when we access on one node but an earlier value on another node. There would be a lot more programming effort on the client side to make sure the user program behaves consistently.</p>

<p>So lets step back a bit and talk about what the above 2 constraints mean. The first one is pretty easy and is what one would expect: operations that are executed on a single machine preserves the program order of operations. In fact I do not know any consistency models that does not satisfy this. The second requirement takes some explanation. Consider the following 2 operations Put and Get executed by servers S0 and S1 on a shared key-value store:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>S0: Put(x=1)----------Put_OK
</span><span class='line'>S1:                            Get(x)----------Get_OK(x=1)</span></code></pre></td></tr></table></div></figure>


<p>Assuming our key x here starts with a value 0. Time goes from left to right and we think of the operation occurs at some instant between its invocation and completion (but we don&rsquo;t know exactly when). The above example is linearizable because completion of Put (e.g. Put_OK) occurs before invocation of Get (e.g. Get(x)), therefore we expect Get to return 1 and not 0. Lets see another example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>S0: Put(x=1)----------Put_OK
</span><span class='line'>S1:         Get(x)------------Get_OK(x=0)</span></code></pre></td></tr></table></div></figure>


<p>Is this linearizable? See that now there is a period between the 2 operations where they overlap (i.e. ran concurrently). The result of Get could be different depending on which operation took place first. This system may or may not be linearizable because too little information about the completion-to-invocation order is given. In order to make a definitive conclusion about this system about its linearizability, we need to examine more operations. Lets see an example that is not linearizable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>S0: Put(x=1)----------Put_OK
</span><span class='line'>S1:         Get(x)------------Get_OK(x=0)  Get(x)------------Get_OK(x=0)</span></code></pre></td></tr></table></div></figure>


<p>The second Get on S1 was invoked after Put on S0 completed. In a linearizable system we would expect that the second Get returns 1.</p>

<h2>Consistency Models</h2>

<p>The term linearizability describes a consistency model. A consistency model is essentially a contract between a system with shared memory and the software that uses it. In the previous examples, we have explicitly indicated what are the semantics of our key-value store given the ordering of Puts and Gets. Without knowing the consistency model of a shared memory system is like given a tool without the manual that comes with it. How does the key-value store behave when we have concurrent threads reading/writing the same key? The first question to ask when you want to dig deep into a distributed system is: what is its consistency model?</p>

<p>Linearizability is the strictest consistency model that is achievable by any distributed systems today. How &ldquo;Strict&rdquo; here correlates to how much the system behaves like a multiprocessor shared memory model where everything occurs instantaneously. However, most productions systems actually aren&rsquo;t linearizable for the sake of efficiency. I won&rsquo;t go into more detail about why this is so, but it is easy to see that designing a distributed system where nodes far apart connected by unreliable network behaves like processors connected by memory busses is <strong>hard</strong>.</p>

<p>Historically there has been systems built with consistency models that are not linearizable. For example, <a href="http://news.cs.nyu.edu/~jinyang/fa08/papers/bayou.pdf">Bayou</a> and <a href="http://www.cs.princeton.edu/~mfreed/docs/cops-sosp11.pdf">COPS</a> describes more relaxed consistency models where changes in one node is eventually propagated to other nodes in the system. More recent industry systems like Amazon&rsquo;s <a href="http://news.cs.nyu.edu/~jinyang/fa15-ds/papers/dynamo.pdf">Dynamo</a> and Yahoo&rsquo;s <a href="http://news.cs.nyu.edu/~jinyang/fa15-ds/papers/cooper-pnuts.pdf">PNUTS</a> showed that eventually consistent systems can scale when used in massive applications with sacrifice of speed and some caveats.</p>

<h2>Paxos and Linearizability</h2>

<p>So why all this fuss about linearizability when we&rsquo;re talking about Paxos, a consensus algorithm? The implementation I am about to provide in the next part is a linearizable key-value store that uses Paxos to achieve consistency. Hopefully this provides the foundation for understanding what the expected behavior is and how we can use Paxos to achieve it. Stay tuned for part 2!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Functional Programming]]></title>
    <link href="http://mutaphore.github.io/blog/2015/05/20/thoughts-on-functional-programming/"/>
    <updated>2015-05-20T01:38:01-04:00</updated>
    <id>http://mutaphore.github.io/blog/2015/05/20/thoughts-on-functional-programming</id>
    <content type="html"><![CDATA[<p>This past semester my Programming Languages class exposed us to several functional languages: Lisp/Scheme, SML and Scala (to a lesser extent). Before this exposition I really had no clue about what functional programming is. FP is a ubiquitous term used in all software/cs talks, most of the time I’ll just pretend to know what people are talking about. However, quickly I will realize that knowledge acquired from a 5 min wikipedia read just barely scratches the surface on this topic.</p>

<!-- more -->


<h1>What is FP (Functional Programming)?</h1>

<p>A programming language is the medium in which we communicate with the computer and instruct it to do certain tasks. There are many ways to write a program, just as there are many ways to write an essay. Functional programming is, on very simple terms, a style of writing a program. The other major way is the imperative style, which is the more easily understood and most widely used (which we will not talk about here). The difference between imperative and functional programming boils down to the following:</p>

<ul>
<li>Imperative - tell the computer how to do something</li>
<li>Functional - tell the computer definition of something</li>
</ul>


<p>So imperative style is the “How” and functional style is the “What” of doing something. In the classical problem to calculate the factorial of number, with an imperative style, the pseudocode would be following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fac(n):
</span><span class='line'>    res = 1
</span><span class='line'>    for i = 1 to n:
</span><span class='line'>        res = res * i
</span><span class='line'>    return res</span></code></pre></td></tr></table></div></figure>


<p>Now for functional style:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fac(n):
</span><span class='line'>    if n == 0 or 1:
</span><span class='line'>        return 1
</span><span class='line'>    else:
</span><span class='line'>        return n * fac(n - 1)</span></code></pre></td></tr></table></div></figure>


<p>If we were to translate the program into words, the imperative style factorial would be:</p>

<p>“To calculate factorial of n, first start with a result variable that holds 1, then repeatedly multiply it by the next larger number 2, 3, etc. until you reach the n value. Each time you multiply save the result of the product back into the result variable. After all n numbers are multiplied, just return the result.”
The functional verbal version would be:</p>

<p>“By definition, factorial of 0 or 1 is always 1. Otherwise, Factorial of a number is just the product of that number with the factorial of a number that is 1 smaller.”
In an imperative style, we explicitly tell the computer that the steps that it needs to take to reach a goal by using “imperatives”, i.e. an instruction sequence. In a functional style, we give it the precise definition of what it is that it needs to compute. Functional programming is like telling the computer the math formula for doing something and then let it handle the rest.</p>

<h1>Which universe are you in?</h1>

<h2>Loops</h2>

<p>The presence of any kind of looping construct in a program means that it belongs in the “imperative universe”. This is because when we are talking about loops, we are essentially thinking about the sequential steps of doing something instead of the definition of something. In purely functional languages, there are no loop constructs so it forces the programmer to use recursion. This was probably one of the hardest thing to grasp for me when I first started programming in functional languages like Scheme or SML.</p>

<p>For example, how do we write a function to sum up all the elements in an array A, given its length n? Assuming there is at least 1 element in the array, the logic of an imperative style is a piece of cake:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the functional style:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nb">sum</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the functional style did not use any loops at all. The definition provided by the functional style program is essentially saying:</p>

<p>“The sum of a 1-item array is simply value of the only item in the array. Otherwise, the sum is the first item in the array plus the sum of the rest of the elements in the array.”
Now read that over a few times, isn’t that exactly what the definition of an array sum?</p>

<h2>States</h2>

<p>Another reality test between imperative and functional is the presence of states. In the previous examples, note the occurrence of the res and sum variables in the imperative style that were used to keep track of the progress of the function. Without these state variables we have no way of knowning when to finish and return the answer. This is the pattern of saving state in an imperative programming style. In contrast, functional styles do not care about states because the program is not written in sequential imperatives. If a functional program correctly defines the problem in its entirety, it will return the correct result without needing to keep track of the running state.</p>

<p>In the functional universe, lack of state also means lack of mutable variables. We no longer need to define variables that mutates or changes to help us keep track of some state. This is why functional style centers on the paradigm of immutability. Immutability also translates to not needing to make any assignment to variables, because if we assign something we change it, if we change it then we destroy the functional aspect of the program. Thus, immutability is closely related to lack of the concept of assignment in a program.</p>

<p>Functional programming languages such as Scheme does not have the assignment operator, forcing the programmer to code in a functional manner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">; Remove element k from list L</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">L</span> <span class="nv">k</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">k</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">L</span><span class="p">))</span>   <span class="c1">; &#39;=&#39; here means equality and not assignment!</span>
</span><span class='line'>        <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">L</span><span class="p">)</span> <span class="p">(</span><span class="nf">rem</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">L</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">k</span> <span class="mi">1</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Languages such as ML have the assignment operator to create a val. But once a value is assigned something, it cannot be changed later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nb">* </span><span class="nv">Bubbles</span> <span class="nv">smallest</span> <span class="nv">value</span> <span class="nv">to</span> <span class="nv">beginning</span> <span class="nv">of</span> <span class="nv">list</span> <span class="nv">*</span><span class="p">)</span>
</span><span class='line'><span class="nv">fun</span> <span class="nv">bubble</span> <span class="p">[]</span> <span class="nv">=</span> <span class="nv">raise</span> <span class="nv">listError</span>
</span><span class='line'> <span class="nv">|</span>  <span class="nv">bubble</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="nv">=</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'> <span class="nv">|</span>  <span class="nv">bubble</span> <span class="p">(</span><span class="nf">x::xs</span><span class="p">)</span> <span class="nv">=</span>
</span><span class='line'>    <span class="k">let </span><span class="nv">val</span> <span class="p">(</span><span class="nf">y::ys</span><span class="p">)</span> <span class="nv">=</span> <span class="nv">bubble</span> <span class="nv">xs</span>
</span><span class='line'>    <span class="nv">in</span> <span class="k">if </span><span class="nv">y</span> <span class="nv">&lt;</span> <span class="nv">x</span> <span class="nv">then</span>
</span><span class='line'>       <span class="nv">y::x::ys</span>
</span><span class='line'>       <span class="nv">else</span>
</span><span class='line'>       <span class="nv">x::y::ys</span>
</span><span class='line'>    <span class="nv">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In line 5, val (y::ys) = bubble xs binds (y::ys) to the result of calling bubble recursively. Once bound, its value cannot be changed further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux WiFi]]></title>
    <link href="http://mutaphore.github.io/blog/2015/01/25/arch-linux-wifi/"/>
    <updated>2015-01-25T00:08:27-05:00</updated>
    <id>http://mutaphore.github.io/blog/2015/01/25/arch-linux-wifi</id>
    <content type="html"><![CDATA[<p>I am dual booting a MBPr with OSX and Arch Linux. I found that because Arch requires an internet connection to install its many dependencies with pacman, it was troublesome due to the lack of a ethernet port on the retina. So to even begin installing Arch you will need to setup the WiFi driver. For those new to Arch Linux, here are some tips.</p>

<!-- more -->


<h1>Setup</h1>

<ul>
<li>Macbook Pro Retina Mid-2012</li>
<li>Bootable USB drive with Arch Linux ISO loaded</li>
<li>Optional but highly recommended: Apple Thunderbolt port to ethernet adapter</li>
</ul>


<h1>Wifi</h1>

<h2>Firmware</h2>

<p>Installing Arch without a good internet connection is one of the biggest annoyances I had. For first-timers I recommend getting a Thunderbold port to ethernet converter if you don&rsquo;t already have one and follow the steps on Arch Linux&rsquo;s <a href="https://wiki.archlinux.org/index.php/beginners%27_guide">beginner&rsquo;s guide</a>. Depending on the amount of Wifi driver support your version of Arch Linux have, WiFi may or may not work right out of the box. To find out what WiFi interface you have, do the following to see if an interface driver exists for the WiFi card.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ip link
</span><span class='line'>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN mode DEFAULT group default
</span><span class='line'>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span><span class='line'>2: wlp4s0c1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc mq state UP mode DORMANT group default qlen 1000
</span><span class='line'>    link/ether b8:f0:b1:13:ba:8b brd ff:ff:ff:ff:ff:ff
</span></code></pre></td></tr></table></div></figure>


<h2>Broadcom</h2>

<p><em>wlp4s0c1</em> is the WiFi interface driver. Yours may be different but it usually begins with a &ldquo;w&rdquo;. If you don&rsquo;t see that it means there&rsquo;s no driver installed for your WiFi card. For a mid-2012 MBPr you will need to install the b43-firmware driver (More info at <a href="https://wiki.archlinux.org/index.php/broadcom_wireless#b43.2Fb43legacy">https://wiki.archlinux.org/index.php/broadcom_wireless#b43.2Fb43legacy</a>).</p>

<p>Doing this means that you will need an internet connection and download/install the package via the Arch Linux package manager <em>pacman</em> by doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo pacman -S b43-firmware
</span></code></pre></td></tr></table></div></figure>


<p>If you decided to do it the rough way and you&rsquo;re not already hooked up to the internet via the ethernet adapter, you will need to download the <a href="https://aur.archlinux.org/packages/b43-firmware/">b43-firmware</a> driver tarball onto another thumbdrive and run the following commands while inside the unzipped driver directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>makepkg
</span><span class='line'><span class="nv">$ </span>sudo pacman -U
</span></code></pre></td></tr></table></div></figure>


<h2>Modprobe</h2>

<p>After installing the driver, make sure to enable it by using modprobe and reboot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo modprobe b43
</span></code></pre></td></tr></table></div></figure>


<p>To confirm you have the b43 module installed, run lsmod to list all the modules currently active and filter ones with b43. You should see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lsmod <span class="p">|</span> grep b43
</span><span class='line'>b43                   <span class="m">414640</span>  <span class="m">0</span>
</span><span class='line'>mac80211              <span class="m">608652</span>  <span class="m">1</span> b43
</span><span class='line'>cfg80211              <span class="m">453926</span>  <span class="m">2</span> b43,mac80211
</span><span class='line'>ssb                    <span class="m">65506</span>  <span class="m">1</span> b43
</span><span class='line'>rng_core               <span class="m">12808</span>  <span class="m">1</span> b43
</span><span class='line'>pcmcia                 <span class="m">53108</span>  <span class="m">2</span> b43,ssb
</span><span class='line'>bcma                   <span class="m">46116</span>  <span class="m">1</span> b43
</span><span class='line'>led_class              <span class="m">12855</span>  <span class="m">3</span> b43,sdhci,applesmc
</span><span class='line'>mmc_core              <span class="m">110515</span>  <span class="m">4</span> b43,ssb,sdhci,sdhci_pci
</span></code></pre></td></tr></table></div></figure>


<h2>Wifi-menu</h2>

<p>By this point you should have the necessary WiFi interface to connect to the hardware card. Given this is Arch Linux and we&rsquo;re only given the bare bones of an OS, the next step is to get some sort of user-friendly interface so we can actually see what networks are around us so we can connect to it. In Arch the manager of network connections is called <a href="https://wiki.archlinux.org/index.php/netctl">netctl</a> and a higher layer UI for looking up wifi networks is <a href="https://www.archlinux.org/packages/?name=dialog">wifi-menu</a> (Note: wifi-menu is actually a program named <em>dialog</em> in the arch repo). Go ahead and use pacman to install both these programs if you don&rsquo;t already have it. You should then be able to run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo wifi-menu
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://mutaphore.github.io/images/wifi.png" alt="WiFi" /></p>

<p>Pick your network and enter the wpa password. Wifi-menu will auto generate a network profile for you if it doesn&rsquo;t exist already at /etc/netctl. Now you have a working WiFi connection!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://mutaphore.github.io/blog/2015/01/20/hello-world/"/>
    <updated>2015-01-20T23:59:16-05:00</updated>
    <id>http://mutaphore.github.io/blog/2015/01/20/hello-world</id>
    <content type="html"><![CDATA[<p>Welcome to my first blog! This is my &ldquo;Hello World&rdquo; so to speak. I&rsquo;ve never really felt the need to have a blog up until recently. To be honest, I&rsquo;m not a big fan of writing long essays. These days I feel that my brain&rsquo;s memory capacity is reaching its limit. I believe that the human brain also have a limit just like computer hard drives :). So I will treat this blog as a memoir for me to remind my future self what I was thinking when I was younger. Warning: this blog may contain substantial grammatical errors from this point on&hellip;</p>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
</feed>
