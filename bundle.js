/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _app = __webpack_require__(1);

	var _app2 = _interopRequireDefault(_app);

	var _reactRouter = __webpack_require__(192);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	ReactDOM.render(React.createElement(
	  _reactRouter.Router,
	  { history: _reactRouter.hashHistory },
	  React.createElement(_reactRouter.Route, { path: '/', component: _app2.default })
	), document.getElementById("root"));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _navbar = __webpack_require__(2);

	var _navbar2 = _interopRequireDefault(_navbar);

	var _desktop = __webpack_require__(189);

	var _desktop2 = _interopRequireDefault(_desktop);

	var _constants = __webpack_require__(3);

	var _constants2 = _interopRequireDefault(_constants);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	var App = function (_React$Component) {
	  _inherits(App, _React$Component);

	  function App(props) {
	    _classCallCheck(this, App);

	    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

	    _this.state = {
	      views: ["home", "projects", "about", "contact", "terminal"],
	      selectedView: "home"
	    };
	    return _this;
	  }

	  _createClass(App, [{
	    key: "selectView",
	    value: function selectView(view) {
	      this.setState({ selectedView: view });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return React.createElement(
	        "div",
	        { id: "app" },
	        React.createElement(_navbar2.default, { views: this.state.views,
	          selectedView: this.state.selectedView,
	          selectView: this.selectView.bind(this),
	          utcOffset: -5 }),
	        React.createElement(_desktop2.default, { views: this.state.views,
	          selectedView: this.state.selectedView,
	          selectView: this.selectView.bind(this) })
	      );
	    }
	  }]);

	  return App;
	}(React.Component);

	module.exports = App;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _constants = __webpack_require__(3);

	var _constants2 = _interopRequireDefault(_constants);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	var NavBar = function (_React$Component) {
	  _inherits(NavBar, _React$Component);

	  function NavBar(props) {
	    _classCallCheck(this, NavBar);

	    return _possibleConstructorReturn(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).call(this, props));
	  }

	  _createClass(NavBar, [{
	    key: 'setTime',
	    value: function setTime() {
	      var currentdate = new Date();
	      var hours = currentdate.getUTCHours() + parseInt(this.props.utcOffset);
	      // correct for number over 24, and negatives
	      if (hours >= 24) {
	        hours -= 24;
	      }
	      if (hours < 0) {
	        hours += 12;
	      }
	      // add leading zero, first convert hours to string
	      hours = hours + "";
	      if (hours.length == 1) {
	        hours = "0" + hours;
	      }
	      // minutes are the same on every time zone
	      var minutes = currentdate.getUTCMinutes();
	      // add leading zero, first convert hours to string
	      minutes = minutes + "";
	      if (minutes.length == 1) {
	        minutes = "0" + minutes;
	      }
	      this.setState({
	        time: hours + ':' + minutes
	      });
	    }
	  }, {
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setTime();
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      // set the time every minute
	      window.setInterval(function () {
	        this.setTime();
	      }.bind(this), 60 * 1000);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      var navItems = [];
	      // only render the navbar items when not at home view
	      if (this.props.selectedView !== "home") {
	        this.props.views.forEach(function (view) {
	          if (view === self.props.selectedView) {
	            navItems.push(React.createElement(
	              'li',
	              { key: view, className: 'active' },
	              React.createElement(
	                'a',
	                { href: '#', onClick: self.props.selectView.bind(null, view) },
	                view
	              )
	            ));
	          } else {
	            navItems.push(React.createElement(
	              'li',
	              { key: view },
	              React.createElement(
	                'a',
	                { href: '#', onClick: self.props.selectView.bind(null, view) },
	                view
	              )
	            ));
	          }
	        });
	      }
	      return React.createElement(
	        'nav',
	        { className: 'navbar navbar-inverse navbar-fixed-top' },
	        React.createElement(
	          'div',
	          { className: 'navbar-header' },
	          React.createElement(
	            'button',
	            { type: 'button', className: 'navbar-toggle', 'data-toggle': 'collapse', 'data-target': '.navbar-collapse' },
	            React.createElement(
	              'span',
	              { className: 'sr-only' },
	              'Toggle navigation'
	            ),
	            React.createElement('span', { className: 'icon-bar' }),
	            React.createElement('span', { className: 'icon-bar' }),
	            React.createElement('span', { className: 'icon-bar' })
	          ),
	          React.createElement(
	            'a',
	            { className: 'navbar-brand' },
	            'Dewei Chen'
	          )
	        ),
	        React.createElement(
	          'div',
	          { className: 'navbar-collapse collapse' },
	          React.createElement(
	            'ul',
	            { className: 'nav navbar-nav' },
	            navItems
	          ),
	          React.createElement(
	            'ul',
	            { className: 'nav navbar-nav navbar-right' },
	            React.createElement(
	              'li',
	              null,
	              React.createElement(
	                'a',
	                { href: '#' },
	                React.createElement('span', { className: 'glyphicon glyphicon-time', 'aria-hidden': 'true' }),
	                " " + this.state.time
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return NavBar;
	}(React.Component);

	module.exports = NavBar;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _projects = __webpack_require__(4);

	var _projects2 = _interopRequireDefault(_projects);

	var _about = __webpack_require__(182);

	var _about2 = _interopRequireDefault(_about);

	var _contact = __webpack_require__(184);

	var _contact2 = _interopRequireDefault(_contact);

	var _terminal = __webpack_require__(185);

	var _terminal2 = _interopRequireDefault(_terminal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = function () {
	  var priv = {
	    home: {
	      title: "home",
	      icon: "./assets/win95/msnp32_SERVER_ICON.ico",
	      width: "100%",
	      height: "600px"
	    },
	    projects: {
	      title: "projects",
	      view: _projects2.default,
	      icon: "./assets/win95/wmsui32_3924.ico",
	      width: "900px",
	      height: "580px"
	    },
	    about: {
	      title: "about",
	      view: _about2.default,
	      icon: "./assets/win95/ulclient_1002.ico",
	      width: "700px",
	      height: "550px"
	    },
	    contact: {
	      title: "contact",
	      view: _contact2.default,
	      icon: "./assets/win95/smmscrpt_100.ico",
	      width: "400px",
	      height: "auto"
	    },
	    terminal: {
	      title: "terminal",
	      view: _terminal2.default,
	      icon: "./assets/win95/shell32_3.ico",
	      width: "1000px",
	      height: "550px"
	    },
	    help: {
	      title: "help",
	      icon: "./assets/win95/winhlp32_4001.ico",
	      popover: "<span>Built with React.js</span><br>View the <a href=\"https://github.com/mutaphore/mutaphore.github.io\">source</a>"
	    },
	    trash: {
	      title: "trash",
	      icon: "./assets/win95/shell32_33.ico",
	      popover: "<span>Looks like there some trash in here...</span><br/>\n                <a href=\"/archive\">old version of this site made with Angular.js</a>"
	    }
	  };
	  return {
	    get: function get(name) {
	      return priv[name];
	    }
	  };
	}();

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	var ProjectsView = function (_React$Component) {
	  _inherits(ProjectsView, _React$Component);

	  function ProjectsView() {
	    _classCallCheck(this, ProjectsView);

	    return _possibleConstructorReturn(this, (ProjectsView.__proto__ || Object.getPrototypeOf(ProjectsView)).apply(this, arguments));
	  }

	  _createClass(ProjectsView, [{
	    key: 'render',
	    value: function render() {
	      return React.createElement(
	        'div',
	        null,
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://github.com/mutaphore/docker-dispatch' },
	          'Dispatch Docker containers from RabbitMQ messages ',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Go'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://github.com/mutaphore/bigdata_project' },
	          'Big data analytic on HackerNews/Reddit upvotes using Hadoop Hive and MapReduce',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Python / Hadoop'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'http://mlproject.herokuapp.com' },
	          'A linear regression plotter using gradient descent to find best fit ',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Python / Django / Heroku'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'http://cims.nyu.edu/drecco/games/GravitationalVoronoi/crz.php' },
	          'Gravitational voronoi game',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Javascript / PHP'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://github.com/mutaphore/RTSP-Client-Server' },
	          'Video streaming between client and server using RTSP and RTP protocols',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Java'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://github.com/mutaphore/spring-rest-service' },
	          'Simple RESTful APIs using Spring and Roo',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Java / Postgres / AWS'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://github.com/mutaphore/NYU-JOS' },
	          'An exokernel operating system called JOS',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'C'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://github.com/mutaphore/CSC349_knapsack_project' },
	          'Knapsack problem',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Java'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'http://mutaphore.github.io/Calculon' },
	          'Calculon (auto program grader)',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'C'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'http://mutaphore.github.io/LZW-Compressor' },
	          'LZW Compressor',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'C'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://gitlab.com/mutaphore/CSC103_project1/tree/master' },
	          'Expression converter',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Java'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://gitlab.com/mutaphore/CSC103_project4/tree/master' },
	          'Student records storage',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Java'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'https://gitlab.com/mutaphore//CSC103_project5/tree/master' },
	          'Sorting algorithms',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'Java'
	          )
	        ),
	        React.createElement(
	          'a',
	          { className: 'list-group-item', href: 'http://mutaphore.github.io/Linear-Simulator' },
	          'Linear Simulator',
	          React.createElement(
	            'span',
	            { className: 'badge' },
	            'C'
	          )
	        )
	      );
	    }
	  }]);

	  return ProjectsView;
	}(React.Component);

	module.exports = ProjectsView;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(6);


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var ReactChildren = __webpack_require__(9);
	var ReactComponent = __webpack_require__(22);
	var ReactPureComponent = __webpack_require__(25);
	var ReactClass = __webpack_require__(26);
	var ReactDOMFactories = __webpack_require__(28);
	var ReactElement = __webpack_require__(13);
	var ReactPropTypes = __webpack_require__(33);
	var ReactVersion = __webpack_require__(34);

	var onlyChild = __webpack_require__(35);
	var warning = __webpack_require__(15);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(29);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(10);
	var ReactElement = __webpack_require__(13);

	var emptyFunction = __webpack_require__(16);
	var traverseAllChildren = __webpack_require__(19);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(11);

	var invariant = __webpack_require__(12);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 11 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var ReactCurrentOwner = __webpack_require__(14);

	var warning = __webpack_require__(15);
	var canDefineProperty = __webpack_require__(17);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(18);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(16);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(11);

	var ReactCurrentOwner = __webpack_require__(14);
	var REACT_ELEMENT_TYPE = __webpack_require__(18);

	var getIteratorFn = __webpack_require__(20);
	var invariant = __webpack_require__(12);
	var KeyEscapeUtils = __webpack_require__(21);
	var warning = __webpack_require__(15);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 20 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(11);

	var ReactNoopUpdateQueue = __webpack_require__(23);

	var canDefineProperty = __webpack_require__(17);
	var emptyObject = __webpack_require__(24);
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(15);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var ReactComponent = __webpack_require__(22);
	var ReactNoopUpdateQueue = __webpack_require__(23);

	var emptyObject = __webpack_require__(24);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(11),
	    _assign = __webpack_require__(8);

	var ReactComponent = __webpack_require__(22);
	var ReactElement = __webpack_require__(13);
	var ReactPropTypeLocationNames = __webpack_require__(27);
	var ReactNoopUpdateQueue = __webpack_require__(23);

	var emptyObject = __webpack_require__(24);
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(13);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(29);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(14);
	var ReactComponentTreeHook = __webpack_require__(30);
	var ReactElement = __webpack_require__(13);

	var checkReactTypeSpec = __webpack_require__(31);

	var canDefineProperty = __webpack_require__(17);
	var getIteratorFn = __webpack_require__(20);
	var warning = __webpack_require__(15);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(11);

	var ReactCurrentOwner = __webpack_require__(14);

	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(11);

	var ReactPropTypeLocationNames = __webpack_require__(27);
	var ReactPropTypesSecret = __webpack_require__(32);

	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(30);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(30);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 32 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(13);
	var ReactPropTypeLocationNames = __webpack_require__(27);
	var ReactPropTypesSecret = __webpack_require__(32);

	var emptyFunction = __webpack_require__(16);
	var getIteratorFn = __webpack_require__(20);
	var warning = __webpack_require__(15);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 34 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(11);

	var ReactElement = __webpack_require__(13);

	var invariant = __webpack_require__(12);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(37);


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDefaultInjection = __webpack_require__(42);
	var ReactMount = __webpack_require__(170);
	var ReactReconciler = __webpack_require__(63);
	var ReactUpdates = __webpack_require__(60);
	var ReactVersion = __webpack_require__(175);

	var findDOMNode = __webpack_require__(176);
	var getHostComponentFromComposite = __webpack_require__(177);
	var renderSubtreeIntoContainer = __webpack_require__(178);
	var warning = __webpack_require__(15);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(52);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(66);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(179);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(180);
	  var ReactDOMInvalidARIAHook = __webpack_require__(181);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var DOMProperty = __webpack_require__(40);
	var ReactDOMComponentFlags = __webpack_require__(41);

	var invariant = __webpack_require__(12);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var invariant = __webpack_require__(12);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(43);
	var BeforeInputEventPlugin = __webpack_require__(44);
	var ChangeEventPlugin = __webpack_require__(59);
	var DefaultEventPluginOrder = __webpack_require__(76);
	var EnterLeaveEventPlugin = __webpack_require__(77);
	var HTMLDOMPropertyConfig = __webpack_require__(82);
	var ReactComponentBrowserEnvironment = __webpack_require__(83);
	var ReactDOMComponent = __webpack_require__(96);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMEmptyComponent = __webpack_require__(141);
	var ReactDOMTreeTraversal = __webpack_require__(142);
	var ReactDOMTextComponent = __webpack_require__(143);
	var ReactDefaultBatchingStrategy = __webpack_require__(144);
	var ReactEventListener = __webpack_require__(145);
	var ReactInjection = __webpack_require__(148);
	var ReactReconcileTransaction = __webpack_require__(149);
	var SVGDOMPropertyConfig = __webpack_require__(157);
	var SelectEventPlugin = __webpack_require__(158);
	var SimpleEventPlugin = __webpack_require__(159);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(45);
	var ExecutionEnvironment = __webpack_require__(52);
	var FallbackCompositionState = __webpack_require__(53);
	var SyntheticCompositionEvent = __webpack_require__(56);
	var SyntheticInputEvent = __webpack_require__(58);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(46);
	var EventPluginUtils = __webpack_require__(48);

	var accumulateInto = __webpack_require__(50);
	var forEachAccumulated = __webpack_require__(51);
	var warning = __webpack_require__(15);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var EventPluginRegistry = __webpack_require__(47);
	var EventPluginUtils = __webpack_require__(48);
	var ReactErrorUtils = __webpack_require__(49);

	var accumulateInto = __webpack_require__(50);
	var forEachAccumulated = __webpack_require__(51);
	var invariant = __webpack_require__(12);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var invariant = __webpack_require__(12);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var ReactErrorUtils = __webpack_require__(49);

	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var invariant = __webpack_require__(12);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var PooledClass = __webpack_require__(54);

	var getTextContentAccessor = __webpack_require__(55);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var invariant = __webpack_require__(12);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(52);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(57);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var PooledClass = __webpack_require__(54);

	var emptyFunction = __webpack_require__(16);
	var warning = __webpack_require__(15);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(57);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(46);
	var EventPropagators = __webpack_require__(45);
	var ExecutionEnvironment = __webpack_require__(52);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);
	var SyntheticEvent = __webpack_require__(57);

	var getEventTarget = __webpack_require__(73);
	var isEventSupported = __webpack_require__(74);
	var isTextInputElement = __webpack_require__(75);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(8);

	var CallbackQueue = __webpack_require__(61);
	var PooledClass = __webpack_require__(54);
	var ReactFeatureFlags = __webpack_require__(62);
	var ReactReconciler = __webpack_require__(63);
	var Transaction = __webpack_require__(72);

	var invariant = __webpack_require__(12);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(54);

	var invariant = __webpack_require__(12);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 62 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(64);
	var ReactInstrumentation = __webpack_require__(66);

	var warning = __webpack_require__(15);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(65);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var invariant = __webpack_require__(12);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(67);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactInvalidSetStateWarningHook = __webpack_require__(68);
	var ReactHostOperationHistoryHook = __webpack_require__(69);
	var ReactComponentTreeHook = __webpack_require__(30);
	var ExecutionEnvironment = __webpack_require__(52);

	var performanceNow = __webpack_require__(70);
	var warning = __webpack_require__(15);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}

	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}

	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }

	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}

	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var warning = __webpack_require__(15);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(71);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(52);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var invariant = __webpack_require__(12);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(52);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 75 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(45);
	var ReactDOMComponentTree = __webpack_require__(38);
	var SyntheticMouseEvent = __webpack_require__(78);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(79);
	var ViewportMetrics = __webpack_require__(80);

	var getEventModifierState = __webpack_require__(81);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(57);

	var getEventTarget = __webpack_require__(73);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 80 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(40);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(84);
	var ReactDOMIDOperations = __webpack_require__(95);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(85);
	var Danger = __webpack_require__(91);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstrumentation = __webpack_require__(66);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);
	var setInnerHTML = __webpack_require__(87);
	var setTextContent = __webpack_require__(89);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(86);
	var setInnerHTML = __webpack_require__(87);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);
	var setTextContent = __webpack_require__(89);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(52);
	var DOMNamespaces = __webpack_require__(86);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(52);
	var escapeTextContentForBrowser = __webpack_require__(90);
	var setInnerHTML = __webpack_require__(87);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 90 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var DOMLazyTree = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(52);

	var createNodesFromMarkup = __webpack_require__(92);
	var emptyFunction = __webpack_require__(16);
	var invariant = __webpack_require__(12);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(52);

	var createArrayFromMixed = __webpack_require__(93);
	var getMarkupWrap = __webpack_require__(94);
	var invariant = __webpack_require__(12);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(12);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(52);

	var invariant = __webpack_require__(12);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(84);
	var ReactDOMComponentTree = __webpack_require__(38);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(8);

	var AutoFocusUtils = __webpack_require__(97);
	var CSSPropertyOperations = __webpack_require__(99);
	var DOMLazyTree = __webpack_require__(85);
	var DOMNamespaces = __webpack_require__(86);
	var DOMProperty = __webpack_require__(40);
	var DOMPropertyOperations = __webpack_require__(107);
	var EventPluginHub = __webpack_require__(46);
	var EventPluginRegistry = __webpack_require__(47);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactDOMComponentFlags = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMInput = __webpack_require__(112);
	var ReactDOMOption = __webpack_require__(115);
	var ReactDOMSelect = __webpack_require__(116);
	var ReactDOMTextarea = __webpack_require__(117);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactMultiChild = __webpack_require__(118);
	var ReactServerRenderingTransaction = __webpack_require__(137);

	var emptyFunction = __webpack_require__(16);
	var escapeTextContentForBrowser = __webpack_require__(90);
	var invariant = __webpack_require__(12);
	var isEventSupported = __webpack_require__(74);
	var shallowEqual = __webpack_require__(127);
	var validateDOMNesting = __webpack_require__(140);
	var warning = __webpack_require__(15);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(38);

	var focusNode = __webpack_require__(98);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 98 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(52);
	var ReactInstrumentation = __webpack_require__(66);

	var camelizeStyleName = __webpack_require__(101);
	var dangerousStyleValue = __webpack_require__(103);
	var hyphenateStyleName = __webpack_require__(104);
	var memoizeStringOnly = __webpack_require__(106);
	var warning = __webpack_require__(15);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 100 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(102);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(100);
	var warning = __webpack_require__(15);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(105);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 105 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 106 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(40);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstrumentation = __webpack_require__(66);

	var quoteAttributeValueForBrowser = __webpack_require__(108);
	var warning = __webpack_require__(15);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }

	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(90);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var EventPluginRegistry = __webpack_require__(47);
	var ReactEventEmitterMixin = __webpack_require__(110);
	var ViewportMetrics = __webpack_require__(80);

	var getVendorPrefixedEventName = __webpack_require__(111);
	var isEventSupported = __webpack_require__(74);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(46);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(52);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(8);

	var DOMPropertyOperations = __webpack_require__(107);
	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);

	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {

	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var React = __webpack_require__(6);
	var ReactPropTypesSecret = __webpack_require__(114);

	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 114 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var React = __webpack_require__(6);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMSelect = __webpack_require__(116);

	var warning = __webpack_require__(15);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);

	var warning = __webpack_require__(15);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(8);

	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);

	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
	    node.value = node.textContent; // Detach value from defaultValue
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);

	var ReactCurrentOwner = __webpack_require__(14);
	var ReactReconciler = __webpack_require__(63);
	var ReactChildReconciler = __webpack_require__(121);

	var emptyFunction = __webpack_require__(16);
	var flattenChildren = __webpack_require__(136);
	var invariant = __webpack_require__(12);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var invariant = __webpack_require__(12);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(63);

	var instantiateReactComponent = __webpack_require__(122);
	var KeyEscapeUtils = __webpack_require__(132);
	var shouldUpdateReactComponent = __webpack_require__(128);
	var traverseAllChildren = __webpack_require__(133);
	var warning = __webpack_require__(15);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(30);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(30);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(8);

	var ReactCompositeComponent = __webpack_require__(123);
	var ReactEmptyComponent = __webpack_require__(129);
	var ReactHostComponent = __webpack_require__(130);

	var getNextDebugID = __webpack_require__(131);
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(8);

	var React = __webpack_require__(6);
	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactCurrentOwner = __webpack_require__(14);
	var ReactErrorUtils = __webpack_require__(49);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactNodeTypes = __webpack_require__(124);
	var ReactReconciler = __webpack_require__(63);

	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(125);
	}

	var emptyObject = __webpack_require__(24);
	var invariant = __webpack_require__(12);
	var shallowEqual = __webpack_require__(127);
	var shouldUpdateReactComponent = __webpack_require__(128);
	var warning = __webpack_require__(15);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var React = __webpack_require__(6);

	var invariant = __webpack_require__(12);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var ReactPropTypeLocationNames = __webpack_require__(126);
	var ReactPropTypesSecret = __webpack_require__(114);

	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(30);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(30);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 127 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(8);

	var invariant = __webpack_require__(12);

	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ },
/* 132 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var ReactCurrentOwner = __webpack_require__(14);
	var REACT_ELEMENT_TYPE = __webpack_require__(134);

	var getIteratorFn = __webpack_require__(135);
	var invariant = __webpack_require__(12);
	var KeyEscapeUtils = __webpack_require__(132);
	var warning = __webpack_require__(15);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 135 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(132);
	var traverseAllChildren = __webpack_require__(133);
	var warning = __webpack_require__(15);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(30);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(30);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var PooledClass = __webpack_require__(54);
	var Transaction = __webpack_require__(72);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactServerUpdateQueue = __webpack_require__(138);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(139);

	var warning = __webpack_require__(15);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var ReactCurrentOwner = __webpack_require__(14);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactUpdates = __webpack_require__(60);

	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var emptyFunction = __webpack_require__(16);
	var warning = __webpack_require__(15);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var DOMLazyTree = __webpack_require__(85);
	var ReactDOMComponentTree = __webpack_require__(38);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var invariant = __webpack_require__(12);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(8);

	var DOMChildrenOperations = __webpack_require__(84);
	var DOMLazyTree = __webpack_require__(85);
	var ReactDOMComponentTree = __webpack_require__(38);

	var escapeTextContentForBrowser = __webpack_require__(90);
	var invariant = __webpack_require__(12);
	var validateDOMNesting = __webpack_require__(140);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var ReactUpdates = __webpack_require__(60);
	var Transaction = __webpack_require__(72);

	var emptyFunction = __webpack_require__(16);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var EventListener = __webpack_require__(146);
	var ExecutionEnvironment = __webpack_require__(52);
	var PooledClass = __webpack_require__(54);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);

	var getEventTarget = __webpack_require__(73);
	var getUnboundedScrollPosition = __webpack_require__(147);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(16);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 147 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(40);
	var EventPluginHub = __webpack_require__(46);
	var EventPluginUtils = __webpack_require__(48);
	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactEmptyComponent = __webpack_require__(129);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactHostComponent = __webpack_require__(130);
	var ReactUpdates = __webpack_require__(60);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(8);

	var CallbackQueue = __webpack_require__(61);
	var PooledClass = __webpack_require__(54);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactInputSelection = __webpack_require__(150);
	var ReactInstrumentation = __webpack_require__(66);
	var Transaction = __webpack_require__(72);
	var ReactUpdateQueue = __webpack_require__(139);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(151);

	var containsNode = __webpack_require__(153);
	var focusNode = __webpack_require__(98);
	var getActiveElement = __webpack_require__(156);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(52);

	var getNodeForCharacterOffset = __webpack_require__(152);
	var getTextContentAccessor = __webpack_require__(55);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 152 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(154);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(155);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 155 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 156 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 157 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(45);
	var ExecutionEnvironment = __webpack_require__(52);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInputSelection = __webpack_require__(150);
	var SyntheticEvent = __webpack_require__(57);

	var getActiveElement = __webpack_require__(156);
	var isTextInputElement = __webpack_require__(75);
	var shallowEqual = __webpack_require__(127);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var EventListener = __webpack_require__(146);
	var EventPropagators = __webpack_require__(45);
	var ReactDOMComponentTree = __webpack_require__(38);
	var SyntheticAnimationEvent = __webpack_require__(160);
	var SyntheticClipboardEvent = __webpack_require__(161);
	var SyntheticEvent = __webpack_require__(57);
	var SyntheticFocusEvent = __webpack_require__(162);
	var SyntheticKeyboardEvent = __webpack_require__(163);
	var SyntheticMouseEvent = __webpack_require__(78);
	var SyntheticDragEvent = __webpack_require__(166);
	var SyntheticTouchEvent = __webpack_require__(167);
	var SyntheticTransitionEvent = __webpack_require__(168);
	var SyntheticUIEvent = __webpack_require__(79);
	var SyntheticWheelEvent = __webpack_require__(169);

	var emptyFunction = __webpack_require__(16);
	var getEventCharCode = __webpack_require__(164);
	var invariant = __webpack_require__(12);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(57);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(57);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(79);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(79);

	var getEventCharCode = __webpack_require__(164);
	var getEventKey = __webpack_require__(165);
	var getEventModifierState = __webpack_require__(81);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(164);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(78);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(79);

	var getEventModifierState = __webpack_require__(81);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(57);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(78);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var DOMLazyTree = __webpack_require__(85);
	var DOMProperty = __webpack_require__(40);
	var React = __webpack_require__(6);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactCurrentOwner = __webpack_require__(14);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMContainerInfo = __webpack_require__(171);
	var ReactDOMFeatureFlags = __webpack_require__(172);
	var ReactFeatureFlags = __webpack_require__(62);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactMarkupChecksum = __webpack_require__(173);
	var ReactReconciler = __webpack_require__(63);
	var ReactUpdateQueue = __webpack_require__(139);
	var ReactUpdates = __webpack_require__(60);

	var emptyObject = __webpack_require__(24);
	var instantiateReactComponent = __webpack_require__(122);
	var invariant = __webpack_require__(12);
	var setInnerHTML = __webpack_require__(87);
	var shouldUpdateReactComponent = __webpack_require__(128);
	var warning = __webpack_require__(15);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(140);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 172 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(174);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 174 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 175 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(39);

	var ReactCurrentOwner = __webpack_require__(14);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstanceMap = __webpack_require__(120);

	var getHostComponentFromComposite = __webpack_require__(177);
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(15);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(124);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(170);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(40);
	var EventPluginRegistry = __webpack_require__(47);
	var ReactComponentTreeHook = __webpack_require__(30);

	var warning = __webpack_require__(15);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(30);

	var warning = __webpack_require__(15);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(40);
	var ReactComponentTreeHook = __webpack_require__(30);

	var warning = __webpack_require__(15);

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];

	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }

	  warnInvalidARIAProps(debugID, element);
	}

	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};

	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);
	var vis = __webpack_require__(183);

	var AboutView = function (_React$Component) {
	  _inherits(AboutView, _React$Component);

	  function AboutView() {
	    _classCallCheck(this, AboutView);

	    return _possibleConstructorReturn(this, (AboutView.__proto__ || Object.getPrototypeOf(AboutView)).apply(this, arguments));
	  }

	  _createClass(AboutView, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      // build experience timeline
	      var container = document.getElementById('visualization');
	      var items = new vis.DataSet([{ id: 1, content: '<strong>Senior Software Engineer</strong><br/>@<a href="https://codiscope.com">Codiscope</a>', start: '2016-01-01', end: Date.now() }, { id: 2, content: '<strong>Software Engineering Intern</strong><br/>@<a href="http://empirasign.com">Empirasign Strategies</a>', start: '2014-10-19', end: '2015-10-05' }, { id: 3, content: '<strong>Mobile Application Developer</strong><br/>@<a href="http://www.mentoredata.com/web/index.php">Mentor E-Data</a>', start: '2013-11-4', end: '2014-08-25' }, { id: 4, content: '<strong>Mechanical Engineer</strong><br/>@<a href="http://www.nordson.com/en-us/divisions/asymtek">Nordson Asymtek</a>', start: '2010-04-3', end: '2013-06-20' }, { id: 5, content: '<strong>NYU</strong>', start: '2014-09-15', end: '2015-12-20', type: 'background' }, { id: 6, content: '<strong>UCSD</strong>', start: '2004-09-14', end: '2009-06-20', type: 'background' }]);
	      var options = {
	        start: '2014-04-01',
	        end: Date.now(),
	        width: '100%',
	        height: '180px',
	        timeAxis: {
	          scale: 'month',
	          step: 3
	        }
	      };
	      var timeline = new vis.Timeline(container, items, options);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return React.createElement(
	        'div',
	        null,
	        React.createElement(
	          'div',
	          { className: 'well well-md' },
	          React.createElement(
	            'div',
	            { className: 'row' },
	            React.createElement(
	              'div',
	              { className: 'col-xs-3' },
	              React.createElement('img', { 'data-src': 'holder.js/100x100', className: 'img-responsive img-rounded', alt: 'In Penang Malaysia!', src: './assets/profile.jpg' })
	            ),
	            React.createElement(
	              'div',
	              { className: 'col-xs-9' },
	              React.createElement(
	                'h4',
	                null,
	                '[Technology nerd // Engineer of bits and bytes]'
	              ),
	              ' ',
	              React.createElement(
	                'p',
	                null,
	                'In the past life, I was a mechanical engineer and worked on industry projects involving automation/robotics, machine vision software, mechanical prototype design and process engineering. Currently I\'m a full stack software engineer for Codiscope, a security startup that can analyze your Nodejs Javascript code on the cloud.'
	              )
	            )
	          )
	        ),
	        React.createElement(
	          'div',
	          { className: 'well well-md' },
	          React.createElement(
	            'h4',
	            { className: 'lead' },
	            'Education'
	          ),
	          React.createElement(
	            'div',
	            { className: 'list-group' },
	            React.createElement(
	              'li',
	              { className: 'list-group-item' },
	              React.createElement('img', { style: { height: "40px", width: "40px" }, src: './assets/nyu_logo.jpg' }),
	              '\xA0\xA0\xA0\xA0',
	              React.createElement(
	                'span',
	                null,
	                React.createElement(
	                  'strong',
	                  null,
	                  'M.S. Computer Science @ New York University - 2015'
	                )
	              )
	            ),
	            React.createElement(
	              'li',
	              { className: 'list-group-item' },
	              React.createElement('img', { style: { height: "40px", width: "40px" }, src: './assets/ucsd_logo.gif' }),
	              '\xA0\xA0\xA0\xA0',
	              React.createElement(
	                'span',
	                null,
	                React.createElement(
	                  'strong',
	                  null,
	                  'B.S. Mechanical Engineering @ University of California, San Diego - 2009'
	                )
	              )
	            )
	          ),
	          React.createElement('img', { src: './assets/win95/calc_SC.ico' }),
	          ' ',
	          React.createElement(
	            'a',
	            { href: '#/about', 'data-toggle': 'modal', 'data-target': '#classNameListModal' },
	            'Coursework'
	          ),
	          React.createElement('br', null)
	        ),
	        React.createElement(
	          'div',
	          { className: 'well well-md' },
	          React.createElement(
	            'h4',
	            { className: 'lead' },
	            'Professional Experience'
	          ),
	          React.createElement('div', { id: 'visualization' }),
	          React.createElement('br', null),
	          React.createElement('img', { src: './assets/win95/wordpad_165.ico' }),
	          ' ',
	          React.createElement(
	            'a',
	            { href: './files/chen_resume.pdf' },
	            'Resume'
	          ),
	          React.createElement('br', null),
	          React.createElement(
	            'div',
	            { className: 'modal fade', id: 'classNameListModal', tabIndex: '-1', role: 'dialog', 'aria-labelledby': 'modalLabel' },
	            React.createElement(
	              'div',
	              { className: 'modal-dialog modal-sm' },
	              React.createElement(
	                'div',
	                { className: 'modal-content' },
	                React.createElement(
	                  'div',
	                  { className: 'modal-header' },
	                  React.createElement(
	                    'button',
	                    { type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
	                    React.createElement(
	                      'span',
	                      { 'aria-hidden': 'true' },
	                      '\xD7'
	                    )
	                  ),
	                  React.createElement(
	                    'h4',
	                    { className: 'modal-title', id: 'modalLabel' },
	                    'Coursework'
	                  )
	                ),
	                React.createElement(
	                  'div',
	                  { className: 'modal-body' },
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Distributed Systems'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Heuristic Problem Solving'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Machine Learning'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Realtime Big Data Analytics'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Algorithms and Data Structures'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Operating Systems'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Programming Languages'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Database Systems'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Data Communications and Networking'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Computer Architecture'
	                  ),
	                  React.createElement(
	                    'a',
	                    { className: 'list-group-item' },
	                    'Discrete Mathematics'
	                  )
	                ),
	                React.createElement(
	                  'div',
	                  { className: 'modal-footer' },
	                  React.createElement(
	                    'button',
	                    { type: 'button', className: 'btn btn-default', 'data-dismiss': 'modal' },
	                    'Close'
	                  )
	                )
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return AboutView;
	}(React.Component);

	module.exports = AboutView;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * vis.js
	 * https://github.com/almende/vis
	 *
	 * A dynamic, browser-based visualization library.
	 *
	 * @version 4.17.0
	 * @date    2016-11-05
	 *
	 * @license
	 * Copyright (C) 2011-2016 Almende B.V, http://almende.com
	 *
	 * Vis.js is dual licensed under both
	 *
	 * * The Apache 2.0 License
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * and
	 *
	 * * The MIT License
	 *   http://opensource.org/licenses/MIT
	 *
	 * Vis.js may be distributed under either license.
	 */

	"use strict";

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["vis"] = factory();
		else
			root["vis"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);

	  // Graph3d
	  util.extend(exports, __webpack_require__(7));

	  // Timeline & Graph2d
	  util.extend(exports, __webpack_require__(26));

	  // Network
	  util.extend(exports, __webpack_require__(62));

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  // utility functions

	  // first check if moment.js is already loaded in the browser window, if so,
	  // use this instance. Else, load via commonjs.


	  var moment = __webpack_require__(2);
	  var uuid = __webpack_require__(6);

	  /**
	   * Test whether given object is a number
	   * @param {*} object
	   * @return {Boolean} isNumber
	   */
	  exports.isNumber = function (object) {
	    return object instanceof Number || typeof object == 'number';
	  };

	  /**
	   * Remove everything in the DOM object
	   * @param DOMobject
	   */
	  exports.recursiveDOMDelete = function (DOMobject) {
	    if (DOMobject) {
	      while (DOMobject.hasChildNodes() === true) {
	        exports.recursiveDOMDelete(DOMobject.firstChild);
	        DOMobject.removeChild(DOMobject.firstChild);
	      }
	    }
	  };

	  /**
	   * this function gives you a range between 0 and 1 based on the min and max values in the set, the total sum of all values and the current value.
	   *
	   * @param min
	   * @param max
	   * @param total
	   * @param value
	   * @returns {number}
	   */
	  exports.giveRange = function (min, max, total, value) {
	    if (max == min) {
	      return 0.5;
	    } else {
	      var scale = 1 / (max - min);
	      return Math.max(0, (value - min) * scale);
	    }
	  };

	  /**
	   * Test whether given object is a string
	   * @param {*} object
	   * @return {Boolean} isString
	   */
	  exports.isString = function (object) {
	    return object instanceof String || typeof object == 'string';
	  };

	  /**
	   * Test whether given object is a Date, or a String containing a Date
	   * @param {Date | String} object
	   * @return {Boolean} isDate
	   */
	  exports.isDate = function (object) {
	    if (object instanceof Date) {
	      return true;
	    } else if (exports.isString(object)) {
	      // test whether this string contains a date
	      var match = ASPDateRegex.exec(object);
	      if (match) {
	        return true;
	      } else if (!isNaN(Date.parse(object))) {
	        return true;
	      }
	    }

	    return false;
	  };

	  /**
	   * Create a semi UUID
	   * source: http://stackoverflow.com/a/105074/1262753
	   * @return {String} uuid
	   */
	  exports.randomUUID = function () {
	    return uuid.v4();
	  };

	  /**
	   * assign all keys of an object that are not nested objects to a certain value (used for color objects).
	   * @param obj
	   * @param value
	   */
	  exports.assignAllKeys = function (obj, value) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        if (_typeof(obj[prop]) !== 'object') {
	          obj[prop] = value;
	        }
	      }
	    }
	  };

	  /**
	   * Fill an object with a possibly partially defined other object. Only copies values if the a object has an object requiring values.
	   * That means an object is not created on a property if only the b object has it.
	   * @param obj
	   * @param value
	   */
	  exports.fillIfDefined = function (a, b) {
	    var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    for (var prop in a) {
	      if (b[prop] !== undefined) {
	        if (_typeof(b[prop]) !== 'object') {
	          if ((b[prop] === undefined || b[prop] === null) && a[prop] !== undefined && allowDeletion === true) {
	            delete a[prop];
	          } else {
	            a[prop] = b[prop];
	          }
	        } else {
	          if (_typeof(a[prop]) === 'object') {
	            exports.fillIfDefined(a[prop], b[prop], allowDeletion);
	          }
	        }
	      }
	    }
	  };

	  /**
	   * Extend object a with the properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Object} a
	   * @param {... Object} b
	   * @return {Object} a
	   */
	  exports.protoExtend = function (a, b) {
	    for (var i = 1; i < arguments.length; i++) {
	      var other = arguments[i];
	      for (var prop in other) {
	        a[prop] = other[prop];
	      }
	    }
	    return a;
	  };

	  /**
	   * Extend object a with the properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Object} a
	   * @param {... Object} b
	   * @return {Object} a
	   */
	  exports.extend = function (a, b) {
	    for (var i = 1; i < arguments.length; i++) {
	      var other = arguments[i];
	      for (var prop in other) {
	        if (other.hasOwnProperty(prop)) {
	          a[prop] = other[prop];
	        }
	      }
	    }
	    return a;
	  };

	  /**
	   * Extend object a with selected properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Array.<String>} props
	   * @param {Object} a
	   * @param {Object} b
	   * @return {Object} a
	   */
	  exports.selectiveExtend = function (props, a, b) {
	    if (!Array.isArray(props)) {
	      throw new Error('Array with property names expected as first argument');
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      var other = arguments[i];

	      for (var p = 0; p < props.length; p++) {
	        var prop = props[p];
	        if (other.hasOwnProperty(prop)) {
	          a[prop] = other[prop];
	        }
	      }
	    }
	    return a;
	  };

	  /**
	   * Extend object a with selected properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Array.<String>} props
	   * @param {Object} a
	   * @param {Object} b
	   * @return {Object} a
	   */
	  exports.selectiveDeepExtend = function (props, a, b) {
	    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	    // TODO: add support for Arrays to deepExtend
	    if (Array.isArray(b)) {
	      throw new TypeError('Arrays are not supported by deepExtend');
	    }
	    for (var i = 2; i < arguments.length; i++) {
	      var other = arguments[i];
	      for (var p = 0; p < props.length; p++) {
	        var prop = props[p];
	        if (other.hasOwnProperty(prop)) {
	          if (b[prop] && b[prop].constructor === Object) {
	            if (a[prop] === undefined) {
	              a[prop] = {};
	            }
	            if (a[prop].constructor === Object) {
	              exports.deepExtend(a[prop], b[prop], false, allowDeletion);
	            } else {
	              if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
	                delete a[prop];
	              } else {
	                a[prop] = b[prop];
	              }
	            }
	          } else if (Array.isArray(b[prop])) {
	            throw new TypeError('Arrays are not supported by deepExtend');
	          } else {
	            if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
	              delete a[prop];
	            } else {
	              a[prop] = b[prop];
	            }
	          }
	        }
	      }
	    }
	    return a;
	  };

	  /**
	   * Extend object a with selected properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Array.<String>} props
	   * @param {Object} a
	   * @param {Object} b
	   * @return {Object} a
	   */
	  exports.selectiveNotDeepExtend = function (props, a, b) {
	    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	    // TODO: add support for Arrays to deepExtend
	    if (Array.isArray(b)) {
	      throw new TypeError('Arrays are not supported by deepExtend');
	    }
	    for (var prop in b) {
	      if (b.hasOwnProperty(prop)) {
	        if (props.indexOf(prop) == -1) {
	          if (b[prop] && b[prop].constructor === Object) {
	            if (a[prop] === undefined) {
	              a[prop] = {};
	            }
	            if (a[prop].constructor === Object) {
	              exports.deepExtend(a[prop], b[prop]);
	            } else {
	              if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
	                delete a[prop];
	              } else {
	                a[prop] = b[prop];
	              }
	            }
	          } else if (Array.isArray(b[prop])) {
	            a[prop] = [];
	            for (var i = 0; i < b[prop].length; i++) {
	              a[prop].push(b[prop][i]);
	            }
	          } else {
	            if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
	              delete a[prop];
	            } else {
	              a[prop] = b[prop];
	            }
	          }
	        }
	      }
	    }
	    return a;
	  };

	  /**
	   * Deep extend an object a with the properties of object b
	   * @param {Object} a
	   * @param {Object} b
	   * @param [Boolean] protoExtend --> optional parameter. If true, the prototype values will also be extended.
	   *                                  (ie. the options objects that inherit from others will also get the inherited options)
	   * @param [Boolean] global      --> optional parameter. If true, the values of fields that are null will not deleted
	   * @returns {Object}
	   */
	  exports.deepExtend = function (a, b, protoExtend, allowDeletion) {
	    for (var prop in b) {
	      if (b.hasOwnProperty(prop) || protoExtend === true) {
	        if (b[prop] && b[prop].constructor === Object) {
	          if (a[prop] === undefined) {
	            a[prop] = {};
	          }
	          if (a[prop].constructor === Object) {
	            exports.deepExtend(a[prop], b[prop], protoExtend);
	          } else {
	            if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
	              delete a[prop];
	            } else {
	              a[prop] = b[prop];
	            }
	          }
	        } else if (Array.isArray(b[prop])) {
	          a[prop] = [];
	          for (var i = 0; i < b[prop].length; i++) {
	            a[prop].push(b[prop][i]);
	          }
	        } else {
	          if (b[prop] === null && a[prop] !== undefined && allowDeletion === true) {
	            delete a[prop];
	          } else {
	            a[prop] = b[prop];
	          }
	        }
	      }
	    }
	    return a;
	  };

	  /**
	   * Test whether all elements in two arrays are equal.
	   * @param {Array} a
	   * @param {Array} b
	   * @return {boolean} Returns true if both arrays have the same length and same
	   *                   elements.
	   */
	  exports.equalArray = function (a, b) {
	    if (a.length != b.length) return false;

	    for (var i = 0, len = a.length; i < len; i++) {
	      if (a[i] != b[i]) return false;
	    }

	    return true;
	  };

	  /**
	   * Convert an object to another type
	   * @param {Boolean | Number | String | Date | Moment | Null | undefined} object
	   * @param {String | undefined} type   Name of the type. Available types:
	   *                                    'Boolean', 'Number', 'String',
	   *                                    'Date', 'Moment', ISODate', 'ASPDate'.
	   * @return {*} object
	   * @throws Error
	   */
	  exports.convert = function (object, type) {
	    var match;

	    if (object === undefined) {
	      return undefined;
	    }
	    if (object === null) {
	      return null;
	    }

	    if (!type) {
	      return object;
	    }
	    if (!(typeof type === 'string') && !(type instanceof String)) {
	      throw new Error('Type must be a string');
	    }

	    //noinspection FallthroughInSwitchStatementJS
	    switch (type) {
	      case 'boolean':
	      case 'Boolean':
	        return Boolean(object);

	      case 'number':
	      case 'Number':
	        if (!isNaN(Date.parse(object))) {
	          return moment(object).valueOf();
	        } else {
	          return Number(object.valueOf());
	        }
	      case 'string':
	      case 'String':
	        return String(object);

	      case 'Date':
	        if (exports.isNumber(object)) {
	          return new Date(object);
	        }
	        if (object instanceof Date) {
	          return new Date(object.valueOf());
	        } else if (moment.isMoment(object)) {
	          return new Date(object.valueOf());
	        }
	        if (exports.isString(object)) {
	          match = ASPDateRegex.exec(object);
	          if (match) {
	            // object is an ASP date
	            return new Date(Number(match[1])); // parse number
	          } else {
	            return moment(new Date(object)).toDate(); // parse string
	          }
	        } else {
	          throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');
	        }

	      case 'Moment':
	        if (exports.isNumber(object)) {
	          return moment(object);
	        }
	        if (object instanceof Date) {
	          return moment(object.valueOf());
	        } else if (moment.isMoment(object)) {
	          return moment(object);
	        }
	        if (exports.isString(object)) {
	          match = ASPDateRegex.exec(object);
	          if (match) {
	            // object is an ASP date
	            return moment(Number(match[1])); // parse number
	          } else {
	            return moment(object); // parse string
	          }
	        } else {
	          throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');
	        }

	      case 'ISODate':
	        if (exports.isNumber(object)) {
	          return new Date(object);
	        } else if (object instanceof Date) {
	          return object.toISOString();
	        } else if (moment.isMoment(object)) {
	          return object.toDate().toISOString();
	        } else if (exports.isString(object)) {
	          match = ASPDateRegex.exec(object);
	          if (match) {
	            // object is an ASP date
	            return new Date(Number(match[1])).toISOString(); // parse number
	          } else {
	            return moment(object).format(); // ISO 8601
	          }
	        } else {
	          throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ISODate');
	        }

	      case 'ASPDate':
	        if (exports.isNumber(object)) {
	          return '/Date(' + object + ')/';
	        } else if (object instanceof Date) {
	          return '/Date(' + object.valueOf() + ')/';
	        } else if (exports.isString(object)) {
	          match = ASPDateRegex.exec(object);
	          var value;
	          if (match) {
	            // object is an ASP date
	            value = new Date(Number(match[1])).valueOf(); // parse number
	          } else {
	            value = new Date(object).valueOf(); // parse string
	          }
	          return '/Date(' + value + ')/';
	        } else {
	          throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ASPDate');
	        }

	      default:
	        throw new Error('Unknown type "' + type + '"');
	    }
	  };

	  // parse ASP.Net Date pattern,
	  // for example '/Date(1198908717056)/' or '/Date(1198908717056-0700)/'
	  // code from http://momentjs.com/
	  var ASPDateRegex = /^\/?Date\((\-?\d+)/i;

	  /**
	   * Get the type of an object, for example exports.getType([]) returns 'Array'
	   * @param {*} object
	   * @return {String} type
	   */
	  exports.getType = function (object) {
	    var type = typeof object === 'undefined' ? 'undefined' : _typeof(object);

	    if (type == 'object') {
	      if (object === null) {
	        return 'null';
	      }
	      if (object instanceof Boolean) {
	        return 'Boolean';
	      }
	      if (object instanceof Number) {
	        return 'Number';
	      }
	      if (object instanceof String) {
	        return 'String';
	      }
	      if (Array.isArray(object)) {
	        return 'Array';
	      }
	      if (object instanceof Date) {
	        return 'Date';
	      }
	      return 'Object';
	    } else if (type == 'number') {
	      return 'Number';
	    } else if (type == 'boolean') {
	      return 'Boolean';
	    } else if (type == 'string') {
	      return 'String';
	    } else if (type === undefined) {
	      return 'undefined';
	    }

	    return type;
	  };

	  /**
	   * Used to extend an array and copy it. This is used to propagate paths recursively.
	   *
	   * @param arr
	   * @param newValue
	   * @returns {Array}
	   */
	  exports.copyAndExtendArray = function (arr, newValue) {
	    var newArr = [];
	    for (var i = 0; i < arr.length; i++) {
	      newArr.push(arr[i]);
	    }
	    newArr.push(newValue);
	    return newArr;
	  };

	  /**
	   * Used to extend an array and copy it. This is used to propagate paths recursively.
	   *
	   * @param arr
	   * @param newValue
	   * @returns {Array}
	   */
	  exports.copyArray = function (arr) {
	    var newArr = [];
	    for (var i = 0; i < arr.length; i++) {
	      newArr.push(arr[i]);
	    }
	    return newArr;
	  };

	  /**
	   * Retrieve the absolute left value of a DOM element
	   * @param {Element} elem        A dom element, for example a div
	   * @return {number} left        The absolute left position of this element
	   *                              in the browser page.
	   */
	  exports.getAbsoluteLeft = function (elem) {
	    return elem.getBoundingClientRect().left;
	  };

	  exports.getAbsoluteRight = function (elem) {
	    return elem.getBoundingClientRect().right;
	  };

	  /**
	   * Retrieve the absolute top value of a DOM element
	   * @param {Element} elem        A dom element, for example a div
	   * @return {number} top        The absolute top position of this element
	   *                              in the browser page.
	   */
	  exports.getAbsoluteTop = function (elem) {
	    return elem.getBoundingClientRect().top;
	  };

	  /**
	   * add a className to the given elements style
	   * @param {Element} elem
	   * @param {String} className
	   */
	  exports.addClassName = function (elem, className) {
	    var classes = elem.className.split(' ');
	    if (classes.indexOf(className) == -1) {
	      classes.push(className); // add the class to the array
	      elem.className = classes.join(' ');
	    }
	  };

	  /**
	   * add a className to the given elements style
	   * @param {Element} elem
	   * @param {String} className
	   */
	  exports.removeClassName = function (elem, className) {
	    var classes = elem.className.split(' ');
	    var index = classes.indexOf(className);
	    if (index != -1) {
	      classes.splice(index, 1); // remove the class from the array
	      elem.className = classes.join(' ');
	    }
	  };

	  /**
	   * For each method for both arrays and objects.
	   * In case of an array, the built-in Array.forEach() is applied.
	   * In case of an Object, the method loops over all properties of the object.
	   * @param {Object | Array} object   An Object or Array
	   * @param {function} callback       Callback method, called for each item in
	   *                                  the object or array with three parameters:
	   *                                  callback(value, index, object)
	   */
	  exports.forEach = function (object, callback) {
	    var i, len;
	    if (Array.isArray(object)) {
	      // array
	      for (i = 0, len = object.length; i < len; i++) {
	        callback(object[i], i, object);
	      }
	    } else {
	      // object
	      for (i in object) {
	        if (object.hasOwnProperty(i)) {
	          callback(object[i], i, object);
	        }
	      }
	    }
	  };

	  /**
	   * Convert an object into an array: all objects properties are put into the
	   * array. The resulting array is unordered.
	   * @param {Object} object
	   * @param {Array} array
	   */
	  exports.toArray = function (object) {
	    var array = [];

	    for (var prop in object) {
	      if (object.hasOwnProperty(prop)) array.push(object[prop]);
	    }

	    return array;
	  };

	  /**
	   * Update a property in an object
	   * @param {Object} object
	   * @param {String} key
	   * @param {*} value
	   * @return {Boolean} changed
	   */
	  exports.updateProperty = function (object, key, value) {
	    if (object[key] !== value) {
	      object[key] = value;
	      return true;
	    } else {
	      return false;
	    }
	  };

	  /**
	   * Throttle the given function to be only executed once per animation frame
	   * @param {function} fn
	   * @returns {function} Returns the throttled function
	   */
	  exports.throttle = function (fn) {
	    var scheduled = false;

	    return function throttled() {
	      if (!scheduled) {
	        scheduled = true;
	        requestAnimationFrame(function () {
	          scheduled = false;
	          fn();
	        });
	      }
	    };
	  };

	  /**
	   * Add and event listener. Works for all browsers
	   * @param {Element}     element    An html element
	   * @param {string}      action     The action, for example "click",
	   *                                 without the prefix "on"
	   * @param {function}    listener   The callback function to be executed
	   * @param {boolean}     [useCapture]
	   */
	  exports.addEventListener = function (element, action, listener, useCapture) {
	    if (element.addEventListener) {
	      if (useCapture === undefined) useCapture = false;

	      if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
	        action = "DOMMouseScroll"; // For Firefox
	      }

	      element.addEventListener(action, listener, useCapture);
	    } else {
	      element.attachEvent("on" + action, listener); // IE browsers
	    }
	  };

	  /**
	   * Remove an event listener from an element
	   * @param {Element}     element         An html dom element
	   * @param {string}      action          The name of the event, for example "mousedown"
	   * @param {function}    listener        The listener function
	   * @param {boolean}     [useCapture]
	   */
	  exports.removeEventListener = function (element, action, listener, useCapture) {
	    if (element.removeEventListener) {
	      // non-IE browsers
	      if (useCapture === undefined) useCapture = false;

	      if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
	        action = "DOMMouseScroll"; // For Firefox
	      }

	      element.removeEventListener(action, listener, useCapture);
	    } else {
	      // IE browsers
	      element.detachEvent("on" + action, listener);
	    }
	  };

	  /**
	   * Cancels the event if it is cancelable, without stopping further propagation of the event.
	   */
	  exports.preventDefault = function (event) {
	    if (!event) event = window.event;

	    if (event.preventDefault) {
	      event.preventDefault(); // non-IE browsers
	    } else {
	      event.returnValue = false; // IE browsers
	    }
	  };

	  /**
	   * Get HTML element which is the target of the event
	   * @param {Event} event
	   * @return {Element} target element
	   */
	  exports.getTarget = function (event) {
	    // code from http://www.quirksmode.org/js/events_properties.html
	    if (!event) {
	      event = window.event;
	    }

	    var target;

	    if (event.target) {
	      target = event.target;
	    } else if (event.srcElement) {
	      target = event.srcElement;
	    }

	    if (target.nodeType != undefined && target.nodeType == 3) {
	      // defeat Safari bug
	      target = target.parentNode;
	    }

	    return target;
	  };

	  /**
	   * Check if given element contains given parent somewhere in the DOM tree
	   * @param {Element} element
	   * @param {Element} parent
	   */
	  exports.hasParent = function (element, parent) {
	    var e = element;

	    while (e) {
	      if (e === parent) {
	        return true;
	      }
	      e = e.parentNode;
	    }

	    return false;
	  };

	  exports.option = {};

	  /**
	   * Convert a value into a boolean
	   * @param {Boolean | function | undefined} value
	   * @param {Boolean} [defaultValue]
	   * @returns {Boolean} bool
	   */
	  exports.option.asBoolean = function (value, defaultValue) {
	    if (typeof value == 'function') {
	      value = value();
	    }

	    if (value != null) {
	      return value != false;
	    }

	    return defaultValue || null;
	  };

	  /**
	   * Convert a value into a number
	   * @param {Boolean | function | undefined} value
	   * @param {Number} [defaultValue]
	   * @returns {Number} number
	   */
	  exports.option.asNumber = function (value, defaultValue) {
	    if (typeof value == 'function') {
	      value = value();
	    }

	    if (value != null) {
	      return Number(value) || defaultValue || null;
	    }

	    return defaultValue || null;
	  };

	  /**
	   * Convert a value into a string
	   * @param {String | function | undefined} value
	   * @param {String} [defaultValue]
	   * @returns {String} str
	   */
	  exports.option.asString = function (value, defaultValue) {
	    if (typeof value == 'function') {
	      value = value();
	    }

	    if (value != null) {
	      return String(value);
	    }

	    return defaultValue || null;
	  };

	  /**
	   * Convert a size or location into a string with pixels or a percentage
	   * @param {String | Number | function | undefined} value
	   * @param {String} [defaultValue]
	   * @returns {String} size
	   */
	  exports.option.asSize = function (value, defaultValue) {
	    if (typeof value == 'function') {
	      value = value();
	    }

	    if (exports.isString(value)) {
	      return value;
	    } else if (exports.isNumber(value)) {
	      return value + 'px';
	    } else {
	      return defaultValue || null;
	    }
	  };

	  /**
	   * Convert a value into a DOM element
	   * @param {HTMLElement | function | undefined} value
	   * @param {HTMLElement} [defaultValue]
	   * @returns {HTMLElement | null} dom
	   */
	  exports.option.asElement = function (value, defaultValue) {
	    if (typeof value == 'function') {
	      value = value();
	    }

	    return value || defaultValue || null;
	  };

	  /**
	   * http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
	   *
	   * @param {String} hex
	   * @returns {{r: *, g: *, b: *}} | 255 range
	   */
	  exports.hexToRGB = function (hex) {
	    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
	    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
	    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
	      return r + r + g + g + b + b;
	    });
	    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	    return result ? {
	      r: parseInt(result[1], 16),
	      g: parseInt(result[2], 16),
	      b: parseInt(result[3], 16)
	    } : null;
	  };

	  /**
	   * This function takes color in hex format or rgb() or rgba() format and overrides the opacity. Returns rgba() string.
	   * @param color
	   * @param opacity
	   * @returns {*}
	   */
	  exports.overrideOpacity = function (color, opacity) {
	    if (color.indexOf("rgba") != -1) {
	      return color;
	    } else if (color.indexOf("rgb") != -1) {
	      var rgb = color.substr(color.indexOf("(") + 1).replace(")", "").split(",");
	      return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
	    } else {
	      var rgb = exports.hexToRGB(color);
	      if (rgb == null) {
	        return color;
	      } else {
	        return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + opacity + ")";
	      }
	    }
	  };

	  /**
	   *
	   * @param red     0 -- 255
	   * @param green   0 -- 255
	   * @param blue    0 -- 255
	   * @returns {string}
	   * @constructor
	   */
	  exports.RGBToHex = function (red, green, blue) {
	    return "#" + ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);
	  };

	  /**
	   * Parse a color property into an object with border, background, and
	   * highlight colors
	   * @param {Object | String} color
	   * @return {Object} colorObject
	   */
	  exports.parseColor = function (color) {
	    var c;
	    if (exports.isString(color) === true) {
	      if (exports.isValidRGB(color) === true) {
	        var rgb = color.substr(4).substr(0, color.length - 5).split(',').map(function (value) {
	          return parseInt(value);
	        });
	        color = exports.RGBToHex(rgb[0], rgb[1], rgb[2]);
	      }
	      if (exports.isValidHex(color) === true) {
	        var hsv = exports.hexToHSV(color);
	        var lighterColorHSV = { h: hsv.h, s: hsv.s * 0.8, v: Math.min(1, hsv.v * 1.02) };
	        var darkerColorHSV = { h: hsv.h, s: Math.min(1, hsv.s * 1.25), v: hsv.v * 0.8 };
	        var darkerColorHex = exports.HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
	        var lighterColorHex = exports.HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
	        c = {
	          background: color,
	          border: darkerColorHex,
	          highlight: {
	            background: lighterColorHex,
	            border: darkerColorHex
	          },
	          hover: {
	            background: lighterColorHex,
	            border: darkerColorHex
	          }
	        };
	      } else {
	        c = {
	          background: color,
	          border: color,
	          highlight: {
	            background: color,
	            border: color
	          },
	          hover: {
	            background: color,
	            border: color
	          }
	        };
	      }
	    } else {
	      c = {};
	      c.background = color.background || undefined;
	      c.border = color.border || undefined;

	      if (exports.isString(color.highlight)) {
	        c.highlight = {
	          border: color.highlight,
	          background: color.highlight
	        };
	      } else {
	        c.highlight = {};
	        c.highlight.background = color.highlight && color.highlight.background || undefined;
	        c.highlight.border = color.highlight && color.highlight.border || undefined;
	      }

	      if (exports.isString(color.hover)) {
	        c.hover = {
	          border: color.hover,
	          background: color.hover
	        };
	      } else {
	        c.hover = {};
	        c.hover.background = color.hover && color.hover.background || undefined;
	        c.hover.border = color.hover && color.hover.border || undefined;
	      }
	    }

	    return c;
	  };

	  /**
	   * http://www.javascripter.net/faq/rgb2hsv.htm
	   *
	   * @param red
	   * @param green
	   * @param blue
	   * @returns {*}
	   * @constructor
	   */
	  exports.RGBToHSV = function (red, green, blue) {
	    red = red / 255;green = green / 255;blue = blue / 255;
	    var minRGB = Math.min(red, Math.min(green, blue));
	    var maxRGB = Math.max(red, Math.max(green, blue));

	    // Black-gray-white
	    if (minRGB == maxRGB) {
	      return { h: 0, s: 0, v: minRGB };
	    }

	    // Colors other than black-gray-white:
	    var d = red == minRGB ? green - blue : blue == minRGB ? red - green : blue - red;
	    var h = red == minRGB ? 3 : blue == minRGB ? 1 : 5;
	    var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;
	    var saturation = (maxRGB - minRGB) / maxRGB;
	    var value = maxRGB;
	    return { h: hue, s: saturation, v: value };
	  };

	  var cssUtil = {
	    // split a string with css styles into an object with key/values
	    split: function split(cssText) {
	      var styles = {};

	      cssText.split(';').forEach(function (style) {
	        if (style.trim() != '') {
	          var parts = style.split(':');
	          var key = parts[0].trim();
	          var value = parts[1].trim();
	          styles[key] = value;
	        }
	      });

	      return styles;
	    },

	    // build a css text string from an object with key/values
	    join: function join(styles) {
	      return Object.keys(styles).map(function (key) {
	        return key + ': ' + styles[key];
	      }).join('; ');
	    }
	  };

	  /**
	   * Append a string with css styles to an element
	   * @param {Element} element
	   * @param {String} cssText
	   */
	  exports.addCssText = function (element, cssText) {
	    var currentStyles = cssUtil.split(element.style.cssText);
	    var newStyles = cssUtil.split(cssText);
	    var styles = exports.extend(currentStyles, newStyles);

	    element.style.cssText = cssUtil.join(styles);
	  };

	  /**
	   * Remove a string with css styles from an element
	   * @param {Element} element
	   * @param {String} cssText
	   */
	  exports.removeCssText = function (element, cssText) {
	    var styles = cssUtil.split(element.style.cssText);
	    var removeStyles = cssUtil.split(cssText);

	    for (var key in removeStyles) {
	      if (removeStyles.hasOwnProperty(key)) {
	        delete styles[key];
	      }
	    }

	    element.style.cssText = cssUtil.join(styles);
	  };

	  /**
	   * https://gist.github.com/mjijackson/5311256
	   * @param h
	   * @param s
	   * @param v
	   * @returns {{r: number, g: number, b: number}}
	   * @constructor
	   */
	  exports.HSVToRGB = function (h, s, v) {
	    var r, g, b;

	    var i = Math.floor(h * 6);
	    var f = h * 6 - i;
	    var p = v * (1 - s);
	    var q = v * (1 - f * s);
	    var t = v * (1 - (1 - f) * s);

	    switch (i % 6) {
	      case 0:
	        r = v, g = t, b = p;break;
	      case 1:
	        r = q, g = v, b = p;break;
	      case 2:
	        r = p, g = v, b = t;break;
	      case 3:
	        r = p, g = q, b = v;break;
	      case 4:
	        r = t, g = p, b = v;break;
	      case 5:
	        r = v, g = p, b = q;break;
	    }

	    return { r: Math.floor(r * 255), g: Math.floor(g * 255), b: Math.floor(b * 255) };
	  };

	  exports.HSVToHex = function (h, s, v) {
	    var rgb = exports.HSVToRGB(h, s, v);
	    return exports.RGBToHex(rgb.r, rgb.g, rgb.b);
	  };

	  exports.hexToHSV = function (hex) {
	    var rgb = exports.hexToRGB(hex);
	    return exports.RGBToHSV(rgb.r, rgb.g, rgb.b);
	  };

	  exports.isValidHex = function (hex) {
	    var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
	    return isOk;
	  };

	  exports.isValidRGB = function (rgb) {
	    rgb = rgb.replace(" ", "");
	    var isOk = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/i.test(rgb);
	    return isOk;
	  };
	  exports.isValidRGBA = function (rgba) {
	    rgba = rgba.replace(" ", "");
	    var isOk = /rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),(.{1,3})\)/i.test(rgba);
	    return isOk;
	  };

	  /**
	   * This recursively redirects the prototype of JSON objects to the referenceObject
	   * This is used for default options.
	   *
	   * @param referenceObject
	   * @returns {*}
	   */
	  exports.selectiveBridgeObject = function (fields, referenceObject) {
	    if ((typeof referenceObject === 'undefined' ? 'undefined' : _typeof(referenceObject)) == "object") {
	      var objectTo = Object.create(referenceObject);
	      for (var i = 0; i < fields.length; i++) {
	        if (referenceObject.hasOwnProperty(fields[i])) {
	          if (_typeof(referenceObject[fields[i]]) == "object") {
	            objectTo[fields[i]] = exports.bridgeObject(referenceObject[fields[i]]);
	          }
	        }
	      }
	      return objectTo;
	    } else {
	      return null;
	    }
	  };

	  /**
	   * This recursively redirects the prototype of JSON objects to the referenceObject
	   * This is used for default options.
	   *
	   * @param referenceObject
	   * @returns {*}
	   */
	  exports.bridgeObject = function (referenceObject) {
	    if ((typeof referenceObject === 'undefined' ? 'undefined' : _typeof(referenceObject)) == "object") {
	      var objectTo = Object.create(referenceObject);
	      for (var i in referenceObject) {
	        if (referenceObject.hasOwnProperty(i)) {
	          if (_typeof(referenceObject[i]) == "object") {
	            objectTo[i] = exports.bridgeObject(referenceObject[i]);
	          }
	        }
	      }
	      return objectTo;
	    } else {
	      return null;
	    }
	  };

	  /**
	   * This method provides a stable sort implementation, very fast for presorted data
	   *
	   * @param a the array
	   * @param a order comparator
	   * @returns {the array}
	   */
	  exports.insertSort = function (a, compare) {
	    for (var i = 0; i < a.length; i++) {
	      var k = a[i];
	      for (var j = i; j > 0 && compare(k, a[j - 1]) < 0; j--) {
	        a[j] = a[j - 1];
	      }
	      a[j] = k;
	    }
	    return a;
	  };

	  /**
	   * this is used to set the options of subobjects in the options object. A requirement of these subobjects
	   * is that they have an 'enabled' element which is optional for the user but mandatory for the program.
	   *
	   * @param [object] mergeTarget | this is either this.options or the options used for the groups.
	   * @param [object] options     | options
	   * @param [String] option      | this is the option key in the options argument
	   */
	  exports.mergeOptions = function (mergeTarget, options, option) {
	    var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	    var globalOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

	    if (options[option] === null) {
	      mergeTarget[option] = Object.create(globalOptions[option]);
	    } else {
	      if (options[option] !== undefined) {
	        if (typeof options[option] === 'boolean') {
	          mergeTarget[option].enabled = options[option];
	        } else {
	          if (options[option].enabled === undefined) {
	            mergeTarget[option].enabled = true;
	          }
	          for (var prop in options[option]) {
	            if (options[option].hasOwnProperty(prop)) {
	              mergeTarget[option][prop] = options[option][prop];
	            }
	          }
	        }
	      }
	    }
	  };

	  /**
	   * This function does a binary search for a visible item in a sorted list. If we find a visible item, the code that uses
	   * this function will then iterate in both directions over this sorted list to find all visible items.
	   *
	   * @param {Item[]} orderedItems       | Items ordered by start
	   * @param {function} comparator       | -1 is lower, 0 is equal, 1 is higher
	   * @param {String} field
	   * @param {String} field2
	   * @returns {number}
	   * @private
	   */
	  exports.binarySearchCustom = function (orderedItems, comparator, field, field2) {
	    var maxIterations = 10000;
	    var iteration = 0;
	    var low = 0;
	    var high = orderedItems.length - 1;

	    while (low <= high && iteration < maxIterations) {
	      var middle = Math.floor((low + high) / 2);

	      var item = orderedItems[middle];
	      var value = field2 === undefined ? item[field] : item[field][field2];

	      var searchResult = comparator(value);
	      if (searchResult == 0) {
	        // jihaa, found a visible item!
	        return middle;
	      } else if (searchResult == -1) {
	        // it is too small --> increase low
	        low = middle + 1;
	      } else {
	        // it is too big --> decrease high
	        high = middle - 1;
	      }

	      iteration++;
	    }

	    return -1;
	  };

	  /**
	   * This function does a binary search for a specific value in a sorted array. If it does not exist but is in between of
	   * two values, we return either the one before or the one after, depending on user input
	   * If it is found, we return the index, else -1.
	   *
	   * @param {Array} orderedItems
	   * @param {{start: number, end: number}} target
	   * @param {String} field
	   * @param {String} sidePreference   'before' or 'after'
	   * @param {function} comparator an optional comparator, returning -1,0,1 for <,==,>.
	   * @returns {number}
	   * @private
	   */
	  exports.binarySearchValue = function (orderedItems, target, field, sidePreference, comparator) {
	    var maxIterations = 10000;
	    var iteration = 0;
	    var low = 0;
	    var high = orderedItems.length - 1;
	    var prevValue, value, nextValue, middle;

	    var comparator = comparator != undefined ? comparator : function (a, b) {
	      return a == b ? 0 : a < b ? -1 : 1;
	    };

	    while (low <= high && iteration < maxIterations) {
	      // get a new guess
	      middle = Math.floor(0.5 * (high + low));
	      prevValue = orderedItems[Math.max(0, middle - 1)][field];
	      value = orderedItems[middle][field];
	      nextValue = orderedItems[Math.min(orderedItems.length - 1, middle + 1)][field];

	      if (comparator(value, target) == 0) {
	        // we found the target
	        return middle;
	      } else if (comparator(prevValue, target) < 0 && comparator(value, target) > 0) {
	        // target is in between of the previous and the current
	        return sidePreference == 'before' ? Math.max(0, middle - 1) : middle;
	      } else if (comparator(value, target) < 0 && comparator(nextValue, target) > 0) {
	        // target is in between of the current and the next
	        return sidePreference == 'before' ? middle : Math.min(orderedItems.length - 1, middle + 1);
	      } else {
	        // didnt find the target, we need to change our boundaries.
	        if (comparator(value, target) < 0) {
	          // it is too small --> increase low
	          low = middle + 1;
	        } else {
	          // it is too big --> decrease high
	          high = middle - 1;
	        }
	      }
	      iteration++;
	    }

	    // didnt find anything. Return -1.
	    return -1;
	  };

	  /*
	   * Easing Functions - inspired from http://gizma.com/easing/
	   * only considering the t value for the range [0, 1] => [0, 1]
	   * https://gist.github.com/gre/1650294
	   */
	  exports.easingFunctions = {
	    // no easing, no acceleration
	    linear: function linear(t) {
	      return t;
	    },
	    // accelerating from zero velocity
	    easeInQuad: function easeInQuad(t) {
	      return t * t;
	    },
	    // decelerating to zero velocity
	    easeOutQuad: function easeOutQuad(t) {
	      return t * (2 - t);
	    },
	    // acceleration until halfway, then deceleration
	    easeInOutQuad: function easeInOutQuad(t) {
	      return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
	    },
	    // accelerating from zero velocity
	    easeInCubic: function easeInCubic(t) {
	      return t * t * t;
	    },
	    // decelerating to zero velocity
	    easeOutCubic: function easeOutCubic(t) {
	      return --t * t * t + 1;
	    },
	    // acceleration until halfway, then deceleration
	    easeInOutCubic: function easeInOutCubic(t) {
	      return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
	    },
	    // accelerating from zero velocity
	    easeInQuart: function easeInQuart(t) {
	      return t * t * t * t;
	    },
	    // decelerating to zero velocity
	    easeOutQuart: function easeOutQuart(t) {
	      return 1 - --t * t * t * t;
	    },
	    // acceleration until halfway, then deceleration
	    easeInOutQuart: function easeInOutQuart(t) {
	      return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
	    },
	    // accelerating from zero velocity
	    easeInQuint: function easeInQuint(t) {
	      return t * t * t * t * t;
	    },
	    // decelerating to zero velocity
	    easeOutQuint: function easeOutQuint(t) {
	      return 1 + --t * t * t * t * t;
	    },
	    // acceleration until halfway, then deceleration
	    easeInOutQuint: function easeInOutQuint(t) {
	      return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
	    }
	  };

	  exports.getScrollBarWidth = function () {
	    var inner = document.createElement('p');
	    inner.style.width = "100%";
	    inner.style.height = "200px";

	    var outer = document.createElement('div');
	    outer.style.position = "absolute";
	    outer.style.top = "0px";
	    outer.style.left = "0px";
	    outer.style.visibility = "hidden";
	    outer.style.width = "200px";
	    outer.style.height = "150px";
	    outer.style.overflow = "hidden";
	    outer.appendChild(inner);

	    document.body.appendChild(outer);
	    var w1 = inner.offsetWidth;
	    outer.style.overflow = 'scroll';
	    var w2 = inner.offsetWidth;
	    if (w1 == w2) w2 = outer.clientWidth;

	    document.body.removeChild(outer);

	    return w1 - w2;
	  };

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  // first check if moment.js is already loaded in the browser window, if so,
	  // use this instance. Else, load via commonjs.
	  module.exports = typeof window !== 'undefined' && window['moment'] || __webpack_require__(3);

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

	  /* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	  //! version : 2.15.2
	  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	  //! license : MIT
	  //! momentjs.com

	  ;(function (global, factory) {
	       true ? module.exports = factory() :
	      typeof define === 'function' && define.amd ? define(factory) :
	      global.moment = factory()
	  }(this, function () { 'use strict';

	      var hookCallback;

	      function utils_hooks__hooks () {
	          return hookCallback.apply(null, arguments);
	      }

	      // This is done to register the method called with moment()
	      // without creating circular dependencies.
	      function setHookCallback (callback) {
	          hookCallback = callback;
	      }

	      function isArray(input) {
	          return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	      }

	      function isObject(input) {
	          // IE8 will treat undefined and null as object if it wasn't for
	          // input != null
	          return input != null && Object.prototype.toString.call(input) === '[object Object]';
	      }

	      function isObjectEmpty(obj) {
	          var k;
	          for (k in obj) {
	              // even if its not own property I'd still call it non-empty
	              return false;
	          }
	          return true;
	      }

	      function isDate(input) {
	          return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	      }

	      function map(arr, fn) {
	          var res = [], i;
	          for (i = 0; i < arr.length; ++i) {
	              res.push(fn(arr[i], i));
	          }
	          return res;
	      }

	      function hasOwnProp(a, b) {
	          return Object.prototype.hasOwnProperty.call(a, b);
	      }

	      function extend(a, b) {
	          for (var i in b) {
	              if (hasOwnProp(b, i)) {
	                  a[i] = b[i];
	              }
	          }

	          if (hasOwnProp(b, 'toString')) {
	              a.toString = b.toString;
	          }

	          if (hasOwnProp(b, 'valueOf')) {
	              a.valueOf = b.valueOf;
	          }

	          return a;
	      }

	      function create_utc__createUTC (input, format, locale, strict) {
	          return createLocalOrUTC(input, format, locale, strict, true).utc();
	      }

	      function defaultParsingFlags() {
	          // We need to deep clone this object.
	          return {
	              empty           : false,
	              unusedTokens    : [],
	              unusedInput     : [],
	              overflow        : -2,
	              charsLeftOver   : 0,
	              nullInput       : false,
	              invalidMonth    : null,
	              invalidFormat   : false,
	              userInvalidated : false,
	              iso             : false,
	              parsedDateParts : [],
	              meridiem        : null
	          };
	      }

	      function getParsingFlags(m) {
	          if (m._pf == null) {
	              m._pf = defaultParsingFlags();
	          }
	          return m._pf;
	      }

	      var some;
	      if (Array.prototype.some) {
	          some = Array.prototype.some;
	      } else {
	          some = function (fun) {
	              var t = Object(this);
	              var len = t.length >>> 0;

	              for (var i = 0; i < len; i++) {
	                  if (i in t && fun.call(this, t[i], i, t)) {
	                      return true;
	                  }
	              }

	              return false;
	          };
	      }

	      function valid__isValid(m) {
	          if (m._isValid == null) {
	              var flags = getParsingFlags(m);
	              var parsedParts = some.call(flags.parsedDateParts, function (i) {
	                  return i != null;
	              });
	              var isNowValid = !isNaN(m._d.getTime()) &&
	                  flags.overflow < 0 &&
	                  !flags.empty &&
	                  !flags.invalidMonth &&
	                  !flags.invalidWeekday &&
	                  !flags.nullInput &&
	                  !flags.invalidFormat &&
	                  !flags.userInvalidated &&
	                  (!flags.meridiem || (flags.meridiem && parsedParts));

	              if (m._strict) {
	                  isNowValid = isNowValid &&
	                      flags.charsLeftOver === 0 &&
	                      flags.unusedTokens.length === 0 &&
	                      flags.bigHour === undefined;
	              }

	              if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                  m._isValid = isNowValid;
	              }
	              else {
	                  return isNowValid;
	              }
	          }
	          return m._isValid;
	      }

	      function valid__createInvalid (flags) {
	          var m = create_utc__createUTC(NaN);
	          if (flags != null) {
	              extend(getParsingFlags(m), flags);
	          }
	          else {
	              getParsingFlags(m).userInvalidated = true;
	          }

	          return m;
	      }

	      function isUndefined(input) {
	          return input === void 0;
	      }

	      // Plugins that add properties should also add the key here (null value),
	      // so we can properly clone ourselves.
	      var momentProperties = utils_hooks__hooks.momentProperties = [];

	      function copyConfig(to, from) {
	          var i, prop, val;

	          if (!isUndefined(from._isAMomentObject)) {
	              to._isAMomentObject = from._isAMomentObject;
	          }
	          if (!isUndefined(from._i)) {
	              to._i = from._i;
	          }
	          if (!isUndefined(from._f)) {
	              to._f = from._f;
	          }
	          if (!isUndefined(from._l)) {
	              to._l = from._l;
	          }
	          if (!isUndefined(from._strict)) {
	              to._strict = from._strict;
	          }
	          if (!isUndefined(from._tzm)) {
	              to._tzm = from._tzm;
	          }
	          if (!isUndefined(from._isUTC)) {
	              to._isUTC = from._isUTC;
	          }
	          if (!isUndefined(from._offset)) {
	              to._offset = from._offset;
	          }
	          if (!isUndefined(from._pf)) {
	              to._pf = getParsingFlags(from);
	          }
	          if (!isUndefined(from._locale)) {
	              to._locale = from._locale;
	          }

	          if (momentProperties.length > 0) {
	              for (i in momentProperties) {
	                  prop = momentProperties[i];
	                  val = from[prop];
	                  if (!isUndefined(val)) {
	                      to[prop] = val;
	                  }
	              }
	          }

	          return to;
	      }

	      var updateInProgress = false;

	      // Moment prototype object
	      function Moment(config) {
	          copyConfig(this, config);
	          this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	          // Prevent infinite loop in case updateOffset creates new moment
	          // objects.
	          if (updateInProgress === false) {
	              updateInProgress = true;
	              utils_hooks__hooks.updateOffset(this);
	              updateInProgress = false;
	          }
	      }

	      function isMoment (obj) {
	          return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	      }

	      function absFloor (number) {
	          if (number < 0) {
	              // -0 -> 0
	              return Math.ceil(number) || 0;
	          } else {
	              return Math.floor(number);
	          }
	      }

	      function toInt(argumentForCoercion) {
	          var coercedNumber = +argumentForCoercion,
	              value = 0;

	          if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	              value = absFloor(coercedNumber);
	          }

	          return value;
	      }

	      // compare two arrays, return the number of differences
	      function compareArrays(array1, array2, dontConvert) {
	          var len = Math.min(array1.length, array2.length),
	              lengthDiff = Math.abs(array1.length - array2.length),
	              diffs = 0,
	              i;
	          for (i = 0; i < len; i++) {
	              if ((dontConvert && array1[i] !== array2[i]) ||
	                  (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                  diffs++;
	              }
	          }
	          return diffs + lengthDiff;
	      }

	      function warn(msg) {
	          if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
	                  (typeof console !==  'undefined') && console.warn) {
	              console.warn('Deprecation warning: ' + msg);
	          }
	      }

	      function deprecate(msg, fn) {
	          var firstTime = true;

	          return extend(function () {
	              if (utils_hooks__hooks.deprecationHandler != null) {
	                  utils_hooks__hooks.deprecationHandler(null, msg);
	              }
	              if (firstTime) {
	                  var args = [];
	                  var arg;
	                  for (var i = 0; i < arguments.length; i++) {
	                      arg = '';
	                      if (typeof arguments[i] === 'object') {
	                          arg += '\n[' + i + '] ';
	                          for (var key in arguments[0]) {
	                              arg += key + ': ' + arguments[0][key] + ', ';
	                          }
	                          arg = arg.slice(0, -2); // Remove trailing comma and space
	                      } else {
	                          arg = arguments[i];
	                      }
	                      args.push(arg);
	                  }
	                  warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	                  firstTime = false;
	              }
	              return fn.apply(this, arguments);
	          }, fn);
	      }

	      var deprecations = {};

	      function deprecateSimple(name, msg) {
	          if (utils_hooks__hooks.deprecationHandler != null) {
	              utils_hooks__hooks.deprecationHandler(name, msg);
	          }
	          if (!deprecations[name]) {
	              warn(msg);
	              deprecations[name] = true;
	          }
	      }

	      utils_hooks__hooks.suppressDeprecationWarnings = false;
	      utils_hooks__hooks.deprecationHandler = null;

	      function isFunction(input) {
	          return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	      }

	      function locale_set__set (config) {
	          var prop, i;
	          for (i in config) {
	              prop = config[i];
	              if (isFunction(prop)) {
	                  this[i] = prop;
	              } else {
	                  this['_' + i] = prop;
	              }
	          }
	          this._config = config;
	          // Lenient ordinal parsing accepts just a number in addition to
	          // number + (possibly) stuff coming from _ordinalParseLenient.
	          this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	      }

	      function mergeConfigs(parentConfig, childConfig) {
	          var res = extend({}, parentConfig), prop;
	          for (prop in childConfig) {
	              if (hasOwnProp(childConfig, prop)) {
	                  if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                      res[prop] = {};
	                      extend(res[prop], parentConfig[prop]);
	                      extend(res[prop], childConfig[prop]);
	                  } else if (childConfig[prop] != null) {
	                      res[prop] = childConfig[prop];
	                  } else {
	                      delete res[prop];
	                  }
	              }
	          }
	          for (prop in parentConfig) {
	              if (hasOwnProp(parentConfig, prop) &&
	                      !hasOwnProp(childConfig, prop) &&
	                      isObject(parentConfig[prop])) {
	                  // make sure changes to properties don't modify parent config
	                  res[prop] = extend({}, res[prop]);
	              }
	          }
	          return res;
	      }

	      function Locale(config) {
	          if (config != null) {
	              this.set(config);
	          }
	      }

	      var keys;

	      if (Object.keys) {
	          keys = Object.keys;
	      } else {
	          keys = function (obj) {
	              var i, res = [];
	              for (i in obj) {
	                  if (hasOwnProp(obj, i)) {
	                      res.push(i);
	                  }
	              }
	              return res;
	          };
	      }

	      var defaultCalendar = {
	          sameDay : '[Today at] LT',
	          nextDay : '[Tomorrow at] LT',
	          nextWeek : 'dddd [at] LT',
	          lastDay : '[Yesterday at] LT',
	          lastWeek : '[Last] dddd [at] LT',
	          sameElse : 'L'
	      };

	      function locale_calendar__calendar (key, mom, now) {
	          var output = this._calendar[key] || this._calendar['sameElse'];
	          return isFunction(output) ? output.call(mom, now) : output;
	      }

	      var defaultLongDateFormat = {
	          LTS  : 'h:mm:ss A',
	          LT   : 'h:mm A',
	          L    : 'MM/DD/YYYY',
	          LL   : 'MMMM D, YYYY',
	          LLL  : 'MMMM D, YYYY h:mm A',
	          LLLL : 'dddd, MMMM D, YYYY h:mm A'
	      };

	      function longDateFormat (key) {
	          var format = this._longDateFormat[key],
	              formatUpper = this._longDateFormat[key.toUpperCase()];

	          if (format || !formatUpper) {
	              return format;
	          }

	          this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	              return val.slice(1);
	          });

	          return this._longDateFormat[key];
	      }

	      var defaultInvalidDate = 'Invalid date';

	      function invalidDate () {
	          return this._invalidDate;
	      }

	      var defaultOrdinal = '%d';
	      var defaultOrdinalParse = /\d{1,2}/;

	      function ordinal (number) {
	          return this._ordinal.replace('%d', number);
	      }

	      var defaultRelativeTime = {
	          future : 'in %s',
	          past   : '%s ago',
	          s  : 'a few seconds',
	          m  : 'a minute',
	          mm : '%d minutes',
	          h  : 'an hour',
	          hh : '%d hours',
	          d  : 'a day',
	          dd : '%d days',
	          M  : 'a month',
	          MM : '%d months',
	          y  : 'a year',
	          yy : '%d years'
	      };

	      function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	          var output = this._relativeTime[string];
	          return (isFunction(output)) ?
	              output(number, withoutSuffix, string, isFuture) :
	              output.replace(/%d/i, number);
	      }

	      function pastFuture (diff, output) {
	          var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	          return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	      }

	      var aliases = {};

	      function addUnitAlias (unit, shorthand) {
	          var lowerCase = unit.toLowerCase();
	          aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	      }

	      function normalizeUnits(units) {
	          return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	      }

	      function normalizeObjectUnits(inputObject) {
	          var normalizedInput = {},
	              normalizedProp,
	              prop;

	          for (prop in inputObject) {
	              if (hasOwnProp(inputObject, prop)) {
	                  normalizedProp = normalizeUnits(prop);
	                  if (normalizedProp) {
	                      normalizedInput[normalizedProp] = inputObject[prop];
	                  }
	              }
	          }

	          return normalizedInput;
	      }

	      var priorities = {};

	      function addUnitPriority(unit, priority) {
	          priorities[unit] = priority;
	      }

	      function getPrioritizedUnits(unitsObj) {
	          var units = [];
	          for (var u in unitsObj) {
	              units.push({unit: u, priority: priorities[u]});
	          }
	          units.sort(function (a, b) {
	              return a.priority - b.priority;
	          });
	          return units;
	      }

	      function makeGetSet (unit, keepTime) {
	          return function (value) {
	              if (value != null) {
	                  get_set__set(this, unit, value);
	                  utils_hooks__hooks.updateOffset(this, keepTime);
	                  return this;
	              } else {
	                  return get_set__get(this, unit);
	              }
	          };
	      }

	      function get_set__get (mom, unit) {
	          return mom.isValid() ?
	              mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	      }

	      function get_set__set (mom, unit, value) {
	          if (mom.isValid()) {
	              mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	          }
	      }

	      // MOMENTS

	      function stringGet (units) {
	          units = normalizeUnits(units);
	          if (isFunction(this[units])) {
	              return this[units]();
	          }
	          return this;
	      }


	      function stringSet (units, value) {
	          if (typeof units === 'object') {
	              units = normalizeObjectUnits(units);
	              var prioritized = getPrioritizedUnits(units);
	              for (var i = 0; i < prioritized.length; i++) {
	                  this[prioritized[i].unit](units[prioritized[i].unit]);
	              }
	          } else {
	              units = normalizeUnits(units);
	              if (isFunction(this[units])) {
	                  return this[units](value);
	              }
	          }
	          return this;
	      }

	      function zeroFill(number, targetLength, forceSign) {
	          var absNumber = '' + Math.abs(number),
	              zerosToFill = targetLength - absNumber.length,
	              sign = number >= 0;
	          return (sign ? (forceSign ? '+' : '') : '-') +
	              Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	      }

	      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	      var formatFunctions = {};

	      var formatTokenFunctions = {};

	      // token:    'M'
	      // padded:   ['MM', 2]
	      // ordinal:  'Mo'
	      // callback: function () { this.month() + 1 }
	      function addFormatToken (token, padded, ordinal, callback) {
	          var func = callback;
	          if (typeof callback === 'string') {
	              func = function () {
	                  return this[callback]();
	              };
	          }
	          if (token) {
	              formatTokenFunctions[token] = func;
	          }
	          if (padded) {
	              formatTokenFunctions[padded[0]] = function () {
	                  return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	              };
	          }
	          if (ordinal) {
	              formatTokenFunctions[ordinal] = function () {
	                  return this.localeData().ordinal(func.apply(this, arguments), token);
	              };
	          }
	      }

	      function removeFormattingTokens(input) {
	          if (input.match(/\[[\s\S]/)) {
	              return input.replace(/^\[|\]$/g, '');
	          }
	          return input.replace(/\\/g, '');
	      }

	      function makeFormatFunction(format) {
	          var array = format.match(formattingTokens), i, length;

	          for (i = 0, length = array.length; i < length; i++) {
	              if (formatTokenFunctions[array[i]]) {
	                  array[i] = formatTokenFunctions[array[i]];
	              } else {
	                  array[i] = removeFormattingTokens(array[i]);
	              }
	          }

	          return function (mom) {
	              var output = '', i;
	              for (i = 0; i < length; i++) {
	                  output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	              }
	              return output;
	          };
	      }

	      // format date using native date object
	      function formatMoment(m, format) {
	          if (!m.isValid()) {
	              return m.localeData().invalidDate();
	          }

	          format = expandFormat(format, m.localeData());
	          formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	          return formatFunctions[format](m);
	      }

	      function expandFormat(format, locale) {
	          var i = 5;

	          function replaceLongDateFormatTokens(input) {
	              return locale.longDateFormat(input) || input;
	          }

	          localFormattingTokens.lastIndex = 0;
	          while (i >= 0 && localFormattingTokens.test(format)) {
	              format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	              localFormattingTokens.lastIndex = 0;
	              i -= 1;
	          }

	          return format;
	      }

	      var match1         = /\d/;            //       0 - 9
	      var match2         = /\d\d/;          //      00 - 99
	      var match3         = /\d{3}/;         //     000 - 999
	      var match4         = /\d{4}/;         //    0000 - 9999
	      var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	      var match1to2      = /\d\d?/;         //       0 - 99
	      var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	      var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	      var match1to3      = /\d{1,3}/;       //       0 - 999
	      var match1to4      = /\d{1,4}/;       //       0 - 9999
	      var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	      var matchUnsigned  = /\d+/;           //       0 - inf
	      var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	      var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	      // any word (or two) characters or numbers including two/three word month in arabic.
	      // includes scottish gaelic two word and hyphenated months
	      var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


	      var regexes = {};

	      function addRegexToken (token, regex, strictRegex) {
	          regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	              return (isStrict && strictRegex) ? strictRegex : regex;
	          };
	      }

	      function getParseRegexForToken (token, config) {
	          if (!hasOwnProp(regexes, token)) {
	              return new RegExp(unescapeFormat(token));
	          }

	          return regexes[token](config._strict, config._locale);
	      }

	      // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	      function unescapeFormat(s) {
	          return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	              return p1 || p2 || p3 || p4;
	          }));
	      }

	      function regexEscape(s) {
	          return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	      }

	      var tokens = {};

	      function addParseToken (token, callback) {
	          var i, func = callback;
	          if (typeof token === 'string') {
	              token = [token];
	          }
	          if (typeof callback === 'number') {
	              func = function (input, array) {
	                  array[callback] = toInt(input);
	              };
	          }
	          for (i = 0; i < token.length; i++) {
	              tokens[token[i]] = func;
	          }
	      }

	      function addWeekParseToken (token, callback) {
	          addParseToken(token, function (input, array, config, token) {
	              config._w = config._w || {};
	              callback(input, config._w, config, token);
	          });
	      }

	      function addTimeToArrayFromToken(token, input, config) {
	          if (input != null && hasOwnProp(tokens, token)) {
	              tokens[token](input, config._a, config, token);
	          }
	      }

	      var YEAR = 0;
	      var MONTH = 1;
	      var DATE = 2;
	      var HOUR = 3;
	      var MINUTE = 4;
	      var SECOND = 5;
	      var MILLISECOND = 6;
	      var WEEK = 7;
	      var WEEKDAY = 8;

	      var indexOf;

	      if (Array.prototype.indexOf) {
	          indexOf = Array.prototype.indexOf;
	      } else {
	          indexOf = function (o) {
	              // I know
	              var i;
	              for (i = 0; i < this.length; ++i) {
	                  if (this[i] === o) {
	                      return i;
	                  }
	              }
	              return -1;
	          };
	      }

	      function daysInMonth(year, month) {
	          return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	      }

	      // FORMATTING

	      addFormatToken('M', ['MM', 2], 'Mo', function () {
	          return this.month() + 1;
	      });

	      addFormatToken('MMM', 0, 0, function (format) {
	          return this.localeData().monthsShort(this, format);
	      });

	      addFormatToken('MMMM', 0, 0, function (format) {
	          return this.localeData().months(this, format);
	      });

	      // ALIASES

	      addUnitAlias('month', 'M');

	      // PRIORITY

	      addUnitPriority('month', 8);

	      // PARSING

	      addRegexToken('M',    match1to2);
	      addRegexToken('MM',   match1to2, match2);
	      addRegexToken('MMM',  function (isStrict, locale) {
	          return locale.monthsShortRegex(isStrict);
	      });
	      addRegexToken('MMMM', function (isStrict, locale) {
	          return locale.monthsRegex(isStrict);
	      });

	      addParseToken(['M', 'MM'], function (input, array) {
	          array[MONTH] = toInt(input) - 1;
	      });

	      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	          var month = config._locale.monthsParse(input, token, config._strict);
	          // if we didn't find a month name, mark the date as invalid.
	          if (month != null) {
	              array[MONTH] = month;
	          } else {
	              getParsingFlags(config).invalidMonth = input;
	          }
	      });

	      // LOCALES

	      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	      function localeMonths (m, format) {
	          if (!m) {
	              return this._months;
	          }
	          return isArray(this._months) ? this._months[m.month()] :
	              this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	      }

	      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	      function localeMonthsShort (m, format) {
	          if (!m) {
	              return this._monthsShort;
	          }
	          return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	              this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	      }

	      function units_month__handleStrictParse(monthName, format, strict) {
	          var i, ii, mom, llc = monthName.toLocaleLowerCase();
	          if (!this._monthsParse) {
	              // this is not used
	              this._monthsParse = [];
	              this._longMonthsParse = [];
	              this._shortMonthsParse = [];
	              for (i = 0; i < 12; ++i) {
	                  mom = create_utc__createUTC([2000, i]);
	                  this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	                  this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	              }
	          }

	          if (strict) {
	              if (format === 'MMM') {
	                  ii = indexOf.call(this._shortMonthsParse, llc);
	                  return ii !== -1 ? ii : null;
	              } else {
	                  ii = indexOf.call(this._longMonthsParse, llc);
	                  return ii !== -1 ? ii : null;
	              }
	          } else {
	              if (format === 'MMM') {
	                  ii = indexOf.call(this._shortMonthsParse, llc);
	                  if (ii !== -1) {
	                      return ii;
	                  }
	                  ii = indexOf.call(this._longMonthsParse, llc);
	                  return ii !== -1 ? ii : null;
	              } else {
	                  ii = indexOf.call(this._longMonthsParse, llc);
	                  if (ii !== -1) {
	                      return ii;
	                  }
	                  ii = indexOf.call(this._shortMonthsParse, llc);
	                  return ii !== -1 ? ii : null;
	              }
	          }
	      }

	      function localeMonthsParse (monthName, format, strict) {
	          var i, mom, regex;

	          if (this._monthsParseExact) {
	              return units_month__handleStrictParse.call(this, monthName, format, strict);
	          }

	          if (!this._monthsParse) {
	              this._monthsParse = [];
	              this._longMonthsParse = [];
	              this._shortMonthsParse = [];
	          }

	          // TODO: add sorting
	          // Sorting makes sure if one month (or abbr) is a prefix of another
	          // see sorting in computeMonthsParse
	          for (i = 0; i < 12; i++) {
	              // make the regex if we don't have it already
	              mom = create_utc__createUTC([2000, i]);
	              if (strict && !this._longMonthsParse[i]) {
	                  this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                  this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	              }
	              if (!strict && !this._monthsParse[i]) {
	                  regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                  this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	              }
	              // test the regex
	              if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                  return i;
	              } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                  return i;
	              } else if (!strict && this._monthsParse[i].test(monthName)) {
	                  return i;
	              }
	          }
	      }

	      // MOMENTS

	      function setMonth (mom, value) {
	          var dayOfMonth;

	          if (!mom.isValid()) {
	              // No op
	              return mom;
	          }

	          if (typeof value === 'string') {
	              if (/^\d+$/.test(value)) {
	                  value = toInt(value);
	              } else {
	                  value = mom.localeData().monthsParse(value);
	                  // TODO: Another silent failure?
	                  if (typeof value !== 'number') {
	                      return mom;
	                  }
	              }
	          }

	          dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	          mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	          return mom;
	      }

	      function getSetMonth (value) {
	          if (value != null) {
	              setMonth(this, value);
	              utils_hooks__hooks.updateOffset(this, true);
	              return this;
	          } else {
	              return get_set__get(this, 'Month');
	          }
	      }

	      function getDaysInMonth () {
	          return daysInMonth(this.year(), this.month());
	      }

	      var defaultMonthsShortRegex = matchWord;
	      function monthsShortRegex (isStrict) {
	          if (this._monthsParseExact) {
	              if (!hasOwnProp(this, '_monthsRegex')) {
	                  computeMonthsParse.call(this);
	              }
	              if (isStrict) {
	                  return this._monthsShortStrictRegex;
	              } else {
	                  return this._monthsShortRegex;
	              }
	          } else {
	              if (!hasOwnProp(this, '_monthsShortRegex')) {
	                  this._monthsShortRegex = defaultMonthsShortRegex;
	              }
	              return this._monthsShortStrictRegex && isStrict ?
	                  this._monthsShortStrictRegex : this._monthsShortRegex;
	          }
	      }

	      var defaultMonthsRegex = matchWord;
	      function monthsRegex (isStrict) {
	          if (this._monthsParseExact) {
	              if (!hasOwnProp(this, '_monthsRegex')) {
	                  computeMonthsParse.call(this);
	              }
	              if (isStrict) {
	                  return this._monthsStrictRegex;
	              } else {
	                  return this._monthsRegex;
	              }
	          } else {
	              if (!hasOwnProp(this, '_monthsRegex')) {
	                  this._monthsRegex = defaultMonthsRegex;
	              }
	              return this._monthsStrictRegex && isStrict ?
	                  this._monthsStrictRegex : this._monthsRegex;
	          }
	      }

	      function computeMonthsParse () {
	          function cmpLenRev(a, b) {
	              return b.length - a.length;
	          }

	          var shortPieces = [], longPieces = [], mixedPieces = [],
	              i, mom;
	          for (i = 0; i < 12; i++) {
	              // make the regex if we don't have it already
	              mom = create_utc__createUTC([2000, i]);
	              shortPieces.push(this.monthsShort(mom, ''));
	              longPieces.push(this.months(mom, ''));
	              mixedPieces.push(this.months(mom, ''));
	              mixedPieces.push(this.monthsShort(mom, ''));
	          }
	          // Sorting makes sure if one month (or abbr) is a prefix of another it
	          // will match the longer piece.
	          shortPieces.sort(cmpLenRev);
	          longPieces.sort(cmpLenRev);
	          mixedPieces.sort(cmpLenRev);
	          for (i = 0; i < 12; i++) {
	              shortPieces[i] = regexEscape(shortPieces[i]);
	              longPieces[i] = regexEscape(longPieces[i]);
	          }
	          for (i = 0; i < 24; i++) {
	              mixedPieces[i] = regexEscape(mixedPieces[i]);
	          }

	          this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	          this._monthsShortRegex = this._monthsRegex;
	          this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	          this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	      }

	      // FORMATTING

	      addFormatToken('Y', 0, 0, function () {
	          var y = this.year();
	          return y <= 9999 ? '' + y : '+' + y;
	      });

	      addFormatToken(0, ['YY', 2], 0, function () {
	          return this.year() % 100;
	      });

	      addFormatToken(0, ['YYYY',   4],       0, 'year');
	      addFormatToken(0, ['YYYYY',  5],       0, 'year');
	      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	      // ALIASES

	      addUnitAlias('year', 'y');

	      // PRIORITIES

	      addUnitPriority('year', 1);

	      // PARSING

	      addRegexToken('Y',      matchSigned);
	      addRegexToken('YY',     match1to2, match2);
	      addRegexToken('YYYY',   match1to4, match4);
	      addRegexToken('YYYYY',  match1to6, match6);
	      addRegexToken('YYYYYY', match1to6, match6);

	      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	      addParseToken('YYYY', function (input, array) {
	          array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	      });
	      addParseToken('YY', function (input, array) {
	          array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	      });
	      addParseToken('Y', function (input, array) {
	          array[YEAR] = parseInt(input, 10);
	      });

	      // HELPERS

	      function daysInYear(year) {
	          return isLeapYear(year) ? 366 : 365;
	      }

	      function isLeapYear(year) {
	          return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	      }

	      // HOOKS

	      utils_hooks__hooks.parseTwoDigitYear = function (input) {
	          return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	      };

	      // MOMENTS

	      var getSetYear = makeGetSet('FullYear', true);

	      function getIsLeapYear () {
	          return isLeapYear(this.year());
	      }

	      function createDate (y, m, d, h, M, s, ms) {
	          //can't just apply() to create a date:
	          //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	          var date = new Date(y, m, d, h, M, s, ms);

	          //the date constructor remaps years 0-99 to 1900-1999
	          if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	              date.setFullYear(y);
	          }
	          return date;
	      }

	      function createUTCDate (y) {
	          var date = new Date(Date.UTC.apply(null, arguments));

	          //the Date.UTC function remaps years 0-99 to 1900-1999
	          if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	              date.setUTCFullYear(y);
	          }
	          return date;
	      }

	      // start-of-first-week - start-of-year
	      function firstWeekOffset(year, dow, doy) {
	          var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	              fwd = 7 + dow - doy,
	              // first-week day local weekday -- which local weekday is fwd
	              fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	          return -fwdlw + fwd - 1;
	      }

	      //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	          var localWeekday = (7 + weekday - dow) % 7,
	              weekOffset = firstWeekOffset(year, dow, doy),
	              dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	              resYear, resDayOfYear;

	          if (dayOfYear <= 0) {
	              resYear = year - 1;
	              resDayOfYear = daysInYear(resYear) + dayOfYear;
	          } else if (dayOfYear > daysInYear(year)) {
	              resYear = year + 1;
	              resDayOfYear = dayOfYear - daysInYear(year);
	          } else {
	              resYear = year;
	              resDayOfYear = dayOfYear;
	          }

	          return {
	              year: resYear,
	              dayOfYear: resDayOfYear
	          };
	      }

	      function weekOfYear(mom, dow, doy) {
	          var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	              week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	              resWeek, resYear;

	          if (week < 1) {
	              resYear = mom.year() - 1;
	              resWeek = week + weeksInYear(resYear, dow, doy);
	          } else if (week > weeksInYear(mom.year(), dow, doy)) {
	              resWeek = week - weeksInYear(mom.year(), dow, doy);
	              resYear = mom.year() + 1;
	          } else {
	              resYear = mom.year();
	              resWeek = week;
	          }

	          return {
	              week: resWeek,
	              year: resYear
	          };
	      }

	      function weeksInYear(year, dow, doy) {
	          var weekOffset = firstWeekOffset(year, dow, doy),
	              weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	          return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	      }

	      // FORMATTING

	      addFormatToken('w', ['ww', 2], 'wo', 'week');
	      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	      // ALIASES

	      addUnitAlias('week', 'w');
	      addUnitAlias('isoWeek', 'W');

	      // PRIORITIES

	      addUnitPriority('week', 5);
	      addUnitPriority('isoWeek', 5);

	      // PARSING

	      addRegexToken('w',  match1to2);
	      addRegexToken('ww', match1to2, match2);
	      addRegexToken('W',  match1to2);
	      addRegexToken('WW', match1to2, match2);

	      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	          week[token.substr(0, 1)] = toInt(input);
	      });

	      // HELPERS

	      // LOCALES

	      function localeWeek (mom) {
	          return weekOfYear(mom, this._week.dow, this._week.doy).week;
	      }

	      var defaultLocaleWeek = {
	          dow : 0, // Sunday is the first day of the week.
	          doy : 6  // The week that contains Jan 1st is the first week of the year.
	      };

	      function localeFirstDayOfWeek () {
	          return this._week.dow;
	      }

	      function localeFirstDayOfYear () {
	          return this._week.doy;
	      }

	      // MOMENTS

	      function getSetWeek (input) {
	          var week = this.localeData().week(this);
	          return input == null ? week : this.add((input - week) * 7, 'd');
	      }

	      function getSetISOWeek (input) {
	          var week = weekOfYear(this, 1, 4).week;
	          return input == null ? week : this.add((input - week) * 7, 'd');
	      }

	      // FORMATTING

	      addFormatToken('d', 0, 'do', 'day');

	      addFormatToken('dd', 0, 0, function (format) {
	          return this.localeData().weekdaysMin(this, format);
	      });

	      addFormatToken('ddd', 0, 0, function (format) {
	          return this.localeData().weekdaysShort(this, format);
	      });

	      addFormatToken('dddd', 0, 0, function (format) {
	          return this.localeData().weekdays(this, format);
	      });

	      addFormatToken('e', 0, 0, 'weekday');
	      addFormatToken('E', 0, 0, 'isoWeekday');

	      // ALIASES

	      addUnitAlias('day', 'd');
	      addUnitAlias('weekday', 'e');
	      addUnitAlias('isoWeekday', 'E');

	      // PRIORITY
	      addUnitPriority('day', 11);
	      addUnitPriority('weekday', 11);
	      addUnitPriority('isoWeekday', 11);

	      // PARSING

	      addRegexToken('d',    match1to2);
	      addRegexToken('e',    match1to2);
	      addRegexToken('E',    match1to2);
	      addRegexToken('dd',   function (isStrict, locale) {
	          return locale.weekdaysMinRegex(isStrict);
	      });
	      addRegexToken('ddd',   function (isStrict, locale) {
	          return locale.weekdaysShortRegex(isStrict);
	      });
	      addRegexToken('dddd',   function (isStrict, locale) {
	          return locale.weekdaysRegex(isStrict);
	      });

	      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	          var weekday = config._locale.weekdaysParse(input, token, config._strict);
	          // if we didn't get a weekday name, mark the date as invalid
	          if (weekday != null) {
	              week.d = weekday;
	          } else {
	              getParsingFlags(config).invalidWeekday = input;
	          }
	      });

	      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	          week[token] = toInt(input);
	      });

	      // HELPERS

	      function parseWeekday(input, locale) {
	          if (typeof input !== 'string') {
	              return input;
	          }

	          if (!isNaN(input)) {
	              return parseInt(input, 10);
	          }

	          input = locale.weekdaysParse(input);
	          if (typeof input === 'number') {
	              return input;
	          }

	          return null;
	      }

	      function parseIsoWeekday(input, locale) {
	          if (typeof input === 'string') {
	              return locale.weekdaysParse(input) % 7 || 7;
	          }
	          return isNaN(input) ? null : input;
	      }

	      // LOCALES

	      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	      function localeWeekdays (m, format) {
	          if (!m) {
	              return this._weekdays;
	          }
	          return isArray(this._weekdays) ? this._weekdays[m.day()] :
	              this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	      }

	      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	      function localeWeekdaysShort (m) {
	          return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	      }

	      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	      function localeWeekdaysMin (m) {
	          return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	      }

	      function day_of_week__handleStrictParse(weekdayName, format, strict) {
	          var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	          if (!this._weekdaysParse) {
	              this._weekdaysParse = [];
	              this._shortWeekdaysParse = [];
	              this._minWeekdaysParse = [];

	              for (i = 0; i < 7; ++i) {
	                  mom = create_utc__createUTC([2000, 1]).day(i);
	                  this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	                  this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	                  this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	              }
	          }

	          if (strict) {
	              if (format === 'dddd') {
	                  ii = indexOf.call(this._weekdaysParse, llc);
	                  return ii !== -1 ? ii : null;
	              } else if (format === 'ddd') {
	                  ii = indexOf.call(this._shortWeekdaysParse, llc);
	                  return ii !== -1 ? ii : null;
	              } else {
	                  ii = indexOf.call(this._minWeekdaysParse, llc);
	                  return ii !== -1 ? ii : null;
	              }
	          } else {
	              if (format === 'dddd') {
	                  ii = indexOf.call(this._weekdaysParse, llc);
	                  if (ii !== -1) {
	                      return ii;
	                  }
	                  ii = indexOf.call(this._shortWeekdaysParse, llc);
	                  if (ii !== -1) {
	                      return ii;
	                  }
	                  ii = indexOf.call(this._minWeekdaysParse, llc);
	                  return ii !== -1 ? ii : null;
	              } else if (format === 'ddd') {
	                  ii = indexOf.call(this._shortWeekdaysParse, llc);
	                  if (ii !== -1) {
	                      return ii;
	                  }
	                  ii = indexOf.call(this._weekdaysParse, llc);
	                  if (ii !== -1) {
	                      return ii;
	                  }
	                  ii = indexOf.call(this._minWeekdaysParse, llc);
	                  return ii !== -1 ? ii : null;
	              } else {
	                  ii = indexOf.call(this._minWeekdaysParse, llc);
	                  if (ii !== -1) {
	                      return ii;
	                  }
	                  ii = indexOf.call(this._weekdaysParse, llc);
	                  if (ii !== -1) {
	                      return ii;
	                  }
	                  ii = indexOf.call(this._shortWeekdaysParse, llc);
	                  return ii !== -1 ? ii : null;
	              }
	          }
	      }

	      function localeWeekdaysParse (weekdayName, format, strict) {
	          var i, mom, regex;

	          if (this._weekdaysParseExact) {
	              return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
	          }

	          if (!this._weekdaysParse) {
	              this._weekdaysParse = [];
	              this._minWeekdaysParse = [];
	              this._shortWeekdaysParse = [];
	              this._fullWeekdaysParse = [];
	          }

	          for (i = 0; i < 7; i++) {
	              // make the regex if we don't have it already

	              mom = create_utc__createUTC([2000, 1]).day(i);
	              if (strict && !this._fullWeekdaysParse[i]) {
	                  this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	                  this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	                  this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	              }
	              if (!this._weekdaysParse[i]) {
	                  regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                  this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	              }
	              // test the regex
	              if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                  return i;
	              } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                  return i;
	              } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                  return i;
	              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                  return i;
	              }
	          }
	      }

	      // MOMENTS

	      function getSetDayOfWeek (input) {
	          if (!this.isValid()) {
	              return input != null ? this : NaN;
	          }
	          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	          if (input != null) {
	              input = parseWeekday(input, this.localeData());
	              return this.add(input - day, 'd');
	          } else {
	              return day;
	          }
	      }

	      function getSetLocaleDayOfWeek (input) {
	          if (!this.isValid()) {
	              return input != null ? this : NaN;
	          }
	          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	          return input == null ? weekday : this.add(input - weekday, 'd');
	      }

	      function getSetISODayOfWeek (input) {
	          if (!this.isValid()) {
	              return input != null ? this : NaN;
	          }

	          // behaves the same as moment#day except
	          // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	          // as a setter, sunday should belong to the previous week.

	          if (input != null) {
	              var weekday = parseIsoWeekday(input, this.localeData());
	              return this.day(this.day() % 7 ? weekday : weekday - 7);
	          } else {
	              return this.day() || 7;
	          }
	      }

	      var defaultWeekdaysRegex = matchWord;
	      function weekdaysRegex (isStrict) {
	          if (this._weekdaysParseExact) {
	              if (!hasOwnProp(this, '_weekdaysRegex')) {
	                  computeWeekdaysParse.call(this);
	              }
	              if (isStrict) {
	                  return this._weekdaysStrictRegex;
	              } else {
	                  return this._weekdaysRegex;
	              }
	          } else {
	              if (!hasOwnProp(this, '_weekdaysRegex')) {
	                  this._weekdaysRegex = defaultWeekdaysRegex;
	              }
	              return this._weekdaysStrictRegex && isStrict ?
	                  this._weekdaysStrictRegex : this._weekdaysRegex;
	          }
	      }

	      var defaultWeekdaysShortRegex = matchWord;
	      function weekdaysShortRegex (isStrict) {
	          if (this._weekdaysParseExact) {
	              if (!hasOwnProp(this, '_weekdaysRegex')) {
	                  computeWeekdaysParse.call(this);
	              }
	              if (isStrict) {
	                  return this._weekdaysShortStrictRegex;
	              } else {
	                  return this._weekdaysShortRegex;
	              }
	          } else {
	              if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                  this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	              }
	              return this._weekdaysShortStrictRegex && isStrict ?
	                  this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	          }
	      }

	      var defaultWeekdaysMinRegex = matchWord;
	      function weekdaysMinRegex (isStrict) {
	          if (this._weekdaysParseExact) {
	              if (!hasOwnProp(this, '_weekdaysRegex')) {
	                  computeWeekdaysParse.call(this);
	              }
	              if (isStrict) {
	                  return this._weekdaysMinStrictRegex;
	              } else {
	                  return this._weekdaysMinRegex;
	              }
	          } else {
	              if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                  this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	              }
	              return this._weekdaysMinStrictRegex && isStrict ?
	                  this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	          }
	      }


	      function computeWeekdaysParse () {
	          function cmpLenRev(a, b) {
	              return b.length - a.length;
	          }

	          var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	              i, mom, minp, shortp, longp;
	          for (i = 0; i < 7; i++) {
	              // make the regex if we don't have it already
	              mom = create_utc__createUTC([2000, 1]).day(i);
	              minp = this.weekdaysMin(mom, '');
	              shortp = this.weekdaysShort(mom, '');
	              longp = this.weekdays(mom, '');
	              minPieces.push(minp);
	              shortPieces.push(shortp);
	              longPieces.push(longp);
	              mixedPieces.push(minp);
	              mixedPieces.push(shortp);
	              mixedPieces.push(longp);
	          }
	          // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	          // will match the longer piece.
	          minPieces.sort(cmpLenRev);
	          shortPieces.sort(cmpLenRev);
	          longPieces.sort(cmpLenRev);
	          mixedPieces.sort(cmpLenRev);
	          for (i = 0; i < 7; i++) {
	              shortPieces[i] = regexEscape(shortPieces[i]);
	              longPieces[i] = regexEscape(longPieces[i]);
	              mixedPieces[i] = regexEscape(mixedPieces[i]);
	          }

	          this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	          this._weekdaysShortRegex = this._weekdaysRegex;
	          this._weekdaysMinRegex = this._weekdaysRegex;

	          this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	          this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	          this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	      }

	      // FORMATTING

	      function hFormat() {
	          return this.hours() % 12 || 12;
	      }

	      function kFormat() {
	          return this.hours() || 24;
	      }

	      addFormatToken('H', ['HH', 2], 0, 'hour');
	      addFormatToken('h', ['hh', 2], 0, hFormat);
	      addFormatToken('k', ['kk', 2], 0, kFormat);

	      addFormatToken('hmm', 0, 0, function () {
	          return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	      });

	      addFormatToken('hmmss', 0, 0, function () {
	          return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	              zeroFill(this.seconds(), 2);
	      });

	      addFormatToken('Hmm', 0, 0, function () {
	          return '' + this.hours() + zeroFill(this.minutes(), 2);
	      });

	      addFormatToken('Hmmss', 0, 0, function () {
	          return '' + this.hours() + zeroFill(this.minutes(), 2) +
	              zeroFill(this.seconds(), 2);
	      });

	      function meridiem (token, lowercase) {
	          addFormatToken(token, 0, 0, function () {
	              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	          });
	      }

	      meridiem('a', true);
	      meridiem('A', false);

	      // ALIASES

	      addUnitAlias('hour', 'h');

	      // PRIORITY
	      addUnitPriority('hour', 13);

	      // PARSING

	      function matchMeridiem (isStrict, locale) {
	          return locale._meridiemParse;
	      }

	      addRegexToken('a',  matchMeridiem);
	      addRegexToken('A',  matchMeridiem);
	      addRegexToken('H',  match1to2);
	      addRegexToken('h',  match1to2);
	      addRegexToken('HH', match1to2, match2);
	      addRegexToken('hh', match1to2, match2);

	      addRegexToken('hmm', match3to4);
	      addRegexToken('hmmss', match5to6);
	      addRegexToken('Hmm', match3to4);
	      addRegexToken('Hmmss', match5to6);

	      addParseToken(['H', 'HH'], HOUR);
	      addParseToken(['a', 'A'], function (input, array, config) {
	          config._isPm = config._locale.isPM(input);
	          config._meridiem = input;
	      });
	      addParseToken(['h', 'hh'], function (input, array, config) {
	          array[HOUR] = toInt(input);
	          getParsingFlags(config).bigHour = true;
	      });
	      addParseToken('hmm', function (input, array, config) {
	          var pos = input.length - 2;
	          array[HOUR] = toInt(input.substr(0, pos));
	          array[MINUTE] = toInt(input.substr(pos));
	          getParsingFlags(config).bigHour = true;
	      });
	      addParseToken('hmmss', function (input, array, config) {
	          var pos1 = input.length - 4;
	          var pos2 = input.length - 2;
	          array[HOUR] = toInt(input.substr(0, pos1));
	          array[MINUTE] = toInt(input.substr(pos1, 2));
	          array[SECOND] = toInt(input.substr(pos2));
	          getParsingFlags(config).bigHour = true;
	      });
	      addParseToken('Hmm', function (input, array, config) {
	          var pos = input.length - 2;
	          array[HOUR] = toInt(input.substr(0, pos));
	          array[MINUTE] = toInt(input.substr(pos));
	      });
	      addParseToken('Hmmss', function (input, array, config) {
	          var pos1 = input.length - 4;
	          var pos2 = input.length - 2;
	          array[HOUR] = toInt(input.substr(0, pos1));
	          array[MINUTE] = toInt(input.substr(pos1, 2));
	          array[SECOND] = toInt(input.substr(pos2));
	      });

	      // LOCALES

	      function localeIsPM (input) {
	          // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	          // Using charAt should be more compatible.
	          return ((input + '').toLowerCase().charAt(0) === 'p');
	      }

	      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	      function localeMeridiem (hours, minutes, isLower) {
	          if (hours > 11) {
	              return isLower ? 'pm' : 'PM';
	          } else {
	              return isLower ? 'am' : 'AM';
	          }
	      }


	      // MOMENTS

	      // Setting the hour should keep the time, because the user explicitly
	      // specified which hour he wants. So trying to maintain the same hour (in
	      // a new timezone) makes sense. Adding/subtracting hours does not follow
	      // this rule.
	      var getSetHour = makeGetSet('Hours', true);

	      var baseConfig = {
	          calendar: defaultCalendar,
	          longDateFormat: defaultLongDateFormat,
	          invalidDate: defaultInvalidDate,
	          ordinal: defaultOrdinal,
	          ordinalParse: defaultOrdinalParse,
	          relativeTime: defaultRelativeTime,

	          months: defaultLocaleMonths,
	          monthsShort: defaultLocaleMonthsShort,

	          week: defaultLocaleWeek,

	          weekdays: defaultLocaleWeekdays,
	          weekdaysMin: defaultLocaleWeekdaysMin,
	          weekdaysShort: defaultLocaleWeekdaysShort,

	          meridiemParse: defaultLocaleMeridiemParse
	      };

	      // internal storage for locale config files
	      var locales = {};
	      var globalLocale;

	      function normalizeLocale(key) {
	          return key ? key.toLowerCase().replace('_', '-') : key;
	      }

	      // pick the locale from the array
	      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	      function chooseLocale(names) {
	          var i = 0, j, next, locale, split;

	          while (i < names.length) {
	              split = normalizeLocale(names[i]).split('-');
	              j = split.length;
	              next = normalizeLocale(names[i + 1]);
	              next = next ? next.split('-') : null;
	              while (j > 0) {
	                  locale = loadLocale(split.slice(0, j).join('-'));
	                  if (locale) {
	                      return locale;
	                  }
	                  if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                      //the next array item is better than a shallower substring of this one
	                      break;
	                  }
	                  j--;
	              }
	              i++;
	          }
	          return null;
	      }

	      function loadLocale(name) {
	          var oldLocale = null;
	          // TODO: Find a better way to register and load all the locales in Node
	          if (!locales[name] && (typeof module !== 'undefined') &&
	                  module && module.exports) {
	              try {
	                  oldLocale = globalLocale._abbr;
	                  !(function webpackMissingModule() { var e = new Error("Cannot find module \"./locale\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	                  // because defineLocale currently also sets the global locale, we
	                  // want to undo that for lazy loaded locales
	                  locale_locales__getSetGlobalLocale(oldLocale);
	              } catch (e) { }
	          }
	          return locales[name];
	      }

	      // This function will load locale and then set the global locale.  If
	      // no arguments are passed in, it will simply return the current global
	      // locale key.
	      function locale_locales__getSetGlobalLocale (key, values) {
	          var data;
	          if (key) {
	              if (isUndefined(values)) {
	                  data = locale_locales__getLocale(key);
	              }
	              else {
	                  data = defineLocale(key, values);
	              }

	              if (data) {
	                  // moment.duration._locale = moment._locale = data;
	                  globalLocale = data;
	              }
	          }

	          return globalLocale._abbr;
	      }

	      function defineLocale (name, config) {
	          if (config !== null) {
	              var parentConfig = baseConfig;
	              config.abbr = name;
	              if (locales[name] != null) {
	                  deprecateSimple('defineLocaleOverride',
	                          'use moment.updateLocale(localeName, config) to change ' +
	                          'an existing locale. moment.defineLocale(localeName, ' +
	                          'config) should only be used for creating a new locale ' +
	                          'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	                  parentConfig = locales[name]._config;
	              } else if (config.parentLocale != null) {
	                  if (locales[config.parentLocale] != null) {
	                      parentConfig = locales[config.parentLocale]._config;
	                  } else {
	                      // treat as if there is no base config
	                      deprecateSimple('parentLocaleUndefined',
	                              'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');
	                  }
	              }
	              locales[name] = new Locale(mergeConfigs(parentConfig, config));

	              // backwards compat for now: also set the locale
	              locale_locales__getSetGlobalLocale(name);

	              return locales[name];
	          } else {
	              // useful for testing
	              delete locales[name];
	              return null;
	          }
	      }

	      function updateLocale(name, config) {
	          if (config != null) {
	              var locale, parentConfig = baseConfig;
	              // MERGE
	              if (locales[name] != null) {
	                  parentConfig = locales[name]._config;
	              }
	              config = mergeConfigs(parentConfig, config);
	              locale = new Locale(config);
	              locale.parentLocale = locales[name];
	              locales[name] = locale;

	              // backwards compat for now: also set the locale
	              locale_locales__getSetGlobalLocale(name);
	          } else {
	              // pass null for config to unupdate, useful for tests
	              if (locales[name] != null) {
	                  if (locales[name].parentLocale != null) {
	                      locales[name] = locales[name].parentLocale;
	                  } else if (locales[name] != null) {
	                      delete locales[name];
	                  }
	              }
	          }
	          return locales[name];
	      }

	      // returns locale data
	      function locale_locales__getLocale (key) {
	          var locale;

	          if (key && key._locale && key._locale._abbr) {
	              key = key._locale._abbr;
	          }

	          if (!key) {
	              return globalLocale;
	          }

	          if (!isArray(key)) {
	              //short-circuit everything else
	              locale = loadLocale(key);
	              if (locale) {
	                  return locale;
	              }
	              key = [key];
	          }

	          return chooseLocale(key);
	      }

	      function locale_locales__listLocales() {
	          return keys(locales);
	      }

	      function checkOverflow (m) {
	          var overflow;
	          var a = m._a;

	          if (a && getParsingFlags(m).overflow === -2) {
	              overflow =
	                  a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                  a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                  a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                  a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                  a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                  a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                  -1;

	              if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                  overflow = DATE;
	              }
	              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                  overflow = WEEK;
	              }
	              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                  overflow = WEEKDAY;
	              }

	              getParsingFlags(m).overflow = overflow;
	          }

	          return m;
	      }

	      // iso 8601 regex
	      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

	      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	      var isoDates = [
	          ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	          ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	          ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	          ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	          ['YYYY-DDD', /\d{4}-\d{3}/],
	          ['YYYY-MM', /\d{4}-\d\d/, false],
	          ['YYYYYYMMDD', /[+-]\d{10}/],
	          ['YYYYMMDD', /\d{8}/],
	          // YYYYMM is NOT allowed by the standard
	          ['GGGG[W]WWE', /\d{4}W\d{3}/],
	          ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	          ['YYYYDDD', /\d{7}/]
	      ];

	      // iso time formats and regexes
	      var isoTimes = [
	          ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	          ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	          ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	          ['HH:mm', /\d\d:\d\d/],
	          ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	          ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	          ['HHmmss', /\d\d\d\d\d\d/],
	          ['HHmm', /\d\d\d\d/],
	          ['HH', /\d\d/]
	      ];

	      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	      // date from iso format
	      function configFromISO(config) {
	          var i, l,
	              string = config._i,
	              match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	              allowTime, dateFormat, timeFormat, tzFormat;

	          if (match) {
	              getParsingFlags(config).iso = true;

	              for (i = 0, l = isoDates.length; i < l; i++) {
	                  if (isoDates[i][1].exec(match[1])) {
	                      dateFormat = isoDates[i][0];
	                      allowTime = isoDates[i][2] !== false;
	                      break;
	                  }
	              }
	              if (dateFormat == null) {
	                  config._isValid = false;
	                  return;
	              }
	              if (match[3]) {
	                  for (i = 0, l = isoTimes.length; i < l; i++) {
	                      if (isoTimes[i][1].exec(match[3])) {
	                          // match[2] should be 'T' or space
	                          timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                          break;
	                      }
	                  }
	                  if (timeFormat == null) {
	                      config._isValid = false;
	                      return;
	                  }
	              }
	              if (!allowTime && timeFormat != null) {
	                  config._isValid = false;
	                  return;
	              }
	              if (match[4]) {
	                  if (tzRegex.exec(match[4])) {
	                      tzFormat = 'Z';
	                  } else {
	                      config._isValid = false;
	                      return;
	                  }
	              }
	              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	              configFromStringAndFormat(config);
	          } else {
	              config._isValid = false;
	          }
	      }

	      // date from iso format or fallback
	      function configFromString(config) {
	          var matched = aspNetJsonRegex.exec(config._i);

	          if (matched !== null) {
	              config._d = new Date(+matched[1]);
	              return;
	          }

	          configFromISO(config);
	          if (config._isValid === false) {
	              delete config._isValid;
	              utils_hooks__hooks.createFromInputFallback(config);
	          }
	      }

	      utils_hooks__hooks.createFromInputFallback = deprecate(
	          'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
	          'which is not reliable across all browsers and versions. Non ISO date formats are ' +
	          'discouraged and will be removed in an upcoming major release. Please refer to ' +
	          'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	          function (config) {
	              config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	          }
	      );

	      // Pick the first defined of two or three arguments.
	      function defaults(a, b, c) {
	          if (a != null) {
	              return a;
	          }
	          if (b != null) {
	              return b;
	          }
	          return c;
	      }

	      function currentDateArray(config) {
	          // hooks is actually the exported moment object
	          var nowValue = new Date(utils_hooks__hooks.now());
	          if (config._useUTC) {
	              return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	          }
	          return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	      }

	      // convert an array to a date.
	      // the array should mirror the parameters below
	      // note: all values past the year are optional and will default to the lowest possible value.
	      // [year, month, day , hour, minute, second, millisecond]
	      function configFromArray (config) {
	          var i, date, input = [], currentDate, yearToUse;

	          if (config._d) {
	              return;
	          }

	          currentDate = currentDateArray(config);

	          //compute day of the year from weeks and weekdays
	          if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	              dayOfYearFromWeekInfo(config);
	          }

	          //if the day of the year is set, figure out what it is
	          if (config._dayOfYear) {
	              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	              if (config._dayOfYear > daysInYear(yearToUse)) {
	                  getParsingFlags(config)._overflowDayOfYear = true;
	              }

	              date = createUTCDate(yearToUse, 0, config._dayOfYear);
	              config._a[MONTH] = date.getUTCMonth();
	              config._a[DATE] = date.getUTCDate();
	          }

	          // Default to current date.
	          // * if no year, month, day of month are given, default to today
	          // * if day of month is given, default month and year
	          // * if month is given, default only year
	          // * if year is given, don't default anything
	          for (i = 0; i < 3 && config._a[i] == null; ++i) {
	              config._a[i] = input[i] = currentDate[i];
	          }

	          // Zero out whatever was not defaulted, including time
	          for (; i < 7; i++) {
	              config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	          }

	          // Check for 24:00:00.000
	          if (config._a[HOUR] === 24 &&
	                  config._a[MINUTE] === 0 &&
	                  config._a[SECOND] === 0 &&
	                  config._a[MILLISECOND] === 0) {
	              config._nextDay = true;
	              config._a[HOUR] = 0;
	          }

	          config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	          // Apply timezone offset from input. The actual utcOffset can be changed
	          // with parseZone.
	          if (config._tzm != null) {
	              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	          }

	          if (config._nextDay) {
	              config._a[HOUR] = 24;
	          }
	      }

	      function dayOfYearFromWeekInfo(config) {
	          var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	          w = config._w;
	          if (w.GG != null || w.W != null || w.E != null) {
	              dow = 1;
	              doy = 4;

	              // TODO: We need to take the current isoWeekYear, but that depends on
	              // how we interpret now (local, utc, fixed offset). So create
	              // a now version of current config (take local/utc/offset flags, and
	              // create now).
	              weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	              week = defaults(w.W, 1);
	              weekday = defaults(w.E, 1);
	              if (weekday < 1 || weekday > 7) {
	                  weekdayOverflow = true;
	              }
	          } else {
	              dow = config._locale._week.dow;
	              doy = config._locale._week.doy;

	              weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	              week = defaults(w.w, 1);

	              if (w.d != null) {
	                  // weekday -- low day numbers are considered next week
	                  weekday = w.d;
	                  if (weekday < 0 || weekday > 6) {
	                      weekdayOverflow = true;
	                  }
	              } else if (w.e != null) {
	                  // local weekday -- counting starts from begining of week
	                  weekday = w.e + dow;
	                  if (w.e < 0 || w.e > 6) {
	                      weekdayOverflow = true;
	                  }
	              } else {
	                  // default to begining of week
	                  weekday = dow;
	              }
	          }
	          if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	              getParsingFlags(config)._overflowWeeks = true;
	          } else if (weekdayOverflow != null) {
	              getParsingFlags(config)._overflowWeekday = true;
	          } else {
	              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	              config._a[YEAR] = temp.year;
	              config._dayOfYear = temp.dayOfYear;
	          }
	      }

	      // constant that refers to the ISO standard
	      utils_hooks__hooks.ISO_8601 = function () {};

	      // date from string and format string
	      function configFromStringAndFormat(config) {
	          // TODO: Move this to another part of the creation flow to prevent circular deps
	          if (config._f === utils_hooks__hooks.ISO_8601) {
	              configFromISO(config);
	              return;
	          }

	          config._a = [];
	          getParsingFlags(config).empty = true;

	          // This array is used to make a Date, either with `new Date` or `Date.UTC`
	          var string = '' + config._i,
	              i, parsedInput, tokens, token, skipped,
	              stringLength = string.length,
	              totalParsedInputLength = 0;

	          tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	          for (i = 0; i < tokens.length; i++) {
	              token = tokens[i];
	              parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	              // console.log('token', token, 'parsedInput', parsedInput,
	              //         'regex', getParseRegexForToken(token, config));
	              if (parsedInput) {
	                  skipped = string.substr(0, string.indexOf(parsedInput));
	                  if (skipped.length > 0) {
	                      getParsingFlags(config).unusedInput.push(skipped);
	                  }
	                  string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                  totalParsedInputLength += parsedInput.length;
	              }
	              // don't parse if it's not a known token
	              if (formatTokenFunctions[token]) {
	                  if (parsedInput) {
	                      getParsingFlags(config).empty = false;
	                  }
	                  else {
	                      getParsingFlags(config).unusedTokens.push(token);
	                  }
	                  addTimeToArrayFromToken(token, parsedInput, config);
	              }
	              else if (config._strict && !parsedInput) {
	                  getParsingFlags(config).unusedTokens.push(token);
	              }
	          }

	          // add remaining unparsed input length to the string
	          getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	          if (string.length > 0) {
	              getParsingFlags(config).unusedInput.push(string);
	          }

	          // clear _12h flag if hour is <= 12
	          if (config._a[HOUR] <= 12 &&
	              getParsingFlags(config).bigHour === true &&
	              config._a[HOUR] > 0) {
	              getParsingFlags(config).bigHour = undefined;
	          }

	          getParsingFlags(config).parsedDateParts = config._a.slice(0);
	          getParsingFlags(config).meridiem = config._meridiem;
	          // handle meridiem
	          config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	          configFromArray(config);
	          checkOverflow(config);
	      }


	      function meridiemFixWrap (locale, hour, meridiem) {
	          var isPm;

	          if (meridiem == null) {
	              // nothing to do
	              return hour;
	          }
	          if (locale.meridiemHour != null) {
	              return locale.meridiemHour(hour, meridiem);
	          } else if (locale.isPM != null) {
	              // Fallback
	              isPm = locale.isPM(meridiem);
	              if (isPm && hour < 12) {
	                  hour += 12;
	              }
	              if (!isPm && hour === 12) {
	                  hour = 0;
	              }
	              return hour;
	          } else {
	              // this is not supposed to happen
	              return hour;
	          }
	      }

	      // date from string and array of format strings
	      function configFromStringAndArray(config) {
	          var tempConfig,
	              bestMoment,

	              scoreToBeat,
	              i,
	              currentScore;

	          if (config._f.length === 0) {
	              getParsingFlags(config).invalidFormat = true;
	              config._d = new Date(NaN);
	              return;
	          }

	          for (i = 0; i < config._f.length; i++) {
	              currentScore = 0;
	              tempConfig = copyConfig({}, config);
	              if (config._useUTC != null) {
	                  tempConfig._useUTC = config._useUTC;
	              }
	              tempConfig._f = config._f[i];
	              configFromStringAndFormat(tempConfig);

	              if (!valid__isValid(tempConfig)) {
	                  continue;
	              }

	              // if there is any input that was not parsed add a penalty for that format
	              currentScore += getParsingFlags(tempConfig).charsLeftOver;

	              //or tokens
	              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	              getParsingFlags(tempConfig).score = currentScore;

	              if (scoreToBeat == null || currentScore < scoreToBeat) {
	                  scoreToBeat = currentScore;
	                  bestMoment = tempConfig;
	              }
	          }

	          extend(config, bestMoment || tempConfig);
	      }

	      function configFromObject(config) {
	          if (config._d) {
	              return;
	          }

	          var i = normalizeObjectUnits(config._i);
	          config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	              return obj && parseInt(obj, 10);
	          });

	          configFromArray(config);
	      }

	      function createFromConfig (config) {
	          var res = new Moment(checkOverflow(prepareConfig(config)));
	          if (res._nextDay) {
	              // Adding is smart enough around DST
	              res.add(1, 'd');
	              res._nextDay = undefined;
	          }

	          return res;
	      }

	      function prepareConfig (config) {
	          var input = config._i,
	              format = config._f;

	          config._locale = config._locale || locale_locales__getLocale(config._l);

	          if (input === null || (format === undefined && input === '')) {
	              return valid__createInvalid({nullInput: true});
	          }

	          if (typeof input === 'string') {
	              config._i = input = config._locale.preparse(input);
	          }

	          if (isMoment(input)) {
	              return new Moment(checkOverflow(input));
	          } else if (isArray(format)) {
	              configFromStringAndArray(config);
	          } else if (isDate(input)) {
	              config._d = input;
	          } else if (format) {
	              configFromStringAndFormat(config);
	          }  else {
	              configFromInput(config);
	          }

	          if (!valid__isValid(config)) {
	              config._d = null;
	          }

	          return config;
	      }

	      function configFromInput(config) {
	          var input = config._i;
	          if (input === undefined) {
	              config._d = new Date(utils_hooks__hooks.now());
	          } else if (isDate(input)) {
	              config._d = new Date(input.valueOf());
	          } else if (typeof input === 'string') {
	              configFromString(config);
	          } else if (isArray(input)) {
	              config._a = map(input.slice(0), function (obj) {
	                  return parseInt(obj, 10);
	              });
	              configFromArray(config);
	          } else if (typeof(input) === 'object') {
	              configFromObject(config);
	          } else if (typeof(input) === 'number') {
	              // from milliseconds
	              config._d = new Date(input);
	          } else {
	              utils_hooks__hooks.createFromInputFallback(config);
	          }
	      }

	      function createLocalOrUTC (input, format, locale, strict, isUTC) {
	          var c = {};

	          if (typeof(locale) === 'boolean') {
	              strict = locale;
	              locale = undefined;
	          }

	          if ((isObject(input) && isObjectEmpty(input)) ||
	                  (isArray(input) && input.length === 0)) {
	              input = undefined;
	          }
	          // object construction must be done this way.
	          // https://github.com/moment/moment/issues/1423
	          c._isAMomentObject = true;
	          c._useUTC = c._isUTC = isUTC;
	          c._l = locale;
	          c._i = input;
	          c._f = format;
	          c._strict = strict;

	          return createFromConfig(c);
	      }

	      function local__createLocal (input, format, locale, strict) {
	          return createLocalOrUTC(input, format, locale, strict, false);
	      }

	      var prototypeMin = deprecate(
	          'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	          function () {
	              var other = local__createLocal.apply(null, arguments);
	              if (this.isValid() && other.isValid()) {
	                  return other < this ? this : other;
	              } else {
	                  return valid__createInvalid();
	              }
	          }
	      );

	      var prototypeMax = deprecate(
	          'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	          function () {
	              var other = local__createLocal.apply(null, arguments);
	              if (this.isValid() && other.isValid()) {
	                  return other > this ? this : other;
	              } else {
	                  return valid__createInvalid();
	              }
	          }
	      );

	      // Pick a moment m from moments so that m[fn](other) is true for all
	      // other. This relies on the function fn to be transitive.
	      //
	      // moments should either be an array of moment objects or an array, whose
	      // first element is an array of moment objects.
	      function pickBy(fn, moments) {
	          var res, i;
	          if (moments.length === 1 && isArray(moments[0])) {
	              moments = moments[0];
	          }
	          if (!moments.length) {
	              return local__createLocal();
	          }
	          res = moments[0];
	          for (i = 1; i < moments.length; ++i) {
	              if (!moments[i].isValid() || moments[i][fn](res)) {
	                  res = moments[i];
	              }
	          }
	          return res;
	      }

	      // TODO: Use [].sort instead?
	      function min () {
	          var args = [].slice.call(arguments, 0);

	          return pickBy('isBefore', args);
	      }

	      function max () {
	          var args = [].slice.call(arguments, 0);

	          return pickBy('isAfter', args);
	      }

	      var now = function () {
	          return Date.now ? Date.now() : +(new Date());
	      };

	      function Duration (duration) {
	          var normalizedInput = normalizeObjectUnits(duration),
	              years = normalizedInput.year || 0,
	              quarters = normalizedInput.quarter || 0,
	              months = normalizedInput.month || 0,
	              weeks = normalizedInput.week || 0,
	              days = normalizedInput.day || 0,
	              hours = normalizedInput.hour || 0,
	              minutes = normalizedInput.minute || 0,
	              seconds = normalizedInput.second || 0,
	              milliseconds = normalizedInput.millisecond || 0;

	          // representation for dateAddRemove
	          this._milliseconds = +milliseconds +
	              seconds * 1e3 + // 1000
	              minutes * 6e4 + // 1000 * 60
	              hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	          // Because of dateAddRemove treats 24 hours as different from a
	          // day when working around DST, we need to store them separately
	          this._days = +days +
	              weeks * 7;
	          // It is impossible translate months into days without knowing
	          // which months you are are talking about, so we have to store
	          // it separately.
	          this._months = +months +
	              quarters * 3 +
	              years * 12;

	          this._data = {};

	          this._locale = locale_locales__getLocale();

	          this._bubble();
	      }

	      function isDuration (obj) {
	          return obj instanceof Duration;
	      }

	      function absRound (number) {
	          if (number < 0) {
	              return Math.round(-1 * number) * -1;
	          } else {
	              return Math.round(number);
	          }
	      }

	      // FORMATTING

	      function offset (token, separator) {
	          addFormatToken(token, 0, 0, function () {
	              var offset = this.utcOffset();
	              var sign = '+';
	              if (offset < 0) {
	                  offset = -offset;
	                  sign = '-';
	              }
	              return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	          });
	      }

	      offset('Z', ':');
	      offset('ZZ', '');

	      // PARSING

	      addRegexToken('Z',  matchShortOffset);
	      addRegexToken('ZZ', matchShortOffset);
	      addParseToken(['Z', 'ZZ'], function (input, array, config) {
	          config._useUTC = true;
	          config._tzm = offsetFromString(matchShortOffset, input);
	      });

	      // HELPERS

	      // timezone chunker
	      // '+10:00' > ['10',  '00']
	      // '-1530'  > ['-15', '30']
	      var chunkOffset = /([\+\-]|\d\d)/gi;

	      function offsetFromString(matcher, string) {
	          var matches = ((string || '').match(matcher) || []);
	          var chunk   = matches[matches.length - 1] || [];
	          var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	          var minutes = +(parts[1] * 60) + toInt(parts[2]);

	          return parts[0] === '+' ? minutes : -minutes;
	      }

	      // Return a moment from input, that is local/utc/zone equivalent to model.
	      function cloneWithOffset(input, model) {
	          var res, diff;
	          if (model._isUTC) {
	              res = model.clone();
	              diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
	              // Use low-level api, because this fn is low-level api.
	              res._d.setTime(res._d.valueOf() + diff);
	              utils_hooks__hooks.updateOffset(res, false);
	              return res;
	          } else {
	              return local__createLocal(input).local();
	          }
	      }

	      function getDateOffset (m) {
	          // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	          // https://github.com/moment/moment/pull/1871
	          return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	      }

	      // HOOKS

	      // This function will be called whenever a moment is mutated.
	      // It is intended to keep the offset in sync with the timezone.
	      utils_hooks__hooks.updateOffset = function () {};

	      // MOMENTS

	      // keepLocalTime = true means only change the timezone, without
	      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	      // +0200, so we adjust the time as needed, to be valid.
	      //
	      // Keeping the time actually adds/subtracts (one hour)
	      // from the actual represented time. That is why we call updateOffset
	      // a second time. In case it wants us to change the offset again
	      // _changeInProgress == true case, then we have to adjust, because
	      // there is no such time in the given timezone.
	      function getSetOffset (input, keepLocalTime) {
	          var offset = this._offset || 0,
	              localAdjust;
	          if (!this.isValid()) {
	              return input != null ? this : NaN;
	          }
	          if (input != null) {
	              if (typeof input === 'string') {
	                  input = offsetFromString(matchShortOffset, input);
	              } else if (Math.abs(input) < 16) {
	                  input = input * 60;
	              }
	              if (!this._isUTC && keepLocalTime) {
	                  localAdjust = getDateOffset(this);
	              }
	              this._offset = input;
	              this._isUTC = true;
	              if (localAdjust != null) {
	                  this.add(localAdjust, 'm');
	              }
	              if (offset !== input) {
	                  if (!keepLocalTime || this._changeInProgress) {
	                      add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                  } else if (!this._changeInProgress) {
	                      this._changeInProgress = true;
	                      utils_hooks__hooks.updateOffset(this, true);
	                      this._changeInProgress = null;
	                  }
	              }
	              return this;
	          } else {
	              return this._isUTC ? offset : getDateOffset(this);
	          }
	      }

	      function getSetZone (input, keepLocalTime) {
	          if (input != null) {
	              if (typeof input !== 'string') {
	                  input = -input;
	              }

	              this.utcOffset(input, keepLocalTime);

	              return this;
	          } else {
	              return -this.utcOffset();
	          }
	      }

	      function setOffsetToUTC (keepLocalTime) {
	          return this.utcOffset(0, keepLocalTime);
	      }

	      function setOffsetToLocal (keepLocalTime) {
	          if (this._isUTC) {
	              this.utcOffset(0, keepLocalTime);
	              this._isUTC = false;

	              if (keepLocalTime) {
	                  this.subtract(getDateOffset(this), 'm');
	              }
	          }
	          return this;
	      }

	      function setOffsetToParsedOffset () {
	          if (this._tzm) {
	              this.utcOffset(this._tzm);
	          } else if (typeof this._i === 'string') {
	              var tZone = offsetFromString(matchOffset, this._i);

	              if (tZone === 0) {
	                  this.utcOffset(0, true);
	              } else {
	                  this.utcOffset(offsetFromString(matchOffset, this._i));
	              }
	          }
	          return this;
	      }

	      function hasAlignedHourOffset (input) {
	          if (!this.isValid()) {
	              return false;
	          }
	          input = input ? local__createLocal(input).utcOffset() : 0;

	          return (this.utcOffset() - input) % 60 === 0;
	      }

	      function isDaylightSavingTime () {
	          return (
	              this.utcOffset() > this.clone().month(0).utcOffset() ||
	              this.utcOffset() > this.clone().month(5).utcOffset()
	          );
	      }

	      function isDaylightSavingTimeShifted () {
	          if (!isUndefined(this._isDSTShifted)) {
	              return this._isDSTShifted;
	          }

	          var c = {};

	          copyConfig(c, this);
	          c = prepareConfig(c);

	          if (c._a) {
	              var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	              this._isDSTShifted = this.isValid() &&
	                  compareArrays(c._a, other.toArray()) > 0;
	          } else {
	              this._isDSTShifted = false;
	          }

	          return this._isDSTShifted;
	      }

	      function isLocal () {
	          return this.isValid() ? !this._isUTC : false;
	      }

	      function isUtcOffset () {
	          return this.isValid() ? this._isUTC : false;
	      }

	      function isUtc () {
	          return this.isValid() ? this._isUTC && this._offset === 0 : false;
	      }

	      // ASP.NET json date format regex
	      var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	      // and further modified to allow for strings containing both week and day
	      var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

	      function create__createDuration (input, key) {
	          var duration = input,
	              // matching against regexp is expensive, do it on demand
	              match = null,
	              sign,
	              ret,
	              diffRes;

	          if (isDuration(input)) {
	              duration = {
	                  ms : input._milliseconds,
	                  d  : input._days,
	                  M  : input._months
	              };
	          } else if (typeof input === 'number') {
	              duration = {};
	              if (key) {
	                  duration[key] = input;
	              } else {
	                  duration.milliseconds = input;
	              }
	          } else if (!!(match = aspNetRegex.exec(input))) {
	              sign = (match[1] === '-') ? -1 : 1;
	              duration = {
	                  y  : 0,
	                  d  : toInt(match[DATE])                         * sign,
	                  h  : toInt(match[HOUR])                         * sign,
	                  m  : toInt(match[MINUTE])                       * sign,
	                  s  : toInt(match[SECOND])                       * sign,
	                  ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	              };
	          } else if (!!(match = isoRegex.exec(input))) {
	              sign = (match[1] === '-') ? -1 : 1;
	              duration = {
	                  y : parseIso(match[2], sign),
	                  M : parseIso(match[3], sign),
	                  w : parseIso(match[4], sign),
	                  d : parseIso(match[5], sign),
	                  h : parseIso(match[6], sign),
	                  m : parseIso(match[7], sign),
	                  s : parseIso(match[8], sign)
	              };
	          } else if (duration == null) {// checks for null or undefined
	              duration = {};
	          } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	              diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

	              duration = {};
	              duration.ms = diffRes.milliseconds;
	              duration.M = diffRes.months;
	          }

	          ret = new Duration(duration);

	          if (isDuration(input) && hasOwnProp(input, '_locale')) {
	              ret._locale = input._locale;
	          }

	          return ret;
	      }

	      create__createDuration.fn = Duration.prototype;

	      function parseIso (inp, sign) {
	          // We'd normally use ~~inp for this, but unfortunately it also
	          // converts floats to ints.
	          // inp may be undefined, so careful calling replace on it.
	          var res = inp && parseFloat(inp.replace(',', '.'));
	          // apply sign while we're at it
	          return (isNaN(res) ? 0 : res) * sign;
	      }

	      function positiveMomentsDifference(base, other) {
	          var res = {milliseconds: 0, months: 0};

	          res.months = other.month() - base.month() +
	              (other.year() - base.year()) * 12;
	          if (base.clone().add(res.months, 'M').isAfter(other)) {
	              --res.months;
	          }

	          res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	          return res;
	      }

	      function momentsDifference(base, other) {
	          var res;
	          if (!(base.isValid() && other.isValid())) {
	              return {milliseconds: 0, months: 0};
	          }

	          other = cloneWithOffset(other, base);
	          if (base.isBefore(other)) {
	              res = positiveMomentsDifference(base, other);
	          } else {
	              res = positiveMomentsDifference(other, base);
	              res.milliseconds = -res.milliseconds;
	              res.months = -res.months;
	          }

	          return res;
	      }

	      // TODO: remove 'name' arg after deprecation is removed
	      function createAdder(direction, name) {
	          return function (val, period) {
	              var dur, tmp;
	              //invert the arguments, but complain about it
	              if (period !== null && !isNaN(+period)) {
	                  deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	                  'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	                  tmp = val; val = period; period = tmp;
	              }

	              val = typeof val === 'string' ? +val : val;
	              dur = create__createDuration(val, period);
	              add_subtract__addSubtract(this, dur, direction);
	              return this;
	          };
	      }

	      function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	          var milliseconds = duration._milliseconds,
	              days = absRound(duration._days),
	              months = absRound(duration._months);

	          if (!mom.isValid()) {
	              // No op
	              return;
	          }

	          updateOffset = updateOffset == null ? true : updateOffset;

	          if (milliseconds) {
	              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	          }
	          if (days) {
	              get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	          }
	          if (months) {
	              setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	          }
	          if (updateOffset) {
	              utils_hooks__hooks.updateOffset(mom, days || months);
	          }
	      }

	      var add_subtract__add      = createAdder(1, 'add');
	      var add_subtract__subtract = createAdder(-1, 'subtract');

	      function getCalendarFormat(myMoment, now) {
	          var diff = myMoment.diff(now, 'days', true);
	          return diff < -6 ? 'sameElse' :
	                  diff < -1 ? 'lastWeek' :
	                  diff < 0 ? 'lastDay' :
	                  diff < 1 ? 'sameDay' :
	                  diff < 2 ? 'nextDay' :
	                  diff < 7 ? 'nextWeek' : 'sameElse';
	      }

	      function moment_calendar__calendar (time, formats) {
	          // We want to compare the start of today, vs this.
	          // Getting start-of-today depends on whether we're local/utc/offset or not.
	          var now = time || local__createLocal(),
	              sod = cloneWithOffset(now, this).startOf('day'),
	              format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';

	          var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	          return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
	      }

	      function clone () {
	          return new Moment(this);
	      }

	      function isAfter (input, units) {
	          var localInput = isMoment(input) ? input : local__createLocal(input);
	          if (!(this.isValid() && localInput.isValid())) {
	              return false;
	          }
	          units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	          if (units === 'millisecond') {
	              return this.valueOf() > localInput.valueOf();
	          } else {
	              return localInput.valueOf() < this.clone().startOf(units).valueOf();
	          }
	      }

	      function isBefore (input, units) {
	          var localInput = isMoment(input) ? input : local__createLocal(input);
	          if (!(this.isValid() && localInput.isValid())) {
	              return false;
	          }
	          units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	          if (units === 'millisecond') {
	              return this.valueOf() < localInput.valueOf();
	          } else {
	              return this.clone().endOf(units).valueOf() < localInput.valueOf();
	          }
	      }

	      function isBetween (from, to, units, inclusivity) {
	          inclusivity = inclusivity || '()';
	          return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	              (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	      }

	      function isSame (input, units) {
	          var localInput = isMoment(input) ? input : local__createLocal(input),
	              inputMs;
	          if (!(this.isValid() && localInput.isValid())) {
	              return false;
	          }
	          units = normalizeUnits(units || 'millisecond');
	          if (units === 'millisecond') {
	              return this.valueOf() === localInput.valueOf();
	          } else {
	              inputMs = localInput.valueOf();
	              return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	          }
	      }

	      function isSameOrAfter (input, units) {
	          return this.isSame(input, units) || this.isAfter(input,units);
	      }

	      function isSameOrBefore (input, units) {
	          return this.isSame(input, units) || this.isBefore(input,units);
	      }

	      function diff (input, units, asFloat) {
	          var that,
	              zoneDelta,
	              delta, output;

	          if (!this.isValid()) {
	              return NaN;
	          }

	          that = cloneWithOffset(input, this);

	          if (!that.isValid()) {
	              return NaN;
	          }

	          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	          units = normalizeUnits(units);

	          if (units === 'year' || units === 'month' || units === 'quarter') {
	              output = monthDiff(this, that);
	              if (units === 'quarter') {
	                  output = output / 3;
	              } else if (units === 'year') {
	                  output = output / 12;
	              }
	          } else {
	              delta = this - that;
	              output = units === 'second' ? delta / 1e3 : // 1000
	                  units === 'minute' ? delta / 6e4 : // 1000 * 60
	                  units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                  units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                  units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                  delta;
	          }
	          return asFloat ? output : absFloor(output);
	      }

	      function monthDiff (a, b) {
	          // difference in months
	          var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	              // b is in (anchor - 1 month, anchor + 1 month)
	              anchor = a.clone().add(wholeMonthDiff, 'months'),
	              anchor2, adjust;

	          if (b - anchor < 0) {
	              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	              // linear across the month
	              adjust = (b - anchor) / (anchor - anchor2);
	          } else {
	              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	              // linear across the month
	              adjust = (b - anchor) / (anchor2 - anchor);
	          }

	          //check for negative zero, return zero if negative zero
	          return -(wholeMonthDiff + adjust) || 0;
	      }

	      utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	      utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	      function toString () {
	          return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	      }

	      function moment_format__toISOString () {
	          var m = this.clone().utc();
	          if (0 < m.year() && m.year() <= 9999) {
	              if (isFunction(Date.prototype.toISOString)) {
	                  // native implementation is ~50x faster, use it when we can
	                  return this.toDate().toISOString();
	              } else {
	                  return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	              }
	          } else {
	              return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	          }
	      }

	      function format (inputString) {
	          if (!inputString) {
	              inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
	          }
	          var output = formatMoment(this, inputString);
	          return this.localeData().postformat(output);
	      }

	      function from (time, withoutSuffix) {
	          if (this.isValid() &&
	                  ((isMoment(time) && time.isValid()) ||
	                   local__createLocal(time).isValid())) {
	              return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	          } else {
	              return this.localeData().invalidDate();
	          }
	      }

	      function fromNow (withoutSuffix) {
	          return this.from(local__createLocal(), withoutSuffix);
	      }

	      function to (time, withoutSuffix) {
	          if (this.isValid() &&
	                  ((isMoment(time) && time.isValid()) ||
	                   local__createLocal(time).isValid())) {
	              return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	          } else {
	              return this.localeData().invalidDate();
	          }
	      }

	      function toNow (withoutSuffix) {
	          return this.to(local__createLocal(), withoutSuffix);
	      }

	      // If passed a locale key, it will set the locale for this
	      // instance.  Otherwise, it will return the locale configuration
	      // variables for this instance.
	      function locale (key) {
	          var newLocaleData;

	          if (key === undefined) {
	              return this._locale._abbr;
	          } else {
	              newLocaleData = locale_locales__getLocale(key);
	              if (newLocaleData != null) {
	                  this._locale = newLocaleData;
	              }
	              return this;
	          }
	      }

	      var lang = deprecate(
	          'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	          function (key) {
	              if (key === undefined) {
	                  return this.localeData();
	              } else {
	                  return this.locale(key);
	              }
	          }
	      );

	      function localeData () {
	          return this._locale;
	      }

	      function startOf (units) {
	          units = normalizeUnits(units);
	          // the following switch intentionally omits break keywords
	          // to utilize falling through the cases.
	          switch (units) {
	              case 'year':
	                  this.month(0);
	                  /* falls through */
	              case 'quarter':
	              case 'month':
	                  this.date(1);
	                  /* falls through */
	              case 'week':
	              case 'isoWeek':
	              case 'day':
	              case 'date':
	                  this.hours(0);
	                  /* falls through */
	              case 'hour':
	                  this.minutes(0);
	                  /* falls through */
	              case 'minute':
	                  this.seconds(0);
	                  /* falls through */
	              case 'second':
	                  this.milliseconds(0);
	          }

	          // weeks are a special case
	          if (units === 'week') {
	              this.weekday(0);
	          }
	          if (units === 'isoWeek') {
	              this.isoWeekday(1);
	          }

	          // quarters are also special
	          if (units === 'quarter') {
	              this.month(Math.floor(this.month() / 3) * 3);
	          }

	          return this;
	      }

	      function endOf (units) {
	          units = normalizeUnits(units);
	          if (units === undefined || units === 'millisecond') {
	              return this;
	          }

	          // 'date' is an alias for 'day', so it should be considered as such.
	          if (units === 'date') {
	              units = 'day';
	          }

	          return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	      }

	      function to_type__valueOf () {
	          return this._d.valueOf() - ((this._offset || 0) * 60000);
	      }

	      function unix () {
	          return Math.floor(this.valueOf() / 1000);
	      }

	      function toDate () {
	          return new Date(this.valueOf());
	      }

	      function toArray () {
	          var m = this;
	          return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	      }

	      function toObject () {
	          var m = this;
	          return {
	              years: m.year(),
	              months: m.month(),
	              date: m.date(),
	              hours: m.hours(),
	              minutes: m.minutes(),
	              seconds: m.seconds(),
	              milliseconds: m.milliseconds()
	          };
	      }

	      function toJSON () {
	          // new Date(NaN).toJSON() === null
	          return this.isValid() ? this.toISOString() : null;
	      }

	      function moment_valid__isValid () {
	          return valid__isValid(this);
	      }

	      function parsingFlags () {
	          return extend({}, getParsingFlags(this));
	      }

	      function invalidAt () {
	          return getParsingFlags(this).overflow;
	      }

	      function creationData() {
	          return {
	              input: this._i,
	              format: this._f,
	              locale: this._locale,
	              isUTC: this._isUTC,
	              strict: this._strict
	          };
	      }

	      // FORMATTING

	      addFormatToken(0, ['gg', 2], 0, function () {
	          return this.weekYear() % 100;
	      });

	      addFormatToken(0, ['GG', 2], 0, function () {
	          return this.isoWeekYear() % 100;
	      });

	      function addWeekYearFormatToken (token, getter) {
	          addFormatToken(0, [token, token.length], 0, getter);
	      }

	      addWeekYearFormatToken('gggg',     'weekYear');
	      addWeekYearFormatToken('ggggg',    'weekYear');
	      addWeekYearFormatToken('GGGG',  'isoWeekYear');
	      addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	      // ALIASES

	      addUnitAlias('weekYear', 'gg');
	      addUnitAlias('isoWeekYear', 'GG');

	      // PRIORITY

	      addUnitPriority('weekYear', 1);
	      addUnitPriority('isoWeekYear', 1);


	      // PARSING

	      addRegexToken('G',      matchSigned);
	      addRegexToken('g',      matchSigned);
	      addRegexToken('GG',     match1to2, match2);
	      addRegexToken('gg',     match1to2, match2);
	      addRegexToken('GGGG',   match1to4, match4);
	      addRegexToken('gggg',   match1to4, match4);
	      addRegexToken('GGGGG',  match1to6, match6);
	      addRegexToken('ggggg',  match1to6, match6);

	      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	          week[token.substr(0, 2)] = toInt(input);
	      });

	      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	          week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	      });

	      // MOMENTS

	      function getSetWeekYear (input) {
	          return getSetWeekYearHelper.call(this,
	                  input,
	                  this.week(),
	                  this.weekday(),
	                  this.localeData()._week.dow,
	                  this.localeData()._week.doy);
	      }

	      function getSetISOWeekYear (input) {
	          return getSetWeekYearHelper.call(this,
	                  input, this.isoWeek(), this.isoWeekday(), 1, 4);
	      }

	      function getISOWeeksInYear () {
	          return weeksInYear(this.year(), 1, 4);
	      }

	      function getWeeksInYear () {
	          var weekInfo = this.localeData()._week;
	          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	      }

	      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	          var weeksTarget;
	          if (input == null) {
	              return weekOfYear(this, dow, doy).year;
	          } else {
	              weeksTarget = weeksInYear(input, dow, doy);
	              if (week > weeksTarget) {
	                  week = weeksTarget;
	              }
	              return setWeekAll.call(this, input, week, weekday, dow, doy);
	          }
	      }

	      function setWeekAll(weekYear, week, weekday, dow, doy) {
	          var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	              date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	          this.year(date.getUTCFullYear());
	          this.month(date.getUTCMonth());
	          this.date(date.getUTCDate());
	          return this;
	      }

	      // FORMATTING

	      addFormatToken('Q', 0, 'Qo', 'quarter');

	      // ALIASES

	      addUnitAlias('quarter', 'Q');

	      // PRIORITY

	      addUnitPriority('quarter', 7);

	      // PARSING

	      addRegexToken('Q', match1);
	      addParseToken('Q', function (input, array) {
	          array[MONTH] = (toInt(input) - 1) * 3;
	      });

	      // MOMENTS

	      function getSetQuarter (input) {
	          return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	      }

	      // FORMATTING

	      addFormatToken('D', ['DD', 2], 'Do', 'date');

	      // ALIASES

	      addUnitAlias('date', 'D');

	      // PRIOROITY
	      addUnitPriority('date', 9);

	      // PARSING

	      addRegexToken('D',  match1to2);
	      addRegexToken('DD', match1to2, match2);
	      addRegexToken('Do', function (isStrict, locale) {
	          return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	      });

	      addParseToken(['D', 'DD'], DATE);
	      addParseToken('Do', function (input, array) {
	          array[DATE] = toInt(input.match(match1to2)[0], 10);
	      });

	      // MOMENTS

	      var getSetDayOfMonth = makeGetSet('Date', true);

	      // FORMATTING

	      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	      // ALIASES

	      addUnitAlias('dayOfYear', 'DDD');

	      // PRIORITY
	      addUnitPriority('dayOfYear', 4);

	      // PARSING

	      addRegexToken('DDD',  match1to3);
	      addRegexToken('DDDD', match3);
	      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	          config._dayOfYear = toInt(input);
	      });

	      // HELPERS

	      // MOMENTS

	      function getSetDayOfYear (input) {
	          var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	          return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	      }

	      // FORMATTING

	      addFormatToken('m', ['mm', 2], 0, 'minute');

	      // ALIASES

	      addUnitAlias('minute', 'm');

	      // PRIORITY

	      addUnitPriority('minute', 14);

	      // PARSING

	      addRegexToken('m',  match1to2);
	      addRegexToken('mm', match1to2, match2);
	      addParseToken(['m', 'mm'], MINUTE);

	      // MOMENTS

	      var getSetMinute = makeGetSet('Minutes', false);

	      // FORMATTING

	      addFormatToken('s', ['ss', 2], 0, 'second');

	      // ALIASES

	      addUnitAlias('second', 's');

	      // PRIORITY

	      addUnitPriority('second', 15);

	      // PARSING

	      addRegexToken('s',  match1to2);
	      addRegexToken('ss', match1to2, match2);
	      addParseToken(['s', 'ss'], SECOND);

	      // MOMENTS

	      var getSetSecond = makeGetSet('Seconds', false);

	      // FORMATTING

	      addFormatToken('S', 0, 0, function () {
	          return ~~(this.millisecond() / 100);
	      });

	      addFormatToken(0, ['SS', 2], 0, function () {
	          return ~~(this.millisecond() / 10);
	      });

	      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	      addFormatToken(0, ['SSSS', 4], 0, function () {
	          return this.millisecond() * 10;
	      });
	      addFormatToken(0, ['SSSSS', 5], 0, function () {
	          return this.millisecond() * 100;
	      });
	      addFormatToken(0, ['SSSSSS', 6], 0, function () {
	          return this.millisecond() * 1000;
	      });
	      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	          return this.millisecond() * 10000;
	      });
	      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	          return this.millisecond() * 100000;
	      });
	      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	          return this.millisecond() * 1000000;
	      });


	      // ALIASES

	      addUnitAlias('millisecond', 'ms');

	      // PRIORITY

	      addUnitPriority('millisecond', 16);

	      // PARSING

	      addRegexToken('S',    match1to3, match1);
	      addRegexToken('SS',   match1to3, match2);
	      addRegexToken('SSS',  match1to3, match3);

	      var token;
	      for (token = 'SSSS'; token.length <= 9; token += 'S') {
	          addRegexToken(token, matchUnsigned);
	      }

	      function parseMs(input, array) {
	          array[MILLISECOND] = toInt(('0.' + input) * 1000);
	      }

	      for (token = 'S'; token.length <= 9; token += 'S') {
	          addParseToken(token, parseMs);
	      }
	      // MOMENTS

	      var getSetMillisecond = makeGetSet('Milliseconds', false);

	      // FORMATTING

	      addFormatToken('z',  0, 0, 'zoneAbbr');
	      addFormatToken('zz', 0, 0, 'zoneName');

	      // MOMENTS

	      function getZoneAbbr () {
	          return this._isUTC ? 'UTC' : '';
	      }

	      function getZoneName () {
	          return this._isUTC ? 'Coordinated Universal Time' : '';
	      }

	      var momentPrototype__proto = Moment.prototype;

	      momentPrototype__proto.add               = add_subtract__add;
	      momentPrototype__proto.calendar          = moment_calendar__calendar;
	      momentPrototype__proto.clone             = clone;
	      momentPrototype__proto.diff              = diff;
	      momentPrototype__proto.endOf             = endOf;
	      momentPrototype__proto.format            = format;
	      momentPrototype__proto.from              = from;
	      momentPrototype__proto.fromNow           = fromNow;
	      momentPrototype__proto.to                = to;
	      momentPrototype__proto.toNow             = toNow;
	      momentPrototype__proto.get               = stringGet;
	      momentPrototype__proto.invalidAt         = invalidAt;
	      momentPrototype__proto.isAfter           = isAfter;
	      momentPrototype__proto.isBefore          = isBefore;
	      momentPrototype__proto.isBetween         = isBetween;
	      momentPrototype__proto.isSame            = isSame;
	      momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
	      momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
	      momentPrototype__proto.isValid           = moment_valid__isValid;
	      momentPrototype__proto.lang              = lang;
	      momentPrototype__proto.locale            = locale;
	      momentPrototype__proto.localeData        = localeData;
	      momentPrototype__proto.max               = prototypeMax;
	      momentPrototype__proto.min               = prototypeMin;
	      momentPrototype__proto.parsingFlags      = parsingFlags;
	      momentPrototype__proto.set               = stringSet;
	      momentPrototype__proto.startOf           = startOf;
	      momentPrototype__proto.subtract          = add_subtract__subtract;
	      momentPrototype__proto.toArray           = toArray;
	      momentPrototype__proto.toObject          = toObject;
	      momentPrototype__proto.toDate            = toDate;
	      momentPrototype__proto.toISOString       = moment_format__toISOString;
	      momentPrototype__proto.toJSON            = toJSON;
	      momentPrototype__proto.toString          = toString;
	      momentPrototype__proto.unix              = unix;
	      momentPrototype__proto.valueOf           = to_type__valueOf;
	      momentPrototype__proto.creationData      = creationData;

	      // Year
	      momentPrototype__proto.year       = getSetYear;
	      momentPrototype__proto.isLeapYear = getIsLeapYear;

	      // Week Year
	      momentPrototype__proto.weekYear    = getSetWeekYear;
	      momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

	      // Quarter
	      momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

	      // Month
	      momentPrototype__proto.month       = getSetMonth;
	      momentPrototype__proto.daysInMonth = getDaysInMonth;

	      // Week
	      momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	      momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	      momentPrototype__proto.weeksInYear    = getWeeksInYear;
	      momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

	      // Day
	      momentPrototype__proto.date       = getSetDayOfMonth;
	      momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	      momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	      momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	      momentPrototype__proto.dayOfYear  = getSetDayOfYear;

	      // Hour
	      momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

	      // Minute
	      momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

	      // Second
	      momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

	      // Millisecond
	      momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

	      // Offset
	      momentPrototype__proto.utcOffset            = getSetOffset;
	      momentPrototype__proto.utc                  = setOffsetToUTC;
	      momentPrototype__proto.local                = setOffsetToLocal;
	      momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	      momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	      momentPrototype__proto.isDST                = isDaylightSavingTime;
	      momentPrototype__proto.isLocal              = isLocal;
	      momentPrototype__proto.isUtcOffset          = isUtcOffset;
	      momentPrototype__proto.isUtc                = isUtc;
	      momentPrototype__proto.isUTC                = isUtc;

	      // Timezone
	      momentPrototype__proto.zoneAbbr = getZoneAbbr;
	      momentPrototype__proto.zoneName = getZoneName;

	      // Deprecations
	      momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	      momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	      momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	      momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	      momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	      var momentPrototype = momentPrototype__proto;

	      function moment__createUnix (input) {
	          return local__createLocal(input * 1000);
	      }

	      function moment__createInZone () {
	          return local__createLocal.apply(null, arguments).parseZone();
	      }

	      function preParsePostFormat (string) {
	          return string;
	      }

	      var prototype__proto = Locale.prototype;

	      prototype__proto.calendar        = locale_calendar__calendar;
	      prototype__proto.longDateFormat  = longDateFormat;
	      prototype__proto.invalidDate     = invalidDate;
	      prototype__proto.ordinal         = ordinal;
	      prototype__proto.preparse        = preParsePostFormat;
	      prototype__proto.postformat      = preParsePostFormat;
	      prototype__proto.relativeTime    = relative__relativeTime;
	      prototype__proto.pastFuture      = pastFuture;
	      prototype__proto.set             = locale_set__set;

	      // Month
	      prototype__proto.months            =        localeMonths;
	      prototype__proto.monthsShort       =        localeMonthsShort;
	      prototype__proto.monthsParse       =        localeMonthsParse;
	      prototype__proto.monthsRegex       = monthsRegex;
	      prototype__proto.monthsShortRegex  = monthsShortRegex;

	      // Week
	      prototype__proto.week = localeWeek;
	      prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	      prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

	      // Day of Week
	      prototype__proto.weekdays       =        localeWeekdays;
	      prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	      prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	      prototype__proto.weekdaysParse  =        localeWeekdaysParse;

	      prototype__proto.weekdaysRegex       =        weekdaysRegex;
	      prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;
	      prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;

	      // Hours
	      prototype__proto.isPM = localeIsPM;
	      prototype__proto.meridiem = localeMeridiem;

	      function lists__get (format, index, field, setter) {
	          var locale = locale_locales__getLocale();
	          var utc = create_utc__createUTC().set(setter, index);
	          return locale[field](utc, format);
	      }

	      function listMonthsImpl (format, index, field) {
	          if (typeof format === 'number') {
	              index = format;
	              format = undefined;
	          }

	          format = format || '';

	          if (index != null) {
	              return lists__get(format, index, field, 'month');
	          }

	          var i;
	          var out = [];
	          for (i = 0; i < 12; i++) {
	              out[i] = lists__get(format, i, field, 'month');
	          }
	          return out;
	      }

	      // ()
	      // (5)
	      // (fmt, 5)
	      // (fmt)
	      // (true)
	      // (true, 5)
	      // (true, fmt, 5)
	      // (true, fmt)
	      function listWeekdaysImpl (localeSorted, format, index, field) {
	          if (typeof localeSorted === 'boolean') {
	              if (typeof format === 'number') {
	                  index = format;
	                  format = undefined;
	              }

	              format = format || '';
	          } else {
	              format = localeSorted;
	              index = format;
	              localeSorted = false;

	              if (typeof format === 'number') {
	                  index = format;
	                  format = undefined;
	              }

	              format = format || '';
	          }

	          var locale = locale_locales__getLocale(),
	              shift = localeSorted ? locale._week.dow : 0;

	          if (index != null) {
	              return lists__get(format, (index + shift) % 7, field, 'day');
	          }

	          var i;
	          var out = [];
	          for (i = 0; i < 7; i++) {
	              out[i] = lists__get(format, (i + shift) % 7, field, 'day');
	          }
	          return out;
	      }

	      function lists__listMonths (format, index) {
	          return listMonthsImpl(format, index, 'months');
	      }

	      function lists__listMonthsShort (format, index) {
	          return listMonthsImpl(format, index, 'monthsShort');
	      }

	      function lists__listWeekdays (localeSorted, format, index) {
	          return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	      }

	      function lists__listWeekdaysShort (localeSorted, format, index) {
	          return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	      }

	      function lists__listWeekdaysMin (localeSorted, format, index) {
	          return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	      }

	      locale_locales__getSetGlobalLocale('en', {
	          ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	          ordinal : function (number) {
	              var b = number % 10,
	                  output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                  (b === 1) ? 'st' :
	                  (b === 2) ? 'nd' :
	                  (b === 3) ? 'rd' : 'th';
	              return number + output;
	          }
	      });

	      // Side effect imports
	      utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	      utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

	      var mathAbs = Math.abs;

	      function duration_abs__abs () {
	          var data           = this._data;

	          this._milliseconds = mathAbs(this._milliseconds);
	          this._days         = mathAbs(this._days);
	          this._months       = mathAbs(this._months);

	          data.milliseconds  = mathAbs(data.milliseconds);
	          data.seconds       = mathAbs(data.seconds);
	          data.minutes       = mathAbs(data.minutes);
	          data.hours         = mathAbs(data.hours);
	          data.months        = mathAbs(data.months);
	          data.years         = mathAbs(data.years);

	          return this;
	      }

	      function duration_add_subtract__addSubtract (duration, input, value, direction) {
	          var other = create__createDuration(input, value);

	          duration._milliseconds += direction * other._milliseconds;
	          duration._days         += direction * other._days;
	          duration._months       += direction * other._months;

	          return duration._bubble();
	      }

	      // supports only 2.0-style add(1, 's') or add(duration)
	      function duration_add_subtract__add (input, value) {
	          return duration_add_subtract__addSubtract(this, input, value, 1);
	      }

	      // supports only 2.0-style subtract(1, 's') or subtract(duration)
	      function duration_add_subtract__subtract (input, value) {
	          return duration_add_subtract__addSubtract(this, input, value, -1);
	      }

	      function absCeil (number) {
	          if (number < 0) {
	              return Math.floor(number);
	          } else {
	              return Math.ceil(number);
	          }
	      }

	      function bubble () {
	          var milliseconds = this._milliseconds;
	          var days         = this._days;
	          var months       = this._months;
	          var data         = this._data;
	          var seconds, minutes, hours, years, monthsFromDays;

	          // if we have a mix of positive and negative values, bubble down first
	          // check: https://github.com/moment/moment/issues/2166
	          if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                  (milliseconds <= 0 && days <= 0 && months <= 0))) {
	              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	              days = 0;
	              months = 0;
	          }

	          // The following code bubbles up values, see the tests for
	          // examples of what that means.
	          data.milliseconds = milliseconds % 1000;

	          seconds           = absFloor(milliseconds / 1000);
	          data.seconds      = seconds % 60;

	          minutes           = absFloor(seconds / 60);
	          data.minutes      = minutes % 60;

	          hours             = absFloor(minutes / 60);
	          data.hours        = hours % 24;

	          days += absFloor(hours / 24);

	          // convert days to months
	          monthsFromDays = absFloor(daysToMonths(days));
	          months += monthsFromDays;
	          days -= absCeil(monthsToDays(monthsFromDays));

	          // 12 months -> 1 year
	          years = absFloor(months / 12);
	          months %= 12;

	          data.days   = days;
	          data.months = months;
	          data.years  = years;

	          return this;
	      }

	      function daysToMonths (days) {
	          // 400 years have 146097 days (taking into account leap year rules)
	          // 400 years have 12 months === 4800
	          return days * 4800 / 146097;
	      }

	      function monthsToDays (months) {
	          // the reverse of daysToMonths
	          return months * 146097 / 4800;
	      }

	      function as (units) {
	          var days;
	          var months;
	          var milliseconds = this._milliseconds;

	          units = normalizeUnits(units);

	          if (units === 'month' || units === 'year') {
	              days   = this._days   + milliseconds / 864e5;
	              months = this._months + daysToMonths(days);
	              return units === 'month' ? months : months / 12;
	          } else {
	              // handle milliseconds separately because of floating point math errors (issue #1867)
	              days = this._days + Math.round(monthsToDays(this._months));
	              switch (units) {
	                  case 'week'   : return days / 7     + milliseconds / 6048e5;
	                  case 'day'    : return days         + milliseconds / 864e5;
	                  case 'hour'   : return days * 24    + milliseconds / 36e5;
	                  case 'minute' : return days * 1440  + milliseconds / 6e4;
	                  case 'second' : return days * 86400 + milliseconds / 1000;
	                  // Math.floor prevents floating point math errors here
	                  case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                  default: throw new Error('Unknown unit ' + units);
	              }
	          }
	      }

	      // TODO: Use this.as('ms')?
	      function duration_as__valueOf () {
	          return (
	              this._milliseconds +
	              this._days * 864e5 +
	              (this._months % 12) * 2592e6 +
	              toInt(this._months / 12) * 31536e6
	          );
	      }

	      function makeAs (alias) {
	          return function () {
	              return this.as(alias);
	          };
	      }

	      var asMilliseconds = makeAs('ms');
	      var asSeconds      = makeAs('s');
	      var asMinutes      = makeAs('m');
	      var asHours        = makeAs('h');
	      var asDays         = makeAs('d');
	      var asWeeks        = makeAs('w');
	      var asMonths       = makeAs('M');
	      var asYears        = makeAs('y');

	      function duration_get__get (units) {
	          units = normalizeUnits(units);
	          return this[units + 's']();
	      }

	      function makeGetter(name) {
	          return function () {
	              return this._data[name];
	          };
	      }

	      var milliseconds = makeGetter('milliseconds');
	      var seconds      = makeGetter('seconds');
	      var minutes      = makeGetter('minutes');
	      var hours        = makeGetter('hours');
	      var days         = makeGetter('days');
	      var months       = makeGetter('months');
	      var years        = makeGetter('years');

	      function weeks () {
	          return absFloor(this.days() / 7);
	      }

	      var round = Math.round;
	      var thresholds = {
	          s: 45,  // seconds to minute
	          m: 45,  // minutes to hour
	          h: 22,  // hours to day
	          d: 26,  // days to month
	          M: 11   // months to year
	      };

	      // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	          return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	      }

	      function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	          var duration = create__createDuration(posNegDuration).abs();
	          var seconds  = round(duration.as('s'));
	          var minutes  = round(duration.as('m'));
	          var hours    = round(duration.as('h'));
	          var days     = round(duration.as('d'));
	          var months   = round(duration.as('M'));
	          var years    = round(duration.as('y'));

	          var a = seconds < thresholds.s && ['s', seconds]  ||
	                  minutes <= 1           && ['m']           ||
	                  minutes < thresholds.m && ['mm', minutes] ||
	                  hours   <= 1           && ['h']           ||
	                  hours   < thresholds.h && ['hh', hours]   ||
	                  days    <= 1           && ['d']           ||
	                  days    < thresholds.d && ['dd', days]    ||
	                  months  <= 1           && ['M']           ||
	                  months  < thresholds.M && ['MM', months]  ||
	                  years   <= 1           && ['y']           || ['yy', years];

	          a[2] = withoutSuffix;
	          a[3] = +posNegDuration > 0;
	          a[4] = locale;
	          return substituteTimeAgo.apply(null, a);
	      }

	      // This function allows you to set the rounding function for relative time strings
	      function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {
	          if (roundingFunction === undefined) {
	              return round;
	          }
	          if (typeof(roundingFunction) === 'function') {
	              round = roundingFunction;
	              return true;
	          }
	          return false;
	      }

	      // This function allows you to set a threshold for relative time strings
	      function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	          if (thresholds[threshold] === undefined) {
	              return false;
	          }
	          if (limit === undefined) {
	              return thresholds[threshold];
	          }
	          thresholds[threshold] = limit;
	          return true;
	      }

	      function humanize (withSuffix) {
	          var locale = this.localeData();
	          var output = duration_humanize__relativeTime(this, !withSuffix, locale);

	          if (withSuffix) {
	              output = locale.pastFuture(+this, output);
	          }

	          return locale.postformat(output);
	      }

	      var iso_string__abs = Math.abs;

	      function iso_string__toISOString() {
	          // for ISO strings we do not use the normal bubbling rules:
	          //  * milliseconds bubble up until they become hours
	          //  * days do not bubble at all
	          //  * months bubble up until they become years
	          // This is because there is no context-free conversion between hours and days
	          // (think of clock changes)
	          // and also not between days and months (28-31 days per month)
	          var seconds = iso_string__abs(this._milliseconds) / 1000;
	          var days         = iso_string__abs(this._days);
	          var months       = iso_string__abs(this._months);
	          var minutes, hours, years;

	          // 3600 seconds -> 60 minutes -> 1 hour
	          minutes           = absFloor(seconds / 60);
	          hours             = absFloor(minutes / 60);
	          seconds %= 60;
	          minutes %= 60;

	          // 12 months -> 1 year
	          years  = absFloor(months / 12);
	          months %= 12;


	          // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	          var Y = years;
	          var M = months;
	          var D = days;
	          var h = hours;
	          var m = minutes;
	          var s = seconds;
	          var total = this.asSeconds();

	          if (!total) {
	              // this is the same as C#'s (Noda) and python (isodate)...
	              // but not other JS (goog.date)
	              return 'P0D';
	          }

	          return (total < 0 ? '-' : '') +
	              'P' +
	              (Y ? Y + 'Y' : '') +
	              (M ? M + 'M' : '') +
	              (D ? D + 'D' : '') +
	              ((h || m || s) ? 'T' : '') +
	              (h ? h + 'H' : '') +
	              (m ? m + 'M' : '') +
	              (s ? s + 'S' : '');
	      }

	      var duration_prototype__proto = Duration.prototype;

	      duration_prototype__proto.abs            = duration_abs__abs;
	      duration_prototype__proto.add            = duration_add_subtract__add;
	      duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	      duration_prototype__proto.as             = as;
	      duration_prototype__proto.asMilliseconds = asMilliseconds;
	      duration_prototype__proto.asSeconds      = asSeconds;
	      duration_prototype__proto.asMinutes      = asMinutes;
	      duration_prototype__proto.asHours        = asHours;
	      duration_prototype__proto.asDays         = asDays;
	      duration_prototype__proto.asWeeks        = asWeeks;
	      duration_prototype__proto.asMonths       = asMonths;
	      duration_prototype__proto.asYears        = asYears;
	      duration_prototype__proto.valueOf        = duration_as__valueOf;
	      duration_prototype__proto._bubble        = bubble;
	      duration_prototype__proto.get            = duration_get__get;
	      duration_prototype__proto.milliseconds   = milliseconds;
	      duration_prototype__proto.seconds        = seconds;
	      duration_prototype__proto.minutes        = minutes;
	      duration_prototype__proto.hours          = hours;
	      duration_prototype__proto.days           = days;
	      duration_prototype__proto.weeks          = weeks;
	      duration_prototype__proto.months         = months;
	      duration_prototype__proto.years          = years;
	      duration_prototype__proto.humanize       = humanize;
	      duration_prototype__proto.toISOString    = iso_string__toISOString;
	      duration_prototype__proto.toString       = iso_string__toISOString;
	      duration_prototype__proto.toJSON         = iso_string__toISOString;
	      duration_prototype__proto.locale         = locale;
	      duration_prototype__proto.localeData     = localeData;

	      // Deprecations
	      duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	      duration_prototype__proto.lang = lang;

	      // Side effect imports

	      // FORMATTING

	      addFormatToken('X', 0, 0, 'unix');
	      addFormatToken('x', 0, 0, 'valueOf');

	      // PARSING

	      addRegexToken('x', matchSigned);
	      addRegexToken('X', matchTimestamp);
	      addParseToken('X', function (input, array, config) {
	          config._d = new Date(parseFloat(input, 10) * 1000);
	      });
	      addParseToken('x', function (input, array, config) {
	          config._d = new Date(toInt(input));
	      });

	      // Side effect imports


	      utils_hooks__hooks.version = '2.15.2';

	      setHookCallback(local__createLocal);

	      utils_hooks__hooks.fn                    = momentPrototype;
	      utils_hooks__hooks.min                   = min;
	      utils_hooks__hooks.max                   = max;
	      utils_hooks__hooks.now                   = now;
	      utils_hooks__hooks.utc                   = create_utc__createUTC;
	      utils_hooks__hooks.unix                  = moment__createUnix;
	      utils_hooks__hooks.months                = lists__listMonths;
	      utils_hooks__hooks.isDate                = isDate;
	      utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	      utils_hooks__hooks.invalid               = valid__createInvalid;
	      utils_hooks__hooks.duration              = create__createDuration;
	      utils_hooks__hooks.isMoment              = isMoment;
	      utils_hooks__hooks.weekdays              = lists__listWeekdays;
	      utils_hooks__hooks.parseZone             = moment__createInZone;
	      utils_hooks__hooks.localeData            = locale_locales__getLocale;
	      utils_hooks__hooks.isDuration            = isDuration;
	      utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	      utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	      utils_hooks__hooks.defineLocale          = defineLocale;
	      utils_hooks__hooks.updateLocale          = updateLocale;
	      utils_hooks__hooks.locales               = locale_locales__listLocales;
	      utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	      utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	      utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;
	      utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
	      utils_hooks__hooks.calendarFormat        = getCalendarFormat;
	      utils_hooks__hooks.prototype             = momentPrototype;

	      var _moment = utils_hooks__hooks;

	      return _moment;

	  }));
	  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))

	/***/ },
	/* 4 */
	/***/ function(module, exports) {

	  module.exports = function(module) {
	  	if(!module.webpackPolyfill) {
	  		module.deprecate = function() {};
	  		module.paths = [];
	  		// module.parent = undefined by default
	  		module.children = [];
	  		module.webpackPolyfill = 1;
	  	}
	  	return module;
	  }


	/***/ },
	/* 5 */
	/***/ function(module, exports) {

	  function webpackContext(req) {
	  	throw new Error("Cannot find module '" + req + "'.");
	  }
	  webpackContext.keys = function() { return []; };
	  webpackContext.resolve = webpackContext;
	  module.exports = webpackContext;
	  webpackContext.id = 5;


	/***/ },
	/* 6 */
	/***/ function(module, exports) {

	  /* WEBPACK VAR INJECTION */(function(global) {'use strict';

	  var _rng;

	  var globalVar = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;

	  if (globalVar && globalVar.crypto && crypto.getRandomValues) {
	    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	    // Moderately fast, high quality
	    var _rnds8 = new Uint8Array(16);
	    _rng = function whatwgRNG() {
	      crypto.getRandomValues(_rnds8);
	      return _rnds8;
	    };
	  }

	  if (!_rng) {
	    // Math.random()-based (RNG)
	    //
	    // If all else fails, use Math.random().  It's fast, but is of unspecified
	    // quality.
	    var _rnds = new Array(16);
	    _rng = function _rng() {
	      for (var i = 0, r; i < 16; i++) {
	        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	      }

	      return _rnds;
	    };
	  }

	  //     uuid.js
	  //
	  //     Copyright (c) 2010-2012 Robert Kieffer
	  //     MIT License - http://opensource.org/licenses/mit-license.php

	  // Unique ID creation requires a high quality random # generator.  We feature
	  // detect to determine the best RNG source, normalizing to a function that
	  // returns 128-bits of randomness, since that's what's usually required

	  //var _rng = require('./rng');

	  // Maps for number <-> hex string conversion
	  var _byteToHex = [];
	  var _hexToByte = {};
	  for (var i = 0; i < 256; i++) {
	    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	    _hexToByte[_byteToHex[i]] = i;
	  }

	  // **`parse()` - Parse a UUID into it's component bytes**
	  function parse(s, buf, offset) {
	    var i = buf && offset || 0,
	        ii = 0;

	    buf = buf || [];
	    s.toLowerCase().replace(/[0-9a-f]{2}/g, function (oct) {
	      if (ii < 16) {
	        // Don't overflow!
	        buf[i + ii++] = _hexToByte[oct];
	      }
	    });

	    // Zero out remaining bytes if string was short
	    while (ii < 16) {
	      buf[i + ii++] = 0;
	    }

	    return buf;
	  }

	  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	  function unparse(buf, offset) {
	    var i = offset || 0,
	        bth = _byteToHex;
	    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
	  }

	  // **`v1()` - Generate time-based UUID**
	  //
	  // Inspired by https://github.com/LiosK/UUID.js
	  // and http://docs.python.org/library/uuid.html

	  // random #'s we need to init node and clockseq
	  var _seedBytes = _rng();

	  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	  var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];

	  // Per 4.2.2, randomize (14 bit) clockseq
	  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	  // Previous uuid creation time
	  var _lastMSecs = 0,
	      _lastNSecs = 0;

	  // See https://github.com/broofa/node-uuid for API details
	  function v1(options, buf, offset) {
	    var i = buf && offset || 0;
	    var b = buf || [];

	    options = options || {};

	    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

	    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

	    // Per 4.2.1.2, use count of uuid's generated during the current clock
	    // cycle to simulate higher resolution clock
	    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

	    // Time since last uuid creation (in msecs)
	    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

	    // Per 4.2.1.2, Bump clockseq on clock regression
	    if (dt < 0 && options.clockseq === undefined) {
	      clockseq = clockseq + 1 & 0x3fff;
	    }

	    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	    // time interval
	    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	      nsecs = 0;
	    }

	    // Per 4.2.1.2 Throw error if too many uuids are requested
	    if (nsecs >= 10000) {
	      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	    }

	    _lastMSecs = msecs;
	    _lastNSecs = nsecs;
	    _clockseq = clockseq;

	    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	    msecs += 12219292800000;

	    // `time_low`
	    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	    b[i++] = tl >>> 24 & 0xff;
	    b[i++] = tl >>> 16 & 0xff;
	    b[i++] = tl >>> 8 & 0xff;
	    b[i++] = tl & 0xff;

	    // `time_mid`
	    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
	    b[i++] = tmh >>> 8 & 0xff;
	    b[i++] = tmh & 0xff;

	    // `time_high_and_version`
	    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	    b[i++] = tmh >>> 16 & 0xff;

	    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	    b[i++] = clockseq >>> 8 | 0x80;

	    // `clock_seq_low`
	    b[i++] = clockseq & 0xff;

	    // `node`
	    var node = options.node || _nodeId;
	    for (var n = 0; n < 6; n++) {
	      b[i + n] = node[n];
	    }

	    return buf ? buf : unparse(b);
	  }

	  // **`v4()` - Generate random UUID**

	  // See https://github.com/broofa/node-uuid for API details
	  function v4(options, buf, offset) {
	    // Deprecated - 'format' argument, as supported in v1.2
	    var i = buf && offset || 0;

	    if (typeof options == 'string') {
	      buf = options == 'binary' ? new Array(16) : null;
	      options = null;
	    }
	    options = options || {};

	    var rnds = options.random || (options.rng || _rng)();

	    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	    rnds[6] = rnds[6] & 0x0f | 0x40;
	    rnds[8] = rnds[8] & 0x3f | 0x80;

	    // Copy bytes to buffer, if provided
	    if (buf) {
	      for (var ii = 0; ii < 16; ii++) {
	        buf[i + ii] = rnds[ii];
	      }
	    }

	    return buf || unparse(rnds);
	  }

	  // Export public API
	  var uuid = v4;
	  uuid.v1 = v1;
	  uuid.v4 = v4;
	  uuid.parse = parse;
	  uuid.unparse = unparse;

	  module.exports = uuid;
	  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  // utils
	  exports.util = __webpack_require__(1);
	  exports.DOMutil = __webpack_require__(8);

	  // data
	  exports.DataSet = __webpack_require__(9);
	  exports.DataView = __webpack_require__(11);
	  exports.Queue = __webpack_require__(10);

	  // Graph3d
	  exports.Graph3d = __webpack_require__(12);
	  exports.graph3d = {
	    Camera: __webpack_require__(16),
	    Filter: __webpack_require__(17),
	    Point2d: __webpack_require__(15),
	    Point3d: __webpack_require__(14),
	    Slider: __webpack_require__(18),
	    StepNumber: __webpack_require__(19)
	  };

	  // bundled external libraries
	  exports.moment = __webpack_require__(2);
	  exports.Hammer = __webpack_require__(22);
	  exports.keycharm = __webpack_require__(25);

	/***/ },
	/* 8 */
	/***/ function(module, exports) {

	  'use strict';

	  // DOM utility methods

	  /**
	   * this prepares the JSON container for allocating SVG elements
	   * @param JSONcontainer
	   * @private
	   */
	  exports.prepareElements = function (JSONcontainer) {
	    // cleanup the redundant svgElements;
	    for (var elementType in JSONcontainer) {
	      if (JSONcontainer.hasOwnProperty(elementType)) {
	        JSONcontainer[elementType].redundant = JSONcontainer[elementType].used;
	        JSONcontainer[elementType].used = [];
	      }
	    }
	  };

	  /**
	   * this cleans up all the unused SVG elements. By asking for the parentNode, we only need to supply the JSON container from
	   * which to remove the redundant elements.
	   *
	   * @param JSONcontainer
	   * @private
	   */
	  exports.cleanupElements = function (JSONcontainer) {
	    // cleanup the redundant svgElements;
	    for (var elementType in JSONcontainer) {
	      if (JSONcontainer.hasOwnProperty(elementType)) {
	        if (JSONcontainer[elementType].redundant) {
	          for (var i = 0; i < JSONcontainer[elementType].redundant.length; i++) {
	            JSONcontainer[elementType].redundant[i].parentNode.removeChild(JSONcontainer[elementType].redundant[i]);
	          }
	          JSONcontainer[elementType].redundant = [];
	        }
	      }
	    }
	  };

	  /**
	   * Ensures that all elements are removed first up so they can be recreated cleanly
	   * @param JSONcontainer
	   */
	  exports.resetElements = function (JSONcontainer) {
	    exports.prepareElements(JSONcontainer);
	    exports.cleanupElements(JSONcontainer);
	    exports.prepareElements(JSONcontainer);
	  };

	  /**
	   * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
	   * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
	   *
	   * @param elementType
	   * @param JSONcontainer
	   * @param svgContainer
	   * @returns {*}
	   * @private
	   */
	  exports.getSVGElement = function (elementType, JSONcontainer, svgContainer) {
	    var element;
	    // allocate SVG element, if it doesnt yet exist, create one.
	    if (JSONcontainer.hasOwnProperty(elementType)) {
	      // this element has been created before
	      // check if there is an redundant element
	      if (JSONcontainer[elementType].redundant.length > 0) {
	        element = JSONcontainer[elementType].redundant[0];
	        JSONcontainer[elementType].redundant.shift();
	      } else {
	        // create a new element and add it to the SVG
	        element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
	        svgContainer.appendChild(element);
	      }
	    } else {
	      // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
	      element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
	      JSONcontainer[elementType] = { used: [], redundant: [] };
	      svgContainer.appendChild(element);
	    }
	    JSONcontainer[elementType].used.push(element);
	    return element;
	  };

	  /**
	   * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
	   * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
	   *
	   * @param elementType
	   * @param JSONcontainer
	   * @param DOMContainer
	   * @returns {*}
	   * @private
	   */
	  exports.getDOMElement = function (elementType, JSONcontainer, DOMContainer, insertBefore) {
	    var element;
	    // allocate DOM element, if it doesnt yet exist, create one.
	    if (JSONcontainer.hasOwnProperty(elementType)) {
	      // this element has been created before
	      // check if there is an redundant element
	      if (JSONcontainer[elementType].redundant.length > 0) {
	        element = JSONcontainer[elementType].redundant[0];
	        JSONcontainer[elementType].redundant.shift();
	      } else {
	        // create a new element and add it to the SVG
	        element = document.createElement(elementType);
	        if (insertBefore !== undefined) {
	          DOMContainer.insertBefore(element, insertBefore);
	        } else {
	          DOMContainer.appendChild(element);
	        }
	      }
	    } else {
	      // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
	      element = document.createElement(elementType);
	      JSONcontainer[elementType] = { used: [], redundant: [] };
	      if (insertBefore !== undefined) {
	        DOMContainer.insertBefore(element, insertBefore);
	      } else {
	        DOMContainer.appendChild(element);
	      }
	    }
	    JSONcontainer[elementType].used.push(element);
	    return element;
	  };

	  /**
	   * Draw a point object. This is a separate function because it can also be called by the legend.
	   * The reason the JSONcontainer and the target SVG svgContainer have to be supplied is so the legend can use these functions
	   * as well.
	   *
	   * @param x
	   * @param y
	   * @param groupTemplate: A template containing the necessary information to draw the datapoint e.g., {style: 'circle', size: 5, className: 'className' }
	   * @param JSONcontainer
	   * @param svgContainer
	   * @param labelObj
	   * @returns {*}
	   */
	  exports.drawPoint = function (x, y, groupTemplate, JSONcontainer, svgContainer, labelObj) {
	    var point;
	    if (groupTemplate.style == 'circle') {
	      point = exports.getSVGElement('circle', JSONcontainer, svgContainer);
	      point.setAttributeNS(null, "cx", x);
	      point.setAttributeNS(null, "cy", y);
	      point.setAttributeNS(null, "r", 0.5 * groupTemplate.size);
	    } else {
	      point = exports.getSVGElement('rect', JSONcontainer, svgContainer);
	      point.setAttributeNS(null, "x", x - 0.5 * groupTemplate.size);
	      point.setAttributeNS(null, "y", y - 0.5 * groupTemplate.size);
	      point.setAttributeNS(null, "width", groupTemplate.size);
	      point.setAttributeNS(null, "height", groupTemplate.size);
	    }

	    if (groupTemplate.styles !== undefined) {
	      point.setAttributeNS(null, "style", groupTemplate.styles);
	    }
	    point.setAttributeNS(null, "class", groupTemplate.className + " vis-point");
	    //handle label


	    if (labelObj) {
	      var label = exports.getSVGElement('text', JSONcontainer, svgContainer);
	      if (labelObj.xOffset) {
	        x = x + labelObj.xOffset;
	      }

	      if (labelObj.yOffset) {
	        y = y + labelObj.yOffset;
	      }
	      if (labelObj.content) {
	        label.textContent = labelObj.content;
	      }

	      if (labelObj.className) {
	        label.setAttributeNS(null, "class", labelObj.className + " vis-label");
	      }
	      label.setAttributeNS(null, "x", x);
	      label.setAttributeNS(null, "y", y);
	    }

	    return point;
	  };

	  /**
	   * draw a bar SVG element centered on the X coordinate
	   *
	   * @param x
	   * @param y
	   * @param className
	   */
	  exports.drawBar = function (x, y, width, height, className, JSONcontainer, svgContainer, style) {
	    if (height != 0) {
	      if (height < 0) {
	        height *= -1;
	        y -= height;
	      }
	      var rect = exports.getSVGElement('rect', JSONcontainer, svgContainer);
	      rect.setAttributeNS(null, "x", x - 0.5 * width);
	      rect.setAttributeNS(null, "y", y);
	      rect.setAttributeNS(null, "width", width);
	      rect.setAttributeNS(null, "height", height);
	      rect.setAttributeNS(null, "class", className);
	      if (style) {
	        rect.setAttributeNS(null, "style", style);
	      }
	    }
	  };

	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var util = __webpack_require__(1);
	  var Queue = __webpack_require__(10);

	  /**
	   * DataSet
	   *
	   * Usage:
	   *     var dataSet = new DataSet({
	   *         fieldId: '_id',
	   *         type: {
	   *             // ...
	   *         }
	   *     });
	   *
	   *     dataSet.add(item);
	   *     dataSet.add(data);
	   *     dataSet.update(item);
	   *     dataSet.update(data);
	   *     dataSet.remove(id);
	   *     dataSet.remove(ids);
	   *     var data = dataSet.get();
	   *     var data = dataSet.get(id);
	   *     var data = dataSet.get(ids);
	   *     var data = dataSet.get(ids, options, data);
	   *     dataSet.clear();
	   *
	   * A data set can:
	   * - add/remove/update data
	   * - gives triggers upon changes in the data
	   * - can  import/export data in various data formats
	   *
	   * @param {Array} [data]    Optional array with initial data
	   * @param {Object} [options]   Available options:
	   *                             {String} fieldId Field name of the id in the
	   *                                              items, 'id' by default.
	   *                             {Object.<String, String} type
	   *                                              A map with field names as key,
	   *                                              and the field type as value.
	   *                             {Object} queue   Queue changes to the DataSet,
	   *                                              flush them all at once.
	   *                                              Queue options:
	   *                                              - {number} delay  Delay in ms, null by default
	   *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
	   * @constructor DataSet
	   */
	  // TODO: add a DataSet constructor DataSet(data, options)
	  function DataSet(data, options) {
	    // correctly read optional arguments
	    if (data && !Array.isArray(data)) {
	      options = data;
	      data = null;
	    }

	    this._options = options || {};
	    this._data = {}; // map with data indexed by id
	    this.length = 0; // number of items in the DataSet
	    this._fieldId = this._options.fieldId || 'id'; // name of the field containing id
	    this._type = {}; // internal field types (NOTE: this can differ from this._options.type)

	    // all variants of a Date are internally stored as Date, so we can convert
	    // from everything to everything (also from ISODate to Number for example)
	    if (this._options.type) {
	      var fields = Object.keys(this._options.type);
	      for (var i = 0, len = fields.length; i < len; i++) {
	        var field = fields[i];
	        var value = this._options.type[field];
	        if (value == 'Date' || value == 'ISODate' || value == 'ASPDate') {
	          this._type[field] = 'Date';
	        } else {
	          this._type[field] = value;
	        }
	      }
	    }

	    // TODO: deprecated since version 1.1.1 (or 2.0.0?)
	    if (this._options.convert) {
	      throw new Error('Option "convert" is deprecated. Use "type" instead.');
	    }

	    this._subscribers = {}; // event subscribers

	    // add initial data when provided
	    if (data) {
	      this.add(data);
	    }

	    this.setOptions(options);
	  }

	  /**
	   * @param {Object} [options]   Available options:
	   *                             {Object} queue   Queue changes to the DataSet,
	   *                                              flush them all at once.
	   *                                              Queue options:
	   *                                              - {number} delay  Delay in ms, null by default
	   *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
	   * @param options
	   */
	  DataSet.prototype.setOptions = function (options) {
	    if (options && options.queue !== undefined) {
	      if (options.queue === false) {
	        // delete queue if loaded
	        if (this._queue) {
	          this._queue.destroy();
	          delete this._queue;
	        }
	      } else {
	        // create queue and update its options
	        if (!this._queue) {
	          this._queue = Queue.extend(this, {
	            replace: ['add', 'update', 'remove']
	          });
	        }

	        if (_typeof(options.queue) === 'object') {
	          this._queue.setOptions(options.queue);
	        }
	      }
	    }
	  };

	  /**
	   * Subscribe to an event, add an event listener
	   * @param {String} event        Event name. Available events: 'put', 'update',
	   *                              'remove'
	   * @param {function} callback   Callback method. Called with three parameters:
	   *                                  {String} event
	   *                                  {Object | null} params
	   *                                  {String | Number} senderId
	   */
	  DataSet.prototype.on = function (event, callback) {
	    var subscribers = this._subscribers[event];
	    if (!subscribers) {
	      subscribers = [];
	      this._subscribers[event] = subscribers;
	    }

	    subscribers.push({
	      callback: callback
	    });
	  };

	  // TODO: remove this deprecated function some day (replaced with `on` since version 0.5, deprecated since v4.0)
	  DataSet.prototype.subscribe = function () {
	    throw new Error('DataSet.subscribe is deprecated. Use DataSet.on instead.');
	  };

	  /**
	   * Unsubscribe from an event, remove an event listener
	   * @param {String} event
	   * @param {function} callback
	   */
	  DataSet.prototype.off = function (event, callback) {
	    var subscribers = this._subscribers[event];
	    if (subscribers) {
	      this._subscribers[event] = subscribers.filter(function (listener) {
	        return listener.callback != callback;
	      });
	    }
	  };

	  // TODO: remove this deprecated function some day (replaced with `on` since version 0.5, deprecated since v4.0)
	  DataSet.prototype.unsubscribe = function () {
	    throw new Error('DataSet.unsubscribe is deprecated. Use DataSet.off instead.');
	  };

	  /**
	   * Trigger an event
	   * @param {String} event
	   * @param {Object | null} params
	   * @param {String} [senderId]       Optional id of the sender.
	   * @private
	   */
	  DataSet.prototype._trigger = function (event, params, senderId) {
	    if (event == '*') {
	      throw new Error('Cannot trigger event *');
	    }

	    var subscribers = [];
	    if (event in this._subscribers) {
	      subscribers = subscribers.concat(this._subscribers[event]);
	    }
	    if ('*' in this._subscribers) {
	      subscribers = subscribers.concat(this._subscribers['*']);
	    }

	    for (var i = 0, len = subscribers.length; i < len; i++) {
	      var subscriber = subscribers[i];
	      if (subscriber.callback) {
	        subscriber.callback(event, params, senderId || null);
	      }
	    }
	  };

	  /**
	   * Add data.
	   * Adding an item will fail when there already is an item with the same id.
	   * @param {Object | Array} data
	   * @param {String} [senderId] Optional sender id
	   * @return {Array} addedIds      Array with the ids of the added items
	   */
	  DataSet.prototype.add = function (data, senderId) {
	    var addedIds = [],
	        id,
	        me = this;

	    if (Array.isArray(data)) {
	      // Array
	      for (var i = 0, len = data.length; i < len; i++) {
	        id = me._addItem(data[i]);
	        addedIds.push(id);
	      }
	    } else if (data instanceof Object) {
	      // Single item
	      id = me._addItem(data);
	      addedIds.push(id);
	    } else {
	      throw new Error('Unknown dataType');
	    }

	    if (addedIds.length) {
	      this._trigger('add', { items: addedIds }, senderId);
	    }

	    return addedIds;
	  };

	  /**
	   * Update existing items. When an item does not exist, it will be created
	   * @param {Object | Array} data
	   * @param {String} [senderId] Optional sender id
	   * @return {Array} updatedIds     The ids of the added or updated items
	   */
	  DataSet.prototype.update = function (data, senderId) {
	    var addedIds = [];
	    var updatedIds = [];
	    var oldData = [];
	    var updatedData = [];
	    var me = this;
	    var fieldId = me._fieldId;

	    var addOrUpdate = function addOrUpdate(item) {
	      var id = item[fieldId];
	      if (me._data[id]) {
	        var oldItem = util.extend({}, me._data[id]);
	        // update item
	        id = me._updateItem(item);
	        updatedIds.push(id);
	        updatedData.push(item);
	        oldData.push(oldItem);
	      } else {
	        // add new item
	        id = me._addItem(item);
	        addedIds.push(id);
	      }
	    };

	    if (Array.isArray(data)) {
	      // Array
	      for (var i = 0, len = data.length; i < len; i++) {
	        if (data[i] instanceof Object) {
	          addOrUpdate(data[i]);
	        } else {
	          console.warn('Ignoring input item, which is not an object at index ' + i);
	        }
	      }
	    } else if (data instanceof Object) {
	      // Single item
	      addOrUpdate(data);
	    } else {
	      throw new Error('Unknown dataType');
	    }

	    if (addedIds.length) {
	      this._trigger('add', { items: addedIds }, senderId);
	    }
	    if (updatedIds.length) {
	      var props = { items: updatedIds, oldData: oldData, data: updatedData };
	      // TODO: remove deprecated property 'data' some day
	      //Object.defineProperty(props, 'data', {
	      //  'get': (function() {
	      //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
	      //    return updatedData;
	      //  }).bind(this)
	      //});
	      this._trigger('update', props, senderId);
	    }

	    return addedIds.concat(updatedIds);
	  };

	  /**
	   * Get a data item or multiple items.
	   *
	   * Usage:
	   *
	   *     get()
	   *     get(options: Object)
	   *
	   *     get(id: Number | String)
	   *     get(id: Number | String, options: Object)
	   *
	   *     get(ids: Number[] | String[])
	   *     get(ids: Number[] | String[], options: Object)
	   *
	   * Where:
	   *
	   * {Number | String} id         The id of an item
	   * {Number[] | String{}} ids    An array with ids of items
	   * {Object} options             An Object with options. Available options:
	   * {String} [returnType]        Type of data to be returned.
	   *                              Can be 'Array' (default) or 'Object'.
	   * {Object.<String, String>} [type]
	   * {String[]} [fields]          field names to be returned
	   * {function} [filter]          filter items
	   * {String | function} [order]  Order the items by a field name or custom sort function.
	   * @throws Error
	   */
	  DataSet.prototype.get = function (args) {
	    var me = this;

	    // parse the arguments
	    var id, ids, options;
	    var firstType = util.getType(arguments[0]);
	    if (firstType == 'String' || firstType == 'Number') {
	      // get(id [, options])
	      id = arguments[0];
	      options = arguments[1];
	    } else if (firstType == 'Array') {
	      // get(ids [, options])
	      ids = arguments[0];
	      options = arguments[1];
	    } else {
	      // get([, options])
	      options = arguments[0];
	    }

	    // determine the return type
	    var returnType;
	    if (options && options.returnType) {
	      var allowedValues = ['Array', 'Object'];
	      returnType = allowedValues.indexOf(options.returnType) == -1 ? 'Array' : options.returnType;
	    } else {
	      returnType = 'Array';
	    }

	    // build options
	    var type = options && options.type || this._options.type;
	    var filter = options && options.filter;
	    var items = [],
	        item,
	        itemIds,
	        itemId,
	        i,
	        len;

	    // convert items
	    if (id != undefined) {
	      // return a single item
	      item = me._getItem(id, type);
	      if (item && filter && !filter(item)) {
	        item = null;
	      }
	    } else if (ids != undefined) {
	      // return a subset of items
	      for (i = 0, len = ids.length; i < len; i++) {
	        item = me._getItem(ids[i], type);
	        if (!filter || filter(item)) {
	          items.push(item);
	        }
	      }
	    } else {
	      // return all items
	      itemIds = Object.keys(this._data);
	      for (i = 0, len = itemIds.length; i < len; i++) {
	        itemId = itemIds[i];
	        item = me._getItem(itemId, type);
	        if (!filter || filter(item)) {
	          items.push(item);
	        }
	      }
	    }

	    // order the results
	    if (options && options.order && id == undefined) {
	      this._sort(items, options.order);
	    }

	    // filter fields of the items
	    if (options && options.fields) {
	      var fields = options.fields;
	      if (id != undefined) {
	        item = this._filterFields(item, fields);
	      } else {
	        for (i = 0, len = items.length; i < len; i++) {
	          items[i] = this._filterFields(items[i], fields);
	        }
	      }
	    }

	    // return the results
	    if (returnType == 'Object') {
	      var result = {},
	          resultant;
	      for (i = 0, len = items.length; i < len; i++) {
	        resultant = items[i];
	        result[resultant.id] = resultant;
	      }
	      return result;
	    } else {
	      if (id != undefined) {
	        // a single item
	        return item;
	      } else {
	        // just return our array
	        return items;
	      }
	    }
	  };

	  /**
	   * Get ids of all items or from a filtered set of items.
	   * @param {Object} [options]    An Object with options. Available options:
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * @return {Array} ids
	   */
	  DataSet.prototype.getIds = function (options) {
	    var data = this._data,
	        filter = options && options.filter,
	        order = options && options.order,
	        type = options && options.type || this._options.type,
	        itemIds = Object.keys(data),
	        i,
	        len,
	        id,
	        item,
	        items,
	        ids = [];

	    if (filter) {
	      // get filtered items
	      if (order) {
	        // create ordered list
	        items = [];
	        for (i = 0, len = itemIds.length; i < len; i++) {
	          id = itemIds[i];
	          item = this._getItem(id, type);
	          if (filter(item)) {
	            items.push(item);
	          }
	        }

	        this._sort(items, order);

	        for (i = 0, len = items.length; i < len; i++) {
	          ids.push(items[i][this._fieldId]);
	        }
	      } else {
	        // create unordered list
	        for (i = 0, len = itemIds.length; i < len; i++) {
	          id = itemIds[i];
	          item = this._getItem(id, type);
	          if (filter(item)) {
	            ids.push(item[this._fieldId]);
	          }
	        }
	      }
	    } else {
	      // get all items
	      if (order) {
	        // create an ordered list
	        items = [];
	        for (i = 0, len = itemIds.length; i < len; i++) {
	          id = itemIds[i];
	          items.push(data[id]);
	        }

	        this._sort(items, order);

	        for (i = 0, len = items.length; i < len; i++) {
	          ids.push(items[i][this._fieldId]);
	        }
	      } else {
	        // create unordered list
	        for (i = 0, len = itemIds.length; i < len; i++) {
	          id = itemIds[i];
	          item = data[id];
	          ids.push(item[this._fieldId]);
	        }
	      }
	    }

	    return ids;
	  };

	  /**
	   * Returns the DataSet itself. Is overwritten for example by the DataView,
	   * which returns the DataSet it is connected to instead.
	   */
	  DataSet.prototype.getDataSet = function () {
	    return this;
	  };

	  /**
	   * Execute a callback function for every item in the dataset.
	   * @param {function} callback
	   * @param {Object} [options]    Available options:
	   *                              {Object.<String, String>} [type]
	   *                              {String[]} [fields] filter fields
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   */
	  DataSet.prototype.forEach = function (callback, options) {
	    var filter = options && options.filter,
	        type = options && options.type || this._options.type,
	        data = this._data,
	        itemIds = Object.keys(data),
	        i,
	        len,
	        item,
	        id;

	    if (options && options.order) {
	      // execute forEach on ordered list
	      var items = this.get(options);

	      for (i = 0, len = items.length; i < len; i++) {
	        item = items[i];
	        id = item[this._fieldId];
	        callback(item, id);
	      }
	    } else {
	      // unordered
	      for (i = 0, len = itemIds.length; i < len; i++) {
	        id = itemIds[i];
	        item = this._getItem(id, type);
	        if (!filter || filter(item)) {
	          callback(item, id);
	        }
	      }
	    }
	  };

	  /**
	   * Map every item in the dataset.
	   * @param {function} callback
	   * @param {Object} [options]    Available options:
	   *                              {Object.<String, String>} [type]
	   *                              {String[]} [fields] filter fields
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * @return {Object[]} mappedItems
	   */
	  DataSet.prototype.map = function (callback, options) {
	    var filter = options && options.filter,
	        type = options && options.type || this._options.type,
	        mappedItems = [],
	        data = this._data,
	        itemIds = Object.keys(data),
	        i,
	        len,
	        id,
	        item;

	    // convert and filter items
	    for (i = 0, len = itemIds.length; i < len; i++) {
	      id = itemIds[i];
	      item = this._getItem(id, type);
	      if (!filter || filter(item)) {
	        mappedItems.push(callback(item, id));
	      }
	    }

	    // order items
	    if (options && options.order) {
	      this._sort(mappedItems, options.order);
	    }

	    return mappedItems;
	  };

	  /**
	   * Filter the fields of an item
	   * @param {Object | null} item
	   * @param {String[]} fields     Field names
	   * @return {Object | null} filteredItem or null if no item is provided
	   * @private
	   */
	  DataSet.prototype._filterFields = function (item, fields) {
	    if (!item) {
	      // item is null
	      return item;
	    }

	    var filteredItem = {},
	        itemFields = Object.keys(item),
	        len = itemFields.length,
	        i,
	        field;

	    if (Array.isArray(fields)) {
	      for (i = 0; i < len; i++) {
	        field = itemFields[i];
	        if (fields.indexOf(field) != -1) {
	          filteredItem[field] = item[field];
	        }
	      }
	    } else {
	      for (i = 0; i < len; i++) {
	        field = itemFields[i];
	        if (fields.hasOwnProperty(field)) {
	          filteredItem[fields[field]] = item[field];
	        }
	      }
	    }

	    return filteredItem;
	  };

	  /**
	   * Sort the provided array with items
	   * @param {Object[]} items
	   * @param {String | function} order      A field name or custom sort function.
	   * @private
	   */
	  DataSet.prototype._sort = function (items, order) {
	    if (util.isString(order)) {
	      // order by provided field name
	      var name = order; // field name
	      items.sort(function (a, b) {
	        var av = a[name];
	        var bv = b[name];
	        return av > bv ? 1 : av < bv ? -1 : 0;
	      });
	    } else if (typeof order === 'function') {
	      // order by sort function
	      items.sort(order);
	    }
	    // TODO: extend order by an Object {field:String, direction:String}
	    //       where direction can be 'asc' or 'desc'
	    else {
	        throw new TypeError('Order must be a function or a string');
	      }
	  };

	  /**
	   * Remove an object by pointer or by id
	   * @param {String | Number | Object | Array} id Object or id, or an array with
	   *                                              objects or ids to be removed
	   * @param {String} [senderId] Optional sender id
	   * @return {Array} removedIds
	   */
	  DataSet.prototype.remove = function (id, senderId) {
	    var removedIds = [],
	        removedItems = [],
	        ids = [],
	        i,
	        len,
	        itemId,
	        item;

	    // force everything to be an array for simplicity
	    ids = Array.isArray(id) ? id : [id];

	    for (i = 0, len = ids.length; i < len; i++) {
	      item = this._remove(ids[i]);
	      if (item) {
	        itemId = item[this._fieldId];
	        if (itemId) {
	          removedIds.push(itemId);
	          removedItems.push(item);
	        }
	      }
	    }

	    if (removedIds.length) {
	      this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);
	    }

	    return removedIds;
	  };

	  /**
	   * Remove an item by its id
	   * @param {Number | String | Object} id   id or item
	   * @returns {Number | String | null} id
	   * @private
	   */
	  DataSet.prototype._remove = function (id) {
	    var item, ident;

	    // confirm the id to use based on the args type
	    if (util.isNumber(id) || util.isString(id)) {
	      ident = id;
	    } else if (id instanceof Object) {
	      ident = id[this._fieldId]; // look for the identifier field using _fieldId
	    }

	    // do the remove if the item is found
	    if (ident !== undefined && this._data[ident]) {
	      item = this._data[ident];
	      delete this._data[ident];
	      this.length--;
	      return item;
	    }
	    return null;
	  };

	  /**
	   * Clear the data
	   * @param {String} [senderId] Optional sender id
	   * @return {Array} removedIds    The ids of all removed items
	   */
	  DataSet.prototype.clear = function (senderId) {
	    var i, len;
	    var ids = Object.keys(this._data);
	    var items = [];

	    for (i = 0, len = ids.length; i < len; i++) {
	      items.push(this._data[ids[i]]);
	    }

	    this._data = {};
	    this.length = 0;

	    this._trigger('remove', { items: ids, oldData: items }, senderId);

	    return ids;
	  };

	  /**
	   * Find the item with maximum value of a specified field
	   * @param {String} field
	   * @return {Object | null} item  Item containing max value, or null if no items
	   */
	  DataSet.prototype.max = function (field) {
	    var data = this._data,
	        itemIds = Object.keys(data),
	        max = null,
	        maxField = null,
	        i,
	        len;

	    for (i = 0, len = itemIds.length; i < len; i++) {
	      var id = itemIds[i];
	      var item = data[id];
	      var itemField = item[field];
	      if (itemField != null && (!max || itemField > maxField)) {
	        max = item;
	        maxField = itemField;
	      }
	    }

	    return max;
	  };

	  /**
	   * Find the item with minimum value of a specified field
	   * @param {String} field
	   * @return {Object | null} item  Item containing max value, or null if no items
	   */
	  DataSet.prototype.min = function (field) {
	    var data = this._data,
	        itemIds = Object.keys(data),
	        min = null,
	        minField = null,
	        i,
	        len;

	    for (i = 0, len = itemIds.length; i < len; i++) {
	      var id = itemIds[i];
	      var item = data[id];
	      var itemField = item[field];
	      if (itemField != null && (!min || itemField < minField)) {
	        min = item;
	        minField = itemField;
	      }
	    }

	    return min;
	  };

	  /**
	   * Find all distinct values of a specified field
	   * @param {String} field
	   * @return {Array} values  Array containing all distinct values. If data items
	   *                         do not contain the specified field are ignored.
	   *                         The returned array is unordered.
	   */
	  DataSet.prototype.distinct = function (field) {
	    var data = this._data;
	    var itemIds = Object.keys(data);
	    var values = [];
	    var fieldType = this._options.type && this._options.type[field] || null;
	    var count = 0;
	    var i, j, len;

	    for (i = 0, len = itemIds.length; i < len; i++) {
	      var id = itemIds[i];
	      var item = data[id];
	      var value = item[field];
	      var exists = false;
	      for (j = 0; j < count; j++) {
	        if (values[j] == value) {
	          exists = true;
	          break;
	        }
	      }
	      if (!exists && value !== undefined) {
	        values[count] = value;
	        count++;
	      }
	    }

	    if (fieldType) {
	      for (i = 0, len = values.length; i < len; i++) {
	        values[i] = util.convert(values[i], fieldType);
	      }
	    }

	    return values;
	  };

	  /**
	   * Add a single item. Will fail when an item with the same id already exists.
	   * @param {Object} item
	   * @return {String} id
	   * @private
	   */
	  DataSet.prototype._addItem = function (item) {
	    var id = item[this._fieldId];

	    if (id != undefined) {
	      // check whether this id is already taken
	      if (this._data[id]) {
	        // item already exists
	        throw new Error('Cannot add item: item with id ' + id + ' already exists');
	      }
	    } else {
	      // generate an id
	      id = util.randomUUID();
	      item[this._fieldId] = id;
	    }

	    var d = {},
	        fields = Object.keys(item),
	        i,
	        len;
	    for (i = 0, len = fields.length; i < len; i++) {
	      var field = fields[i];
	      var fieldType = this._type[field]; // type may be undefined
	      d[field] = util.convert(item[field], fieldType);
	    }
	    this._data[id] = d;
	    this.length++;

	    return id;
	  };

	  /**
	   * Get an item. Fields can be converted to a specific type
	   * @param {String} id
	   * @param {Object.<String, String>} [types]  field types to convert
	   * @return {Object | null} item
	   * @private
	   */
	  DataSet.prototype._getItem = function (id, types) {
	    var field, value, i, len;

	    // get the item from the dataset
	    var raw = this._data[id];
	    if (!raw) {
	      return null;
	    }

	    // convert the items field types
	    var converted = {},
	        fields = Object.keys(raw);

	    if (types) {
	      for (i = 0, len = fields.length; i < len; i++) {
	        field = fields[i];
	        value = raw[field];
	        converted[field] = util.convert(value, types[field]);
	      }
	    } else {
	      // no field types specified, no converting needed
	      for (i = 0, len = fields.length; i < len; i++) {
	        field = fields[i];
	        value = raw[field];
	        converted[field] = value;
	      }
	    }
	    return converted;
	  };

	  /**
	   * Update a single item: merge with existing item.
	   * Will fail when the item has no id, or when there does not exist an item
	   * with the same id.
	   * @param {Object} item
	   * @return {String} id
	   * @private
	   */
	  DataSet.prototype._updateItem = function (item) {
	    var id = item[this._fieldId];
	    if (id == undefined) {
	      throw new Error('Cannot update item: item has no id (item: ' + JSON.stringify(item) + ')');
	    }
	    var d = this._data[id];
	    if (!d) {
	      // item doesn't exist
	      throw new Error('Cannot update item: no item with id ' + id + ' found');
	    }

	    // merge with current item
	    var fields = Object.keys(item);
	    for (var i = 0, len = fields.length; i < len; i++) {
	      var field = fields[i];
	      var fieldType = this._type[field]; // type may be undefined
	      d[field] = util.convert(item[field], fieldType);
	    }

	    return id;
	  };

	  module.exports = DataSet;

	/***/ },
	/* 10 */
	/***/ function(module, exports) {

	  'use strict';

	  /**
	   * A queue
	   * @param {Object} options
	   *            Available options:
	   *            - delay: number    When provided, the queue will be flushed
	   *                               automatically after an inactivity of this delay
	   *                               in milliseconds.
	   *                               Default value is null.
	   *            - max: number      When the queue exceeds the given maximum number
	   *                               of entries, the queue is flushed automatically.
	   *                               Default value of max is Infinity.
	   * @constructor
	   */
	  function Queue(options) {
	    // options
	    this.delay = null;
	    this.max = Infinity;

	    // properties
	    this._queue = [];
	    this._timeout = null;
	    this._extended = null;

	    this.setOptions(options);
	  }

	  /**
	   * Update the configuration of the queue
	   * @param {Object} options
	   *            Available options:
	   *            - delay: number    When provided, the queue will be flushed
	   *                               automatically after an inactivity of this delay
	   *                               in milliseconds.
	   *                               Default value is null.
	   *            - max: number      When the queue exceeds the given maximum number
	   *                               of entries, the queue is flushed automatically.
	   *                               Default value of max is Infinity.
	   * @param options
	   */
	  Queue.prototype.setOptions = function (options) {
	    if (options && typeof options.delay !== 'undefined') {
	      this.delay = options.delay;
	    }
	    if (options && typeof options.max !== 'undefined') {
	      this.max = options.max;
	    }

	    this._flushIfNeeded();
	  };

	  /**
	   * Extend an object with queuing functionality.
	   * The object will be extended with a function flush, and the methods provided
	   * in options.replace will be replaced with queued ones.
	   * @param {Object} object
	   * @param {Object} options
	   *            Available options:
	   *            - replace: Array.<string>
	   *                               A list with method names of the methods
	   *                               on the object to be replaced with queued ones.
	   *            - delay: number    When provided, the queue will be flushed
	   *                               automatically after an inactivity of this delay
	   *                               in milliseconds.
	   *                               Default value is null.
	   *            - max: number      When the queue exceeds the given maximum number
	   *                               of entries, the queue is flushed automatically.
	   *                               Default value of max is Infinity.
	   * @return {Queue} Returns the created queue
	   */
	  Queue.extend = function (object, options) {
	    var queue = new Queue(options);

	    if (object.flush !== undefined) {
	      throw new Error('Target object already has a property flush');
	    }
	    object.flush = function () {
	      queue.flush();
	    };

	    var methods = [{
	      name: 'flush',
	      original: undefined
	    }];

	    if (options && options.replace) {
	      for (var i = 0; i < options.replace.length; i++) {
	        var name = options.replace[i];
	        methods.push({
	          name: name,
	          original: object[name]
	        });
	        queue.replace(object, name);
	      }
	    }

	    queue._extended = {
	      object: object,
	      methods: methods
	    };

	    return queue;
	  };

	  /**
	   * Destroy the queue. The queue will first flush all queued actions, and in
	   * case it has extended an object, will restore the original object.
	   */
	  Queue.prototype.destroy = function () {
	    this.flush();

	    if (this._extended) {
	      var object = this._extended.object;
	      var methods = this._extended.methods;
	      for (var i = 0; i < methods.length; i++) {
	        var method = methods[i];
	        if (method.original) {
	          object[method.name] = method.original;
	        } else {
	          delete object[method.name];
	        }
	      }
	      this._extended = null;
	    }
	  };

	  /**
	   * Replace a method on an object with a queued version
	   * @param {Object} object   Object having the method
	   * @param {string} method   The method name
	   */
	  Queue.prototype.replace = function (object, method) {
	    var me = this;
	    var original = object[method];
	    if (!original) {
	      throw new Error('Method ' + method + ' undefined');
	    }

	    object[method] = function () {
	      // create an Array with the arguments
	      var args = [];
	      for (var i = 0; i < arguments.length; i++) {
	        args[i] = arguments[i];
	      }

	      // add this call to the queue
	      me.queue({
	        args: args,
	        fn: original,
	        context: this
	      });
	    };
	  };

	  /**
	   * Queue a call
	   * @param {function | {fn: function, args: Array} | {fn: function, args: Array, context: Object}} entry
	   */
	  Queue.prototype.queue = function (entry) {
	    if (typeof entry === 'function') {
	      this._queue.push({ fn: entry });
	    } else {
	      this._queue.push(entry);
	    }

	    this._flushIfNeeded();
	  };

	  /**
	   * Check whether the queue needs to be flushed
	   * @private
	   */
	  Queue.prototype._flushIfNeeded = function () {
	    // flush when the maximum is exceeded.
	    if (this._queue.length > this.max) {
	      this.flush();
	    }

	    // flush after a period of inactivity when a delay is configured
	    clearTimeout(this._timeout);
	    if (this.queue.length > 0 && typeof this.delay === 'number') {
	      var me = this;
	      this._timeout = setTimeout(function () {
	        me.flush();
	      }, this.delay);
	    }
	  };

	  /**
	   * Flush all queued calls
	   */
	  Queue.prototype.flush = function () {
	    while (this._queue.length > 0) {
	      var entry = this._queue.shift();
	      entry.fn.apply(entry.context || entry.fn, entry.args || []);
	    }
	  };

	  module.exports = Queue;

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);
	  var DataSet = __webpack_require__(9);

	  /**
	   * DataView
	   *
	   * a dataview offers a filtered view on a dataset or an other dataview.
	   *
	   * @param {DataSet | DataView} data
	   * @param {Object} [options]   Available options: see method get
	   *
	   * @constructor DataView
	   */
	  function DataView(data, options) {
	    this._data = null;
	    this._ids = {}; // ids of the items currently in memory (just contains a boolean true)
	    this.length = 0; // number of items in the DataView
	    this._options = options || {};
	    this._fieldId = 'id'; // name of the field containing id
	    this._subscribers = {}; // event subscribers

	    var me = this;
	    this.listener = function () {
	      me._onEvent.apply(me, arguments);
	    };

	    this.setData(data);
	  }

	  // TODO: implement a function .config() to dynamically update things like configured filter
	  // and trigger changes accordingly

	  /**
	   * Set a data source for the view
	   * @param {DataSet | DataView} data
	   */
	  DataView.prototype.setData = function (data) {
	    var ids, id, i, len, items;

	    if (this._data) {
	      // unsubscribe from current dataset
	      if (this._data.off) {
	        this._data.off('*', this.listener);
	      }

	      // trigger a remove of all items in memory
	      ids = this._data.getIds({ filter: this._options && this._options.filter });
	      items = [];

	      for (i = 0, len = ids.length; i < len; i++) {
	        items.push(this._data._data[ids[i]]);
	      }

	      this._ids = {};
	      this.length = 0;
	      this._trigger('remove', { items: ids, oldData: items });
	    }

	    this._data = data;

	    if (this._data) {
	      // update fieldId
	      this._fieldId = this._options.fieldId || this._data && this._data.options && this._data.options.fieldId || 'id';

	      // trigger an add of all added items
	      ids = this._data.getIds({ filter: this._options && this._options.filter });
	      for (i = 0, len = ids.length; i < len; i++) {
	        id = ids[i];
	        this._ids[id] = true;
	      }
	      this.length = ids.length;
	      this._trigger('add', { items: ids });

	      // subscribe to new dataset
	      if (this._data.on) {
	        this._data.on('*', this.listener);
	      }
	    }
	  };

	  /**
	   * Refresh the DataView. Useful when the DataView has a filter function
	   * containing a variable parameter.
	   */
	  DataView.prototype.refresh = function () {
	    var id, i, len;
	    var ids = this._data.getIds({ filter: this._options && this._options.filter }),
	        oldIds = Object.keys(this._ids),
	        newIds = {},
	        addedIds = [],
	        removedIds = [],
	        removedItems = [];

	    // check for additions
	    for (i = 0, len = ids.length; i < len; i++) {
	      id = ids[i];
	      newIds[id] = true;
	      if (!this._ids[id]) {
	        addedIds.push(id);
	        this._ids[id] = true;
	      }
	    }

	    // check for removals
	    for (i = 0, len = oldIds.length; i < len; i++) {
	      id = oldIds[i];
	      if (!newIds[id]) {
	        removedIds.push(id);
	        removedItems.push(this._data[id]);
	        delete this._ids[id];
	      }
	    }

	    this.length += addedIds.length - removedIds.length;

	    // trigger events
	    if (addedIds.length) {
	      this._trigger('add', { items: addedIds });
	    }
	    if (removedIds.length) {
	      this._trigger('remove', { items: removedIds, oldData: removedItems });
	    }
	  };

	  /**
	   * Get data from the data view
	   *
	   * Usage:
	   *
	   *     get()
	   *     get(options: Object)
	   *     get(options: Object, data: Array | DataTable)
	   *
	   *     get(id: Number)
	   *     get(id: Number, options: Object)
	   *     get(id: Number, options: Object, data: Array | DataTable)
	   *
	   *     get(ids: Number[])
	   *     get(ids: Number[], options: Object)
	   *     get(ids: Number[], options: Object, data: Array | DataTable)
	   *
	   * Where:
	   *
	   * {Number | String} id         The id of an item
	   * {Number[] | String{}} ids    An array with ids of items
	   * {Object} options             An Object with options. Available options:
	   *                              {String} [type] Type of data to be returned. Can
	   *                                              be 'DataTable' or 'Array' (default)
	   *                              {Object.<String, String>} [convert]
	   *                              {String[]} [fields] field names to be returned
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * {Array | DataTable} [data]   If provided, items will be appended to this
	   *                              array or table. Required in case of Google
	   *                              DataTable.
	   * @param args
	   */
	  DataView.prototype.get = function (args) {
	    var me = this;

	    // parse the arguments
	    var ids, options, data;
	    var firstType = util.getType(arguments[0]);
	    if (firstType == 'String' || firstType == 'Number' || firstType == 'Array') {
	      // get(id(s) [, options] [, data])
	      ids = arguments[0]; // can be a single id or an array with ids
	      options = arguments[1];
	      data = arguments[2];
	    } else {
	      // get([, options] [, data])
	      options = arguments[0];
	      data = arguments[1];
	    }

	    // extend the options with the default options and provided options
	    var viewOptions = util.extend({}, this._options, options);

	    // create a combined filter method when needed
	    if (this._options.filter && options && options.filter) {
	      viewOptions.filter = function (item) {
	        return me._options.filter(item) && options.filter(item);
	      };
	    }

	    // build up the call to the linked data set
	    var getArguments = [];
	    if (ids != undefined) {
	      getArguments.push(ids);
	    }
	    getArguments.push(viewOptions);
	    getArguments.push(data);

	    return this._data && this._data.get.apply(this._data, getArguments);
	  };

	  /**
	   * Get ids of all items or from a filtered set of items.
	   * @param {Object} [options]    An Object with options. Available options:
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * @return {Array} ids
	   */
	  DataView.prototype.getIds = function (options) {
	    var ids;

	    if (this._data) {
	      var defaultFilter = this._options.filter;
	      var filter;

	      if (options && options.filter) {
	        if (defaultFilter) {
	          filter = function filter(item) {
	            return defaultFilter(item) && options.filter(item);
	          };
	        } else {
	          filter = options.filter;
	        }
	      } else {
	        filter = defaultFilter;
	      }

	      ids = this._data.getIds({
	        filter: filter,
	        order: options && options.order
	      });
	    } else {
	      ids = [];
	    }

	    return ids;
	  };

	  /**
	   * Map every item in the dataset.
	   * @param {function} callback
	   * @param {Object} [options]    Available options:
	   *                              {Object.<String, String>} [type]
	   *                              {String[]} [fields] filter fields
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * @return {Object[]} mappedItems
	   */
	  DataView.prototype.map = function (callback, options) {
	    var mappedItems = [];
	    if (this._data) {
	      var defaultFilter = this._options.filter;
	      var filter;

	      if (options && options.filter) {
	        if (defaultFilter) {
	          filter = function filter(item) {
	            return defaultFilter(item) && options.filter(item);
	          };
	        } else {
	          filter = options.filter;
	        }
	      } else {
	        filter = defaultFilter;
	      }

	      mappedItems = this._data.map(callback, {
	        filter: filter,
	        order: options && options.order
	      });
	    } else {
	      mappedItems = [];
	    }

	    return mappedItems;
	  };

	  /**
	   * Get the DataSet to which this DataView is connected. In case there is a chain
	   * of multiple DataViews, the root DataSet of this chain is returned.
	   * @return {DataSet} dataSet
	   */
	  DataView.prototype.getDataSet = function () {
	    var dataSet = this;
	    while (dataSet instanceof DataView) {
	      dataSet = dataSet._data;
	    }
	    return dataSet || null;
	  };

	  /**
	   * Event listener. Will propagate all events from the connected data set to
	   * the subscribers of the DataView, but will filter the items and only trigger
	   * when there are changes in the filtered data set.
	   * @param {String} event
	   * @param {Object | null} params
	   * @param {String} senderId
	   * @private
	   */
	  DataView.prototype._onEvent = function (event, params, senderId) {
	    var i, len, id, item;
	    var ids = params && params.items;
	    var addedIds = [],
	        updatedIds = [],
	        removedIds = [],
	        oldItems = [],
	        updatedItems = [],
	        removedItems = [];

	    if (ids && this._data) {
	      switch (event) {
	        case 'add':
	          // filter the ids of the added items
	          for (i = 0, len = ids.length; i < len; i++) {
	            id = ids[i];
	            item = this.get(id);
	            if (item) {
	              this._ids[id] = true;
	              addedIds.push(id);
	            }
	          }

	          break;

	        case 'update':
	          // determine the event from the views viewpoint: an updated
	          // item can be added, updated, or removed from this view.
	          for (i = 0, len = ids.length; i < len; i++) {
	            id = ids[i];
	            item = this.get(id);

	            if (item) {
	              if (this._ids[id]) {
	                updatedIds.push(id);
	                updatedItems.push(params.data[i]);
	                oldItems.push(params.oldData[i]);
	              } else {
	                this._ids[id] = true;
	                addedIds.push(id);
	              }
	            } else {
	              if (this._ids[id]) {
	                delete this._ids[id];
	                removedIds.push(id);
	                removedItems.push(params.oldData[i]);
	              } else {
	                // nothing interesting for me :-(
	              }
	            }
	          }

	          break;

	        case 'remove':
	          // filter the ids of the removed items
	          for (i = 0, len = ids.length; i < len; i++) {
	            id = ids[i];
	            if (this._ids[id]) {
	              delete this._ids[id];
	              removedIds.push(id);
	              removedItems.push(params.oldData[i]);
	            }
	          }

	          break;
	      }

	      this.length += addedIds.length - removedIds.length;

	      if (addedIds.length) {
	        this._trigger('add', { items: addedIds }, senderId);
	      }
	      if (updatedIds.length) {
	        this._trigger('update', { items: updatedIds, oldData: oldItems, data: updatedItems }, senderId);
	      }
	      if (removedIds.length) {
	        this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);
	      }
	    }
	  };

	  // copy subscription functionality from DataSet
	  DataView.prototype.on = DataSet.prototype.on;
	  DataView.prototype.off = DataSet.prototype.off;
	  DataView.prototype._trigger = DataSet.prototype._trigger;

	  // TODO: make these functions deprecated (replaced with `on` and `off` since version 0.5)
	  DataView.prototype.subscribe = DataView.prototype.on;
	  DataView.prototype.unsubscribe = DataView.prototype.off;

	  module.exports = DataView;

	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Emitter = __webpack_require__(13);var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);
	  var util = __webpack_require__(1);
	  var Point3d = __webpack_require__(14);
	  var Point2d = __webpack_require__(15);
	  var Camera = __webpack_require__(16);
	  var Filter = __webpack_require__(17);
	  var Slider = __webpack_require__(18);
	  var StepNumber = __webpack_require__(19);
	  var Range = __webpack_require__(20);
	  var Settings = __webpack_require__(21);

	  /// enumerate the available styles
	  Graph3d.STYLE = Settings.STYLE;

	  /**
	   * Following label is used in the settings to describe values which should be
	   * determined by the code while running, from the current data and graph style.
	   * 
	   * Using 'undefined' directly achieves the same thing, but this is more
	   * descriptive by describing the intent.
	   */
	  var autoByDefault = undefined;

	  /**
	   * Default values for option settings.
	   *
	   * These are the values used when a Graph3d instance is initialized without
	   * custom settings.
	   *
	   * If a field is not in this list, a default value of 'autoByDefault' is assumed,
	   * which is just an alias for 'undefined'.
	   */
	  var DEFAULTS = {
	    width: '400px',
	    height: '400px',
	    filterLabel: 'time',
	    legendLabel: 'value',
	    xLabel: 'x',
	    yLabel: 'y',
	    zLabel: 'z',
	    xValueLabel: function xValueLabel(v) {
	      return v;
	    },
	    yValueLabel: function yValueLabel(v) {
	      return v;
	    },
	    zValueLabel: function zValueLabel(v) {
	      return v;
	    },
	    showGrid: true,
	    showPerspective: true,
	    showShadow: false,
	    keepAspectRatio: true,
	    verticalRatio: 0.5, // 0.1 to 1.0, where 1.0 results in a 'cube'
	    dotSizeRatio: 0.02, // size of the dots as a fraction of the graph width

	    showAnimationControls: autoByDefault,
	    animationInterval: 1000, // milliseconds
	    animationPreload: false,
	    animationAutoStart: autoByDefault,

	    axisColor: '#4D4D4D',
	    gridColor: '#D3D3D3',
	    xCenter: '55%',
	    yCenter: '50%',

	    style: Graph3d.STYLE.DOT,
	    tooltip: false,
	    showLegend: autoByDefault, // determined by graph style
	    backgroundColor: autoByDefault,

	    dataColor: {
	      fill: '#7DC1FF',
	      stroke: '#3267D2',
	      strokeWidth: 1 // px
	    },

	    cameraPosition: {
	      horizontal: 1.0,
	      vertical: 0.5,
	      distance: 1.7
	    },

	    xBarWidth: autoByDefault,
	    yBarWidth: autoByDefault,
	    valueMin: autoByDefault,
	    valueMax: autoByDefault,
	    xMin: autoByDefault,
	    xMax: autoByDefault,
	    xStep: autoByDefault,
	    yMin: autoByDefault,
	    yMax: autoByDefault,
	    yStep: autoByDefault,
	    zMin: autoByDefault,
	    zMax: autoByDefault,
	    zStep: autoByDefault
	  };

	  // -----------------------------------------------------------------------------
	  // Class Graph3d
	  // -----------------------------------------------------------------------------


	  /**
	   * @constructor Graph3d
	   * Graph3d displays data in 3d.
	   *
	   * Graph3d is developed in javascript as a Google Visualization Chart.
	   *
	   * @param {Element} container   The DOM element in which the Graph3d will
	   *                              be created. Normally a div element.
	   * @param {DataSet | DataView | Array} [data]
	   * @param {Object} [options]
	   */
	  function Graph3d(container, data, options) {
	    if (!(this instanceof Graph3d)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // create variables and set default values
	    this.containerElement = container;

	    this.dataTable = null; // The original data table
	    this.dataPoints = null; // The table with point objects

	    // create a frame and canvas
	    this.create();

	    Settings.setDefaults(DEFAULTS, this);

	    // the column indexes
	    this.colX = undefined;
	    this.colY = undefined;
	    this.colZ = undefined;
	    this.colValue = undefined;
	    this.colFilter = undefined;

	    // TODO: customize axis range

	    // apply options (also when undefined)
	    this.setOptions(options);

	    // apply data
	    if (data) {
	      this.setData(data);
	    }
	  }

	  // Extend Graph3d with an Emitter mixin
	  Emitter(Graph3d.prototype);

	  /**
	   * Calculate the scaling values, dependent on the range in x, y, and z direction
	   */
	  Graph3d.prototype._setScale = function () {
	    this.scale = new Point3d(1 / this.xRange.range(), 1 / this.yRange.range(), 1 / this.zRange.range());

	    // keep aspect ration between x and y scale if desired
	    if (this.keepAspectRatio) {
	      if (this.scale.x < this.scale.y) {
	        //noinspection JSSuspiciousNameCombination
	        this.scale.y = this.scale.x;
	      } else {
	        //noinspection JSSuspiciousNameCombination
	        this.scale.x = this.scale.y;
	      }
	    }

	    // scale the vertical axis
	    this.scale.z *= this.verticalRatio;
	    // TODO: can this be automated? verticalRatio?

	    // determine scale for (optional) value
	    if (this.valueRange !== undefined) {
	      this.scale.value = 1 / this.valueRange.range();
	    }

	    // position the camera arm
	    var xCenter = this.xRange.center() * this.scale.x;
	    var yCenter = this.yRange.center() * this.scale.y;
	    var zCenter = this.zRange.center() * this.scale.z;
	    this.camera.setArmLocation(xCenter, yCenter, zCenter);
	  };

	  /**
	   * Convert a 3D location to a 2D location on screen
	   * Source: ttp://en.wikipedia.org/wiki/3D_projection
	   *
	   * @param   {Point3d} point3d  A 3D point with parameters x, y, z
	   * @returns {Point2d} point2d  A 2D point with parameters x, y
	   */
	  Graph3d.prototype._convert3Dto2D = function (point3d) {
	    var translation = this._convertPointToTranslation(point3d);
	    return this._convertTranslationToScreen(translation);
	  };

	  /**
	   * Convert a 3D location its translation seen from the camera
	   * Source: http://en.wikipedia.org/wiki/3D_projection
	   *
	   * @param   {Point3d} point3d     A 3D point with parameters x, y, z
	   * @returns {Point3d} translation A 3D point with parameters x, y, z This is
	   *                                the translation of the point, seen from the
	   *                                camera.
	   */
	  Graph3d.prototype._convertPointToTranslation = function (point3d) {
	    var cameraLocation = this.camera.getCameraLocation(),
	        cameraRotation = this.camera.getCameraRotation(),
	        ax = point3d.x * this.scale.x,
	        ay = point3d.y * this.scale.y,
	        az = point3d.z * this.scale.z,
	        cx = cameraLocation.x,
	        cy = cameraLocation.y,
	        cz = cameraLocation.z,


	    // calculate angles
	    sinTx = Math.sin(cameraRotation.x),
	        cosTx = Math.cos(cameraRotation.x),
	        sinTy = Math.sin(cameraRotation.y),
	        cosTy = Math.cos(cameraRotation.y),
	        sinTz = Math.sin(cameraRotation.z),
	        cosTz = Math.cos(cameraRotation.z),


	    // calculate translation
	    dx = cosTy * (sinTz * (ay - cy) + cosTz * (ax - cx)) - sinTy * (az - cz),
	        dy = sinTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) + cosTx * (cosTz * (ay - cy) - sinTz * (ax - cx)),
	        dz = cosTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) - sinTx * (cosTz * (ay - cy) - sinTz * (ax - cx));

	    return new Point3d(dx, dy, dz);
	  };

	  /**
	   * Convert a translation point to a point on the screen
	   *
	   * @param   {Point3d} translation A 3D point with parameters x, y, z This is
	   *                                the translation of the point, seen from the
	   *                                camera.
	   * @returns {Point2d} point2d     A 2D point with parameters x, y
	   */
	  Graph3d.prototype._convertTranslationToScreen = function (translation) {
	    var ex = this.eye.x,
	        ey = this.eye.y,
	        ez = this.eye.z,
	        dx = translation.x,
	        dy = translation.y,
	        dz = translation.z;

	    // calculate position on screen from translation
	    var bx;
	    var by;
	    if (this.showPerspective) {
	      bx = (dx - ex) * (ez / dz);
	      by = (dy - ey) * (ez / dz);
	    } else {
	      bx = dx * -(ez / this.camera.getArmLength());
	      by = dy * -(ez / this.camera.getArmLength());
	    }

	    // shift and scale the point to the center of the screen
	    // use the width of the graph to scale both horizontally and vertically.
	    return new Point2d(this.currentXCenter + bx * this.frame.canvas.clientWidth, this.currentYCenter - by * this.frame.canvas.clientWidth);
	  };

	  /**
	   * Calculate the translations and screen positions of all points
	   */
	  Graph3d.prototype._calcTranslations = function (points, sort) {
	    if (sort === undefined) {
	      sort = true;
	    }

	    for (var i = 0; i < points.length; i++) {
	      var point = points[i];
	      point.trans = this._convertPointToTranslation(point.point);
	      point.screen = this._convertTranslationToScreen(point.trans);

	      // calculate the translation of the point at the bottom (needed for sorting)
	      var transBottom = this._convertPointToTranslation(point.bottom);
	      point.dist = this.showPerspective ? transBottom.length() : -transBottom.z;
	    }

	    if (!sort) {
	      return;
	    }

	    // sort the points on depth of their (x,y) position (not on z)
	    var sortDepth = function sortDepth(a, b) {
	      return b.dist - a.dist;
	    };
	    points.sort(sortDepth);
	  };

	  Graph3d.prototype.getNumberOfRows = function (data) {
	    return data.length;
	  };

	  Graph3d.prototype.getNumberOfColumns = function (data) {
	    var counter = 0;
	    for (var column in data[0]) {
	      if (data[0].hasOwnProperty(column)) {
	        counter++;
	      }
	    }
	    return counter;
	  };

	  Graph3d.prototype.getDistinctValues = function (data, column) {
	    var distinctValues = [];
	    for (var i = 0; i < data.length; i++) {
	      if (distinctValues.indexOf(data[i][column]) == -1) {
	        distinctValues.push(data[i][column]);
	      }
	    }
	    return distinctValues;
	  };

	  /**
	   * Get the absolute min/max values for the passed data column.
	   *
	   * @returns {Range} A Range instance with min/max members properly set.
	   */
	  Graph3d.prototype.getColumnRange = function (data, column) {
	    var range = new Range();

	    // Adjust the range so that it covers all values in the passed data elements.
	    for (var i = 0; i < data.length; i++) {
	      var item = data[i][column];
	      range.adjust(item);
	    }

	    return range;
	  };

	  /**
	   * Check if the state is consistent for the use of the value field.
	   *
	   * Throws if a problem is detected.
	   */
	  Graph3d.prototype._checkValueField = function (data) {

	    var hasValueField = this.style === Graph3d.STYLE.BARCOLOR || this.style === Graph3d.STYLE.BARSIZE || this.style === Graph3d.STYLE.DOTCOLOR || this.style === Graph3d.STYLE.DOTSIZE;

	    if (!hasValueField) {
	      return; // No need to check further
	    }

	    // Following field must be present for the current graph style
	    if (this.colValue === undefined) {
	      throw new Error('Expected data to have ' + ' field \'style\' ' + ' for graph style \'' + this.style + '\'');
	    }

	    // The data must also contain this field.
	    // Note that only first data element is checked.
	    if (data[0][this.colValue] === undefined) {
	      throw new Error('Expected data to have ' + ' field \'' + this.colValue + '\' ' + ' for graph style \'' + this.style + '\'');
	    }
	  };

	  /**
	   * Set default values for range
	   *
	   * The default values override the range values, if defined.
	   *
	   * Because it's possible that only defaultMin or defaultMax is set, it's better
	   * to pass in a range already set with the min/max set from the data. Otherwise,
	   * it's quite hard to process the min/max properly.
	   */
	  Graph3d.prototype._setRangeDefaults = function (range, defaultMin, defaultMax) {
	    if (defaultMin !== undefined) {
	      range.min = defaultMin;
	    }

	    if (defaultMax !== undefined) {
	      range.max = defaultMax;
	    }

	    // This is the original way that the default min/max values were adjusted.
	    // TODO: Perhaps it's better if an error is thrown if the values do not agree.
	    //       But this will change the behaviour.
	    if (range.max <= range.min) range.max = range.min + 1;
	  };

	  /**
	   * Initialize the data from the data table. Calculate minimum and maximum values
	   * and column index values
	   * @param {Array | DataSet | DataView} rawData The data containing the items for
	   *                                             the Graph.
	   * @param {Number}                     style   Style Number
	   */
	  Graph3d.prototype._dataInitialize = function (rawData, style) {
	    var me = this;

	    // unsubscribe from the dataTable
	    if (this.dataSet) {
	      this.dataSet.off('*', this._onChange);
	    }

	    if (rawData === undefined) return;

	    if (Array.isArray(rawData)) {
	      rawData = new DataSet(rawData);
	    }

	    var data;
	    if (rawData instanceof DataSet || rawData instanceof DataView) {
	      data = rawData.get();
	    } else {
	      throw new Error('Array, DataSet, or DataView expected');
	    }

	    if (data.length == 0) return;

	    this.dataSet = rawData;
	    this.dataTable = data;

	    // subscribe to changes in the dataset
	    this._onChange = function () {
	      me.setData(me.dataSet);
	    };
	    this.dataSet.on('*', this._onChange);

	    // determine the location of x,y,z,value,filter columns
	    this.colX = 'x';
	    this.colY = 'y';
	    this.colZ = 'z';

	    var withBars = this.style == Graph3d.STYLE.BAR || this.style == Graph3d.STYLE.BARCOLOR || this.style == Graph3d.STYLE.BARSIZE;

	    // determine barWidth from data
	    if (withBars) {
	      if (this.defaultXBarWidth !== undefined) {
	        this.xBarWidth = this.defaultXBarWidth;
	      } else {
	        var dataX = this.getDistinctValues(data, this.colX);
	        this.xBarWidth = dataX[1] - dataX[0] || 1;
	      }

	      if (this.defaultYBarWidth !== undefined) {
	        this.yBarWidth = this.defaultYBarWidth;
	      } else {
	        var dataY = this.getDistinctValues(data, this.colY);
	        this.yBarWidth = dataY[1] - dataY[0] || 1;
	      }
	    }

	    // calculate minimums and maximums
	    var NUMSTEPS = 5;

	    var xRange = this.getColumnRange(data, this.colX);
	    if (withBars) {
	      xRange.expand(this.xBarWidth / 2);
	    }
	    this._setRangeDefaults(xRange, this.defaultXMin, this.defaultXMax);
	    this.xRange = xRange;
	    this.xStep = this.defaultXStep !== undefined ? this.defaultXStep : xRange.range() / NUMSTEPS;

	    var yRange = this.getColumnRange(data, this.colY);
	    if (withBars) {
	      yRange.expand(this.yBarWidth / 2);
	    }
	    this._setRangeDefaults(yRange, this.defaultYMin, this.defaultYMax);
	    this.yRange = yRange;
	    this.yStep = this.defaultYStep !== undefined ? this.defaultYStep : yRange.range() / NUMSTEPS;

	    var zRange = this.getColumnRange(data, this.colZ);
	    this._setRangeDefaults(zRange, this.defaultZMin, this.defaultZMax);
	    this.zRange = zRange;
	    this.zStep = this.defaultZStep !== undefined ? this.defaultZStep : zRange.range() / NUMSTEPS;

	    if (data[0].hasOwnProperty('style')) {
	      this.colValue = 'style';
	      var valueRange = this.getColumnRange(data, this.colValue);
	      this._setRangeDefaults(valueRange, this.defaultValueMin, this.defaultValueMax);
	      this.valueRange = valueRange;
	    }

	    // check if a filter column is provided
	    // Needs to be started after zRange is defined
	    if (data[0].hasOwnProperty('filter')) {
	      // Only set this field if it's actually present
	      this.colFilter = 'filter';

	      if (this.dataFilter === undefined) {
	        this.dataFilter = new Filter(rawData, this.colFilter, this);
	        this.dataFilter.setOnLoadCallback(function () {
	          me.redraw();
	        });
	      }
	    }

	    // set the scale dependent on the ranges.
	    this._setScale();
	  };

	  /**
	   * Filter the data based on the current filter
	   *
	   * @param   {Array} data
	   * @returns {Array} dataPoints Array with point objects which can be drawn on
	   *                             screen
	   */
	  Graph3d.prototype._getDataPoints = function (data) {
	    // TODO: store the created matrix dataPoints in the filters instead of
	    //       reloading each time.
	    var x, y, i, z, obj, point;

	    var dataPoints = [];

	    if (this.style === Graph3d.STYLE.GRID || this.style === Graph3d.STYLE.SURFACE) {
	      // copy all values from the google data table to a matrix
	      // the provided values are supposed to form a grid of (x,y) positions

	      // create two lists with all present x and y values
	      var dataX = [];
	      var dataY = [];
	      for (i = 0; i < this.getNumberOfRows(data); i++) {
	        x = data[i][this.colX] || 0;
	        y = data[i][this.colY] || 0;

	        if (dataX.indexOf(x) === -1) {
	          dataX.push(x);
	        }
	        if (dataY.indexOf(y) === -1) {
	          dataY.push(y);
	        }
	      }

	      var sortNumber = function sortNumber(a, b) {
	        return a - b;
	      };
	      dataX.sort(sortNumber);
	      dataY.sort(sortNumber);

	      // create a grid, a 2d matrix, with all values.
	      var dataMatrix = []; // temporary data matrix
	      for (i = 0; i < data.length; i++) {
	        x = data[i][this.colX] || 0;
	        y = data[i][this.colY] || 0;
	        z = data[i][this.colZ] || 0;

	        // TODO: implement Array().indexOf() for Internet Explorer
	        var xIndex = dataX.indexOf(x);
	        var yIndex = dataY.indexOf(y);

	        if (dataMatrix[xIndex] === undefined) {
	          dataMatrix[xIndex] = [];
	        }

	        var point3d = new Point3d();
	        point3d.x = x;
	        point3d.y = y;
	        point3d.z = z;
	        point3d.data = data[i];

	        obj = {};
	        obj.point = point3d;
	        obj.trans = undefined;
	        obj.screen = undefined;
	        obj.bottom = new Point3d(x, y, this.zRange.min);

	        dataMatrix[xIndex][yIndex] = obj;

	        dataPoints.push(obj);
	      }

	      // fill in the pointers to the neighbors.
	      for (x = 0; x < dataMatrix.length; x++) {
	        for (y = 0; y < dataMatrix[x].length; y++) {
	          if (dataMatrix[x][y]) {
	            dataMatrix[x][y].pointRight = x < dataMatrix.length - 1 ? dataMatrix[x + 1][y] : undefined;
	            dataMatrix[x][y].pointTop = y < dataMatrix[x].length - 1 ? dataMatrix[x][y + 1] : undefined;
	            dataMatrix[x][y].pointCross = x < dataMatrix.length - 1 && y < dataMatrix[x].length - 1 ? dataMatrix[x + 1][y + 1] : undefined;
	          }
	        }
	      }
	    } else {
	      // 'dot', 'dot-line', etc.
	      this._checkValueField(data);

	      // copy all values from the google data table to a list with Point3d objects
	      for (i = 0; i < data.length; i++) {
	        point = new Point3d();
	        point.x = data[i][this.colX] || 0;
	        point.y = data[i][this.colY] || 0;
	        point.z = data[i][this.colZ] || 0;
	        point.data = data[i];

	        if (this.colValue !== undefined) {
	          point.value = data[i][this.colValue] || 0;
	        }

	        obj = {};
	        obj.point = point;
	        obj.bottom = new Point3d(point.x, point.y, this.zRange.min);
	        obj.trans = undefined;
	        obj.screen = undefined;

	        if (this.style === Graph3d.STYLE.LINE) {
	          if (i > 0) {
	            // Add next point for line drawing
	            dataPoints[i - 1].pointNext = obj;
	          }
	        }

	        dataPoints.push(obj);
	      }
	    }

	    return dataPoints;
	  };

	  /**
	   * Create the main frame for the Graph3d.
	   *
	   * This function is executed once when a Graph3d object is created. The frame
	   * contains a canvas, and this canvas contains all objects like the axis and
	   * nodes.
	   */
	  Graph3d.prototype.create = function () {
	    // remove all elements from the container element.
	    while (this.containerElement.hasChildNodes()) {
	      this.containerElement.removeChild(this.containerElement.firstChild);
	    }

	    this.frame = document.createElement('div');
	    this.frame.style.position = 'relative';
	    this.frame.style.overflow = 'hidden';

	    // create the graph canvas (HTML canvas element)
	    this.frame.canvas = document.createElement('canvas');
	    this.frame.canvas.style.position = 'relative';
	    this.frame.appendChild(this.frame.canvas);
	    //if (!this.frame.canvas.getContext) {
	    {
	      var noCanvas = document.createElement('DIV');
	      noCanvas.style.color = 'red';
	      noCanvas.style.fontWeight = 'bold';
	      noCanvas.style.padding = '10px';
	      noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
	      this.frame.canvas.appendChild(noCanvas);
	    }

	    this.frame.filter = document.createElement('div');
	    this.frame.filter.style.position = 'absolute';
	    this.frame.filter.style.bottom = '0px';
	    this.frame.filter.style.left = '0px';
	    this.frame.filter.style.width = '100%';
	    this.frame.appendChild(this.frame.filter);

	    // add event listeners to handle moving and zooming the contents
	    var me = this;
	    var onmousedown = function onmousedown(event) {
	      me._onMouseDown(event);
	    };
	    var ontouchstart = function ontouchstart(event) {
	      me._onTouchStart(event);
	    };
	    var onmousewheel = function onmousewheel(event) {
	      me._onWheel(event);
	    };
	    var ontooltip = function ontooltip(event) {
	      me._onTooltip(event);
	    };
	    // TODO: these events are never cleaned up... can give a 'memory leakage'

	    util.addEventListener(this.frame.canvas, 'keydown', onkeydown);
	    util.addEventListener(this.frame.canvas, 'mousedown', onmousedown);
	    util.addEventListener(this.frame.canvas, 'touchstart', ontouchstart);
	    util.addEventListener(this.frame.canvas, 'mousewheel', onmousewheel);
	    util.addEventListener(this.frame.canvas, 'mousemove', ontooltip);

	    // add the new graph to the container element
	    this.containerElement.appendChild(this.frame);
	  };

	  /**
	   * Set a new size for the graph
	   *
	   * @param {string} width  Width in pixels or percentage (for example '800px'
	   *                        or '50%')
	   * @param {string} height Height in pixels or percentage  (for example '400px'
	   *                        or '30%')
	   */
	  Graph3d.prototype.setSize = function (width, height) {
	    this.frame.style.width = width;
	    this.frame.style.height = height;

	    this._resizeCanvas();
	  };

	  /**
	   * Resize the canvas to the current size of the frame
	   */
	  Graph3d.prototype._resizeCanvas = function () {
	    this.frame.canvas.style.width = '100%';
	    this.frame.canvas.style.height = '100%';

	    this.frame.canvas.width = this.frame.canvas.clientWidth;
	    this.frame.canvas.height = this.frame.canvas.clientHeight;

	    // adjust with for margin
	    this.frame.filter.style.width = this.frame.canvas.clientWidth - 2 * 10 + 'px';
	  };

	  /**
	   * Start animation
	   */
	  Graph3d.prototype.animationStart = function () {
	    if (!this.frame.filter || !this.frame.filter.slider) throw new Error('No animation available');

	    this.frame.filter.slider.play();
	  };

	  /**
	   * Stop animation
	   */
	  Graph3d.prototype.animationStop = function () {
	    if (!this.frame.filter || !this.frame.filter.slider) return;

	    this.frame.filter.slider.stop();
	  };

	  /**
	   * Resize the center position based on the current values in this.xCenter
	   * and this.yCenter (which are strings with a percentage or a value
	   * in pixels). The center positions are the variables this.currentXCenter
	   * and this.currentYCenter
	   */
	  Graph3d.prototype._resizeCenter = function () {
	    // calculate the horizontal center position
	    if (this.xCenter.charAt(this.xCenter.length - 1) === '%') {
	      this.currentXCenter = parseFloat(this.xCenter) / 100 * this.frame.canvas.clientWidth;
	    } else {
	      this.currentXCenter = parseFloat(this.xCenter); // supposed to be in px
	    }

	    // calculate the vertical center position
	    if (this.yCenter.charAt(this.yCenter.length - 1) === '%') {
	      this.currentYCenter = parseFloat(this.yCenter) / 100 * (this.frame.canvas.clientHeight - this.frame.filter.clientHeight);
	    } else {
	      this.currentYCenter = parseFloat(this.yCenter); // supposed to be in px
	    }
	  };

	  /**
	   * Retrieve the current camera rotation
	   *
	   * @returns {object} An object with parameters horizontal, vertical, and
	   *                   distance
	   */
	  Graph3d.prototype.getCameraPosition = function () {
	    var pos = this.camera.getArmRotation();
	    pos.distance = this.camera.getArmLength();
	    return pos;
	  };

	  /**
	   * Load data into the 3D Graph
	   */
	  Graph3d.prototype._readData = function (data) {
	    // read the data
	    this._dataInitialize(data, this.style);

	    if (this.dataFilter) {
	      // apply filtering
	      this.dataPoints = this.dataFilter._getDataPoints();
	    } else {
	      // no filtering. load all data
	      this.dataPoints = this._getDataPoints(this.dataTable);
	    }

	    // draw the filter
	    this._redrawFilter();
	  };

	  /**
	   * Replace the dataset of the Graph3d
	   *
	   * @param {Array | DataSet | DataView} data
	   */
	  Graph3d.prototype.setData = function (data) {
	    this._readData(data);
	    this.redraw();

	    // start animation when option is true
	    if (this.animationAutoStart && this.dataFilter) {
	      this.animationStart();
	    }
	  };

	  /**
	   * Update the options. Options will be merged with current options
	   *
	   * @param {Object} options
	   */
	  Graph3d.prototype.setOptions = function (options) {
	    var cameraPosition = undefined;

	    this.animationStop();

	    Settings.setOptions(options, this);

	    this.setPointDrawingMethod();
	    this.setSize(this.width, this.height);

	    // re-load the data
	    if (this.dataTable) {
	      this.setData(this.dataTable);
	    }

	    // start animation when option is true
	    if (this.animationAutoStart && this.dataFilter) {
	      this.animationStart();
	    }
	  };

	  /**
	   * Determine which point drawing method to use for the current graph style.
	   */
	  Graph3d.prototype.setPointDrawingMethod = function () {
	    var method = undefined;

	    switch (this.style) {
	      case Graph3d.STYLE.BAR:
	        method = Graph3d.prototype._redrawBarGraphPoint;
	        break;
	      case Graph3d.STYLE.BARCOLOR:
	        method = Graph3d.prototype._redrawBarColorGraphPoint;
	        break;
	      case Graph3d.STYLE.BARSIZE:
	        method = Graph3d.prototype._redrawBarSizeGraphPoint;
	        break;
	      case Graph3d.STYLE.DOT:
	        method = Graph3d.prototype._redrawDotGraphPoint;
	        break;
	      case Graph3d.STYLE.DOTLINE:
	        method = Graph3d.prototype._redrawDotLineGraphPoint;
	        break;
	      case Graph3d.STYLE.DOTCOLOR:
	        method = Graph3d.prototype._redrawDotColorGraphPoint;
	        break;
	      case Graph3d.STYLE.DOTSIZE:
	        method = Graph3d.prototype._redrawDotSizeGraphPoint;
	        break;
	      case Graph3d.STYLE.SURFACE:
	        method = Graph3d.prototype._redrawSurfaceGraphPoint;
	        break;
	      case Graph3d.STYLE.GRID:
	        method = Graph3d.prototype._redrawGridGraphPoint;
	        break;
	      case Graph3d.STYLE.LINE:
	        method = Graph3d.prototype._redrawLineGraphPoint;
	        break;
	      default:
	        throw new Error('Can not determine point drawing method ' + 'for graph style \'' + this.style + '\'');
	        break;
	    }

	    this._pointDrawingMethod = method;
	  };

	  /**
	   * Redraw the Graph.
	   */
	  Graph3d.prototype.redraw = function () {
	    if (this.dataPoints === undefined) {
	      throw new Error('Graph data not initialized');
	    }

	    this._resizeCanvas();
	    this._resizeCenter();
	    this._redrawSlider();
	    this._redrawClear();
	    this._redrawAxis();

	    this._redrawDataGraph();

	    this._redrawInfo();
	    this._redrawLegend();
	  };

	  /**
	   * Get drawing context without exposing canvas
	   */
	  Graph3d.prototype._getContext = function () {
	    var canvas = this.frame.canvas;
	    var ctx = canvas.getContext('2d');

	    ctx.lineJoin = 'round';
	    ctx.lineCap = 'round';

	    return ctx;
	  };

	  /**
	   * Clear the canvas before redrawing
	   */
	  Graph3d.prototype._redrawClear = function () {
	    var canvas = this.frame.canvas;
	    var ctx = canvas.getContext('2d');

	    ctx.clearRect(0, 0, canvas.width, canvas.height);
	  };

	  Graph3d.prototype._dotSize = function () {
	    return this.frame.clientWidth * this.dotSizeRatio;
	  };

	  /**
	   * Get legend width 
	   */
	  Graph3d.prototype._getLegendWidth = function () {
	    var width;

	    if (this.style === Graph3d.STYLE.DOTSIZE) {
	      var dotSize = this._dotSize();
	      width = dotSize / 2 + dotSize * 2;
	    } else if (this.style === Graph3d.STYLE.BARSIZE) {
	      width = this.xBarWidth;
	    } else {
	      width = 20;
	    }
	    return width;
	  };

	  /**
	   * Redraw the legend based on size, dot color, or surface height 
	   */
	  Graph3d.prototype._redrawLegend = function () {

	    //Return without drawing anything, if no legend is specified 
	    if (this.showLegend !== true) {
	      return;
	    }

	    // Do not draw legend when graph style does not support
	    if (this.style === Graph3d.STYLE.LINE || this.style === Graph3d.STYLE.BARSIZE //TODO add legend support for BARSIZE 
	    ) {
	        return;
	      }

	    // Legend types - size and color. Determine if size legend.  
	    var isSizeLegend = this.style === Graph3d.STYLE.BARSIZE || this.style === Graph3d.STYLE.DOTSIZE;

	    // Legend is either tracking z values or style values. This flag if false means use z values. 
	    var isValueLegend = this.style === Graph3d.STYLE.DOTSIZE || this.style === Graph3d.STYLE.DOTCOLOR || this.style === Graph3d.STYLE.BARCOLOR;

	    var height = Math.max(this.frame.clientHeight * 0.25, 100);
	    var top = this.margin;
	    var width = this._getLegendWidth(); // px - overwritten by size legend  
	    var right = this.frame.clientWidth - this.margin;
	    var left = right - width;
	    var bottom = top + height;

	    var ctx = this._getContext();
	    ctx.lineWidth = 1;
	    ctx.font = '14px arial'; // TODO: put in options

	    if (isSizeLegend === false) {
	      // draw the color bar
	      var ymin = 0;
	      var ymax = height; // Todo: make height customizable
	      var y;

	      for (y = ymin; y < ymax; y++) {
	        var f = (y - ymin) / (ymax - ymin);
	        var hue = f * 240;
	        var color = this._hsv2rgb(hue, 1, 1);

	        ctx.strokeStyle = color;
	        ctx.beginPath();
	        ctx.moveTo(left, top + y);
	        ctx.lineTo(right, top + y);
	        ctx.stroke();
	      }
	      ctx.strokeStyle = this.axisColor;
	      ctx.strokeRect(left, top, width, height);
	    } else {

	      // draw the size legend box 
	      var widthMin;
	      if (this.style === Graph3d.STYLE.DOTSIZE) {
	        var dotSize = this._dotSize();
	        widthMin = dotSize / 2; // px
	      } else if (this.style === Graph3d.STYLE.BARSIZE) {
	        //widthMin = this.xBarWidth * 0.2 this is wrong - barwidth measures in terms of xvalues 
	      }
	      ctx.strokeStyle = this.axisColor;
	      ctx.fillStyle = this.dataColor.fill;
	      ctx.beginPath();
	      ctx.moveTo(left, top);
	      ctx.lineTo(right, top);
	      ctx.lineTo(right - width + widthMin, bottom);
	      ctx.lineTo(left, bottom);
	      ctx.closePath();
	      ctx.fill();
	      ctx.stroke();
	    }

	    // print value text along the legend edge 
	    var gridLineLen = 5; // px

	    var legendMin = isValueLegend ? this.valueRange.min : this.zRange.min;
	    var legendMax = isValueLegend ? this.valueRange.max : this.zRange.max;
	    var step = new StepNumber(legendMin, legendMax, (legendMax - legendMin) / 5, true);
	    step.start(true);

	    var y;
	    var from;
	    var to;
	    while (!step.end()) {
	      y = bottom - (step.getCurrent() - legendMin) / (legendMax - legendMin) * height;
	      from = new Point2d(left - gridLineLen, y);
	      to = new Point2d(left, y);
	      this._line(ctx, from, to);

	      ctx.textAlign = 'right';
	      ctx.textBaseline = 'middle';
	      ctx.fillStyle = this.axisColor;
	      ctx.fillText(step.getCurrent(), left - 2 * gridLineLen, y);

	      step.next();
	    }

	    ctx.textAlign = 'right';
	    ctx.textBaseline = 'top';
	    var label = this.legendLabel;
	    ctx.fillText(label, right, bottom + this.margin);
	  };

	  /**
	   * Redraw the filter
	   */
	  Graph3d.prototype._redrawFilter = function () {
	    this.frame.filter.innerHTML = '';

	    if (this.dataFilter) {
	      var options = {
	        'visible': this.showAnimationControls
	      };
	      var slider = new Slider(this.frame.filter, options);
	      this.frame.filter.slider = slider;

	      // TODO: css here is not nice here...
	      this.frame.filter.style.padding = '10px';
	      //this.frame.filter.style.backgroundColor = '#EFEFEF';

	      slider.setValues(this.dataFilter.values);
	      slider.setPlayInterval(this.animationInterval);

	      // create an event handler
	      var me = this;
	      var onchange = function onchange() {
	        var index = slider.getIndex();

	        me.dataFilter.selectValue(index);
	        me.dataPoints = me.dataFilter._getDataPoints();

	        me.redraw();
	      };
	      slider.setOnChangeCallback(onchange);
	    } else {
	      this.frame.filter.slider = undefined;
	    }
	  };

	  /**
	   * Redraw the slider
	   */
	  Graph3d.prototype._redrawSlider = function () {
	    if (this.frame.filter.slider !== undefined) {
	      this.frame.filter.slider.redraw();
	    }
	  };

	  /**
	   * Redraw common information
	   */
	  Graph3d.prototype._redrawInfo = function () {
	    if (this.dataFilter) {
	      var ctx = this._getContext();

	      ctx.font = '14px arial'; // TODO: put in options
	      ctx.lineStyle = 'gray';
	      ctx.fillStyle = 'gray';
	      ctx.textAlign = 'left';
	      ctx.textBaseline = 'top';

	      var x = this.margin;
	      var y = this.margin;
	      ctx.fillText(this.dataFilter.getLabel() + ': ' + this.dataFilter.getSelectedValue(), x, y);
	    }
	  };

	  /**
	   * Draw a line between 2d points 'from' and 'to'.
	   *
	   * If stroke style specified, set that as well.
	   */
	  Graph3d.prototype._line = function (ctx, from, to, strokeStyle) {
	    if (strokeStyle !== undefined) {
	      ctx.strokeStyle = strokeStyle;
	    }

	    ctx.beginPath();
	    ctx.moveTo(from.x, from.y);
	    ctx.lineTo(to.x, to.y);
	    ctx.stroke();
	  };

	  Graph3d.prototype.drawAxisLabelX = function (ctx, point3d, text, armAngle, yMargin) {
	    if (yMargin === undefined) {
	      yMargin = 0;
	    }

	    var point2d = this._convert3Dto2D(point3d);

	    if (Math.cos(armAngle * 2) > 0) {
	      ctx.textAlign = 'center';
	      ctx.textBaseline = 'top';
	      point2d.y += yMargin;
	    } else if (Math.sin(armAngle * 2) < 0) {
	      ctx.textAlign = 'right';
	      ctx.textBaseline = 'middle';
	    } else {
	      ctx.textAlign = 'left';
	      ctx.textBaseline = 'middle';
	    }

	    ctx.fillStyle = this.axisColor;
	    ctx.fillText(text, point2d.x, point2d.y);
	  };

	  Graph3d.prototype.drawAxisLabelY = function (ctx, point3d, text, armAngle, yMargin) {
	    if (yMargin === undefined) {
	      yMargin = 0;
	    }

	    var point2d = this._convert3Dto2D(point3d);

	    if (Math.cos(armAngle * 2) < 0) {
	      ctx.textAlign = 'center';
	      ctx.textBaseline = 'top';
	      point2d.y += yMargin;
	    } else if (Math.sin(armAngle * 2) > 0) {
	      ctx.textAlign = 'right';
	      ctx.textBaseline = 'middle';
	    } else {
	      ctx.textAlign = 'left';
	      ctx.textBaseline = 'middle';
	    }

	    ctx.fillStyle = this.axisColor;
	    ctx.fillText(text, point2d.x, point2d.y);
	  };

	  Graph3d.prototype.drawAxisLabelZ = function (ctx, point3d, text, offset) {
	    if (offset === undefined) {
	      offset = 0;
	    }

	    var point2d = this._convert3Dto2D(point3d);
	    ctx.textAlign = 'right';
	    ctx.textBaseline = 'middle';
	    ctx.fillStyle = this.axisColor;
	    ctx.fillText(text, point2d.x - offset, point2d.y);
	  };

	  /**


	  /**
	   * Draw a line between 2d points 'from' and 'to'.
	   *
	   * If stroke style specified, set that as well.
	   */
	  Graph3d.prototype._line3d = function (ctx, from, to, strokeStyle) {
	    var from2d = this._convert3Dto2D(from);
	    var to2d = this._convert3Dto2D(to);

	    this._line(ctx, from2d, to2d, strokeStyle);
	  };

	  /**
	   * Redraw the axis
	   */
	  Graph3d.prototype._redrawAxis = function () {
	    var ctx = this._getContext(),
	        from,
	        to,
	        step,
	        prettyStep,
	        text,
	        xText,
	        yText,
	        zText,
	        offset,
	        xOffset,
	        yOffset;

	    // TODO: get the actual rendered style of the containerElement
	    //ctx.font = this.containerElement.style.font;
	    ctx.font = 24 / this.camera.getArmLength() + 'px arial';

	    // calculate the length for the short grid lines
	    var gridLenX = 0.025 / this.scale.x;
	    var gridLenY = 0.025 / this.scale.y;
	    var textMargin = 5 / this.camera.getArmLength(); // px
	    var armAngle = this.camera.getArmRotation().horizontal;
	    var armVector = new Point2d(Math.cos(armAngle), Math.sin(armAngle));

	    var xRange = this.xRange;
	    var yRange = this.yRange;
	    var zRange = this.zRange;

	    // draw x-grid lines
	    ctx.lineWidth = 1;
	    prettyStep = this.defaultXStep === undefined;
	    step = new StepNumber(xRange.min, xRange.max, this.xStep, prettyStep);
	    step.start(true);

	    while (!step.end()) {
	      var x = step.getCurrent();

	      if (this.showGrid) {
	        from = new Point3d(x, yRange.min, zRange.min);
	        to = new Point3d(x, yRange.max, zRange.min);
	        this._line3d(ctx, from, to, this.gridColor);
	      } else {
	        from = new Point3d(x, yRange.min, zRange.min);
	        to = new Point3d(x, yRange.min + gridLenX, zRange.min);
	        this._line3d(ctx, from, to, this.axisColor);

	        from = new Point3d(x, yRange.max, zRange.min);
	        to = new Point3d(x, yRange.max - gridLenX, zRange.min);
	        this._line3d(ctx, from, to, this.axisColor);
	      }

	      yText = armVector.x > 0 ? yRange.min : yRange.max;
	      var point3d = new Point3d(x, yText, zRange.min);
	      var msg = '  ' + this.xValueLabel(x) + '  ';
	      this.drawAxisLabelX(ctx, point3d, msg, armAngle, textMargin);

	      step.next();
	    }

	    // draw y-grid lines
	    ctx.lineWidth = 1;
	    prettyStep = this.defaultYStep === undefined;
	    step = new StepNumber(yRange.min, yRange.max, this.yStep, prettyStep);
	    step.start(true);

	    while (!step.end()) {
	      var y = step.getCurrent();

	      if (this.showGrid) {
	        from = new Point3d(xRange.min, y, zRange.min);
	        to = new Point3d(xRange.max, y, zRange.min);
	        this._line3d(ctx, from, to, this.gridColor);
	      } else {
	        from = new Point3d(xRange.min, y, zRange.min);
	        to = new Point3d(xRange.min + gridLenY, y, zRange.min);
	        this._line3d(ctx, from, to, this.axisColor);

	        from = new Point3d(xRange.max, y, zRange.min);
	        to = new Point3d(xRange.max - gridLenY, y, zRange.min);
	        this._line3d(ctx, from, to, this.axisColor);
	      }

	      xText = armVector.y > 0 ? xRange.min : xRange.max;
	      point3d = new Point3d(xText, y, zRange.min);
	      var msg = '  ' + this.yValueLabel(y) + '  ';
	      this.drawAxisLabelY(ctx, point3d, msg, armAngle, textMargin);

	      step.next();
	    }

	    // draw z-grid lines and axis
	    ctx.lineWidth = 1;
	    prettyStep = this.defaultZStep === undefined;
	    step = new StepNumber(zRange.min, zRange.max, this.zStep, prettyStep);
	    step.start(true);

	    xText = armVector.x > 0 ? xRange.min : xRange.max;
	    yText = armVector.y < 0 ? yRange.min : yRange.max;

	    while (!step.end()) {
	      var z = step.getCurrent();

	      // TODO: make z-grid lines really 3d?
	      var from3d = new Point3d(xText, yText, z);
	      var from2d = this._convert3Dto2D(from3d);
	      to = new Point2d(from2d.x - textMargin, from2d.y);
	      this._line(ctx, from2d, to, this.axisColor);

	      var msg = this.zValueLabel(z) + ' ';
	      this.drawAxisLabelZ(ctx, from3d, msg, 5);

	      step.next();
	    }

	    ctx.lineWidth = 1;
	    from = new Point3d(xText, yText, zRange.min);
	    to = new Point3d(xText, yText, zRange.max);
	    this._line3d(ctx, from, to, this.axisColor);

	    // draw x-axis
	    var xMin2d;
	    var xMax2d;
	    ctx.lineWidth = 1;

	    // line at yMin
	    xMin2d = new Point3d(xRange.min, yRange.min, zRange.min);
	    xMax2d = new Point3d(xRange.max, yRange.min, zRange.min);
	    this._line3d(ctx, xMin2d, xMax2d, this.axisColor);
	    // line at ymax
	    xMin2d = new Point3d(xRange.min, yRange.max, zRange.min);
	    xMax2d = new Point3d(xRange.max, yRange.max, zRange.min);
	    this._line3d(ctx, xMin2d, xMax2d, this.axisColor);

	    // draw y-axis
	    ctx.lineWidth = 1;
	    // line at xMin
	    from = new Point3d(xRange.min, yRange.min, zRange.min);
	    to = new Point3d(xRange.min, yRange.max, zRange.min);
	    this._line3d(ctx, from, to, this.axisColor);
	    // line at xMax
	    from = new Point3d(xRange.max, yRange.min, zRange.min);
	    to = new Point3d(xRange.max, yRange.max, zRange.min);
	    this._line3d(ctx, from, to, this.axisColor);

	    // draw x-label
	    var xLabel = this.xLabel;
	    if (xLabel.length > 0) {
	      yOffset = 0.1 / this.scale.y;
	      xText = xRange.center() / 2;
	      yText = armVector.x > 0 ? yRange.min - yOffset : yRange.max + yOffset;
	      text = new Point3d(xText, yText, zRange.min);
	      this.drawAxisLabelX(ctx, text, xLabel, armAngle);
	    }

	    // draw y-label
	    var yLabel = this.yLabel;
	    if (yLabel.length > 0) {
	      xOffset = 0.1 / this.scale.x;
	      xText = armVector.y > 0 ? xRange.min - xOffset : xRange.max + xOffset;
	      yText = yRange.center() / 2;
	      text = new Point3d(xText, yText, zRange.min);

	      this.drawAxisLabelY(ctx, text, yLabel, armAngle);
	    }

	    // draw z-label
	    var zLabel = this.zLabel;
	    if (zLabel.length > 0) {
	      offset = 30; // pixels.  // TODO: relate to the max width of the values on the z axis?
	      xText = armVector.x > 0 ? xRange.min : xRange.max;
	      yText = armVector.y < 0 ? yRange.min : yRange.max;
	      zText = zRange.center() / 2;
	      text = new Point3d(xText, yText, zText);

	      this.drawAxisLabelZ(ctx, text, zLabel, offset);
	    }
	  };

	  /**
	   * Calculate the color based on the given value.
	   * @param {Number} H   Hue, a value be between 0 and 360
	   * @param {Number} S   Saturation, a value between 0 and 1
	   * @param {Number} V   Value, a value between 0 and 1
	   */
	  Graph3d.prototype._hsv2rgb = function (H, S, V) {
	    var R, G, B, C, Hi, X;

	    C = V * S;
	    Hi = Math.floor(H / 60); // hi = 0,1,2,3,4,5
	    X = C * (1 - Math.abs(H / 60 % 2 - 1));

	    switch (Hi) {
	      case 0:
	        R = C;G = X;B = 0;break;
	      case 1:
	        R = X;G = C;B = 0;break;
	      case 2:
	        R = 0;G = C;B = X;break;
	      case 3:
	        R = 0;G = X;B = C;break;
	      case 4:
	        R = X;G = 0;B = C;break;
	      case 5:
	        R = C;G = 0;B = X;break;

	      default:
	        R = 0;G = 0;B = 0;break;
	    }

	    return 'RGB(' + parseInt(R * 255) + ',' + parseInt(G * 255) + ',' + parseInt(B * 255) + ')';
	  };

	  Graph3d.prototype._getStrokeWidth = function (point) {
	    if (point !== undefined) {
	      if (this.showPerspective) {
	        return 1 / -point.trans.z * this.dataColor.strokeWidth;
	      } else {
	        return -(this.eye.z / this.camera.getArmLength()) * this.dataColor.strokeWidth;
	      }
	    }

	    return this.dataColor.strokeWidth;
	  };

	  // -----------------------------------------------------------------------------
	  // Drawing primitives for the graphs
	  // -----------------------------------------------------------------------------


	  /**
	   * Draw a bar element in the view with the given properties.
	   */
	  Graph3d.prototype._redrawBar = function (ctx, point, xWidth, yWidth, color, borderColor) {
	    var i, j, surface;

	    // calculate all corner points
	    var me = this;
	    var point3d = point.point;
	    var zMin = this.zRange.min;
	    var top = [{ point: new Point3d(point3d.x - xWidth, point3d.y - yWidth, point3d.z) }, { point: new Point3d(point3d.x + xWidth, point3d.y - yWidth, point3d.z) }, { point: new Point3d(point3d.x + xWidth, point3d.y + yWidth, point3d.z) }, { point: new Point3d(point3d.x - xWidth, point3d.y + yWidth, point3d.z) }];
	    var bottom = [{ point: new Point3d(point3d.x - xWidth, point3d.y - yWidth, zMin) }, { point: new Point3d(point3d.x + xWidth, point3d.y - yWidth, zMin) }, { point: new Point3d(point3d.x + xWidth, point3d.y + yWidth, zMin) }, { point: new Point3d(point3d.x - xWidth, point3d.y + yWidth, zMin) }];

	    // calculate screen location of the points
	    top.forEach(function (obj) {
	      obj.screen = me._convert3Dto2D(obj.point);
	    });
	    bottom.forEach(function (obj) {
	      obj.screen = me._convert3Dto2D(obj.point);
	    });

	    // create five sides, calculate both corner points and center points
	    var surfaces = [{ corners: top, center: Point3d.avg(bottom[0].point, bottom[2].point) }, { corners: [top[0], top[1], bottom[1], bottom[0]], center: Point3d.avg(bottom[1].point, bottom[0].point) }, { corners: [top[1], top[2], bottom[2], bottom[1]], center: Point3d.avg(bottom[2].point, bottom[1].point) }, { corners: [top[2], top[3], bottom[3], bottom[2]], center: Point3d.avg(bottom[3].point, bottom[2].point) }, { corners: [top[3], top[0], bottom[0], bottom[3]], center: Point3d.avg(bottom[0].point, bottom[3].point) }];
	    point.surfaces = surfaces;

	    // calculate the distance of each of the surface centers to the camera
	    for (j = 0; j < surfaces.length; j++) {
	      surface = surfaces[j];
	      var transCenter = this._convertPointToTranslation(surface.center);
	      surface.dist = this.showPerspective ? transCenter.length() : -transCenter.z;
	      // TODO: this dept calculation doesn't work 100% of the cases due to perspective,
	      //     but the current solution is fast/simple and works in 99.9% of all cases
	      //     the issue is visible in example 14, with graph.setCameraPosition({horizontal: 2.97, vertical: 0.5, distance: 0.9})
	    }

	    // order the surfaces by their (translated) depth
	    surfaces.sort(function (a, b) {
	      var diff = b.dist - a.dist;
	      if (diff) return diff;

	      // if equal depth, sort the top surface last
	      if (a.corners === top) return 1;
	      if (b.corners === top) return -1;

	      // both are equal
	      return 0;
	    });

	    // draw the ordered surfaces
	    ctx.lineWidth = this._getStrokeWidth(point);
	    ctx.strokeStyle = borderColor;
	    ctx.fillStyle = color;
	    // NOTE: we start at j=2 instead of j=0 as we don't need to draw the two surfaces at the backside
	    for (j = 2; j < surfaces.length; j++) {
	      surface = surfaces[j];
	      this._polygon(ctx, surface.corners);
	    }
	  };

	  /**
	   * Draw a polygon using the passed points and fill it with the passed style and stroke.
	   *
	   * @param points      an array of points. 
	   * @param fillStyle   optional; the fill style to set
	   * @param strokeStyle optional; the stroke style to set
	   */
	  Graph3d.prototype._polygon = function (ctx, points, fillStyle, strokeStyle) {
	    if (points.length < 2) {
	      return;
	    }

	    if (fillStyle !== undefined) {
	      ctx.fillStyle = fillStyle;
	    }
	    if (strokeStyle !== undefined) {
	      ctx.strokeStyle = strokeStyle;
	    }
	    ctx.beginPath();
	    ctx.moveTo(points[0].screen.x, points[0].screen.y);

	    for (var i = 1; i < points.length; ++i) {
	      var point = points[i];
	      ctx.lineTo(point.screen.x, point.screen.y);
	    }

	    ctx.closePath();
	    ctx.fill();
	    ctx.stroke(); // TODO: only draw stroke when strokeWidth > 0
	  };

	  /**
	   * @param size optional; if not specified use value from 'this._dotSize()`
	   */
	  Graph3d.prototype._drawCircle = function (ctx, point, color, borderColor, size) {
	    var radius = this._calcRadius(point, size);

	    ctx.lineWidth = this._getStrokeWidth(point);
	    ctx.strokeStyle = borderColor;
	    ctx.fillStyle = color;
	    ctx.beginPath();
	    ctx.arc(point.screen.x, point.screen.y, radius, 0, Math.PI * 2, true);
	    ctx.fill();
	    ctx.stroke();
	  };

	  /**
	   * Determine the colors for the 'regular' graph styles.
	   */
	  Graph3d.prototype._getColorsRegular = function (point) {
	    // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	    var hue = (1 - (point.point.z - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
	    var color = this._hsv2rgb(hue, 1, 1);
	    var borderColor = this._hsv2rgb(hue, 1, 0.8);

	    return {
	      fill: color,
	      border: borderColor
	    };
	  };

	  /**
	   * Get the colors for the 'color' graph styles.
	   * These styles are currently: 'bar-color' and 'dot-color'
	   */
	  Graph3d.prototype._getColorsColor = function (point) {
	    // calculate the color based on the value
	    var hue = (1 - (point.point.value - this.valueRange.min) * this.scale.value) * 240;
	    var color = this._hsv2rgb(hue, 1, 1);
	    var borderColor = this._hsv2rgb(hue, 1, 0.8);

	    return {
	      fill: color,
	      border: borderColor
	    };
	  };

	  /**
	   * Get the colors for the 'size' graph styles.
	   * These styles are currently: 'bar-size' and 'dot-size'
	   */
	  Graph3d.prototype._getColorsSize = function () {
	    return {
	      fill: this.dataColor.fill,
	      border: this.dataColor.stroke
	    };
	  };

	  /**
	   * Determine the size of a point on-screen, as determined by the
	   * distance to the camera.
	   *
	   * @param size the size that needs to be translated to screen coordinates.
	   *             optional; if not passed, use the default point size.
	   */
	  Graph3d.prototype._calcRadius = function (point, size) {
	    if (size === undefined) {
	      size = this._dotSize();
	    }

	    var radius;
	    if (this.showPerspective) {
	      radius = size / -point.trans.z;
	    } else {
	      radius = size * -(this.eye.z / this.camera.getArmLength());
	    }
	    if (radius < 0) {
	      radius = 0;
	    }

	    return radius;
	  };

	  // -----------------------------------------------------------------------------
	  // Methods for drawing points per graph style.
	  // -----------------------------------------------------------------------------


	  /**
	   * Draw single datapoint for graph style 'bar'.
	   */
	  Graph3d.prototype._redrawBarGraphPoint = function (ctx, point) {
	    var xWidth = this.xBarWidth / 2;
	    var yWidth = this.yBarWidth / 2;
	    var colors = this._getColorsRegular(point);

	    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
	  };

	  /**
	   * Draw single datapoint for graph style 'bar-color'.
	   */
	  Graph3d.prototype._redrawBarColorGraphPoint = function (ctx, point) {
	    var xWidth = this.xBarWidth / 2;
	    var yWidth = this.yBarWidth / 2;
	    var colors = this._getColorsColor(point);

	    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
	  };

	  /**
	   * Draw single datapoint for graph style 'bar-size'.
	   */
	  Graph3d.prototype._redrawBarSizeGraphPoint = function (ctx, point) {
	    // calculate size for the bar
	    var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();
	    var xWidth = this.xBarWidth / 2 * (fraction * 0.8 + 0.2);
	    var yWidth = this.yBarWidth / 2 * (fraction * 0.8 + 0.2);

	    var colors = this._getColorsSize();

	    this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
	  };

	  /**
	   * Draw single datapoint for graph style 'dot'.
	   */
	  Graph3d.prototype._redrawDotGraphPoint = function (ctx, point) {
	    var colors = this._getColorsRegular(point);

	    this._drawCircle(ctx, point, colors.fill, colors.border);
	  };

	  /**
	   * Draw single datapoint for graph style 'dot-line'.
	   */
	  Graph3d.prototype._redrawDotLineGraphPoint = function (ctx, point) {
	    // draw a vertical line from the XY-plane to the graph value
	    var from = this._convert3Dto2D(point.bottom);
	    ctx.lineWidth = 1;
	    this._line(ctx, from, point.screen, this.gridColor);

	    this._redrawDotGraphPoint(ctx, point);
	  };

	  /**
	   * Draw single datapoint for graph style 'dot-color'.
	   */
	  Graph3d.prototype._redrawDotColorGraphPoint = function (ctx, point) {
	    var colors = this._getColorsColor(point);

	    this._drawCircle(ctx, point, colors.fill, colors.border);
	  };

	  /**
	   * Draw single datapoint for graph style 'dot-size'.
	   */
	  Graph3d.prototype._redrawDotSizeGraphPoint = function (ctx, point) {
	    var dotSize = this._dotSize();
	    var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();
	    var size = dotSize / 2 + 2 * dotSize * fraction;
	    var colors = this._getColorsSize();

	    this._drawCircle(ctx, point, colors.fill, colors.border, size);
	  };

	  /**
	   * Draw single datapoint for graph style 'surface'.
	   */
	  Graph3d.prototype._redrawSurfaceGraphPoint = function (ctx, point) {
	    var right = point.pointRight;
	    var top = point.pointTop;
	    var cross = point.pointCross;

	    if (point === undefined || right === undefined || top === undefined || cross === undefined) {
	      return;
	    }

	    var topSideVisible = true;
	    var fillStyle;
	    var strokeStyle;
	    var lineWidth;

	    if (this.showGrayBottom || this.showShadow) {
	      // calculate the cross product of the two vectors from center
	      // to left and right, in order to know whether we are looking at the
	      // bottom or at the top side. We can also use the cross product
	      // for calculating light intensity
	      var aDiff = Point3d.subtract(cross.trans, point.trans);
	      var bDiff = Point3d.subtract(top.trans, right.trans);
	      var crossproduct = Point3d.crossProduct(aDiff, bDiff);
	      var len = crossproduct.length();
	      // FIXME: there is a bug with determining the surface side (shadow or colored)

	      topSideVisible = crossproduct.z > 0;
	    }

	    if (topSideVisible) {

	      // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	      var zAvg = (point.point.z + right.point.z + top.point.z + cross.point.z) / 4;
	      var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
	      var s = 1; // saturation
	      var v;

	      if (this.showShadow) {
	        v = Math.min(1 + crossproduct.x / len / 2, 1); // value. TODO: scale
	        fillStyle = this._hsv2rgb(h, s, v);
	        strokeStyle = fillStyle;
	      } else {
	        v = 1;
	        fillStyle = this._hsv2rgb(h, s, v);
	        strokeStyle = this.axisColor; // TODO: should be customizable
	      }
	    } else {
	      fillStyle = 'gray';
	      strokeStyle = this.axisColor;
	    }

	    ctx.lineWidth = this._getStrokeWidth(point);
	    // TODO: only draw stroke when strokeWidth > 0

	    var points = [point, right, cross, top];
	    this._polygon(ctx, points, fillStyle, strokeStyle);
	  };

	  /**
	   * Helper method for _redrawGridGraphPoint()
	   */
	  Graph3d.prototype._drawGridLine = function (ctx, from, to) {
	    if (from === undefined || to === undefined) {
	      return;
	    }

	    // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	    var zAvg = (from.point.z + to.point.z) / 2;
	    var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;

	    ctx.lineWidth = this._getStrokeWidth(from) * 2;
	    ctx.strokeStyle = this._hsv2rgb(h, 1, 1);
	    this._line(ctx, from.screen, to.screen);
	  };

	  /**
	   * Draw single datapoint for graph style 'Grid'.
	   */
	  Graph3d.prototype._redrawGridGraphPoint = function (ctx, point) {
	    this._drawGridLine(ctx, point, point.pointRight);
	    this._drawGridLine(ctx, point, point.pointTop);
	  };

	  /**
	   * Draw single datapoint for graph style 'line'.
	   */
	  Graph3d.prototype._redrawLineGraphPoint = function (ctx, point) {
	    if (point.pointNext === undefined) {
	      return;
	    }

	    ctx.lineWidth = this._getStrokeWidth(point);
	    ctx.strokeStyle = this.dataColor.stroke;

	    this._line(ctx, point.screen, point.pointNext.screen);
	  };

	  /**
	   * Draw all datapoints for currently selected graph style.
	   *
	   */
	  Graph3d.prototype._redrawDataGraph = function () {
	    var ctx = this._getContext();
	    var i;

	    if (this.dataPoints === undefined || this.dataPoints.length <= 0) return; // TODO: throw exception?

	    this._calcTranslations(this.dataPoints);

	    for (i = 0; i < this.dataPoints.length; i++) {
	      var point = this.dataPoints[i];

	      // Using call() ensures that the correct context is used
	      this._pointDrawingMethod.call(this, ctx, point);
	    }
	  };

	  // -----------------------------------------------------------------------------
	  // End methods for drawing points per graph style.
	  // -----------------------------------------------------------------------------


	  /**
	   * Start a moving operation inside the provided parent element
	   * @param {Event}     event     The event that occurred (required for
	   *                  retrieving the  mouse position)
	   */
	  Graph3d.prototype._onMouseDown = function (event) {
	    event = event || window.event;

	    // check if mouse is still down (may be up when focus is lost for example
	    // in an iframe)
	    if (this.leftButtonDown) {
	      this._onMouseUp(event);
	    }

	    // only react on left mouse button down
	    this.leftButtonDown = event.which ? event.which === 1 : event.button === 1;
	    if (!this.leftButtonDown && !this.touchDown) return;

	    // get mouse position (different code for IE and all other browsers)
	    this.startMouseX = getMouseX(event);
	    this.startMouseY = getMouseY(event);

	    this.startStart = new Date(this.start);
	    this.startEnd = new Date(this.end);
	    this.startArmRotation = this.camera.getArmRotation();

	    this.frame.style.cursor = 'move';

	    // add event listeners to handle moving the contents
	    // we store the function onmousemove and onmouseup in the graph, so we can
	    // remove the eventlisteners lateron in the function mouseUp()
	    var me = this;
	    this.onmousemove = function (event) {
	      me._onMouseMove(event);
	    };
	    this.onmouseup = function (event) {
	      me._onMouseUp(event);
	    };
	    util.addEventListener(document, 'mousemove', me.onmousemove);
	    util.addEventListener(document, 'mouseup', me.onmouseup);
	    util.preventDefault(event);
	  };

	  /**
	   * Perform moving operating.
	   * This function activated from within the funcion Graph.mouseDown().
	   * @param {Event}   event  Well, eehh, the event
	   */
	  Graph3d.prototype._onMouseMove = function (event) {
	    event = event || window.event;

	    // calculate change in mouse position
	    var diffX = parseFloat(getMouseX(event)) - this.startMouseX;
	    var diffY = parseFloat(getMouseY(event)) - this.startMouseY;

	    var horizontalNew = this.startArmRotation.horizontal + diffX / 200;
	    var verticalNew = this.startArmRotation.vertical + diffY / 200;

	    var snapAngle = 4; // degrees
	    var snapValue = Math.sin(snapAngle / 360 * 2 * Math.PI);

	    // snap horizontally to nice angles at 0pi, 0.5pi, 1pi, 1.5pi, etc...
	    // the -0.001 is to take care that the vertical axis is always drawn at the left front corner
	    if (Math.abs(Math.sin(horizontalNew)) < snapValue) {
	      horizontalNew = Math.round(horizontalNew / Math.PI) * Math.PI - 0.001;
	    }
	    if (Math.abs(Math.cos(horizontalNew)) < snapValue) {
	      horizontalNew = (Math.round(horizontalNew / Math.PI - 0.5) + 0.5) * Math.PI - 0.001;
	    }

	    // snap vertically to nice angles
	    if (Math.abs(Math.sin(verticalNew)) < snapValue) {
	      verticalNew = Math.round(verticalNew / Math.PI) * Math.PI;
	    }
	    if (Math.abs(Math.cos(verticalNew)) < snapValue) {
	      verticalNew = (Math.round(verticalNew / Math.PI - 0.5) + 0.5) * Math.PI;
	    }

	    this.camera.setArmRotation(horizontalNew, verticalNew);
	    this.redraw();

	    // fire a cameraPositionChange event
	    var parameters = this.getCameraPosition();
	    this.emit('cameraPositionChange', parameters);

	    util.preventDefault(event);
	  };

	  /**
	   * Stop moving operating.
	   * This function activated from within the funcion Graph.mouseDown().
	   * @param {event}  event   The event
	   */
	  Graph3d.prototype._onMouseUp = function (event) {
	    this.frame.style.cursor = 'auto';
	    this.leftButtonDown = false;

	    // remove event listeners here
	    util.removeEventListener(document, 'mousemove', this.onmousemove);
	    util.removeEventListener(document, 'mouseup', this.onmouseup);
	    util.preventDefault(event);
	  };

	  /**
	   * After having moved the mouse, a tooltip should pop up when the mouse is resting on a data point
	   * @param {Event}  event   A mouse move event
	   */
	  Graph3d.prototype._onTooltip = function (event) {
	    var delay = 300; // ms
	    var boundingRect = this.frame.getBoundingClientRect();
	    var mouseX = getMouseX(event) - boundingRect.left;
	    var mouseY = getMouseY(event) - boundingRect.top;

	    if (!this.showTooltip) {
	      return;
	    }

	    if (this.tooltipTimeout) {
	      clearTimeout(this.tooltipTimeout);
	    }

	    // (delayed) display of a tooltip only if no mouse button is down
	    if (this.leftButtonDown) {
	      this._hideTooltip();
	      return;
	    }

	    if (this.tooltip && this.tooltip.dataPoint) {
	      // tooltip is currently visible
	      var dataPoint = this._dataPointFromXY(mouseX, mouseY);
	      if (dataPoint !== this.tooltip.dataPoint) {
	        // datapoint changed
	        if (dataPoint) {
	          this._showTooltip(dataPoint);
	        } else {
	          this._hideTooltip();
	        }
	      }
	    } else {
	      // tooltip is currently not visible
	      var me = this;
	      this.tooltipTimeout = setTimeout(function () {
	        me.tooltipTimeout = null;

	        // show a tooltip if we have a data point
	        var dataPoint = me._dataPointFromXY(mouseX, mouseY);
	        if (dataPoint) {
	          me._showTooltip(dataPoint);
	        }
	      }, delay);
	    }
	  };

	  /**
	   * Event handler for touchstart event on mobile devices
	   */
	  Graph3d.prototype._onTouchStart = function (event) {
	    this.touchDown = true;

	    var me = this;
	    this.ontouchmove = function (event) {
	      me._onTouchMove(event);
	    };
	    this.ontouchend = function (event) {
	      me._onTouchEnd(event);
	    };
	    util.addEventListener(document, 'touchmove', me.ontouchmove);
	    util.addEventListener(document, 'touchend', me.ontouchend);

	    this._onMouseDown(event);
	  };

	  /**
	   * Event handler for touchmove event on mobile devices
	   */
	  Graph3d.prototype._onTouchMove = function (event) {
	    this._onMouseMove(event);
	  };

	  /**
	   * Event handler for touchend event on mobile devices
	   */
	  Graph3d.prototype._onTouchEnd = function (event) {
	    this.touchDown = false;

	    util.removeEventListener(document, 'touchmove', this.ontouchmove);
	    util.removeEventListener(document, 'touchend', this.ontouchend);

	    this._onMouseUp(event);
	  };

	  /**
	   * Event handler for mouse wheel event, used to zoom the graph
	   * Code from http://adomas.org/javascript-mouse-wheel/
	   * @param {event}  event   The event
	   */
	  Graph3d.prototype._onWheel = function (event) {
	    if (!event) /* For IE. */
	      event = window.event;

	    // retrieve delta
	    var delta = 0;
	    if (event.wheelDelta) {
	      /* IE/Opera. */
	      delta = event.wheelDelta / 120;
	    } else if (event.detail) {
	      /* Mozilla case. */
	      // In Mozilla, sign of delta is different than in IE.
	      // Also, delta is multiple of 3.
	      delta = -event.detail / 3;
	    }

	    // If delta is nonzero, handle it.
	    // Basically, delta is now positive if wheel was scrolled up,
	    // and negative, if wheel was scrolled down.
	    if (delta) {
	      var oldLength = this.camera.getArmLength();
	      var newLength = oldLength * (1 - delta / 10);

	      this.camera.setArmLength(newLength);
	      this.redraw();

	      this._hideTooltip();
	    }

	    // fire a cameraPositionChange event
	    var parameters = this.getCameraPosition();
	    this.emit('cameraPositionChange', parameters);

	    // Prevent default actions caused by mouse wheel.
	    // That might be ugly, but we handle scrolls somehow
	    // anyway, so don't bother here..
	    util.preventDefault(event);
	  };

	  /**
	   * Test whether a point lies inside given 2D triangle
	   *
	   * @param   {Point2d}   point
	   * @param   {Point2d[]} triangle
	   * @returns {boolean}   true if given point lies inside or on the edge of the
	   *                      triangle, false otherwise
	   * @private
	   */
	  Graph3d.prototype._insideTriangle = function (point, triangle) {
	    var a = triangle[0],
	        b = triangle[1],
	        c = triangle[2];

	    function sign(x) {
	      return x > 0 ? 1 : x < 0 ? -1 : 0;
	    }

	    var as = sign((b.x - a.x) * (point.y - a.y) - (b.y - a.y) * (point.x - a.x));
	    var bs = sign((c.x - b.x) * (point.y - b.y) - (c.y - b.y) * (point.x - b.x));
	    var cs = sign((a.x - c.x) * (point.y - c.y) - (a.y - c.y) * (point.x - c.x));

	    // each of the three signs must be either equal to each other or zero
	    return (as == 0 || bs == 0 || as == bs) && (bs == 0 || cs == 0 || bs == cs) && (as == 0 || cs == 0 || as == cs);
	  };

	  /**
	   * Find a data point close to given screen position (x, y)
	   *
	   * @param   {Number} x
	   * @param   {Number} y
	   * @returns {Object | null} The closest data point or null if not close to any
	   *                          data point
	   * @private
	   */
	  Graph3d.prototype._dataPointFromXY = function (x, y) {
	    var i,
	        distMax = 100,
	        // px
	    dataPoint = null,
	        closestDataPoint = null,
	        closestDist = null,
	        center = new Point2d(x, y);

	    if (this.style === Graph3d.STYLE.BAR || this.style === Graph3d.STYLE.BARCOLOR || this.style === Graph3d.STYLE.BARSIZE) {
	      // the data points are ordered from far away to closest
	      for (i = this.dataPoints.length - 1; i >= 0; i--) {
	        dataPoint = this.dataPoints[i];
	        var surfaces = dataPoint.surfaces;
	        if (surfaces) {
	          for (var s = surfaces.length - 1; s >= 0; s--) {
	            // split each surface in two triangles, and see if the center point is inside one of these
	            var surface = surfaces[s];
	            var corners = surface.corners;
	            var triangle1 = [corners[0].screen, corners[1].screen, corners[2].screen];
	            var triangle2 = [corners[2].screen, corners[3].screen, corners[0].screen];
	            if (this._insideTriangle(center, triangle1) || this._insideTriangle(center, triangle2)) {
	              // return immediately at the first hit
	              return dataPoint;
	            }
	          }
	        }
	      }
	    } else {
	      // find the closest data point, using distance to the center of the point on 2d screen
	      for (i = 0; i < this.dataPoints.length; i++) {
	        dataPoint = this.dataPoints[i];
	        var point = dataPoint.screen;
	        if (point) {
	          var distX = Math.abs(x - point.x);
	          var distY = Math.abs(y - point.y);
	          var dist = Math.sqrt(distX * distX + distY * distY);

	          if ((closestDist === null || dist < closestDist) && dist < distMax) {
	            closestDist = dist;
	            closestDataPoint = dataPoint;
	          }
	        }
	      }
	    }

	    return closestDataPoint;
	  };

	  /**
	   * Display a tooltip for given data point
	   * @param {Object} dataPoint
	   * @private
	   */
	  Graph3d.prototype._showTooltip = function (dataPoint) {
	    var content, line, dot;

	    if (!this.tooltip) {
	      content = document.createElement('div');
	      content.style.position = 'absolute';
	      content.style.padding = '10px';
	      content.style.border = '1px solid #4d4d4d';
	      content.style.color = '#1a1a1a';
	      content.style.background = 'rgba(255,255,255,0.7)';
	      content.style.borderRadius = '2px';
	      content.style.boxShadow = '5px 5px 10px rgba(128,128,128,0.5)';

	      line = document.createElement('div');
	      line.style.position = 'absolute';
	      line.style.height = '40px';
	      line.style.width = '0';
	      line.style.borderLeft = '1px solid #4d4d4d';

	      dot = document.createElement('div');
	      dot.style.position = 'absolute';
	      dot.style.height = '0';
	      dot.style.width = '0';
	      dot.style.border = '5px solid #4d4d4d';
	      dot.style.borderRadius = '5px';

	      this.tooltip = {
	        dataPoint: null,
	        dom: {
	          content: content,
	          line: line,
	          dot: dot
	        }
	      };
	    } else {
	      content = this.tooltip.dom.content;
	      line = this.tooltip.dom.line;
	      dot = this.tooltip.dom.dot;
	    }

	    this._hideTooltip();

	    this.tooltip.dataPoint = dataPoint;
	    if (typeof this.showTooltip === 'function') {
	      content.innerHTML = this.showTooltip(dataPoint.point);
	    } else {
	      content.innerHTML = '<table>' + '<tr><td>' + this.xLabel + ':</td><td>' + dataPoint.point.x + '</td></tr>' + '<tr><td>' + this.yLabel + ':</td><td>' + dataPoint.point.y + '</td></tr>' + '<tr><td>' + this.zLabel + ':</td><td>' + dataPoint.point.z + '</td></tr>' + '</table>';
	    }

	    content.style.left = '0';
	    content.style.top = '0';
	    this.frame.appendChild(content);
	    this.frame.appendChild(line);
	    this.frame.appendChild(dot);

	    // calculate sizes
	    var contentWidth = content.offsetWidth;
	    var contentHeight = content.offsetHeight;
	    var lineHeight = line.offsetHeight;
	    var dotWidth = dot.offsetWidth;
	    var dotHeight = dot.offsetHeight;

	    var left = dataPoint.screen.x - contentWidth / 2;
	    left = Math.min(Math.max(left, 10), this.frame.clientWidth - 10 - contentWidth);

	    line.style.left = dataPoint.screen.x + 'px';
	    line.style.top = dataPoint.screen.y - lineHeight + 'px';
	    content.style.left = left + 'px';
	    content.style.top = dataPoint.screen.y - lineHeight - contentHeight + 'px';
	    dot.style.left = dataPoint.screen.x - dotWidth / 2 + 'px';
	    dot.style.top = dataPoint.screen.y - dotHeight / 2 + 'px';
	  };

	  /**
	   * Hide the tooltip when displayed
	   * @private
	   */
	  Graph3d.prototype._hideTooltip = function () {
	    if (this.tooltip) {
	      this.tooltip.dataPoint = null;

	      for (var prop in this.tooltip.dom) {
	        if (this.tooltip.dom.hasOwnProperty(prop)) {
	          var elem = this.tooltip.dom[prop];
	          if (elem && elem.parentNode) {
	            elem.parentNode.removeChild(elem);
	          }
	        }
	      }
	    }
	  };

	  /**--------------------------------------------------------------------------**/

	  /**
	   * Get the horizontal mouse position from a mouse event
	   *
	   * @param   {Event}  event
	   * @returns {Number} mouse x
	   */
	  function getMouseX(event) {
	    if ('clientX' in event) return event.clientX;
	    return event.targetTouches[0] && event.targetTouches[0].clientX || 0;
	  }

	  /**
	   * Get the vertical mouse position from a mouse event
	   *
	   * @param   {Event}  event
	   * @returns {Number} mouse y
	   */
	  function getMouseY(event) {
	    if ('clientY' in event) return event.clientY;
	    return event.targetTouches[0] && event.targetTouches[0].clientY || 0;
	  }

	  // -----------------------------------------------------------------------------
	  //  Public methods for specific settings
	  // -----------------------------------------------------------------------------

	  /**
	   * Set the rotation and distance of the camera
	   *
	   * @param {Object}  pos            An object with the camera position
	   * @param {?Number} pos.horizontal The horizontal rotation, between 0 and 2*PI.
	   *                                 Optional, can be left undefined.
	   * @param {?Number} pos.vertical   The vertical rotation, between 0 and 0.5*PI.
	   *                                 if vertical=0.5*PI, the graph is shown from
	   *                                 the top. Optional, can be left undefined.
	   * @param {?Number} pos.distance   The (normalized) distance of the camera to the
	   *                                 center of the graph, a value between 0.71 and
	   *                                 5.0. Optional, can be left undefined.
	   */
	  Graph3d.prototype.setCameraPosition = function (pos) {
	    Settings.setCameraPosition(pos, this);
	    this.redraw();
	  };

	  // -----------------------------------------------------------------------------
	  //  End public methods for specific settings
	  // -----------------------------------------------------------------------------


	  module.exports = Graph3d;

	/***/ },
	/* 13 */
	/***/ function(module, exports) {

	  
	  /**
	   * Expose `Emitter`.
	   */

	  module.exports = Emitter;

	  /**
	   * Initialize a new `Emitter`.
	   *
	   * @api public
	   */

	  function Emitter(obj) {
	    if (obj) return mixin(obj);
	  };

	  /**
	   * Mixin the emitter properties.
	   *
	   * @param {Object} obj
	   * @return {Object}
	   * @api private
	   */

	  function mixin(obj) {
	    for (var key in Emitter.prototype) {
	      obj[key] = Emitter.prototype[key];
	    }
	    return obj;
	  }

	  /**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */

	  Emitter.prototype.on =
	  Emitter.prototype.addEventListener = function(event, fn){
	    this._callbacks = this._callbacks || {};
	    (this._callbacks[event] = this._callbacks[event] || [])
	      .push(fn);
	    return this;
	  };

	  /**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */

	  Emitter.prototype.once = function(event, fn){
	    var self = this;
	    this._callbacks = this._callbacks || {};

	    function on() {
	      self.off(event, on);
	      fn.apply(this, arguments);
	    }

	    on.fn = fn;
	    this.on(event, on);
	    return this;
	  };

	  /**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */

	  Emitter.prototype.off =
	  Emitter.prototype.removeListener =
	  Emitter.prototype.removeAllListeners =
	  Emitter.prototype.removeEventListener = function(event, fn){
	    this._callbacks = this._callbacks || {};

	    // all
	    if (0 == arguments.length) {
	      this._callbacks = {};
	      return this;
	    }

	    // specific event
	    var callbacks = this._callbacks[event];
	    if (!callbacks) return this;

	    // remove all handlers
	    if (1 == arguments.length) {
	      delete this._callbacks[event];
	      return this;
	    }

	    // remove specific handler
	    var cb;
	    for (var i = 0; i < callbacks.length; i++) {
	      cb = callbacks[i];
	      if (cb === fn || cb.fn === fn) {
	        callbacks.splice(i, 1);
	        break;
	      }
	    }
	    return this;
	  };

	  /**
	   * Emit `event` with the given args.
	   *
	   * @param {String} event
	   * @param {Mixed} ...
	   * @return {Emitter}
	   */

	  Emitter.prototype.emit = function(event){
	    this._callbacks = this._callbacks || {};
	    var args = [].slice.call(arguments, 1)
	      , callbacks = this._callbacks[event];

	    if (callbacks) {
	      callbacks = callbacks.slice(0);
	      for (var i = 0, len = callbacks.length; i < len; ++i) {
	        callbacks[i].apply(this, args);
	      }
	    }

	    return this;
	  };

	  /**
	   * Return array of callbacks for `event`.
	   *
	   * @param {String} event
	   * @return {Array}
	   * @api public
	   */

	  Emitter.prototype.listeners = function(event){
	    this._callbacks = this._callbacks || {};
	    return this._callbacks[event] || [];
	  };

	  /**
	   * Check if this emitter has `event` handlers.
	   *
	   * @param {String} event
	   * @return {Boolean}
	   * @api public
	   */

	  Emitter.prototype.hasListeners = function(event){
	    return !! this.listeners(event).length;
	  };


	/***/ },
	/* 14 */
	/***/ function(module, exports) {

	  "use strict";

	  /**
	   * @prototype Point3d
	   * @param {Number} [x]
	   * @param {Number} [y]
	   * @param {Number} [z]
	   */
	  function Point3d(x, y, z) {
	    this.x = x !== undefined ? x : 0;
	    this.y = y !== undefined ? y : 0;
	    this.z = z !== undefined ? z : 0;
	  };

	  /**
	   * Subtract the two provided points, returns a-b
	   * @param {Point3d} a
	   * @param {Point3d} b
	   * @return {Point3d} a-b
	   */
	  Point3d.subtract = function (a, b) {
	    var sub = new Point3d();
	    sub.x = a.x - b.x;
	    sub.y = a.y - b.y;
	    sub.z = a.z - b.z;
	    return sub;
	  };

	  /**
	   * Add the two provided points, returns a+b
	   * @param {Point3d} a
	   * @param {Point3d} b
	   * @return {Point3d} a+b
	   */
	  Point3d.add = function (a, b) {
	    var sum = new Point3d();
	    sum.x = a.x + b.x;
	    sum.y = a.y + b.y;
	    sum.z = a.z + b.z;
	    return sum;
	  };

	  /**
	   * Calculate the average of two 3d points
	   * @param {Point3d} a
	   * @param {Point3d} b
	   * @return {Point3d} The average, (a+b)/2
	   */
	  Point3d.avg = function (a, b) {
	    return new Point3d((a.x + b.x) / 2, (a.y + b.y) / 2, (a.z + b.z) / 2);
	  };

	  /**
	   * Calculate the cross product of the two provided points, returns axb
	   * Documentation: http://en.wikipedia.org/wiki/Cross_product
	   * @param {Point3d} a
	   * @param {Point3d} b
	   * @return {Point3d} cross product axb
	   */
	  Point3d.crossProduct = function (a, b) {
	    var crossproduct = new Point3d();

	    crossproduct.x = a.y * b.z - a.z * b.y;
	    crossproduct.y = a.z * b.x - a.x * b.z;
	    crossproduct.z = a.x * b.y - a.y * b.x;

	    return crossproduct;
	  };

	  /**
	   * Rtrieve the length of the vector (or the distance from this point to the origin
	   * @return {Number}  length
	   */
	  Point3d.prototype.length = function () {
	    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	  };

	  module.exports = Point3d;

	/***/ },
	/* 15 */
	/***/ function(module, exports) {

	  "use strict";

	  /**
	   * @prototype Point2d
	   * @param {Number} [x]
	   * @param {Number} [y]
	   */
	  function Point2d(x, y) {
	    this.x = x !== undefined ? x : 0;
	    this.y = y !== undefined ? y : 0;
	  }

	  module.exports = Point2d;

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Point3d = __webpack_require__(14);

	  /**
	   * @class Camera
	   * The camera is mounted on a (virtual) camera arm. The camera arm can rotate
	   * The camera is always looking in the direction of the origin of the arm.
	   * This way, the camera always rotates around one fixed point, the location
	   * of the camera arm.
	   *
	   * Documentation:
	   *   http://en.wikipedia.org/wiki/3D_projection
	   */
	  function Camera() {
	    this.armLocation = new Point3d();
	    this.armRotation = {};
	    this.armRotation.horizontal = 0;
	    this.armRotation.vertical = 0;
	    this.armLength = 1.7;

	    this.cameraLocation = new Point3d();
	    this.cameraRotation = new Point3d(0.5 * Math.PI, 0, 0);

	    this.calculateCameraOrientation();
	  }

	  /**
	   * Set the location (origin) of the arm
	   * @param {Number} x  Normalized value of x
	   * @param {Number} y  Normalized value of y
	   * @param {Number} z  Normalized value of z
	   */
	  Camera.prototype.setArmLocation = function (x, y, z) {
	    this.armLocation.x = x;
	    this.armLocation.y = y;
	    this.armLocation.z = z;

	    this.calculateCameraOrientation();
	  };

	  /**
	   * Set the rotation of the camera arm
	   * @param {Number} horizontal   The horizontal rotation, between 0 and 2*PI.
	   *                Optional, can be left undefined.
	   * @param {Number} vertical   The vertical rotation, between 0 and 0.5*PI
	   *                if vertical=0.5*PI, the graph is shown from the
	   *                top. Optional, can be left undefined.
	   */
	  Camera.prototype.setArmRotation = function (horizontal, vertical) {
	    if (horizontal !== undefined) {
	      this.armRotation.horizontal = horizontal;
	    }

	    if (vertical !== undefined) {
	      this.armRotation.vertical = vertical;
	      if (this.armRotation.vertical < 0) this.armRotation.vertical = 0;
	      if (this.armRotation.vertical > 0.5 * Math.PI) this.armRotation.vertical = 0.5 * Math.PI;
	    }

	    if (horizontal !== undefined || vertical !== undefined) {
	      this.calculateCameraOrientation();
	    }
	  };

	  /**
	   * Retrieve the current arm rotation
	   * @return {object}   An object with parameters horizontal and vertical
	   */
	  Camera.prototype.getArmRotation = function () {
	    var rot = {};
	    rot.horizontal = this.armRotation.horizontal;
	    rot.vertical = this.armRotation.vertical;

	    return rot;
	  };

	  /**
	   * Set the (normalized) length of the camera arm.
	   * @param {Number} length A length between 0.71 and 5.0
	   */
	  Camera.prototype.setArmLength = function (length) {
	    if (length === undefined) return;

	    this.armLength = length;

	    // Radius must be larger than the corner of the graph,
	    // which has a distance of sqrt(0.5^2+0.5^2) = 0.71 from the center of the
	    // graph
	    if (this.armLength < 0.71) this.armLength = 0.71;
	    if (this.armLength > 5.0) this.armLength = 5.0;

	    this.calculateCameraOrientation();
	  };

	  /**
	   * Retrieve the arm length
	   * @return {Number} length
	   */
	  Camera.prototype.getArmLength = function () {
	    return this.armLength;
	  };

	  /**
	   * Retrieve the camera location
	   * @return {Point3d} cameraLocation
	   */
	  Camera.prototype.getCameraLocation = function () {
	    return this.cameraLocation;
	  };

	  /**
	   * Retrieve the camera rotation
	   * @return {Point3d} cameraRotation
	   */
	  Camera.prototype.getCameraRotation = function () {
	    return this.cameraRotation;
	  };

	  /**
	   * Calculate the location and rotation of the camera based on the
	   * position and orientation of the camera arm
	   */
	  Camera.prototype.calculateCameraOrientation = function () {
	    // calculate location of the camera
	    this.cameraLocation.x = this.armLocation.x - this.armLength * Math.sin(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
	    this.cameraLocation.y = this.armLocation.y - this.armLength * Math.cos(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
	    this.cameraLocation.z = this.armLocation.z + this.armLength * Math.sin(this.armRotation.vertical);

	    // calculate rotation of the camera
	    this.cameraRotation.x = Math.PI / 2 - this.armRotation.vertical;
	    this.cameraRotation.y = 0;
	    this.cameraRotation.z = -this.armRotation.horizontal;
	  };

	  module.exports = Camera;

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var DataView = __webpack_require__(11);

	  /**
	   * @class Filter
	   *
	   * @param {DataSet} data The google data table
	   * @param {Number}  column             The index of the column to be filtered
	   * @param {Graph} graph           The graph
	   */
	  function Filter(data, column, graph) {
	    this.data = data;
	    this.column = column;
	    this.graph = graph; // the parent graph

	    this.index = undefined;
	    this.value = undefined;

	    // read all distinct values and select the first one
	    this.values = graph.getDistinctValues(data.get(), this.column);

	    // sort both numeric and string values correctly
	    this.values.sort(function (a, b) {
	      return a > b ? 1 : a < b ? -1 : 0;
	    });

	    if (this.values.length > 0) {
	      this.selectValue(0);
	    }

	    // create an array with the filtered datapoints. this will be loaded afterwards
	    this.dataPoints = [];

	    this.loaded = false;
	    this.onLoadCallback = undefined;

	    if (graph.animationPreload) {
	      this.loaded = false;
	      this.loadInBackground();
	    } else {
	      this.loaded = true;
	    }
	  };

	  /**
	   * Return the label
	   * @return {string} label
	   */
	  Filter.prototype.isLoaded = function () {
	    return this.loaded;
	  };

	  /**
	   * Return the loaded progress
	   * @return {Number} percentage between 0 and 100
	   */
	  Filter.prototype.getLoadedProgress = function () {
	    var len = this.values.length;

	    var i = 0;
	    while (this.dataPoints[i]) {
	      i++;
	    }

	    return Math.round(i / len * 100);
	  };

	  /**
	   * Return the label
	   * @return {string} label
	   */
	  Filter.prototype.getLabel = function () {
	    return this.graph.filterLabel;
	  };

	  /**
	   * Return the columnIndex of the filter
	   * @return {Number} columnIndex
	   */
	  Filter.prototype.getColumn = function () {
	    return this.column;
	  };

	  /**
	   * Return the currently selected value. Returns undefined if there is no selection
	   * @return {*} value
	   */
	  Filter.prototype.getSelectedValue = function () {
	    if (this.index === undefined) return undefined;

	    return this.values[this.index];
	  };

	  /**
	   * Retrieve all values of the filter
	   * @return {Array} values
	   */
	  Filter.prototype.getValues = function () {
	    return this.values;
	  };

	  /**
	   * Retrieve one value of the filter
	   * @param {Number}  index
	   * @return {*} value
	   */
	  Filter.prototype.getValue = function (index) {
	    if (index >= this.values.length) throw new Error('Index out of range');

	    return this.values[index];
	  };

	  /**
	   * Retrieve the (filtered) dataPoints for the currently selected filter index
	   * @param {Number} [index] (optional)
	   * @return {Array} dataPoints
	   */
	  Filter.prototype._getDataPoints = function (index) {
	    if (index === undefined) index = this.index;

	    if (index === undefined) return [];

	    var dataPoints;
	    if (this.dataPoints[index]) {
	      dataPoints = this.dataPoints[index];
	    } else {
	      var f = {};
	      f.column = this.column;
	      f.value = this.values[index];

	      var dataView = new DataView(this.data, { filter: function filter(item) {
	          return item[f.column] == f.value;
	        } }).get();
	      dataPoints = this.graph._getDataPoints(dataView);

	      this.dataPoints[index] = dataPoints;
	    }

	    return dataPoints;
	  };

	  /**
	   * Set a callback function when the filter is fully loaded.
	   */
	  Filter.prototype.setOnLoadCallback = function (callback) {
	    this.onLoadCallback = callback;
	  };

	  /**
	   * Add a value to the list with available values for this filter
	   * No double entries will be created.
	   * @param {Number} index
	   */
	  Filter.prototype.selectValue = function (index) {
	    if (index >= this.values.length) throw new Error('Index out of range');

	    this.index = index;
	    this.value = this.values[index];
	  };

	  /**
	   * Load all filtered rows in the background one by one
	   * Start this method without providing an index!
	   */
	  Filter.prototype.loadInBackground = function (index) {
	    if (index === undefined) index = 0;

	    var frame = this.graph.frame;

	    if (index < this.values.length) {
	      var dataPointsTemp = this._getDataPoints(index);
	      //this.graph.redrawInfo(); // TODO: not neat

	      // create a progress box
	      if (frame.progress === undefined) {
	        frame.progress = document.createElement('DIV');
	        frame.progress.style.position = 'absolute';
	        frame.progress.style.color = 'gray';
	        frame.appendChild(frame.progress);
	      }
	      var progress = this.getLoadedProgress();
	      frame.progress.innerHTML = 'Loading animation... ' + progress + '%';
	      // TODO: this is no nice solution...
	      frame.progress.style.bottom = 60 + 'px'; // TODO: use height of slider
	      frame.progress.style.left = 10 + 'px';

	      var me = this;
	      setTimeout(function () {
	        me.loadInBackground(index + 1);
	      }, 10);
	      this.loaded = false;
	    } else {
	      this.loaded = true;

	      // remove the progress box
	      if (frame.progress !== undefined) {
	        frame.removeChild(frame.progress);
	        frame.progress = undefined;
	      }

	      if (this.onLoadCallback) this.onLoadCallback();
	    }
	  };

	  module.exports = Filter;

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);

	  /**
	   * @constructor Slider
	   *
	   * An html slider control with start/stop/prev/next buttons
	   * @param {Element} container  The element where the slider will be created
	   * @param {Object} options   Available options:
	   *                 {boolean} visible   If true (default) the
	   *                           slider is visible.
	   */
	  function Slider(container, options) {
	    if (container === undefined) {
	      throw new Error('No container element defined');
	    }
	    this.container = container;
	    this.visible = options && options.visible != undefined ? options.visible : true;

	    if (this.visible) {
	      this.frame = document.createElement('DIV');
	      //this.frame.style.backgroundColor = '#E5E5E5';
	      this.frame.style.width = '100%';
	      this.frame.style.position = 'relative';
	      this.container.appendChild(this.frame);

	      this.frame.prev = document.createElement('INPUT');
	      this.frame.prev.type = 'BUTTON';
	      this.frame.prev.value = 'Prev';
	      this.frame.appendChild(this.frame.prev);

	      this.frame.play = document.createElement('INPUT');
	      this.frame.play.type = 'BUTTON';
	      this.frame.play.value = 'Play';
	      this.frame.appendChild(this.frame.play);

	      this.frame.next = document.createElement('INPUT');
	      this.frame.next.type = 'BUTTON';
	      this.frame.next.value = 'Next';
	      this.frame.appendChild(this.frame.next);

	      this.frame.bar = document.createElement('INPUT');
	      this.frame.bar.type = 'BUTTON';
	      this.frame.bar.style.position = 'absolute';
	      this.frame.bar.style.border = '1px solid red';
	      this.frame.bar.style.width = '100px';
	      this.frame.bar.style.height = '6px';
	      this.frame.bar.style.borderRadius = '2px';
	      this.frame.bar.style.MozBorderRadius = '2px';
	      this.frame.bar.style.border = '1px solid #7F7F7F';
	      this.frame.bar.style.backgroundColor = '#E5E5E5';
	      this.frame.appendChild(this.frame.bar);

	      this.frame.slide = document.createElement('INPUT');
	      this.frame.slide.type = 'BUTTON';
	      this.frame.slide.style.margin = '0px';
	      this.frame.slide.value = ' ';
	      this.frame.slide.style.position = 'relative';
	      this.frame.slide.style.left = '-100px';
	      this.frame.appendChild(this.frame.slide);

	      // create events
	      var me = this;
	      this.frame.slide.onmousedown = function (event) {
	        me._onMouseDown(event);
	      };
	      this.frame.prev.onclick = function (event) {
	        me.prev(event);
	      };
	      this.frame.play.onclick = function (event) {
	        me.togglePlay(event);
	      };
	      this.frame.next.onclick = function (event) {
	        me.next(event);
	      };
	    }

	    this.onChangeCallback = undefined;

	    this.values = [];
	    this.index = undefined;

	    this.playTimeout = undefined;
	    this.playInterval = 1000; // milliseconds
	    this.playLoop = true;
	  }

	  /**
	   * Select the previous index
	   */
	  Slider.prototype.prev = function () {
	    var index = this.getIndex();
	    if (index > 0) {
	      index--;
	      this.setIndex(index);
	    }
	  };

	  /**
	   * Select the next index
	   */
	  Slider.prototype.next = function () {
	    var index = this.getIndex();
	    if (index < this.values.length - 1) {
	      index++;
	      this.setIndex(index);
	    }
	  };

	  /**
	   * Select the next index
	   */
	  Slider.prototype.playNext = function () {
	    var start = new Date();

	    var index = this.getIndex();
	    if (index < this.values.length - 1) {
	      index++;
	      this.setIndex(index);
	    } else if (this.playLoop) {
	      // jump to the start
	      index = 0;
	      this.setIndex(index);
	    }

	    var end = new Date();
	    var diff = end - start;

	    // calculate how much time it to to set the index and to execute the callback
	    // function.
	    var interval = Math.max(this.playInterval - diff, 0);
	    // document.title = diff // TODO: cleanup

	    var me = this;
	    this.playTimeout = setTimeout(function () {
	      me.playNext();
	    }, interval);
	  };

	  /**
	   * Toggle start or stop playing
	   */
	  Slider.prototype.togglePlay = function () {
	    if (this.playTimeout === undefined) {
	      this.play();
	    } else {
	      this.stop();
	    }
	  };

	  /**
	   * Start playing
	   */
	  Slider.prototype.play = function () {
	    // Test whether already playing
	    if (this.playTimeout) return;

	    this.playNext();

	    if (this.frame) {
	      this.frame.play.value = 'Stop';
	    }
	  };

	  /**
	   * Stop playing
	   */
	  Slider.prototype.stop = function () {
	    clearInterval(this.playTimeout);
	    this.playTimeout = undefined;

	    if (this.frame) {
	      this.frame.play.value = 'Play';
	    }
	  };

	  /**
	   * Set a callback function which will be triggered when the value of the
	   * slider bar has changed.
	   */
	  Slider.prototype.setOnChangeCallback = function (callback) {
	    this.onChangeCallback = callback;
	  };

	  /**
	   * Set the interval for playing the list
	   * @param {Number} interval   The interval in milliseconds
	   */
	  Slider.prototype.setPlayInterval = function (interval) {
	    this.playInterval = interval;
	  };

	  /**
	   * Retrieve the current play interval
	   * @return {Number} interval   The interval in milliseconds
	   */
	  Slider.prototype.getPlayInterval = function (interval) {
	    return this.playInterval;
	  };

	  /**
	   * Set looping on or off
	   * @pararm {boolean} doLoop  If true, the slider will jump to the start when
	   *               the end is passed, and will jump to the end
	   *               when the start is passed.
	   */
	  Slider.prototype.setPlayLoop = function (doLoop) {
	    this.playLoop = doLoop;
	  };

	  /**
	   * Execute the onchange callback function
	   */
	  Slider.prototype.onChange = function () {
	    if (this.onChangeCallback !== undefined) {
	      this.onChangeCallback();
	    }
	  };

	  /**
	   * redraw the slider on the correct place
	   */
	  Slider.prototype.redraw = function () {
	    if (this.frame) {
	      // resize the bar
	      this.frame.bar.style.top = this.frame.clientHeight / 2 - this.frame.bar.offsetHeight / 2 + 'px';
	      this.frame.bar.style.width = this.frame.clientWidth - this.frame.prev.clientWidth - this.frame.play.clientWidth - this.frame.next.clientWidth - 30 + 'px';

	      // position the slider button
	      var left = this.indexToLeft(this.index);
	      this.frame.slide.style.left = left + 'px';
	    }
	  };

	  /**
	   * Set the list with values for the slider
	   * @param {Array} values   A javascript array with values (any type)
	   */
	  Slider.prototype.setValues = function (values) {
	    this.values = values;

	    if (this.values.length > 0) this.setIndex(0);else this.index = undefined;
	  };

	  /**
	   * Select a value by its index
	   * @param {Number} index
	   */
	  Slider.prototype.setIndex = function (index) {
	    if (index < this.values.length) {
	      this.index = index;

	      this.redraw();
	      this.onChange();
	    } else {
	      throw new Error('Index out of range');
	    }
	  };

	  /**
	   * retrieve the index of the currently selected vaue
	   * @return {Number} index
	   */
	  Slider.prototype.getIndex = function () {
	    return this.index;
	  };

	  /**
	   * retrieve the currently selected value
	   * @return {*} value
	   */
	  Slider.prototype.get = function () {
	    return this.values[this.index];
	  };

	  Slider.prototype._onMouseDown = function (event) {
	    // only react on left mouse button down
	    var leftButtonDown = event.which ? event.which === 1 : event.button === 1;
	    if (!leftButtonDown) return;

	    this.startClientX = event.clientX;
	    this.startSlideX = parseFloat(this.frame.slide.style.left);

	    this.frame.style.cursor = 'move';

	    // add event listeners to handle moving the contents
	    // we store the function onmousemove and onmouseup in the graph, so we can
	    // remove the eventlisteners lateron in the function mouseUp()
	    var me = this;
	    this.onmousemove = function (event) {
	      me._onMouseMove(event);
	    };
	    this.onmouseup = function (event) {
	      me._onMouseUp(event);
	    };
	    util.addEventListener(document, 'mousemove', this.onmousemove);
	    util.addEventListener(document, 'mouseup', this.onmouseup);
	    util.preventDefault(event);
	  };

	  Slider.prototype.leftToIndex = function (left) {
	    var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;
	    var x = left - 3;

	    var index = Math.round(x / width * (this.values.length - 1));
	    if (index < 0) index = 0;
	    if (index > this.values.length - 1) index = this.values.length - 1;

	    return index;
	  };

	  Slider.prototype.indexToLeft = function (index) {
	    var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;

	    var x = index / (this.values.length - 1) * width;
	    var left = x + 3;

	    return left;
	  };

	  Slider.prototype._onMouseMove = function (event) {
	    var diff = event.clientX - this.startClientX;
	    var x = this.startSlideX + diff;

	    var index = this.leftToIndex(x);

	    this.setIndex(index);

	    util.preventDefault();
	  };

	  Slider.prototype._onMouseUp = function (event) {
	    this.frame.style.cursor = 'auto';

	    // remove event listeners
	    util.removeEventListener(document, 'mousemove', this.onmousemove);
	    util.removeEventListener(document, 'mouseup', this.onmouseup);

	    util.preventDefault();
	  };

	  module.exports = Slider;

	/***/ },
	/* 19 */
	/***/ function(module, exports) {

	  'use strict';

	  /**
	   * @prototype StepNumber
	   * The class StepNumber is an iterator for Numbers. You provide a start and end
	   * value, and a best step size. StepNumber itself rounds to fixed values and
	   * a finds the step that best fits the provided step.
	   *
	   * If prettyStep is true, the step size is chosen as close as possible to the
	   * provided step, but being a round value like 1, 2, 5, 10, 20, 50, ....
	   *
	   * Example usage:
	   *   var step = new StepNumber(0, 10, 2.5, true);
	   *   step.start();
	   *   while (!step.end()) {
	   *   alert(step.getCurrent());
	   *   step.next();
	   *   }
	   *
	   * Version: 1.0
	   *
	   * @param {Number} start     The start value
	   * @param {Number} end     The end value
	   * @param {Number} step    Optional. Step size. Must be a positive value.
	   * @param {boolean} prettyStep Optional. If true, the step size is rounded
	   *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	   */
	  function StepNumber(start, end, step, prettyStep) {
	    // set default values
	    this._start = 0;
	    this._end = 0;
	    this._step = 1;
	    this.prettyStep = true;
	    this.precision = 5;

	    this._current = 0;
	    this.setRange(start, end, step, prettyStep);
	  };

	  /**
	   * Check for input values, to prevent disasters from happening
	   *
	   * Source: http://stackoverflow.com/a/1830844
	   */
	  StepNumber.prototype.isNumeric = function (n) {
	    return !isNaN(parseFloat(n)) && isFinite(n);
	  };

	  /**
	   * Set a new range: start, end and step.
	   *
	   * @param {Number} start     The start value
	   * @param {Number} end     The end value
	   * @param {Number} step    Optional. Step size. Must be a positive value.
	   * @param {boolean} prettyStep Optional. If true, the step size is rounded
	   *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	   */
	  StepNumber.prototype.setRange = function (start, end, step, prettyStep) {
	    if (!this.isNumeric(start)) {
	      throw new Error('Parameter \'start\' is not numeric; value: ' + start);
	    }
	    if (!this.isNumeric(end)) {
	      throw new Error('Parameter \'end\' is not numeric; value: ' + start);
	    }
	    if (!this.isNumeric(step)) {
	      throw new Error('Parameter \'step\' is not numeric; value: ' + start);
	    }

	    this._start = start ? start : 0;
	    this._end = end ? end : 0;

	    this.setStep(step, prettyStep);
	  };

	  /**
	   * Set a new step size
	   * @param {Number} step    New step size. Must be a positive value
	   * @param {boolean} prettyStep Optional. If true, the provided step is rounded
	   *               to a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	   */
	  StepNumber.prototype.setStep = function (step, prettyStep) {
	    if (step === undefined || step <= 0) return;

	    if (prettyStep !== undefined) this.prettyStep = prettyStep;

	    if (this.prettyStep === true) this._step = StepNumber.calculatePrettyStep(step);else this._step = step;
	  };

	  /**
	   * Calculate a nice step size, closest to the desired step size.
	   * Returns a value in one of the ranges 1*10^n, 2*10^n, or 5*10^n, where n is an
	   * integer Number. For example 1, 2, 5, 10, 20, 50, etc...
	   * @param {Number}  step  Desired step size
	   * @return {Number}     Nice step size
	   */
	  StepNumber.calculatePrettyStep = function (step) {
	    var log10 = function log10(x) {
	      return Math.log(x) / Math.LN10;
	    };

	    // try three steps (multiple of 1, 2, or 5
	    var step1 = Math.pow(10, Math.round(log10(step))),
	        step2 = 2 * Math.pow(10, Math.round(log10(step / 2))),
	        step5 = 5 * Math.pow(10, Math.round(log10(step / 5)));

	    // choose the best step (closest to minimum step)
	    var prettyStep = step1;
	    if (Math.abs(step2 - step) <= Math.abs(prettyStep - step)) prettyStep = step2;
	    if (Math.abs(step5 - step) <= Math.abs(prettyStep - step)) prettyStep = step5;

	    // for safety
	    if (prettyStep <= 0) {
	      prettyStep = 1;
	    }

	    return prettyStep;
	  };

	  /**
	   * returns the current value of the step
	   * @return {Number} current value
	   */
	  StepNumber.prototype.getCurrent = function () {
	    return parseFloat(this._current.toPrecision(this.precision));
	  };

	  /**
	   * returns the current step size
	   * @return {Number} current step size
	   */
	  StepNumber.prototype.getStep = function () {
	    return this._step;
	  };

	  /**
	   * Set the current to its starting value.
	   *
	   * By default, this will be the largest value smaller than start, which
	   * is a multiple of the step size.
	   *
	   * Parameters checkFirst is optional, default false.
	   * If set to true, move the current value one step if smaller than start.
	   */
	  StepNumber.prototype.start = function (checkFirst) {
	    if (checkFirst === undefined) {
	      checkFirst = false;
	    }

	    this._current = this._start - this._start % this._step;

	    if (checkFirst) {
	      if (this.getCurrent() < this._start) {
	        this.next();
	      }
	    }
	  };

	  /**
	   * Do a step, add the step size to the current value
	   */
	  StepNumber.prototype.next = function () {
	    this._current += this._step;
	  };

	  /**
	   * Returns true whether the end is reached
	   * @return {boolean}  True if the current value has passed the end value.
	   */
	  StepNumber.prototype.end = function () {
	    return this._current > this._end;
	  };

	  module.exports = StepNumber;

	/***/ },
	/* 20 */
	/***/ function(module, exports) {

	  'use strict';

	  /**
	   * @prototype Range
	   *
	   * Helper class to make working with related min and max values easier.
	   *
	   * The range is inclusive; a given value is considered part of the range if:
	   *
	   *    this.min <= value <= this.max
	   */
	  function Range() {
	    this.min = undefined;
	    this.max = undefined;
	  }

	  /**
	   * Adjust the range so that the passed value fits in it.
	   *
	   * If the value is outside of the current extremes, adjust
	   * the min or max so that the value is within the range.
	   *
	   * @param {number} value Numeric value to fit in range
	   */
	  Range.prototype.adjust = function (value) {
	    if (value === undefined) return;

	    if (this.min === undefined || this.min > value) {
	      this.min = value;
	    }

	    if (this.max === undefined || this.max < value) {
	      this.max = value;
	    }
	  };

	  /**
	   * Adjust the current range so that the passed range fits in it.
	   *
	   * @param {Range} range Range instance to fit in current instance
	   */
	  Range.prototype.combine = function (range) {
	    this.add(range.min);
	    this.add(range.max);
	  };

	  /**
	   * Expand the range by the given value
	   *
	   * min will be lowered by given value;
	   * max will be raised by given value
	   *
	   * Shrinking by passing a negative value is allowed.
	   *
	   * @param {number} val Amount by which to expand or shrink current range with
	   */
	  Range.prototype.expand = function (val) {
	    if (val === undefined) {
	      return;
	    }

	    var newMin = this.min - val;
	    var newMax = this.max + val;

	    // Note that following allows newMin === newMax.
	    // This should be OK, since method expand() allows this also.
	    if (newMin > newMax) {
	      throw new Error('Passed expansion value makes range invalid');
	    }

	    this.min = newMin;
	    this.max = newMax;
	  };

	  /**
	   * Determine the full range width of current instance.
	   *
	   * @returns {num} The calculated width of this range
	   */
	  Range.prototype.range = function () {
	    return this.max - this.min;
	  };

	  /**
	   * Determine the central point of current instance.
	   *
	   * @returns {number} the value in the middle of min and max
	   */
	  Range.prototype.center = function () {
	    return (this.min + this.max) / 2;
	  };

	  module.exports = Range;

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  ////////////////////////////////////////////////////////////////////////////////
	  // This modules handles the options for Graph3d.
	  //
	  ////////////////////////////////////////////////////////////////////////////////
	  var Camera = __webpack_require__(16);
	  var Point3d = __webpack_require__(14);

	  // enumerate the available styles
	  var STYLE = {
	    BAR: 0,
	    BARCOLOR: 1,
	    BARSIZE: 2,
	    DOT: 3,
	    DOTLINE: 4,
	    DOTCOLOR: 5,
	    DOTSIZE: 6,
	    GRID: 7,
	    LINE: 8,
	    SURFACE: 9
	  };

	  // The string representations of the styles
	  var STYLENAME = {
	    'dot': STYLE.DOT,
	    'dot-line': STYLE.DOTLINE,
	    'dot-color': STYLE.DOTCOLOR,
	    'dot-size': STYLE.DOTSIZE,
	    'line': STYLE.LINE,
	    'grid': STYLE.GRID,
	    'surface': STYLE.SURFACE,
	    'bar': STYLE.BAR,
	    'bar-color': STYLE.BARCOLOR,
	    'bar-size': STYLE.BARSIZE
	  };

	  /**
	   * Field names in the options hash which are of relevance to the user.
	   *
	   * Specifically, these are the fields which require no special handling,
	   * and can be directly copied over.
	   */
	  var OPTIONKEYS = ['width', 'height', 'filterLabel', 'legendLabel', 'xLabel', 'yLabel', 'zLabel', 'xValueLabel', 'yValueLabel', 'zValueLabel', 'showGrid', 'showPerspective', 'showShadow', 'keepAspectRatio', 'verticalRatio', 'dotSizeRatio', 'showAnimationControls', 'animationInterval', 'animationPreload', 'animationAutoStart', 'axisColor', 'gridColor', 'xCenter', 'yCenter'];

	  /**
	   * Field names in the options hash which are of relevance to the user.
	   *
	   * Same as OPTIONKEYS, but internally these fields are stored with 
	   * prefix 'default' in the name.
	   */
	  var PREFIXEDOPTIONKEYS = ['xBarWidth', 'yBarWidth', 'valueMin', 'valueMax', 'xMin', 'xMax', 'xStep', 'yMin', 'yMax', 'yStep', 'zMin', 'zMax', 'zStep'];

	  // Placeholder for DEFAULTS reference
	  var DEFAULTS = undefined;

	  /**
	   * Check if given hash is empty.
	   *
	   * Source: http://stackoverflow.com/a/679937
	   */
	  function isEmpty(obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) return false;
	    }

	    return true;
	  }

	  /**
	   * Make first letter of parameter upper case.
	   *
	   * Source: http://stackoverflow.com/a/1026087
	   */
	  function capitalize(str) {
	    if (str === undefined || str === "") {
	      return str;
	    }

	    return str.charAt(0).toUpperCase() + str.slice(1);
	  }

	  /**
	   * Add a prefix to a field name, taking style guide into account
	   */
	  function prefixFieldName(prefix, fieldName) {
	    if (prefix === undefined || prefix === "") {
	      return fieldName;
	    }

	    return prefix + capitalize(fieldName);
	  }

	  /**
	   * Forcibly copy fields from src to dst in a controlled manner.
	   *
	   * A given field in dst will always be overwitten. If this field
	   * is undefined or not present in src, the field in dst will 
	   * be explicitly set to undefined.
	   * 
	   * The intention here is to be able to reset all option fields.
	   * 
	   * Only the fields mentioned in array 'fields' will be handled.
	   *
	   * @param fields array with names of fields to copy
	   * @param prefix optional; prefix to use for the target fields.
	   */
	  function forceCopy(src, dst, fields, prefix) {
	    var srcKey;
	    var dstKey;

	    for (var i in fields) {
	      srcKey = fields[i];
	      dstKey = prefixFieldName(prefix, srcKey);

	      dst[dstKey] = src[srcKey];
	    }
	  }

	  /**
	   * Copy fields from src to dst in a safe and controlled manner.
	   *
	   * Only the fields mentioned in array 'fields' will be copied over,
	   * and only if these are actually defined.
	   *
	   * @param fields array with names of fields to copy
	   * @param prefix optional; prefix to use for the target fields.
	   */
	  function safeCopy(src, dst, fields, prefix) {
	    var srcKey;
	    var dstKey;

	    for (var i in fields) {
	      srcKey = fields[i];
	      if (src[srcKey] === undefined) continue;

	      dstKey = prefixFieldName(prefix, srcKey);

	      dst[dstKey] = src[srcKey];
	    }
	  }

	  /**
	   * Initialize dst with the values in src.
	   *
	   * src is the hash with the default values. 
	   * A reference DEFAULTS to this hash is stored locally for 
	   * further handling.
	   *
	   * For now, dst is assumed to be a Graph3d instance.
	   */
	  function setDefaults(src, dst) {
	    if (src === undefined || isEmpty(src)) {
	      throw new Error('No DEFAULTS passed');
	    }
	    if (dst === undefined) {
	      throw new Error('No dst passed');
	    }

	    // Remember defaults for future reference
	    DEFAULTS = src;

	    // Handle the defaults which can be simply copied over
	    forceCopy(src, dst, OPTIONKEYS);
	    forceCopy(src, dst, PREFIXEDOPTIONKEYS, 'default');

	    // Handle the more complex ('special') fields
	    setSpecialSettings(src, dst);

	    // Following are internal fields, not part of the user settings
	    dst.margin = 10; // px
	    dst.showGrayBottom = false; // TODO: this does not work correctly
	    dst.showTooltip = false;
	    dst.eye = new Point3d(0, 0, -1); // TODO: set eye.z about 3/4 of the width of the window?
	  }

	  function setOptions(options, dst) {
	    if (options === undefined) {
	      return;
	    }
	    if (dst === undefined) {
	      throw new Error('No dst passed');
	    }

	    if (DEFAULTS === undefined || isEmpty(DEFAULTS)) {
	      throw new Error('DEFAULTS not set for module Settings');
	    }

	    // Handle the parameters which can be simply copied over
	    safeCopy(options, dst, OPTIONKEYS);
	    safeCopy(options, dst, PREFIXEDOPTIONKEYS, 'default');

	    // Handle the more complex ('special') fields
	    setSpecialSettings(options, dst);
	  }

	  /**
	   * Special handling for certain parameters
	   *
	   * 'Special' here means: setting requires more than a simple copy
	   */
	  function setSpecialSettings(src, dst) {
	    if (src.backgroundColor !== undefined) {
	      setBackgroundColor(src.backgroundColor, dst);
	    }

	    setDataColor(src.dataColor, dst);
	    setStyle(src.style, dst);
	    setShowLegend(src.showLegend, dst);
	    setCameraPosition(src.cameraPosition, dst);

	    // As special fields go, this is an easy one; just a translation of the name.
	    // Can't use this.tooltip directly, because that field exists internally
	    if (src.tooltip !== undefined) {
	      dst.showTooltip = src.tooltip;
	    }
	  }

	  /**
	   * Set the value of setting 'showLegend'
	   *
	   * This depends on the value of the style fields, so it must be called
	   * after the style field has been initialized.
	   */
	  function setShowLegend(showLegend, dst) {
	    if (showLegend === undefined) {
	      // If the default was auto, make a choice for this field
	      var isAutoByDefault = DEFAULTS.showLegend === undefined;

	      if (isAutoByDefault) {
	        // these styles default to having legends
	        var isLegendGraphStyle = dst.style === STYLE.DOTCOLOR || dst.style === STYLE.DOTSIZE;

	        dst.showLegend = isLegendGraphStyle;
	      } else {
	        // Leave current value as is
	      }
	    } else {
	      dst.showLegend = showLegend;
	    }
	  }

	  /**
	   * Retrieve the style index from given styleName
	   * @param {string} styleName  Style name such as 'dot', 'grid', 'dot-line'
	   * @return {Number} styleNumber Enumeration value representing the style, or -1
	   *                when not found
	   */
	  function getStyleNumberByName(styleName) {
	    var number = STYLENAME[styleName];

	    if (number === undefined) {
	      return -1;
	    }

	    return number;
	  }

	  /**
	   * Check if given number is a valid style number.
	   *
	   * @return true if valid, false otherwise
	   */
	  function checkStyleNumber(style) {
	    var valid = false;

	    for (var n in STYLE) {
	      if (STYLE[n] === style) {
	        valid = true;
	        break;
	      }
	    }

	    return valid;
	  }

	  function setStyle(style, dst) {
	    if (style === undefined) {
	      return; // Nothing to do
	    }

	    var styleNumber;

	    if (typeof style === 'string') {
	      styleNumber = getStyleNumberByName(style);

	      if (styleNumber === -1) {
	        throw new Error('Style \'' + style + '\' is invalid');
	      }
	    } else {
	      // Do a pedantic check on style number value
	      if (!checkStyleNumber(style)) {
	        throw new Error('Style \'' + style + '\' is invalid');
	      }

	      styleNumber = style;
	    }

	    dst.style = styleNumber;
	  }

	  /**
	   * Set the background styling for the graph
	   * @param {string | {fill: string, stroke: string, strokeWidth: string}} backgroundColor
	   */
	  function setBackgroundColor(backgroundColor, dst) {
	    var fill = 'white';
	    var stroke = 'gray';
	    var strokeWidth = 1;

	    if (typeof backgroundColor === 'string') {
	      fill = backgroundColor;
	      stroke = 'none';
	      strokeWidth = 0;
	    } else if ((typeof backgroundColor === 'undefined' ? 'undefined' : _typeof(backgroundColor)) === 'object') {
	      if (backgroundColor.fill !== undefined) fill = backgroundColor.fill;
	      if (backgroundColor.stroke !== undefined) stroke = backgroundColor.stroke;
	      if (backgroundColor.strokeWidth !== undefined) strokeWidth = backgroundColor.strokeWidth;
	    } else {
	      throw new Error('Unsupported type of backgroundColor');
	    }

	    dst.frame.style.backgroundColor = fill;
	    dst.frame.style.borderColor = stroke;
	    dst.frame.style.borderWidth = strokeWidth + 'px';
	    dst.frame.style.borderStyle = 'solid';
	  }

	  function setDataColor(dataColor, dst) {
	    if (dataColor === undefined) {
	      return; // Nothing to do
	    }

	    if (dst.dataColor === undefined) {
	      dst.dataColor = {};
	    }

	    if (typeof dataColor === 'string') {
	      dst.dataColor.fill = dataColor;
	      dst.dataColor.stroke = dataColor;
	    } else {
	      if (dataColor.fill) {
	        dst.dataColor.fill = dataColor.fill;
	      }
	      if (dataColor.stroke) {
	        dst.dataColor.stroke = dataColor.stroke;
	      }
	      if (dataColor.strokeWidth !== undefined) {
	        dst.dataColor.strokeWidth = dataColor.strokeWidth;
	      }
	    }
	  }

	  function setCameraPosition(cameraPosition, dst) {
	    var camPos = cameraPosition;
	    if (camPos === undefined) {
	      return;
	    }

	    if (dst.camera === undefined) {
	      dst.camera = new Camera();
	    }

	    dst.camera.setArmRotation(camPos.horizontal, camPos.vertical);
	    dst.camera.setArmLength(camPos.distance);
	  }

	  module.exports.STYLE = STYLE;
	  module.exports.setDefaults = setDefaults;
	  module.exports.setOptions = setOptions;
	  module.exports.setCameraPosition = setCameraPosition;

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  // Only load hammer.js when in a browser environment
	  // (loading hammer.js in a node.js environment gives errors)
	  if (typeof window !== 'undefined') {
	    var propagating = __webpack_require__(23);
	    var Hammer = window['Hammer'] || __webpack_require__(24);
	    module.exports = propagating(Hammer, {
	      preventDefault: 'mouse'
	    });
	  } else {
	    module.exports = function () {
	      throw Error('hammer.js is only available in a browser, not in node.js.');
	    };
	  }

	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

	  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	  (function (factory) {
	    if (true) {
	      // AMD. Register as an anonymous module.
	      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	      // Node. Does not work with strict CommonJS, but
	      // only CommonJS-like environments that support module.exports,
	      // like Node.
	      module.exports = factory();
	    } else {
	      // Browser globals (root is window)
	      window.propagating = factory();
	    }
	  }(function () {
	    var _firstTarget = null; // singleton, will contain the target element where the touch event started

	    /**
	     * Extend an Hammer.js instance with event propagation.
	     *
	     * Features:
	     * - Events emitted by hammer will propagate in order from child to parent
	     *   elements.
	     * - Events are extended with a function `event.stopPropagation()` to stop
	     *   propagation to parent elements.
	     * - An option `preventDefault` to stop all default browser behavior.
	     *
	     * Usage:
	     *   var hammer = propagatingHammer(new Hammer(element));
	     *   var hammer = propagatingHammer(new Hammer(element), {preventDefault: true});
	     *
	     * @param {Hammer.Manager} hammer   An hammer instance.
	     * @param {Object} [options]        Available options:
	     *                                  - `preventDefault: true | false | 'mouse' | 'touch' | 'pen'`.
	     *                                    Enforce preventing the default browser behavior.
	     *                                    Cannot be set to `false`.
	     * @return {Hammer.Manager} Returns the same hammer instance with extended
	     *                          functionality
	     */
	    return function propagating(hammer, options) {
	      var _options = options || {
	        preventDefault: false
	      };

	      if (hammer.Manager) {
	        // This looks like the Hammer constructor.
	        // Overload the constructors with our own.
	        var Hammer = hammer;

	        var PropagatingHammer = function(element, options) {
	          var o = Object.create(_options);
	          if (options) Hammer.assign(o, options);
	          return propagating(new Hammer(element, o), o);
	        };
	        Hammer.assign(PropagatingHammer, Hammer);

	        PropagatingHammer.Manager = function (element, options) {
	          var o = Object.create(_options);
	          if (options) Hammer.assign(o, options);
	          return propagating(new Hammer.Manager(element, o), o);
	        };

	        return PropagatingHammer;
	      }

	      // create a wrapper object which will override the functions
	      // `on`, `off`, `destroy`, and `emit` of the hammer instance
	      var wrapper = Object.create(hammer);

	      // attach to DOM element
	      var element = hammer.element;

	      if(!element.hammer) element.hammer = [];
	      element.hammer.push(wrapper);

	      // register an event to catch the start of a gesture and store the
	      // target in a singleton
	      hammer.on('hammer.input', function (event) {
	        if (_options.preventDefault === true || (_options.preventDefault === event.pointerType)) {
	          event.preventDefault();
	        }
	        if (event.isFirst) {
	          _firstTarget = event.target;
	        }
	      });

	      /** @type {Object.<String, Array.<function>>} */
	      wrapper._handlers = {};

	      /**
	       * Register a handler for one or multiple events
	       * @param {String} events    A space separated string with events
	       * @param {function} handler A callback function, called as handler(event)
	       * @returns {Hammer.Manager} Returns the hammer instance
	       */
	      wrapper.on = function (events, handler) {
	        // register the handler
	        split(events).forEach(function (event) {
	          var _handlers = wrapper._handlers[event];
	          if (!_handlers) {
	            wrapper._handlers[event] = _handlers = [];

	            // register the static, propagated handler
	            hammer.on(event, propagatedHandler);
	          }
	          _handlers.push(handler);
	        });

	        return wrapper;
	      };

	      /**
	       * Unregister a handler for one or multiple events
	       * @param {String} events      A space separated string with events
	       * @param {function} [handler] Optional. The registered handler. If not
	       *                             provided, all handlers for given events
	       *                             are removed.
	       * @returns {Hammer.Manager}   Returns the hammer instance
	       */
	      wrapper.off = function (events, handler) {
	        // unregister the handler
	        split(events).forEach(function (event) {
	          var _handlers = wrapper._handlers[event];
	          if (_handlers) {
	            _handlers = handler ? _handlers.filter(function (h) {
	              return h !== handler;
	            }) : [];

	            if (_handlers.length > 0) {
	              wrapper._handlers[event] = _handlers;
	            }
	            else {
	              // remove static, propagated handler
	              hammer.off(event, propagatedHandler);
	              delete wrapper._handlers[event];
	            }
	          }
	        });

	        return wrapper;
	      };

	      /**
	       * Emit to the event listeners
	       * @param {string} eventType
	       * @param {Event} event
	       */
	      wrapper.emit = function(eventType, event) {
	        _firstTarget = event.target;
	        hammer.emit(eventType, event);
	      };

	      wrapper.destroy = function () {
	        // Detach from DOM element
	        var hammers = hammer.element.hammer;
	        var idx = hammers.indexOf(wrapper);
	        if(idx !== -1) hammers.splice(idx,1);
	        if(!hammers.length) delete hammer.element.hammer;

	        // clear all handlers
	        wrapper._handlers = {};

	        // call original hammer destroy
	        hammer.destroy();
	      };

	      // split a string with space separated words
	      function split(events) {
	        return events.match(/[^ ]+/g);
	      }

	      /**
	       * A static event handler, applying event propagation.
	       * @param {Object} event
	       */
	      function propagatedHandler(event) {
	        // let only a single hammer instance handle this event
	        if (event.type !== 'hammer.input') {
	          // it is possible that the same srcEvent is used with multiple hammer events,
	          // we keep track on which events are handled in an object _handled
	          if (!event.srcEvent._handled) {
	            event.srcEvent._handled = {};
	          }

	          if (event.srcEvent._handled[event.type]) {
	            return;
	          }
	          else {
	            event.srcEvent._handled[event.type] = true;
	          }
	        }

	        // attach a stopPropagation function to the event
	        var stopped = false;
	        event.stopPropagation = function () {
	          stopped = true;
	        };

	        //wrap the srcEvent's stopPropagation to also stop hammer propagation:
	        var srcStop = event.srcEvent.stopPropagation.bind(event.srcEvent);
	        if(typeof srcStop == "function") {
	          event.srcEvent.stopPropagation = function(){
	            srcStop();
	            event.stopPropagation();
	          }
	        }

	        // attach firstTarget property to the event
	        event.firstTarget = _firstTarget;

	        // propagate over all elements (until stopped)
	        var elem = _firstTarget;
	        while (elem && !stopped) {
	          var elemHammer = elem.hammer;
	          if(elemHammer){
	            var _handlers;
	            for(var k = 0; k < elemHammer.length; k++){
	              _handlers = elemHammer[k]._handlers[event.type];
	              if(_handlers) for (var i = 0; i < _handlers.length && !stopped; i++) {
	                _handlers[i](event);
	              }
	            }
	          }
	          elem = elem.parentNode;
	        }
	      }

	      return wrapper;
	    };
	  }));


	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

	  var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22
	   * http://hammerjs.github.io/
	   *
	   * Copyright (c) 2016 Jorik Tangelder;
	   * Licensed under the MIT license */
	  (function(window, document, exportName, undefined) {
	    'use strict';

	  var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
	  var TEST_ELEMENT = document.createElement('div');

	  var TYPE_FUNCTION = 'function';

	  var round = Math.round;
	  var abs = Math.abs;
	  var now = Date.now;

	  /**
	   * set a timeout with a given scope
	   * @param {Function} fn
	   * @param {Number} timeout
	   * @param {Object} context
	   * @returns {number}
	   */
	  function setTimeoutContext(fn, timeout, context) {
	      return setTimeout(bindFn(fn, context), timeout);
	  }

	  /**
	   * if the argument is an array, we want to execute the fn on each entry
	   * if it aint an array we don't want to do a thing.
	   * this is used by all the methods that accept a single and array argument.
	   * @param {*|Array} arg
	   * @param {String} fn
	   * @param {Object} [context]
	   * @returns {Boolean}
	   */
	  function invokeArrayArg(arg, fn, context) {
	      if (Array.isArray(arg)) {
	          each(arg, context[fn], context);
	          return true;
	      }
	      return false;
	  }

	  /**
	   * walk objects and arrays
	   * @param {Object} obj
	   * @param {Function} iterator
	   * @param {Object} context
	   */
	  function each(obj, iterator, context) {
	      var i;

	      if (!obj) {
	          return;
	      }

	      if (obj.forEach) {
	          obj.forEach(iterator, context);
	      } else if (obj.length !== undefined) {
	          i = 0;
	          while (i < obj.length) {
	              iterator.call(context, obj[i], i, obj);
	              i++;
	          }
	      } else {
	          for (i in obj) {
	              obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	          }
	      }
	  }

	  /**
	   * wrap a method with a deprecation warning and stack trace
	   * @param {Function} method
	   * @param {String} name
	   * @param {String} message
	   * @returns {Function} A new function wrapping the supplied method.
	   */
	  function deprecate(method, name, message) {
	      var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
	      return function() {
	          var e = new Error('get-stack-trace');
	          var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
	              .replace(/^\s+at\s+/gm, '')
	              .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

	          var log = window.console && (window.console.warn || window.console.log);
	          if (log) {
	              log.call(window.console, deprecationMessage, stack);
	          }
	          return method.apply(this, arguments);
	      };
	  }

	  /**
	   * extend object.
	   * means that properties in dest will be overwritten by the ones in src.
	   * @param {Object} target
	   * @param {...Object} objects_to_assign
	   * @returns {Object} target
	   */
	  var assign;
	  if (typeof Object.assign !== 'function') {
	      assign = function assign(target) {
	          if (target === undefined || target === null) {
	              throw new TypeError('Cannot convert undefined or null to object');
	          }

	          var output = Object(target);
	          for (var index = 1; index < arguments.length; index++) {
	              var source = arguments[index];
	              if (source !== undefined && source !== null) {
	                  for (var nextKey in source) {
	                      if (source.hasOwnProperty(nextKey)) {
	                          output[nextKey] = source[nextKey];
	                      }
	                  }
	              }
	          }
	          return output;
	      };
	  } else {
	      assign = Object.assign;
	  }

	  /**
	   * extend object.
	   * means that properties in dest will be overwritten by the ones in src.
	   * @param {Object} dest
	   * @param {Object} src
	   * @param {Boolean} [merge=false]
	   * @returns {Object} dest
	   */
	  var extend = deprecate(function extend(dest, src, merge) {
	      var keys = Object.keys(src);
	      var i = 0;
	      while (i < keys.length) {
	          if (!merge || (merge && dest[keys[i]] === undefined)) {
	              dest[keys[i]] = src[keys[i]];
	          }
	          i++;
	      }
	      return dest;
	  }, 'extend', 'Use `assign`.');

	  /**
	   * merge the values from src in the dest.
	   * means that properties that exist in dest will not be overwritten by src
	   * @param {Object} dest
	   * @param {Object} src
	   * @returns {Object} dest
	   */
	  var merge = deprecate(function merge(dest, src) {
	      return extend(dest, src, true);
	  }, 'merge', 'Use `assign`.');

	  /**
	   * simple class inheritance
	   * @param {Function} child
	   * @param {Function} base
	   * @param {Object} [properties]
	   */
	  function inherit(child, base, properties) {
	      var baseP = base.prototype,
	          childP;

	      childP = child.prototype = Object.create(baseP);
	      childP.constructor = child;
	      childP._super = baseP;

	      if (properties) {
	          assign(childP, properties);
	      }
	  }

	  /**
	   * simple function bind
	   * @param {Function} fn
	   * @param {Object} context
	   * @returns {Function}
	   */
	  function bindFn(fn, context) {
	      return function boundFn() {
	          return fn.apply(context, arguments);
	      };
	  }

	  /**
	   * let a boolean value also be a function that must return a boolean
	   * this first item in args will be used as the context
	   * @param {Boolean|Function} val
	   * @param {Array} [args]
	   * @returns {Boolean}
	   */
	  function boolOrFn(val, args) {
	      if (typeof val == TYPE_FUNCTION) {
	          return val.apply(args ? args[0] || undefined : undefined, args);
	      }
	      return val;
	  }

	  /**
	   * use the val2 when val1 is undefined
	   * @param {*} val1
	   * @param {*} val2
	   * @returns {*}
	   */
	  function ifUndefined(val1, val2) {
	      return (val1 === undefined) ? val2 : val1;
	  }

	  /**
	   * addEventListener with multiple events at once
	   * @param {EventTarget} target
	   * @param {String} types
	   * @param {Function} handler
	   */
	  function addEventListeners(target, types, handler) {
	      each(splitStr(types), function(type) {
	          target.addEventListener(type, handler, false);
	      });
	  }

	  /**
	   * removeEventListener with multiple events at once
	   * @param {EventTarget} target
	   * @param {String} types
	   * @param {Function} handler
	   */
	  function removeEventListeners(target, types, handler) {
	      each(splitStr(types), function(type) {
	          target.removeEventListener(type, handler, false);
	      });
	  }

	  /**
	   * find if a node is in the given parent
	   * @method hasParent
	   * @param {HTMLElement} node
	   * @param {HTMLElement} parent
	   * @return {Boolean} found
	   */
	  function hasParent(node, parent) {
	      while (node) {
	          if (node == parent) {
	              return true;
	          }
	          node = node.parentNode;
	      }
	      return false;
	  }

	  /**
	   * small indexOf wrapper
	   * @param {String} str
	   * @param {String} find
	   * @returns {Boolean} found
	   */
	  function inStr(str, find) {
	      return str.indexOf(find) > -1;
	  }

	  /**
	   * split string on whitespace
	   * @param {String} str
	   * @returns {Array} words
	   */
	  function splitStr(str) {
	      return str.trim().split(/\s+/g);
	  }

	  /**
	   * find if a array contains the object using indexOf or a simple polyFill
	   * @param {Array} src
	   * @param {String} find
	   * @param {String} [findByKey]
	   * @return {Boolean|Number} false when not found, or the index
	   */
	  function inArray(src, find, findByKey) {
	      if (src.indexOf && !findByKey) {
	          return src.indexOf(find);
	      } else {
	          var i = 0;
	          while (i < src.length) {
	              if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
	                  return i;
	              }
	              i++;
	          }
	          return -1;
	      }
	  }

	  /**
	   * convert array-like objects to real arrays
	   * @param {Object} obj
	   * @returns {Array}
	   */
	  function toArray(obj) {
	      return Array.prototype.slice.call(obj, 0);
	  }

	  /**
	   * unique array with objects based on a key (like 'id') or just by the array's value
	   * @param {Array} src [{id:1},{id:2},{id:1}]
	   * @param {String} [key]
	   * @param {Boolean} [sort=False]
	   * @returns {Array} [{id:1},{id:2}]
	   */
	  function uniqueArray(src, key, sort) {
	      var results = [];
	      var values = [];
	      var i = 0;

	      while (i < src.length) {
	          var val = key ? src[i][key] : src[i];
	          if (inArray(values, val) < 0) {
	              results.push(src[i]);
	          }
	          values[i] = val;
	          i++;
	      }

	      if (sort) {
	          if (!key) {
	              results = results.sort();
	          } else {
	              results = results.sort(function sortUniqueArray(a, b) {
	                  return a[key] > b[key];
	              });
	          }
	      }

	      return results;
	  }

	  /**
	   * get the prefixed property
	   * @param {Object} obj
	   * @param {String} property
	   * @returns {String|Undefined} prefixed
	   */
	  function prefixed(obj, property) {
	      var prefix, prop;
	      var camelProp = property[0].toUpperCase() + property.slice(1);

	      var i = 0;
	      while (i < VENDOR_PREFIXES.length) {
	          prefix = VENDOR_PREFIXES[i];
	          prop = (prefix) ? prefix + camelProp : property;

	          if (prop in obj) {
	              return prop;
	          }
	          i++;
	      }
	      return undefined;
	  }

	  /**
	   * get a unique id
	   * @returns {number} uniqueId
	   */
	  var _uniqueId = 1;
	  function uniqueId() {
	      return _uniqueId++;
	  }

	  /**
	   * get the window object of an element
	   * @param {HTMLElement} element
	   * @returns {DocumentView|Window}
	   */
	  function getWindowForElement(element) {
	      var doc = element.ownerDocument || element;
	      return (doc.defaultView || doc.parentWindow || window);
	  }

	  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

	  var SUPPORT_TOUCH = ('ontouchstart' in window);
	  var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
	  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

	  var INPUT_TYPE_TOUCH = 'touch';
	  var INPUT_TYPE_PEN = 'pen';
	  var INPUT_TYPE_MOUSE = 'mouse';
	  var INPUT_TYPE_KINECT = 'kinect';

	  var COMPUTE_INTERVAL = 25;

	  var INPUT_START = 1;
	  var INPUT_MOVE = 2;
	  var INPUT_END = 4;
	  var INPUT_CANCEL = 8;

	  var DIRECTION_NONE = 1;
	  var DIRECTION_LEFT = 2;
	  var DIRECTION_RIGHT = 4;
	  var DIRECTION_UP = 8;
	  var DIRECTION_DOWN = 16;

	  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
	  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

	  var PROPS_XY = ['x', 'y'];
	  var PROPS_CLIENT_XY = ['clientX', 'clientY'];

	  /**
	   * create new input type manager
	   * @param {Manager} manager
	   * @param {Function} callback
	   * @returns {Input}
	   * @constructor
	   */
	  function Input(manager, callback) {
	      var self = this;
	      this.manager = manager;
	      this.callback = callback;
	      this.element = manager.element;
	      this.target = manager.options.inputTarget;

	      // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	      // so when disabled the input events are completely bypassed.
	      this.domHandler = function(ev) {
	          if (boolOrFn(manager.options.enable, [manager])) {
	              self.handler(ev);
	          }
	      };

	      this.init();

	  }

	  Input.prototype = {
	      /**
	       * should handle the inputEvent data and trigger the callback
	       * @virtual
	       */
	      handler: function() { },

	      /**
	       * bind the events
	       */
	      init: function() {
	          this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	          this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	          this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	      },

	      /**
	       * unbind the events
	       */
	      destroy: function() {
	          this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	          this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	          this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	      }
	  };

	  /**
	   * create new input type manager
	   * called by the Manager constructor
	   * @param {Hammer} manager
	   * @returns {Input}
	   */
	  function createInputInstance(manager) {
	      var Type;
	      var inputClass = manager.options.inputClass;

	      if (inputClass) {
	          Type = inputClass;
	      } else if (SUPPORT_POINTER_EVENTS) {
	          Type = PointerEventInput;
	      } else if (SUPPORT_ONLY_TOUCH) {
	          Type = TouchInput;
	      } else if (!SUPPORT_TOUCH) {
	          Type = MouseInput;
	      } else {
	          Type = TouchMouseInput;
	      }
	      return new (Type)(manager, inputHandler);
	  }

	  /**
	   * handle input events
	   * @param {Manager} manager
	   * @param {String} eventType
	   * @param {Object} input
	   */
	  function inputHandler(manager, eventType, input) {
	      var pointersLen = input.pointers.length;
	      var changedPointersLen = input.changedPointers.length;
	      var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
	      var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

	      input.isFirst = !!isFirst;
	      input.isFinal = !!isFinal;

	      if (isFirst) {
	          manager.session = {};
	      }

	      // source event is the normalized value of the domEvents
	      // like 'touchstart, mouseup, pointerdown'
	      input.eventType = eventType;

	      // compute scale, rotation etc
	      computeInputData(manager, input);

	      // emit secret event
	      manager.emit('hammer.input', input);

	      manager.recognize(input);
	      manager.session.prevInput = input;
	  }

	  /**
	   * extend the data with some usable properties like scale, rotate, velocity etc
	   * @param {Object} manager
	   * @param {Object} input
	   */
	  function computeInputData(manager, input) {
	      var session = manager.session;
	      var pointers = input.pointers;
	      var pointersLength = pointers.length;

	      // store the first input to calculate the distance and direction
	      if (!session.firstInput) {
	          session.firstInput = simpleCloneInputData(input);
	      }

	      // to compute scale and rotation we need to store the multiple touches
	      if (pointersLength > 1 && !session.firstMultiple) {
	          session.firstMultiple = simpleCloneInputData(input);
	      } else if (pointersLength === 1) {
	          session.firstMultiple = false;
	      }

	      var firstInput = session.firstInput;
	      var firstMultiple = session.firstMultiple;
	      var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

	      var center = input.center = getCenter(pointers);
	      input.timeStamp = now();
	      input.deltaTime = input.timeStamp - firstInput.timeStamp;

	      input.angle = getAngle(offsetCenter, center);
	      input.distance = getDistance(offsetCenter, center);

	      computeDeltaXY(session, input);
	      input.offsetDirection = getDirection(input.deltaX, input.deltaY);

	      var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
	      input.overallVelocityX = overallVelocity.x;
	      input.overallVelocityY = overallVelocity.y;
	      input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

	      input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	      input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

	      input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
	          session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

	      computeIntervalInputData(session, input);

	      // find the correct target
	      var target = manager.element;
	      if (hasParent(input.srcEvent.target, target)) {
	          target = input.srcEvent.target;
	      }
	      input.target = target;
	  }

	  function computeDeltaXY(session, input) {
	      var center = input.center;
	      var offset = session.offsetDelta || {};
	      var prevDelta = session.prevDelta || {};
	      var prevInput = session.prevInput || {};

	      if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	          prevDelta = session.prevDelta = {
	              x: prevInput.deltaX || 0,
	              y: prevInput.deltaY || 0
	          };

	          offset = session.offsetDelta = {
	              x: center.x,
	              y: center.y
	          };
	      }

	      input.deltaX = prevDelta.x + (center.x - offset.x);
	      input.deltaY = prevDelta.y + (center.y - offset.y);
	  }

	  /**
	   * velocity is calculated every x ms
	   * @param {Object} session
	   * @param {Object} input
	   */
	  function computeIntervalInputData(session, input) {
	      var last = session.lastInterval || input,
	          deltaTime = input.timeStamp - last.timeStamp,
	          velocity, velocityX, velocityY, direction;

	      if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
	          var deltaX = input.deltaX - last.deltaX;
	          var deltaY = input.deltaY - last.deltaY;

	          var v = getVelocity(deltaTime, deltaX, deltaY);
	          velocityX = v.x;
	          velocityY = v.y;
	          velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
	          direction = getDirection(deltaX, deltaY);

	          session.lastInterval = input;
	      } else {
	          // use latest velocity info if it doesn't overtake a minimum period
	          velocity = last.velocity;
	          velocityX = last.velocityX;
	          velocityY = last.velocityY;
	          direction = last.direction;
	      }

	      input.velocity = velocity;
	      input.velocityX = velocityX;
	      input.velocityY = velocityY;
	      input.direction = direction;
	  }

	  /**
	   * create a simple clone from the input used for storage of firstInput and firstMultiple
	   * @param {Object} input
	   * @returns {Object} clonedInputData
	   */
	  function simpleCloneInputData(input) {
	      // make a simple copy of the pointers because we will get a reference if we don't
	      // we only need clientXY for the calculations
	      var pointers = [];
	      var i = 0;
	      while (i < input.pointers.length) {
	          pointers[i] = {
	              clientX: round(input.pointers[i].clientX),
	              clientY: round(input.pointers[i].clientY)
	          };
	          i++;
	      }

	      return {
	          timeStamp: now(),
	          pointers: pointers,
	          center: getCenter(pointers),
	          deltaX: input.deltaX,
	          deltaY: input.deltaY
	      };
	  }

	  /**
	   * get the center of all the pointers
	   * @param {Array} pointers
	   * @return {Object} center contains `x` and `y` properties
	   */
	  function getCenter(pointers) {
	      var pointersLength = pointers.length;

	      // no need to loop when only one touch
	      if (pointersLength === 1) {
	          return {
	              x: round(pointers[0].clientX),
	              y: round(pointers[0].clientY)
	          };
	      }

	      var x = 0, y = 0, i = 0;
	      while (i < pointersLength) {
	          x += pointers[i].clientX;
	          y += pointers[i].clientY;
	          i++;
	      }

	      return {
	          x: round(x / pointersLength),
	          y: round(y / pointersLength)
	      };
	  }

	  /**
	   * calculate the velocity between two points. unit is in px per ms.
	   * @param {Number} deltaTime
	   * @param {Number} x
	   * @param {Number} y
	   * @return {Object} velocity `x` and `y`
	   */
	  function getVelocity(deltaTime, x, y) {
	      return {
	          x: x / deltaTime || 0,
	          y: y / deltaTime || 0
	      };
	  }

	  /**
	   * get the direction between two points
	   * @param {Number} x
	   * @param {Number} y
	   * @return {Number} direction
	   */
	  function getDirection(x, y) {
	      if (x === y) {
	          return DIRECTION_NONE;
	      }

	      if (abs(x) >= abs(y)) {
	          return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	      }
	      return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	  }

	  /**
	   * calculate the absolute distance between two points
	   * @param {Object} p1 {x, y}
	   * @param {Object} p2 {x, y}
	   * @param {Array} [props] containing x and y keys
	   * @return {Number} distance
	   */
	  function getDistance(p1, p2, props) {
	      if (!props) {
	          props = PROPS_XY;
	      }
	      var x = p2[props[0]] - p1[props[0]],
	          y = p2[props[1]] - p1[props[1]];

	      return Math.sqrt((x * x) + (y * y));
	  }

	  /**
	   * calculate the angle between two coordinates
	   * @param {Object} p1
	   * @param {Object} p2
	   * @param {Array} [props] containing x and y keys
	   * @return {Number} angle
	   */
	  function getAngle(p1, p2, props) {
	      if (!props) {
	          props = PROPS_XY;
	      }
	      var x = p2[props[0]] - p1[props[0]],
	          y = p2[props[1]] - p1[props[1]];
	      return Math.atan2(y, x) * 180 / Math.PI;
	  }

	  /**
	   * calculate the rotation degrees between two pointersets
	   * @param {Array} start array of pointers
	   * @param {Array} end array of pointers
	   * @return {Number} rotation
	   */
	  function getRotation(start, end) {
	      return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
	  }

	  /**
	   * calculate the scale factor between two pointersets
	   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	   * @param {Array} start array of pointers
	   * @param {Array} end array of pointers
	   * @return {Number} scale
	   */
	  function getScale(start, end) {
	      return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	  }

	  var MOUSE_INPUT_MAP = {
	      mousedown: INPUT_START,
	      mousemove: INPUT_MOVE,
	      mouseup: INPUT_END
	  };

	  var MOUSE_ELEMENT_EVENTS = 'mousedown';
	  var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

	  /**
	   * Mouse events input
	   * @constructor
	   * @extends Input
	   */
	  function MouseInput() {
	      this.evEl = MOUSE_ELEMENT_EVENTS;
	      this.evWin = MOUSE_WINDOW_EVENTS;

	      this.pressed = false; // mousedown state

	      Input.apply(this, arguments);
	  }

	  inherit(MouseInput, Input, {
	      /**
	       * handle mouse events
	       * @param {Object} ev
	       */
	      handler: function MEhandler(ev) {
	          var eventType = MOUSE_INPUT_MAP[ev.type];

	          // on start we want to have the left mouse button down
	          if (eventType & INPUT_START && ev.button === 0) {
	              this.pressed = true;
	          }

	          if (eventType & INPUT_MOVE && ev.which !== 1) {
	              eventType = INPUT_END;
	          }

	          // mouse must be down
	          if (!this.pressed) {
	              return;
	          }

	          if (eventType & INPUT_END) {
	              this.pressed = false;
	          }

	          this.callback(this.manager, eventType, {
	              pointers: [ev],
	              changedPointers: [ev],
	              pointerType: INPUT_TYPE_MOUSE,
	              srcEvent: ev
	          });
	      }
	  });

	  var POINTER_INPUT_MAP = {
	      pointerdown: INPUT_START,
	      pointermove: INPUT_MOVE,
	      pointerup: INPUT_END,
	      pointercancel: INPUT_CANCEL,
	      pointerout: INPUT_CANCEL
	  };

	  // in IE10 the pointer types is defined as an enum
	  var IE10_POINTER_TYPE_ENUM = {
	      2: INPUT_TYPE_TOUCH,
	      3: INPUT_TYPE_PEN,
	      4: INPUT_TYPE_MOUSE,
	      5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	  };

	  var POINTER_ELEMENT_EVENTS = 'pointerdown';
	  var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

	  // IE10 has prefixed support, and case-sensitive
	  if (window.MSPointerEvent && !window.PointerEvent) {
	      POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	      POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	  }

	  /**
	   * Pointer events input
	   * @constructor
	   * @extends Input
	   */
	  function PointerEventInput() {
	      this.evEl = POINTER_ELEMENT_EVENTS;
	      this.evWin = POINTER_WINDOW_EVENTS;

	      Input.apply(this, arguments);

	      this.store = (this.manager.session.pointerEvents = []);
	  }

	  inherit(PointerEventInput, Input, {
	      /**
	       * handle mouse events
	       * @param {Object} ev
	       */
	      handler: function PEhandler(ev) {
	          var store = this.store;
	          var removePointer = false;

	          var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	          var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	          var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

	          var isTouch = (pointerType == INPUT_TYPE_TOUCH);

	          // get index of the event in the store
	          var storeIndex = inArray(store, ev.pointerId, 'pointerId');

	          // start and mouse must be down
	          if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	              if (storeIndex < 0) {
	                  store.push(ev);
	                  storeIndex = store.length - 1;
	              }
	          } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	              removePointer = true;
	          }

	          // it not found, so the pointer hasn't been down (so it's probably a hover)
	          if (storeIndex < 0) {
	              return;
	          }

	          // update the event in the store
	          store[storeIndex] = ev;

	          this.callback(this.manager, eventType, {
	              pointers: store,
	              changedPointers: [ev],
	              pointerType: pointerType,
	              srcEvent: ev
	          });

	          if (removePointer) {
	              // remove from the store
	              store.splice(storeIndex, 1);
	          }
	      }
	  });

	  var SINGLE_TOUCH_INPUT_MAP = {
	      touchstart: INPUT_START,
	      touchmove: INPUT_MOVE,
	      touchend: INPUT_END,
	      touchcancel: INPUT_CANCEL
	  };

	  var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	  var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

	  /**
	   * Touch events input
	   * @constructor
	   * @extends Input
	   */
	  function SingleTouchInput() {
	      this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	      this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	      this.started = false;

	      Input.apply(this, arguments);
	  }

	  inherit(SingleTouchInput, Input, {
	      handler: function TEhandler(ev) {
	          var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

	          // should we handle the touch events?
	          if (type === INPUT_START) {
	              this.started = true;
	          }

	          if (!this.started) {
	              return;
	          }

	          var touches = normalizeSingleTouches.call(this, ev, type);

	          // when done, reset the started state
	          if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	              this.started = false;
	          }

	          this.callback(this.manager, type, {
	              pointers: touches[0],
	              changedPointers: touches[1],
	              pointerType: INPUT_TYPE_TOUCH,
	              srcEvent: ev
	          });
	      }
	  });

	  /**
	   * @this {TouchInput}
	   * @param {Object} ev
	   * @param {Number} type flag
	   * @returns {undefined|Array} [all, changed]
	   */
	  function normalizeSingleTouches(ev, type) {
	      var all = toArray(ev.touches);
	      var changed = toArray(ev.changedTouches);

	      if (type & (INPUT_END | INPUT_CANCEL)) {
	          all = uniqueArray(all.concat(changed), 'identifier', true);
	      }

	      return [all, changed];
	  }

	  var TOUCH_INPUT_MAP = {
	      touchstart: INPUT_START,
	      touchmove: INPUT_MOVE,
	      touchend: INPUT_END,
	      touchcancel: INPUT_CANCEL
	  };

	  var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

	  /**
	   * Multi-user touch events input
	   * @constructor
	   * @extends Input
	   */
	  function TouchInput() {
	      this.evTarget = TOUCH_TARGET_EVENTS;
	      this.targetIds = {};

	      Input.apply(this, arguments);
	  }

	  inherit(TouchInput, Input, {
	      handler: function MTEhandler(ev) {
	          var type = TOUCH_INPUT_MAP[ev.type];
	          var touches = getTouches.call(this, ev, type);
	          if (!touches) {
	              return;
	          }

	          this.callback(this.manager, type, {
	              pointers: touches[0],
	              changedPointers: touches[1],
	              pointerType: INPUT_TYPE_TOUCH,
	              srcEvent: ev
	          });
	      }
	  });

	  /**
	   * @this {TouchInput}
	   * @param {Object} ev
	   * @param {Number} type flag
	   * @returns {undefined|Array} [all, changed]
	   */
	  function getTouches(ev, type) {
	      var allTouches = toArray(ev.touches);
	      var targetIds = this.targetIds;

	      // when there is only one touch, the process can be simplified
	      if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	          targetIds[allTouches[0].identifier] = true;
	          return [allTouches, allTouches];
	      }

	      var i,
	          targetTouches,
	          changedTouches = toArray(ev.changedTouches),
	          changedTargetTouches = [],
	          target = this.target;

	      // get target touches from touches
	      targetTouches = allTouches.filter(function(touch) {
	          return hasParent(touch.target, target);
	      });

	      // collect touches
	      if (type === INPUT_START) {
	          i = 0;
	          while (i < targetTouches.length) {
	              targetIds[targetTouches[i].identifier] = true;
	              i++;
	          }
	      }

	      // filter changed touches to only contain touches that exist in the collected target ids
	      i = 0;
	      while (i < changedTouches.length) {
	          if (targetIds[changedTouches[i].identifier]) {
	              changedTargetTouches.push(changedTouches[i]);
	          }

	          // cleanup removed touches
	          if (type & (INPUT_END | INPUT_CANCEL)) {
	              delete targetIds[changedTouches[i].identifier];
	          }
	          i++;
	      }

	      if (!changedTargetTouches.length) {
	          return;
	      }

	      return [
	          // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	          uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
	          changedTargetTouches
	      ];
	  }

	  /**
	   * Combined touch and mouse input
	   *
	   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	   * This because touch devices also emit mouse events while doing a touch.
	   *
	   * @constructor
	   * @extends Input
	   */

	  var DEDUP_TIMEOUT = 2500;
	  var DEDUP_DISTANCE = 25;

	  function TouchMouseInput() {
	      Input.apply(this, arguments);

	      var handler = bindFn(this.handler, this);
	      this.touch = new TouchInput(this.manager, handler);
	      this.mouse = new MouseInput(this.manager, handler);

	      this.primaryTouch = null;
	      this.lastTouches = [];
	  }

	  inherit(TouchMouseInput, Input, {
	      /**
	       * handle mouse and touch events
	       * @param {Hammer} manager
	       * @param {String} inputEvent
	       * @param {Object} inputData
	       */
	      handler: function TMEhandler(manager, inputEvent, inputData) {
	          var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
	              isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

	          if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
	              return;
	          }

	          // when we're in a touch event, record touches to  de-dupe synthetic mouse event
	          if (isTouch) {
	              recordTouches.call(this, inputEvent, inputData);
	          } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
	              return;
	          }

	          this.callback(manager, inputEvent, inputData);
	      },

	      /**
	       * remove the event listeners
	       */
	      destroy: function destroy() {
	          this.touch.destroy();
	          this.mouse.destroy();
	      }
	  });

	  function recordTouches(eventType, eventData) {
	      if (eventType & INPUT_START) {
	          this.primaryTouch = eventData.changedPointers[0].identifier;
	          setLastTouch.call(this, eventData);
	      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	          setLastTouch.call(this, eventData);
	      }
	  }

	  function setLastTouch(eventData) {
	      var touch = eventData.changedPointers[0];

	      if (touch.identifier === this.primaryTouch) {
	          var lastTouch = {x: touch.clientX, y: touch.clientY};
	          this.lastTouches.push(lastTouch);
	          var lts = this.lastTouches;
	          var removeLastTouch = function() {
	              var i = lts.indexOf(lastTouch);
	              if (i > -1) {
	                  lts.splice(i, 1);
	              }
	          };
	          setTimeout(removeLastTouch, DEDUP_TIMEOUT);
	      }
	  }

	  function isSyntheticEvent(eventData) {
	      var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
	      for (var i = 0; i < this.lastTouches.length; i++) {
	          var t = this.lastTouches[i];
	          var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
	          if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
	              return true;
	          }
	      }
	      return false;
	  }

	  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

	  // magical touchAction value
	  var TOUCH_ACTION_COMPUTE = 'compute';
	  var TOUCH_ACTION_AUTO = 'auto';
	  var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	  var TOUCH_ACTION_NONE = 'none';
	  var TOUCH_ACTION_PAN_X = 'pan-x';
	  var TOUCH_ACTION_PAN_Y = 'pan-y';
	  var TOUCH_ACTION_MAP = getTouchActionProps();

	  /**
	   * Touch Action
	   * sets the touchAction property or uses the js alternative
	   * @param {Manager} manager
	   * @param {String} value
	   * @constructor
	   */
	  function TouchAction(manager, value) {
	      this.manager = manager;
	      this.set(value);
	  }

	  TouchAction.prototype = {
	      /**
	       * set the touchAction value on the element or enable the polyfill
	       * @param {String} value
	       */
	      set: function(value) {
	          // find out the touch-action by the event handlers
	          if (value == TOUCH_ACTION_COMPUTE) {
	              value = this.compute();
	          }

	          if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
	              this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	          }
	          this.actions = value.toLowerCase().trim();
	      },

	      /**
	       * just re-set the touchAction value
	       */
	      update: function() {
	          this.set(this.manager.options.touchAction);
	      },

	      /**
	       * compute the value for the touchAction property based on the recognizer's settings
	       * @returns {String} value
	       */
	      compute: function() {
	          var actions = [];
	          each(this.manager.recognizers, function(recognizer) {
	              if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                  actions = actions.concat(recognizer.getTouchAction());
	              }
	          });
	          return cleanTouchActions(actions.join(' '));
	      },

	      /**
	       * this method is called on each input cycle and provides the preventing of the browser behavior
	       * @param {Object} input
	       */
	      preventDefaults: function(input) {
	          var srcEvent = input.srcEvent;
	          var direction = input.offsetDirection;

	          // if the touch action did prevented once this session
	          if (this.manager.session.prevented) {
	              srcEvent.preventDefault();
	              return;
	          }

	          var actions = this.actions;
	          var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
	          var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
	          var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

	          if (hasNone) {
	              //do not prevent defaults if this is a tap gesture

	              var isTapPointer = input.pointers.length === 1;
	              var isTapMovement = input.distance < 2;
	              var isTapTouchTime = input.deltaTime < 250;

	              if (isTapPointer && isTapMovement && isTapTouchTime) {
	                  return;
	              }
	          }

	          if (hasPanX && hasPanY) {
	              // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
	              return;
	          }

	          if (hasNone ||
	              (hasPanY && direction & DIRECTION_HORIZONTAL) ||
	              (hasPanX && direction & DIRECTION_VERTICAL)) {
	              return this.preventSrc(srcEvent);
	          }
	      },

	      /**
	       * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	       * @param {Object} srcEvent
	       */
	      preventSrc: function(srcEvent) {
	          this.manager.session.prevented = true;
	          srcEvent.preventDefault();
	      }
	  };

	  /**
	   * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	   * @param {String} actions
	   * @returns {*}
	   */
	  function cleanTouchActions(actions) {
	      // none
	      if (inStr(actions, TOUCH_ACTION_NONE)) {
	          return TOUCH_ACTION_NONE;
	      }

	      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

	      // if both pan-x and pan-y are set (different recognizers
	      // for different directions, e.g. horizontal pan but vertical swipe?)
	      // we need none (as otherwise with pan-x pan-y combined none of these
	      // recognizers will work, since the browser would handle all panning
	      if (hasPanX && hasPanY) {
	          return TOUCH_ACTION_NONE;
	      }

	      // pan-x OR pan-y
	      if (hasPanX || hasPanY) {
	          return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	      }

	      // manipulation
	      if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	          return TOUCH_ACTION_MANIPULATION;
	      }

	      return TOUCH_ACTION_AUTO;
	  }

	  function getTouchActionProps() {
	      if (!NATIVE_TOUCH_ACTION) {
	          return false;
	      }
	      var touchMap = {};
	      var cssSupports = window.CSS && window.CSS.supports;
	      ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

	          // If css.supports is not supported but there is native touch-action assume it supports
	          // all values. This is the case for IE 10 and 11.
	          touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
	      });
	      return touchMap;
	  }

	  /**
	   * Recognizer flow explained; *
	   * All recognizers have the initial state of POSSIBLE when a input session starts.
	   * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	   * Example session for mouse-input: mousedown -> mousemove -> mouseup
	   *
	   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	   * which determines with state it should be.
	   *
	   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	   * POSSIBLE to give it another change on the next cycle.
	   *
	   *               Possible
	   *                  |
	   *            +-----+---------------+
	   *            |                     |
	   *      +-----+-----+               |
	   *      |           |               |
	   *   Failed      Cancelled          |
	   *                          +-------+------+
	   *                          |              |
	   *                      Recognized       Began
	   *                                         |
	   *                                      Changed
	   *                                         |
	   *                                  Ended/Recognized
	   */
	  var STATE_POSSIBLE = 1;
	  var STATE_BEGAN = 2;
	  var STATE_CHANGED = 4;
	  var STATE_ENDED = 8;
	  var STATE_RECOGNIZED = STATE_ENDED;
	  var STATE_CANCELLED = 16;
	  var STATE_FAILED = 32;

	  /**
	   * Recognizer
	   * Every recognizer needs to extend from this class.
	   * @constructor
	   * @param {Object} options
	   */
	  function Recognizer(options) {
	      this.options = assign({}, this.defaults, options || {});

	      this.id = uniqueId();

	      this.manager = null;

	      // default is enable true
	      this.options.enable = ifUndefined(this.options.enable, true);

	      this.state = STATE_POSSIBLE;

	      this.simultaneous = {};
	      this.requireFail = [];
	  }

	  Recognizer.prototype = {
	      /**
	       * @virtual
	       * @type {Object}
	       */
	      defaults: {},

	      /**
	       * set options
	       * @param {Object} options
	       * @return {Recognizer}
	       */
	      set: function(options) {
	          assign(this.options, options);

	          // also update the touchAction, in case something changed about the directions/enabled state
	          this.manager && this.manager.touchAction.update();
	          return this;
	      },

	      /**
	       * recognize simultaneous with an other recognizer.
	       * @param {Recognizer} otherRecognizer
	       * @returns {Recognizer} this
	       */
	      recognizeWith: function(otherRecognizer) {
	          if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	              return this;
	          }

	          var simultaneous = this.simultaneous;
	          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	          if (!simultaneous[otherRecognizer.id]) {
	              simultaneous[otherRecognizer.id] = otherRecognizer;
	              otherRecognizer.recognizeWith(this);
	          }
	          return this;
	      },

	      /**
	       * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	       * @param {Recognizer} otherRecognizer
	       * @returns {Recognizer} this
	       */
	      dropRecognizeWith: function(otherRecognizer) {
	          if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	              return this;
	          }

	          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	          delete this.simultaneous[otherRecognizer.id];
	          return this;
	      },

	      /**
	       * recognizer can only run when an other is failing
	       * @param {Recognizer} otherRecognizer
	       * @returns {Recognizer} this
	       */
	      requireFailure: function(otherRecognizer) {
	          if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	              return this;
	          }

	          var requireFail = this.requireFail;
	          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	          if (inArray(requireFail, otherRecognizer) === -1) {
	              requireFail.push(otherRecognizer);
	              otherRecognizer.requireFailure(this);
	          }
	          return this;
	      },

	      /**
	       * drop the requireFailure link. it does not remove the link on the other recognizer.
	       * @param {Recognizer} otherRecognizer
	       * @returns {Recognizer} this
	       */
	      dropRequireFailure: function(otherRecognizer) {
	          if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	              return this;
	          }

	          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	          var index = inArray(this.requireFail, otherRecognizer);
	          if (index > -1) {
	              this.requireFail.splice(index, 1);
	          }
	          return this;
	      },

	      /**
	       * has require failures boolean
	       * @returns {boolean}
	       */
	      hasRequireFailures: function() {
	          return this.requireFail.length > 0;
	      },

	      /**
	       * if the recognizer can recognize simultaneous with an other recognizer
	       * @param {Recognizer} otherRecognizer
	       * @returns {Boolean}
	       */
	      canRecognizeWith: function(otherRecognizer) {
	          return !!this.simultaneous[otherRecognizer.id];
	      },

	      /**
	       * You should use `tryEmit` instead of `emit` directly to check
	       * that all the needed recognizers has failed before emitting.
	       * @param {Object} input
	       */
	      emit: function(input) {
	          var self = this;
	          var state = this.state;

	          function emit(event) {
	              self.manager.emit(event, input);
	          }

	          // 'panstart' and 'panmove'
	          if (state < STATE_ENDED) {
	              emit(self.options.event + stateStr(state));
	          }

	          emit(self.options.event); // simple 'eventName' events

	          if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
	              emit(input.additionalEvent);
	          }

	          // panend and pancancel
	          if (state >= STATE_ENDED) {
	              emit(self.options.event + stateStr(state));
	          }
	      },

	      /**
	       * Check that all the require failure recognizers has failed,
	       * if true, it emits a gesture event,
	       * otherwise, setup the state to FAILED.
	       * @param {Object} input
	       */
	      tryEmit: function(input) {
	          if (this.canEmit()) {
	              return this.emit(input);
	          }
	          // it's failing anyway
	          this.state = STATE_FAILED;
	      },

	      /**
	       * can we emit?
	       * @returns {boolean}
	       */
	      canEmit: function() {
	          var i = 0;
	          while (i < this.requireFail.length) {
	              if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                  return false;
	              }
	              i++;
	          }
	          return true;
	      },

	      /**
	       * update the recognizer
	       * @param {Object} inputData
	       */
	      recognize: function(inputData) {
	          // make a new copy of the inputData
	          // so we can change the inputData without messing up the other recognizers
	          var inputDataClone = assign({}, inputData);

	          // is is enabled and allow recognizing?
	          if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	              this.reset();
	              this.state = STATE_FAILED;
	              return;
	          }

	          // reset when we've reached the end
	          if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	              this.state = STATE_POSSIBLE;
	          }

	          this.state = this.process(inputDataClone);

	          // the recognizer has recognized a gesture
	          // so trigger an event
	          if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	              this.tryEmit(inputDataClone);
	          }
	      },

	      /**
	       * return the state of the recognizer
	       * the actual recognizing happens in this method
	       * @virtual
	       * @param {Object} inputData
	       * @returns {Const} STATE
	       */
	      process: function(inputData) { }, // jshint ignore:line

	      /**
	       * return the preferred touch-action
	       * @virtual
	       * @returns {Array}
	       */
	      getTouchAction: function() { },

	      /**
	       * called when the gesture isn't allowed to recognize
	       * like when another is being recognized or it is disabled
	       * @virtual
	       */
	      reset: function() { }
	  };

	  /**
	   * get a usable string, used as event postfix
	   * @param {Const} state
	   * @returns {String} state
	   */
	  function stateStr(state) {
	      if (state & STATE_CANCELLED) {
	          return 'cancel';
	      } else if (state & STATE_ENDED) {
	          return 'end';
	      } else if (state & STATE_CHANGED) {
	          return 'move';
	      } else if (state & STATE_BEGAN) {
	          return 'start';
	      }
	      return '';
	  }

	  /**
	   * direction cons to string
	   * @param {Const} direction
	   * @returns {String}
	   */
	  function directionStr(direction) {
	      if (direction == DIRECTION_DOWN) {
	          return 'down';
	      } else if (direction == DIRECTION_UP) {
	          return 'up';
	      } else if (direction == DIRECTION_LEFT) {
	          return 'left';
	      } else if (direction == DIRECTION_RIGHT) {
	          return 'right';
	      }
	      return '';
	  }

	  /**
	   * get a recognizer by name if it is bound to a manager
	   * @param {Recognizer|String} otherRecognizer
	   * @param {Recognizer} recognizer
	   * @returns {Recognizer}
	   */
	  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	      var manager = recognizer.manager;
	      if (manager) {
	          return manager.get(otherRecognizer);
	      }
	      return otherRecognizer;
	  }

	  /**
	   * This recognizer is just used as a base for the simple attribute recognizers.
	   * @constructor
	   * @extends Recognizer
	   */
	  function AttrRecognizer() {
	      Recognizer.apply(this, arguments);
	  }

	  inherit(AttrRecognizer, Recognizer, {
	      /**
	       * @namespace
	       * @memberof AttrRecognizer
	       */
	      defaults: {
	          /**
	           * @type {Number}
	           * @default 1
	           */
	          pointers: 1
	      },

	      /**
	       * Used to check if it the recognizer receives valid input, like input.distance > 10.
	       * @memberof AttrRecognizer
	       * @param {Object} input
	       * @returns {Boolean} recognized
	       */
	      attrTest: function(input) {
	          var optionPointers = this.options.pointers;
	          return optionPointers === 0 || input.pointers.length === optionPointers;
	      },

	      /**
	       * Process the input and return the state for the recognizer
	       * @memberof AttrRecognizer
	       * @param {Object} input
	       * @returns {*} State
	       */
	      process: function(input) {
	          var state = this.state;
	          var eventType = input.eventType;

	          var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	          var isValid = this.attrTest(input);

	          // on cancel input and we've recognized before, return STATE_CANCELLED
	          if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	              return state | STATE_CANCELLED;
	          } else if (isRecognized || isValid) {
	              if (eventType & INPUT_END) {
	                  return state | STATE_ENDED;
	              } else if (!(state & STATE_BEGAN)) {
	                  return STATE_BEGAN;
	              }
	              return state | STATE_CHANGED;
	          }
	          return STATE_FAILED;
	      }
	  });

	  /**
	   * Pan
	   * Recognized when the pointer is down and moved in the allowed direction.
	   * @constructor
	   * @extends AttrRecognizer
	   */
	  function PanRecognizer() {
	      AttrRecognizer.apply(this, arguments);

	      this.pX = null;
	      this.pY = null;
	  }

	  inherit(PanRecognizer, AttrRecognizer, {
	      /**
	       * @namespace
	       * @memberof PanRecognizer
	       */
	      defaults: {
	          event: 'pan',
	          threshold: 10,
	          pointers: 1,
	          direction: DIRECTION_ALL
	      },

	      getTouchAction: function() {
	          var direction = this.options.direction;
	          var actions = [];
	          if (direction & DIRECTION_HORIZONTAL) {
	              actions.push(TOUCH_ACTION_PAN_Y);
	          }
	          if (direction & DIRECTION_VERTICAL) {
	              actions.push(TOUCH_ACTION_PAN_X);
	          }
	          return actions;
	      },

	      directionTest: function(input) {
	          var options = this.options;
	          var hasMoved = true;
	          var distance = input.distance;
	          var direction = input.direction;
	          var x = input.deltaX;
	          var y = input.deltaY;

	          // lock to axis?
	          if (!(direction & options.direction)) {
	              if (options.direction & DIRECTION_HORIZONTAL) {
	                  direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
	                  hasMoved = x != this.pX;
	                  distance = Math.abs(input.deltaX);
	              } else {
	                  direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
	                  hasMoved = y != this.pY;
	                  distance = Math.abs(input.deltaY);
	              }
	          }
	          input.direction = direction;
	          return hasMoved && distance > options.threshold && direction & options.direction;
	      },

	      attrTest: function(input) {
	          return AttrRecognizer.prototype.attrTest.call(this, input) &&
	              (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
	      },

	      emit: function(input) {

	          this.pX = input.deltaX;
	          this.pY = input.deltaY;

	          var direction = directionStr(input.direction);

	          if (direction) {
	              input.additionalEvent = this.options.event + direction;
	          }
	          this._super.emit.call(this, input);
	      }
	  });

	  /**
	   * Pinch
	   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	   * @constructor
	   * @extends AttrRecognizer
	   */
	  function PinchRecognizer() {
	      AttrRecognizer.apply(this, arguments);
	  }

	  inherit(PinchRecognizer, AttrRecognizer, {
	      /**
	       * @namespace
	       * @memberof PinchRecognizer
	       */
	      defaults: {
	          event: 'pinch',
	          threshold: 0,
	          pointers: 2
	      },

	      getTouchAction: function() {
	          return [TOUCH_ACTION_NONE];
	      },

	      attrTest: function(input) {
	          return this._super.attrTest.call(this, input) &&
	              (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	      },

	      emit: function(input) {
	          if (input.scale !== 1) {
	              var inOut = input.scale < 1 ? 'in' : 'out';
	              input.additionalEvent = this.options.event + inOut;
	          }
	          this._super.emit.call(this, input);
	      }
	  });

	  /**
	   * Press
	   * Recognized when the pointer is down for x ms without any movement.
	   * @constructor
	   * @extends Recognizer
	   */
	  function PressRecognizer() {
	      Recognizer.apply(this, arguments);

	      this._timer = null;
	      this._input = null;
	  }

	  inherit(PressRecognizer, Recognizer, {
	      /**
	       * @namespace
	       * @memberof PressRecognizer
	       */
	      defaults: {
	          event: 'press',
	          pointers: 1,
	          time: 251, // minimal time of the pointer to be pressed
	          threshold: 9 // a minimal movement is ok, but keep it low
	      },

	      getTouchAction: function() {
	          return [TOUCH_ACTION_AUTO];
	      },

	      process: function(input) {
	          var options = this.options;
	          var validPointers = input.pointers.length === options.pointers;
	          var validMovement = input.distance < options.threshold;
	          var validTime = input.deltaTime > options.time;

	          this._input = input;

	          // we only allow little movement
	          // and we've reached an end event, so a tap is possible
	          if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
	              this.reset();
	          } else if (input.eventType & INPUT_START) {
	              this.reset();
	              this._timer = setTimeoutContext(function() {
	                  this.state = STATE_RECOGNIZED;
	                  this.tryEmit();
	              }, options.time, this);
	          } else if (input.eventType & INPUT_END) {
	              return STATE_RECOGNIZED;
	          }
	          return STATE_FAILED;
	      },

	      reset: function() {
	          clearTimeout(this._timer);
	      },

	      emit: function(input) {
	          if (this.state !== STATE_RECOGNIZED) {
	              return;
	          }

	          if (input && (input.eventType & INPUT_END)) {
	              this.manager.emit(this.options.event + 'up', input);
	          } else {
	              this._input.timeStamp = now();
	              this.manager.emit(this.options.event, this._input);
	          }
	      }
	  });

	  /**
	   * Rotate
	   * Recognized when two or more pointer are moving in a circular motion.
	   * @constructor
	   * @extends AttrRecognizer
	   */
	  function RotateRecognizer() {
	      AttrRecognizer.apply(this, arguments);
	  }

	  inherit(RotateRecognizer, AttrRecognizer, {
	      /**
	       * @namespace
	       * @memberof RotateRecognizer
	       */
	      defaults: {
	          event: 'rotate',
	          threshold: 0,
	          pointers: 2
	      },

	      getTouchAction: function() {
	          return [TOUCH_ACTION_NONE];
	      },

	      attrTest: function(input) {
	          return this._super.attrTest.call(this, input) &&
	              (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	      }
	  });

	  /**
	   * Swipe
	   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	   * @constructor
	   * @extends AttrRecognizer
	   */
	  function SwipeRecognizer() {
	      AttrRecognizer.apply(this, arguments);
	  }

	  inherit(SwipeRecognizer, AttrRecognizer, {
	      /**
	       * @namespace
	       * @memberof SwipeRecognizer
	       */
	      defaults: {
	          event: 'swipe',
	          threshold: 10,
	          velocity: 0.3,
	          direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
	          pointers: 1
	      },

	      getTouchAction: function() {
	          return PanRecognizer.prototype.getTouchAction.call(this);
	      },

	      attrTest: function(input) {
	          var direction = this.options.direction;
	          var velocity;

	          if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
	              velocity = input.overallVelocity;
	          } else if (direction & DIRECTION_HORIZONTAL) {
	              velocity = input.overallVelocityX;
	          } else if (direction & DIRECTION_VERTICAL) {
	              velocity = input.overallVelocityY;
	          }

	          return this._super.attrTest.call(this, input) &&
	              direction & input.offsetDirection &&
	              input.distance > this.options.threshold &&
	              input.maxPointers == this.options.pointers &&
	              abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	      },

	      emit: function(input) {
	          var direction = directionStr(input.offsetDirection);
	          if (direction) {
	              this.manager.emit(this.options.event + direction, input);
	          }

	          this.manager.emit(this.options.event, input);
	      }
	  });

	  /**
	   * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	   * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	   * a single tap.
	   *
	   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	   * multi-taps being recognized.
	   * @constructor
	   * @extends Recognizer
	   */
	  function TapRecognizer() {
	      Recognizer.apply(this, arguments);

	      // previous time and center,
	      // used for tap counting
	      this.pTime = false;
	      this.pCenter = false;

	      this._timer = null;
	      this._input = null;
	      this.count = 0;
	  }

	  inherit(TapRecognizer, Recognizer, {
	      /**
	       * @namespace
	       * @memberof PinchRecognizer
	       */
	      defaults: {
	          event: 'tap',
	          pointers: 1,
	          taps: 1,
	          interval: 300, // max time between the multi-tap taps
	          time: 250, // max time of the pointer to be down (like finger on the screen)
	          threshold: 9, // a minimal movement is ok, but keep it low
	          posThreshold: 10 // a multi-tap can be a bit off the initial position
	      },

	      getTouchAction: function() {
	          return [TOUCH_ACTION_MANIPULATION];
	      },

	      process: function(input) {
	          var options = this.options;

	          var validPointers = input.pointers.length === options.pointers;
	          var validMovement = input.distance < options.threshold;
	          var validTouchTime = input.deltaTime < options.time;

	          this.reset();

	          if ((input.eventType & INPUT_START) && (this.count === 0)) {
	              return this.failTimeout();
	          }

	          // we only allow little movement
	          // and we've reached an end event, so a tap is possible
	          if (validMovement && validTouchTime && validPointers) {
	              if (input.eventType != INPUT_END) {
	                  return this.failTimeout();
	              }

	              var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
	              var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

	              this.pTime = input.timeStamp;
	              this.pCenter = input.center;

	              if (!validMultiTap || !validInterval) {
	                  this.count = 1;
	              } else {
	                  this.count += 1;
	              }

	              this._input = input;

	              // if tap count matches we have recognized it,
	              // else it has began recognizing...
	              var tapCount = this.count % options.taps;
	              if (tapCount === 0) {
	                  // no failing requirements, immediately trigger the tap event
	                  // or wait as long as the multitap interval to trigger
	                  if (!this.hasRequireFailures()) {
	                      return STATE_RECOGNIZED;
	                  } else {
	                      this._timer = setTimeoutContext(function() {
	                          this.state = STATE_RECOGNIZED;
	                          this.tryEmit();
	                      }, options.interval, this);
	                      return STATE_BEGAN;
	                  }
	              }
	          }
	          return STATE_FAILED;
	      },

	      failTimeout: function() {
	          this._timer = setTimeoutContext(function() {
	              this.state = STATE_FAILED;
	          }, this.options.interval, this);
	          return STATE_FAILED;
	      },

	      reset: function() {
	          clearTimeout(this._timer);
	      },

	      emit: function() {
	          if (this.state == STATE_RECOGNIZED) {
	              this._input.tapCount = this.count;
	              this.manager.emit(this.options.event, this._input);
	          }
	      }
	  });

	  /**
	   * Simple way to create a manager with a default set of recognizers.
	   * @param {HTMLElement} element
	   * @param {Object} [options]
	   * @constructor
	   */
	  function Hammer(element, options) {
	      options = options || {};
	      options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
	      return new Manager(element, options);
	  }

	  /**
	   * @const {string}
	   */
	  Hammer.VERSION = '2.0.7';

	  /**
	   * default settings
	   * @namespace
	   */
	  Hammer.defaults = {
	      /**
	       * set if DOM events are being triggered.
	       * But this is slower and unused by simple implementations, so disabled by default.
	       * @type {Boolean}
	       * @default false
	       */
	      domEvents: false,

	      /**
	       * The value for the touchAction property/fallback.
	       * When set to `compute` it will magically set the correct value based on the added recognizers.
	       * @type {String}
	       * @default compute
	       */
	      touchAction: TOUCH_ACTION_COMPUTE,

	      /**
	       * @type {Boolean}
	       * @default true
	       */
	      enable: true,

	      /**
	       * EXPERIMENTAL FEATURE -- can be removed/changed
	       * Change the parent input target element.
	       * If Null, then it is being set the to main element.
	       * @type {Null|EventTarget}
	       * @default null
	       */
	      inputTarget: null,

	      /**
	       * force an input class
	       * @type {Null|Function}
	       * @default null
	       */
	      inputClass: null,

	      /**
	       * Default recognizer setup when calling `Hammer()`
	       * When creating a new Manager these will be skipped.
	       * @type {Array}
	       */
	      preset: [
	          // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	          [RotateRecognizer, {enable: false}],
	          [PinchRecognizer, {enable: false}, ['rotate']],
	          [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
	          [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
	          [TapRecognizer],
	          [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
	          [PressRecognizer]
	      ],

	      /**
	       * Some CSS properties can be used to improve the working of Hammer.
	       * Add them to this method and they will be set when creating a new Manager.
	       * @namespace
	       */
	      cssProps: {
	          /**
	           * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	           * @type {String}
	           * @default 'none'
	           */
	          userSelect: 'none',

	          /**
	           * Disable the Windows Phone grippers when pressing an element.
	           * @type {String}
	           * @default 'none'
	           */
	          touchSelect: 'none',

	          /**
	           * Disables the default callout shown when you touch and hold a touch target.
	           * On iOS, when you touch and hold a touch target such as a link, Safari displays
	           * a callout containing information about the link. This property allows you to disable that callout.
	           * @type {String}
	           * @default 'none'
	           */
	          touchCallout: 'none',

	          /**
	           * Specifies whether zooming is enabled. Used by IE10>
	           * @type {String}
	           * @default 'none'
	           */
	          contentZooming: 'none',

	          /**
	           * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	           * @type {String}
	           * @default 'none'
	           */
	          userDrag: 'none',

	          /**
	           * Overrides the highlight color shown when the user taps a link or a JavaScript
	           * clickable element in iOS. This property obeys the alpha value, if specified.
	           * @type {String}
	           * @default 'rgba(0,0,0,0)'
	           */
	          tapHighlightColor: 'rgba(0,0,0,0)'
	      }
	  };

	  var STOP = 1;
	  var FORCED_STOP = 2;

	  /**
	   * Manager
	   * @param {HTMLElement} element
	   * @param {Object} [options]
	   * @constructor
	   */
	  function Manager(element, options) {
	      this.options = assign({}, Hammer.defaults, options || {});

	      this.options.inputTarget = this.options.inputTarget || element;

	      this.handlers = {};
	      this.session = {};
	      this.recognizers = [];
	      this.oldCssProps = {};

	      this.element = element;
	      this.input = createInputInstance(this);
	      this.touchAction = new TouchAction(this, this.options.touchAction);

	      toggleCssProps(this, true);

	      each(this.options.recognizers, function(item) {
	          var recognizer = this.add(new (item[0])(item[1]));
	          item[2] && recognizer.recognizeWith(item[2]);
	          item[3] && recognizer.requireFailure(item[3]);
	      }, this);
	  }

	  Manager.prototype = {
	      /**
	       * set options
	       * @param {Object} options
	       * @returns {Manager}
	       */
	      set: function(options) {
	          assign(this.options, options);

	          // Options that need a little more setup
	          if (options.touchAction) {
	              this.touchAction.update();
	          }
	          if (options.inputTarget) {
	              // Clean up existing event listeners and reinitialize
	              this.input.destroy();
	              this.input.target = options.inputTarget;
	              this.input.init();
	          }
	          return this;
	      },

	      /**
	       * stop recognizing for this session.
	       * This session will be discarded, when a new [input]start event is fired.
	       * When forced, the recognizer cycle is stopped immediately.
	       * @param {Boolean} [force]
	       */
	      stop: function(force) {
	          this.session.stopped = force ? FORCED_STOP : STOP;
	      },

	      /**
	       * run the recognizers!
	       * called by the inputHandler function on every movement of the pointers (touches)
	       * it walks through all the recognizers and tries to detect the gesture that is being made
	       * @param {Object} inputData
	       */
	      recognize: function(inputData) {
	          var session = this.session;
	          if (session.stopped) {
	              return;
	          }

	          // run the touch-action polyfill
	          this.touchAction.preventDefaults(inputData);

	          var recognizer;
	          var recognizers = this.recognizers;

	          // this holds the recognizer that is being recognized.
	          // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	          // if no recognizer is detecting a thing, it is set to `null`
	          var curRecognizer = session.curRecognizer;

	          // reset when the last recognizer is recognized
	          // or when we're in a new session
	          if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
	              curRecognizer = session.curRecognizer = null;
	          }

	          var i = 0;
	          while (i < recognizers.length) {
	              recognizer = recognizers[i];

	              // find out if we are allowed try to recognize the input for this one.
	              // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	              // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	              //      that is being recognized.
	              // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	              //      this can be setup with the `recognizeWith()` method on the recognizer.
	              if (session.stopped !== FORCED_STOP && ( // 1
	                      !curRecognizer || recognizer == curRecognizer || // 2
	                      recognizer.canRecognizeWith(curRecognizer))) { // 3
	                  recognizer.recognize(inputData);
	              } else {
	                  recognizer.reset();
	              }

	              // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	              // current active recognizer. but only if we don't already have an active recognizer
	              if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                  curRecognizer = session.curRecognizer = recognizer;
	              }
	              i++;
	          }
	      },

	      /**
	       * get a recognizer by its event name.
	       * @param {Recognizer|String} recognizer
	       * @returns {Recognizer|Null}
	       */
	      get: function(recognizer) {
	          if (recognizer instanceof Recognizer) {
	              return recognizer;
	          }

	          var recognizers = this.recognizers;
	          for (var i = 0; i < recognizers.length; i++) {
	              if (recognizers[i].options.event == recognizer) {
	                  return recognizers[i];
	              }
	          }
	          return null;
	      },

	      /**
	       * add a recognizer to the manager
	       * existing recognizers with the same event name will be removed
	       * @param {Recognizer} recognizer
	       * @returns {Recognizer|Manager}
	       */
	      add: function(recognizer) {
	          if (invokeArrayArg(recognizer, 'add', this)) {
	              return this;
	          }

	          // remove existing
	          var existing = this.get(recognizer.options.event);
	          if (existing) {
	              this.remove(existing);
	          }

	          this.recognizers.push(recognizer);
	          recognizer.manager = this;

	          this.touchAction.update();
	          return recognizer;
	      },

	      /**
	       * remove a recognizer by name or instance
	       * @param {Recognizer|String} recognizer
	       * @returns {Manager}
	       */
	      remove: function(recognizer) {
	          if (invokeArrayArg(recognizer, 'remove', this)) {
	              return this;
	          }

	          recognizer = this.get(recognizer);

	          // let's make sure this recognizer exists
	          if (recognizer) {
	              var recognizers = this.recognizers;
	              var index = inArray(recognizers, recognizer);

	              if (index !== -1) {
	                  recognizers.splice(index, 1);
	                  this.touchAction.update();
	              }
	          }

	          return this;
	      },

	      /**
	       * bind event
	       * @param {String} events
	       * @param {Function} handler
	       * @returns {EventEmitter} this
	       */
	      on: function(events, handler) {
	          if (events === undefined) {
	              return;
	          }
	          if (handler === undefined) {
	              return;
	          }

	          var handlers = this.handlers;
	          each(splitStr(events), function(event) {
	              handlers[event] = handlers[event] || [];
	              handlers[event].push(handler);
	          });
	          return this;
	      },

	      /**
	       * unbind event, leave emit blank to remove all handlers
	       * @param {String} events
	       * @param {Function} [handler]
	       * @returns {EventEmitter} this
	       */
	      off: function(events, handler) {
	          if (events === undefined) {
	              return;
	          }

	          var handlers = this.handlers;
	          each(splitStr(events), function(event) {
	              if (!handler) {
	                  delete handlers[event];
	              } else {
	                  handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
	              }
	          });
	          return this;
	      },

	      /**
	       * emit event to the listeners
	       * @param {String} event
	       * @param {Object} data
	       */
	      emit: function(event, data) {
	          // we also want to trigger dom events
	          if (this.options.domEvents) {
	              triggerDomEvent(event, data);
	          }

	          // no handlers, so skip it all
	          var handlers = this.handlers[event] && this.handlers[event].slice();
	          if (!handlers || !handlers.length) {
	              return;
	          }

	          data.type = event;
	          data.preventDefault = function() {
	              data.srcEvent.preventDefault();
	          };

	          var i = 0;
	          while (i < handlers.length) {
	              handlers[i](data);
	              i++;
	          }
	      },

	      /**
	       * destroy the manager and unbinds all events
	       * it doesn't unbind dom events, that is the user own responsibility
	       */
	      destroy: function() {
	          this.element && toggleCssProps(this, false);

	          this.handlers = {};
	          this.session = {};
	          this.input.destroy();
	          this.element = null;
	      }
	  };

	  /**
	   * add/remove the css properties as defined in manager.options.cssProps
	   * @param {Manager} manager
	   * @param {Boolean} add
	   */
	  function toggleCssProps(manager, add) {
	      var element = manager.element;
	      if (!element.style) {
	          return;
	      }
	      var prop;
	      each(manager.options.cssProps, function(value, name) {
	          prop = prefixed(element.style, name);
	          if (add) {
	              manager.oldCssProps[prop] = element.style[prop];
	              element.style[prop] = value;
	          } else {
	              element.style[prop] = manager.oldCssProps[prop] || '';
	          }
	      });
	      if (!add) {
	          manager.oldCssProps = {};
	      }
	  }

	  /**
	   * trigger dom event
	   * @param {String} event
	   * @param {Object} data
	   */
	  function triggerDomEvent(event, data) {
	      var gestureEvent = document.createEvent('Event');
	      gestureEvent.initEvent(event, true, true);
	      gestureEvent.gesture = data;
	      data.target.dispatchEvent(gestureEvent);
	  }

	  assign(Hammer, {
	      INPUT_START: INPUT_START,
	      INPUT_MOVE: INPUT_MOVE,
	      INPUT_END: INPUT_END,
	      INPUT_CANCEL: INPUT_CANCEL,

	      STATE_POSSIBLE: STATE_POSSIBLE,
	      STATE_BEGAN: STATE_BEGAN,
	      STATE_CHANGED: STATE_CHANGED,
	      STATE_ENDED: STATE_ENDED,
	      STATE_RECOGNIZED: STATE_RECOGNIZED,
	      STATE_CANCELLED: STATE_CANCELLED,
	      STATE_FAILED: STATE_FAILED,

	      DIRECTION_NONE: DIRECTION_NONE,
	      DIRECTION_LEFT: DIRECTION_LEFT,
	      DIRECTION_RIGHT: DIRECTION_RIGHT,
	      DIRECTION_UP: DIRECTION_UP,
	      DIRECTION_DOWN: DIRECTION_DOWN,
	      DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
	      DIRECTION_VERTICAL: DIRECTION_VERTICAL,
	      DIRECTION_ALL: DIRECTION_ALL,

	      Manager: Manager,
	      Input: Input,
	      TouchAction: TouchAction,

	      TouchInput: TouchInput,
	      MouseInput: MouseInput,
	      PointerEventInput: PointerEventInput,
	      TouchMouseInput: TouchMouseInput,
	      SingleTouchInput: SingleTouchInput,

	      Recognizer: Recognizer,
	      AttrRecognizer: AttrRecognizer,
	      Tap: TapRecognizer,
	      Pan: PanRecognizer,
	      Swipe: SwipeRecognizer,
	      Pinch: PinchRecognizer,
	      Rotate: RotateRecognizer,
	      Press: PressRecognizer,

	      on: addEventListeners,
	      off: removeEventListeners,
	      each: each,
	      merge: merge,
	      extend: extend,
	      assign: assign,
	      inherit: inherit,
	      bindFn: bindFn,
	      prefixed: prefixed
	  });

	  // this prevents errors when Hammer is loaded in the presence of an AMD
	  //  style loader but by script tag, not by the loader.
	  var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
	  freeGlobal.Hammer = Hammer;

	  if (true) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	          return Hammer;
	      }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof module != 'undefined' && module.exports) {
	      module.exports = Hammer;
	  } else {
	      window[exportName] = Hammer;
	  }

	  })(window, document, 'Hammer');


	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

	  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	  /**
	   * Created by Alex on 11/6/2014.
	   */

	  // https://github.com/umdjs/umd/blob/master/returnExports.js#L40-L60
	  // if the module has no dependencies, the above pattern can be simplified to
	  (function (root, factory) {
	    if (true) {
	      // AMD. Register as an anonymous module.
	      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	      // Node. Does not work with strict CommonJS, but
	      // only CommonJS-like environments that support module.exports,
	      // like Node.
	      module.exports = factory();
	    } else {
	      // Browser globals (root is window)
	      root.keycharm = factory();
	    }
	  }(this, function () {

	    function keycharm(options) {
	      var preventDefault = options && options.preventDefault || false;

	      var container = options && options.container || window;

	      var _exportFunctions = {};
	      var _bound = {keydown:{}, keyup:{}};
	      var _keys = {};
	      var i;

	      // a - z
	      for (i = 97; i <= 122; i++) {_keys[String.fromCharCode(i)] = {code:65 + (i - 97), shift: false};}
	      // A - Z
	      for (i = 65; i <= 90; i++) {_keys[String.fromCharCode(i)] = {code:i, shift: true};}
	      // 0 - 9
	      for (i = 0;  i <= 9;   i++) {_keys['' + i] = {code:48 + i, shift: false};}
	      // F1 - F12
	      for (i = 1;  i <= 12;   i++) {_keys['F' + i] = {code:111 + i, shift: false};}
	      // num0 - num9
	      for (i = 0;  i <= 9;   i++) {_keys['num' + i] = {code:96 + i, shift: false};}

	      // numpad misc
	      _keys['num*'] = {code:106, shift: false};
	      _keys['num+'] = {code:107, shift: false};
	      _keys['num-'] = {code:109, shift: false};
	      _keys['num/'] = {code:111, shift: false};
	      _keys['num.'] = {code:110, shift: false};
	      // arrows
	      _keys['left']  = {code:37, shift: false};
	      _keys['up']    = {code:38, shift: false};
	      _keys['right'] = {code:39, shift: false};
	      _keys['down']  = {code:40, shift: false};
	      // extra keys
	      _keys['space'] = {code:32, shift: false};
	      _keys['enter'] = {code:13, shift: false};
	      _keys['shift'] = {code:16, shift: undefined};
	      _keys['esc']   = {code:27, shift: false};
	      _keys['backspace'] = {code:8, shift: false};
	      _keys['tab']       = {code:9, shift: false};
	      _keys['ctrl']      = {code:17, shift: false};
	      _keys['alt']       = {code:18, shift: false};
	      _keys['delete']    = {code:46, shift: false};
	      _keys['pageup']    = {code:33, shift: false};
	      _keys['pagedown']  = {code:34, shift: false};
	      // symbols
	      _keys['=']     = {code:187, shift: false};
	      _keys['-']     = {code:189, shift: false};
	      _keys[']']     = {code:221, shift: false};
	      _keys['[']     = {code:219, shift: false};



	      var down = function(event) {handleEvent(event,'keydown');};
	      var up = function(event) {handleEvent(event,'keyup');};

	      // handle the actualy bound key with the event
	      var handleEvent = function(event,type) {
	        if (_bound[type][event.keyCode] !== undefined) {
	          var bound = _bound[type][event.keyCode];
	          for (var i = 0; i < bound.length; i++) {
	            if (bound[i].shift === undefined) {
	              bound[i].fn(event);
	            }
	            else if (bound[i].shift == true && event.shiftKey == true) {
	              bound[i].fn(event);
	            }
	            else if (bound[i].shift == false && event.shiftKey == false) {
	              bound[i].fn(event);
	            }
	          }

	          if (preventDefault == true) {
	            event.preventDefault();
	          }
	        }
	      };

	      // bind a key to a callback
	      _exportFunctions.bind = function(key, callback, type) {
	        if (type === undefined) {
	          type = 'keydown';
	        }
	        if (_keys[key] === undefined) {
	          throw new Error("unsupported key: " + key);
	        }
	        if (_bound[type][_keys[key].code] === undefined) {
	          _bound[type][_keys[key].code] = [];
	        }
	        _bound[type][_keys[key].code].push({fn:callback, shift:_keys[key].shift});
	      };


	      // bind all keys to a call back (demo purposes)
	      _exportFunctions.bindAll = function(callback, type) {
	        if (type === undefined) {
	          type = 'keydown';
	        }
	        for (var key in _keys) {
	          if (_keys.hasOwnProperty(key)) {
	            _exportFunctions.bind(key,callback,type);
	          }
	        }
	      };

	      // get the key label from an event
	      _exportFunctions.getKey = function(event) {
	        for (var key in _keys) {
	          if (_keys.hasOwnProperty(key)) {
	            if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {
	              return key;
	            }
	            else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {
	              return key;
	            }
	            else if (event.keyCode == _keys[key].code && key == 'shift') {
	              return key;
	            }
	          }
	        }
	        return "unknown key, currently not supported";
	      };

	      // unbind either a specific callback from a key or all of them (by leaving callback undefined)
	      _exportFunctions.unbind = function(key, callback, type) {
	        if (type === undefined) {
	          type = 'keydown';
	        }
	        if (_keys[key] === undefined) {
	          throw new Error("unsupported key: " + key);
	        }
	        if (callback !== undefined) {
	          var newBindings = [];
	          var bound = _bound[type][_keys[key].code];
	          if (bound !== undefined) {
	            for (var i = 0; i < bound.length; i++) {
	              if (!(bound[i].fn == callback && bound[i].shift == _keys[key].shift)) {
	                newBindings.push(_bound[type][_keys[key].code][i]);
	              }
	            }
	          }
	          _bound[type][_keys[key].code] = newBindings;
	        }
	        else {
	          _bound[type][_keys[key].code] = [];
	        }
	      };

	      // reset all bound variables.
	      _exportFunctions.reset = function() {
	        _bound = {keydown:{}, keyup:{}};
	      };

	      // unbind all listeners and reset all variables.
	      _exportFunctions.destroy = function() {
	        _bound = {keydown:{}, keyup:{}};
	        container.removeEventListener('keydown', down, true);
	        container.removeEventListener('keyup', up, true);
	      };

	      // create listeners.
	      container.addEventListener('keydown',down,true);
	      container.addEventListener('keyup',up,true);

	      // return the public functions.
	      return _exportFunctions;
	    }

	    return keycharm;
	  }));




	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  // utils
	  exports.util = __webpack_require__(1);
	  exports.DOMutil = __webpack_require__(8);

	  // data
	  exports.DataSet = __webpack_require__(9);
	  exports.DataView = __webpack_require__(11);
	  exports.Queue = __webpack_require__(10);

	  // Timeline
	  exports.Timeline = __webpack_require__(27);
	  exports.Graph2d = __webpack_require__(52);
	  exports.timeline = {
	    Core: __webpack_require__(35),
	    DateUtil: __webpack_require__(34),
	    Range: __webpack_require__(32),
	    stack: __webpack_require__(39),
	    TimeStep: __webpack_require__(37),

	    components: {
	      items: {
	        Item: __webpack_require__(41),
	        BackgroundItem: __webpack_require__(45),
	        BoxItem: __webpack_require__(43),
	        PointItem: __webpack_require__(44),
	        RangeItem: __webpack_require__(40)
	      },

	      BackgroundGroup: __webpack_require__(42),
	      Component: __webpack_require__(33),
	      CurrentTime: __webpack_require__(50),
	      CustomTime: __webpack_require__(48),
	      DataAxis: __webpack_require__(54),
	      DataScale: __webpack_require__(55),
	      GraphGroup: __webpack_require__(56),
	      Group: __webpack_require__(38),
	      ItemSet: __webpack_require__(36),
	      Legend: __webpack_require__(60),
	      LineGraph: __webpack_require__(53),
	      TimeAxis: __webpack_require__(46)
	    }
	  };

	  // bundled external libraries
	  exports.moment = __webpack_require__(2);
	  exports.Hammer = __webpack_require__(22);
	  exports.keycharm = __webpack_require__(25);

	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _Configurator = __webpack_require__(28);

	  var _Configurator2 = _interopRequireDefault(_Configurator);

	  var _Validator = __webpack_require__(31);

	  var _Validator2 = _interopRequireDefault(_Validator);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  var Emitter = __webpack_require__(13);
	  var Hammer = __webpack_require__(22);
	  var moment = __webpack_require__(2);
	  var util = __webpack_require__(1);
	  var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);
	  var Range = __webpack_require__(32);
	  var Core = __webpack_require__(35);
	  var TimeAxis = __webpack_require__(46);
	  var CurrentTime = __webpack_require__(50);
	  var CustomTime = __webpack_require__(48);
	  var ItemSet = __webpack_require__(36);

	  var printStyle = __webpack_require__(31).printStyle;
	  var allOptions = __webpack_require__(51).allOptions;
	  var configureOptions = __webpack_require__(51).configureOptions;

	  /**
	   * Create a timeline visualization
	   * @param {HTMLElement} container
	   * @param {vis.DataSet | vis.DataView | Array} [items]
	   * @param {vis.DataSet | vis.DataView | Array} [groups]
	   * @param {Object} [options]  See Timeline.setOptions for the available options.
	   * @constructor
	   * @extends Core
	   */
	  function Timeline(container, items, groups, options) {

	    if (!(this instanceof Timeline)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // if the third element is options, the forth is groups (optionally);
	    if (!(Array.isArray(groups) || groups instanceof DataSet || groups instanceof DataView) && groups instanceof Object) {
	      var forthArgument = options;
	      options = groups;
	      groups = forthArgument;
	    }

	    var me = this;
	    this.defaultOptions = {
	      start: null,
	      end: null,
	      autoResize: true,
	      orientation: {
	        axis: 'bottom', // axis orientation: 'bottom', 'top', or 'both'
	        item: 'bottom' // not relevant
	      },
	      moment: moment,
	      width: null,
	      height: null,
	      maxHeight: null,
	      minHeight: null
	    };
	    this.options = util.deepExtend({}, this.defaultOptions);

	    // Create the DOM, props, and emitter
	    this._create(container);

	    if (!options || options && typeof options.rtl == "undefined") {
	      var directionFromDom,
	          domNode = this.dom.root;
	      while (!directionFromDom && domNode) {
	        directionFromDom = window.getComputedStyle(domNode, null).direction;
	        domNode = domNode.parentElement;
	      }
	      this.options.rtl = directionFromDom && directionFromDom.toLowerCase() == "rtl";
	    } else {
	      this.options.rtl = options.rtl;
	    }

	    // all components listed here will be repainted automatically
	    this.components = [];

	    this.body = {
	      dom: this.dom,
	      domProps: this.props,
	      emitter: {
	        on: this.on.bind(this),
	        off: this.off.bind(this),
	        emit: this.emit.bind(this)
	      },
	      hiddenDates: [],
	      util: {
	        getScale: function getScale() {
	          return me.timeAxis.step.scale;
	        },
	        getStep: function getStep() {
	          return me.timeAxis.step.step;
	        },

	        toScreen: me._toScreen.bind(me),
	        toGlobalScreen: me._toGlobalScreen.bind(me), // this refers to the root.width
	        toTime: me._toTime.bind(me),
	        toGlobalTime: me._toGlobalTime.bind(me)
	      }
	    };

	    // range
	    this.range = new Range(this.body, this.options);
	    this.components.push(this.range);
	    this.body.range = this.range;

	    // time axis
	    this.timeAxis = new TimeAxis(this.body, this.options);
	    this.timeAxis2 = null; // used in case of orientation option 'both'
	    this.components.push(this.timeAxis);

	    // current time bar
	    this.currentTime = new CurrentTime(this.body, this.options);
	    this.components.push(this.currentTime);

	    // item set
	    this.itemSet = new ItemSet(this.body, this.options);
	    this.components.push(this.itemSet);

	    this.itemsData = null; // DataSet
	    this.groupsData = null; // DataSet

	    this.on('tap', function (event) {
	      me.emit('click', me.getEventProperties(event));
	    });
	    this.on('doubletap', function (event) {
	      me.emit('doubleClick', me.getEventProperties(event));
	    });
	    this.dom.root.oncontextmenu = function (event) {
	      me.emit('contextmenu', me.getEventProperties(event));
	    };

	    //Single time autoscale/fit
	    this.fitDone = false;
	    this.on('changed', function () {
	      if (this.itemsData == null) return;
	      if (!me.fitDone) {
	        me.fitDone = true;
	        if (me.options.start != undefined || me.options.end != undefined) {
	          if (me.options.start == undefined || me.options.end == undefined) {
	            var range = me.getItemRange();
	          }

	          var start = me.options.start != undefined ? me.options.start : range.min;
	          var end = me.options.end != undefined ? me.options.end : range.max;

	          me.setWindow(start, end, { animation: false });
	        } else {
	          me.fit({ animation: false });
	        }
	      }
	    });

	    // apply options
	    if (options) {
	      this.setOptions(options);
	    }

	    // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
	    if (groups) {
	      this.setGroups(groups);
	    }

	    // create itemset
	    if (items) {
	      this.setItems(items);
	    }

	    // draw for the first time
	    this._redraw();
	  }

	  // Extend the functionality from Core
	  Timeline.prototype = new Core();

	  /**
	   * Load a configurator
	   * @return {Object}
	   * @private
	   */
	  Timeline.prototype._createConfigurator = function () {
	    return new _Configurator2.default(this, this.dom.container, configureOptions);
	  };

	  /**
	   * Force a redraw. The size of all items will be recalculated.
	   * Can be useful to manually redraw when option autoResize=false and the window
	   * has been resized, or when the items CSS has been changed.
	   *
	   * Note: this function will be overridden on construction with a trottled version
	   */
	  Timeline.prototype.redraw = function () {
	    this.itemSet && this.itemSet.markDirty({ refreshItems: true });
	    this._redraw();
	  };

	  Timeline.prototype.setOptions = function (options) {
	    // validate options
	    var errorFound = _Validator2.default.validate(options, allOptions);

	    if (errorFound === true) {
	      console.log('%cErrors have been found in the supplied options object.', printStyle);
	    }
	    Core.prototype.setOptions.call(this, options);

	    if ('type' in options) {
	      if (options.type !== this.options.type) {
	        this.options.type = options.type;

	        // force recreation of all items
	        var itemsData = this.itemsData;
	        if (itemsData) {
	          var selection = this.getSelection();
	          this.setItems(null); // remove all
	          this.setItems(itemsData); // add all
	          this.setSelection(selection); // restore selection
	        }
	      }
	    }
	  };

	  /**
	   * Set items
	   * @param {vis.DataSet | Array | null} items
	   */
	  Timeline.prototype.setItems = function (items) {
	    // convert to type DataSet when needed
	    var newDataSet;
	    if (!items) {
	      newDataSet = null;
	    } else if (items instanceof DataSet || items instanceof DataView) {
	      newDataSet = items;
	    } else {
	      // turn an array into a dataset
	      newDataSet = new DataSet(items, {
	        type: {
	          start: 'Date',
	          end: 'Date'
	        }
	      });
	    }

	    // set items
	    this.itemsData = newDataSet;
	    this.itemSet && this.itemSet.setItems(newDataSet);
	  };

	  /**
	   * Set groups
	   * @param {vis.DataSet | Array} groups
	   */
	  Timeline.prototype.setGroups = function (groups) {
	    // convert to type DataSet when needed
	    var newDataSet;
	    if (!groups) {
	      newDataSet = null;
	    } else if (groups instanceof DataSet || groups instanceof DataView) {
	      newDataSet = groups;
	    } else {
	      // turn an array into a dataset
	      newDataSet = new DataSet(groups);
	    }

	    this.groupsData = newDataSet;
	    this.itemSet.setGroups(newDataSet);
	  };

	  /**
	   * Set both items and groups in one go
	   * @param {{items: Array | vis.DataSet, groups: Array | vis.DataSet}} data
	   */
	  Timeline.prototype.setData = function (data) {
	    if (data && data.groups) {
	      this.setGroups(data.groups);
	    }

	    if (data && data.items) {
	      this.setItems(data.items);
	    }
	  };

	  /**
	   * Set selected items by their id. Replaces the current selection
	   * Unknown id's are silently ignored.
	   * @param {string[] | string} [ids]  An array with zero or more id's of the items to be
	   *                                selected. If ids is an empty array, all items will be
	   *                                unselected.
	   * @param {Object} [options]      Available options:
	   *                                `focus: boolean`
	   *                                    If true, focus will be set to the selected item(s)
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   *                                    Only applicable when option focus is true.
	   */
	  Timeline.prototype.setSelection = function (ids, options) {
	    this.itemSet && this.itemSet.setSelection(ids);

	    if (options && options.focus) {
	      this.focus(ids, options);
	    }
	  };

	  /**
	   * Get the selected items by their id
	   * @return {Array} ids  The ids of the selected items
	   */
	  Timeline.prototype.getSelection = function () {
	    return this.itemSet && this.itemSet.getSelection() || [];
	  };

	  /**
	   * Adjust the visible window such that the selected item (or multiple items)
	   * are centered on screen.
	   * @param {String | String[]} id     An item id or array with item ids
	   * @param {Object} [options]      Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */
	  Timeline.prototype.focus = function (id, options) {
	    if (!this.itemsData || id == undefined) return;

	    var ids = Array.isArray(id) ? id : [id];

	    // get the specified item(s)
	    var itemsData = this.itemsData.getDataSet().get(ids, {
	      type: {
	        start: 'Date',
	        end: 'Date'
	      }
	    });

	    // calculate minimum start and maximum end of specified items
	    var start = null;
	    var end = null;
	    itemsData.forEach(function (itemData) {
	      var s = itemData.start.valueOf();
	      var e = 'end' in itemData ? itemData.end.valueOf() : itemData.start.valueOf();

	      if (start === null || s < start) {
	        start = s;
	      }

	      if (end === null || e > end) {
	        end = e;
	      }
	    });

	    if (start !== null && end !== null) {
	      // calculate the new middle and interval for the window
	      var middle = (start + end) / 2;
	      var interval = Math.max(this.range.end - this.range.start, (end - start) * 1.1);

	      var animation = options && options.animation !== undefined ? options.animation : true;
	      this.range.setRange(middle - interval / 2, middle + interval / 2, animation);
	    }
	  };

	  /**
	   * Set Timeline window such that it fits all items
	   * @param {Object} [options]  Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */
	  Timeline.prototype.fit = function (options) {
	    var animation = options && options.animation !== undefined ? options.animation : true;
	    var range;

	    var dataset = this.itemsData && this.itemsData.getDataSet();
	    if (dataset.length === 1 && dataset.get()[0].end === undefined) {
	      // a single item -> don't fit, just show a range around the item from -4 to +3 days
	      range = this.getDataRange();
	      this.moveTo(range.min.valueOf(), { animation: animation });
	    } else {
	      // exactly fit the items (plus a small margin)
	      range = this.getItemRange();
	      this.range.setRange(range.min, range.max, animation);
	    }
	  };

	  /**
	   * Determine the range of the items, taking into account their actual width
	   * and a margin of 10 pixels on both sides.
	   * @return {{min: Date | null, max: Date | null}}
	   */
	  Timeline.prototype.getItemRange = function () {
	    var _this = this;

	    // get a rough approximation for the range based on the items start and end dates
	    var range = this.getDataRange();
	    var min = range.min !== null ? range.min.valueOf() : null;
	    var max = range.max !== null ? range.max.valueOf() : null;
	    var minItem = null;
	    var maxItem = null;

	    if (min != null && max != null) {
	      var interval;
	      var factor;
	      var lhs;
	      var rhs;
	      var delta;

	      (function () {
	        var getStart = function getStart(item) {
	          return util.convert(item.data.start, 'Date').valueOf();
	        };

	        var getEnd = function getEnd(item) {
	          var end = item.data.end != undefined ? item.data.end : item.data.start;
	          return util.convert(end, 'Date').valueOf();
	        };

	        // calculate the date of the left side and right side of the items given


	        interval = max - min; // ms

	        if (interval <= 0) {
	          interval = 10;
	        }
	        factor = interval / _this.props.center.width;
	        util.forEach(_this.itemSet.items, function (item) {
	          item.show();
	          item.repositionX();

	          var start = getStart(item);
	          var end = getEnd(item);

	          if (this.options.rtl) {
	            var startSide = start - (item.getWidthRight() + 10) * factor;
	            var endSide = end + (item.getWidthLeft() + 10) * factor;
	          } else {
	            var startSide = start - (item.getWidthLeft() + 10) * factor;
	            var endSide = end + (item.getWidthRight() + 10) * factor;
	          }

	          if (startSide < min) {
	            min = startSide;
	            minItem = item;
	          }
	          if (endSide > max) {
	            max = endSide;
	            maxItem = item;
	          }
	        }.bind(_this));

	        if (minItem && maxItem) {
	          lhs = minItem.getWidthLeft() + 10;
	          rhs = maxItem.getWidthRight() + 10;
	          delta = _this.props.center.width - lhs - rhs; // px

	          if (delta > 0) {
	            if (_this.options.rtl) {
	              min = getStart(minItem) - rhs * interval / delta; // ms
	              max = getEnd(maxItem) + lhs * interval / delta; // ms
	            } else {
	              min = getStart(minItem) - lhs * interval / delta; // ms
	              max = getEnd(maxItem) + rhs * interval / delta; // ms
	            }
	          }
	        }
	      })();
	    }

	    return {
	      min: min != null ? new Date(min) : null,
	      max: max != null ? new Date(max) : null
	    };
	  };

	  /**
	   * Calculate the data range of the items start and end dates
	   * @returns {{min: Date | null, max: Date | null}}
	   */
	  Timeline.prototype.getDataRange = function () {
	    var min = null;
	    var max = null;

	    var dataset = this.itemsData && this.itemsData.getDataSet();
	    if (dataset) {
	      dataset.forEach(function (item) {
	        var start = util.convert(item.start, 'Date').valueOf();
	        var end = util.convert(item.end != undefined ? item.end : item.start, 'Date').valueOf();
	        if (min === null || start < min) {
	          min = start;
	        }
	        if (max === null || end > max) {
	          max = end;
	        }
	      });
	    }

	    return {
	      min: min != null ? new Date(min) : null,
	      max: max != null ? new Date(max) : null
	    };
	  };

	  /**
	   * Generate Timeline related information from an event
	   * @param {Event} event
	   * @return {Object} An object with related information, like on which area
	   *                  The event happened, whether clicked on an item, etc.
	   */
	  Timeline.prototype.getEventProperties = function (event) {
	    var clientX = event.center ? event.center.x : event.clientX;
	    var clientY = event.center ? event.center.y : event.clientY;
	    if (this.options.rtl) {
	      var x = util.getAbsoluteRight(this.dom.centerContainer) - clientX;
	    } else {
	      var x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
	    }
	    var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);

	    var item = this.itemSet.itemFromTarget(event);
	    var group = this.itemSet.groupFromTarget(event);
	    var customTime = CustomTime.customTimeFromTarget(event);

	    var snap = this.itemSet.options.snap || null;
	    var scale = this.body.util.getScale();
	    var step = this.body.util.getStep();
	    var time = this._toTime(x);
	    var snappedTime = snap ? snap(time, scale, step) : time;

	    var element = util.getTarget(event);
	    var what = null;
	    if (item != null) {
	      what = 'item';
	    } else if (customTime != null) {
	      what = 'custom-time';
	    } else if (util.hasParent(element, this.timeAxis.dom.foreground)) {
	      what = 'axis';
	    } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
	      what = 'axis';
	    } else if (util.hasParent(element, this.itemSet.dom.labelSet)) {
	      what = 'group-label';
	    } else if (util.hasParent(element, this.currentTime.bar)) {
	      what = 'current-time';
	    } else if (util.hasParent(element, this.dom.center)) {
	      what = 'background';
	    }

	    return {
	      event: event,
	      item: item ? item.id : null,
	      group: group ? group.groupId : null,
	      what: what,
	      pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
	      pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
	      x: x,
	      y: y,
	      time: time,
	      snappedTime: snappedTime
	    };
	  };

	  module.exports = Timeline;

	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _ColorPicker = __webpack_require__(29);

	  var _ColorPicker2 = _interopRequireDefault(_ColorPicker);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  /**
	   * The way this works is for all properties of this.possible options, you can supply the property name in any form to list the options.
	   * Boolean options are recognised as Boolean
	   * Number options should be written as array: [default value, min value, max value, stepsize]
	   * Colors should be written as array: ['color', '#ffffff']
	   * Strings with should be written as array: [option1, option2, option3, ..]
	   *
	   * The options are matched with their counterparts in each of the modules and the values used in the configuration are
	   *
	   * @param parentModule        | the location where parentModule.setOptions() can be called
	   * @param defaultContainer    | the default container of the module
	   * @param configureOptions    | the fully configured and predefined options set found in allOptions.js
	   * @param pixelRatio          | canvas pixel ratio
	   */
	  var Configurator = function () {
	    function Configurator(parentModule, defaultContainer, configureOptions) {
	      var pixelRatio = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

	      _classCallCheck(this, Configurator);

	      this.parent = parentModule;
	      this.changedOptions = [];
	      this.container = defaultContainer;
	      this.allowCreation = false;

	      this.options = {};
	      this.initialized = false;
	      this.popupCounter = 0;
	      this.defaultOptions = {
	        enabled: false,
	        filter: true,
	        container: undefined,
	        showButton: true
	      };
	      util.extend(this.options, this.defaultOptions);

	      this.configureOptions = configureOptions;
	      this.moduleOptions = {};
	      this.domElements = [];
	      this.popupDiv = {};
	      this.popupLimit = 5;
	      this.popupHistory = {};
	      this.colorPicker = new _ColorPicker2.default(pixelRatio);
	      this.wrapper = undefined;
	    }

	    /**
	     * refresh all options.
	     * Because all modules parse their options by themselves, we just use their options. We copy them here.
	     *
	     * @param options
	     */


	    _createClass(Configurator, [{
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (options !== undefined) {
	          // reset the popup history because the indices may have been changed.
	          this.popupHistory = {};
	          this._removePopup();

	          var enabled = true;
	          if (typeof options === 'string') {
	            this.options.filter = options;
	          } else if (options instanceof Array) {
	            this.options.filter = options.join();
	          } else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	            if (options.container !== undefined) {
	              this.options.container = options.container;
	            }
	            if (options.filter !== undefined) {
	              this.options.filter = options.filter;
	            }
	            if (options.showButton !== undefined) {
	              this.options.showButton = options.showButton;
	            }
	            if (options.enabled !== undefined) {
	              enabled = options.enabled;
	            }
	          } else if (typeof options === 'boolean') {
	            this.options.filter = true;
	            enabled = options;
	          } else if (typeof options === 'function') {
	            this.options.filter = options;
	            enabled = true;
	          }
	          if (this.options.filter === false) {
	            enabled = false;
	          }

	          this.options.enabled = enabled;
	        }
	        this._clean();
	      }
	    }, {
	      key: 'setModuleOptions',
	      value: function setModuleOptions(moduleOptions) {
	        this.moduleOptions = moduleOptions;
	        if (this.options.enabled === true) {
	          this._clean();
	          if (this.options.container !== undefined) {
	            this.container = this.options.container;
	          }
	          this._create();
	        }
	      }

	      /**
	       * Create all DOM elements
	       * @private
	       */

	    }, {
	      key: '_create',
	      value: function _create() {
	        var _this = this;

	        this._clean();
	        this.changedOptions = [];

	        var filter = this.options.filter;
	        var counter = 0;
	        var show = false;
	        for (var option in this.configureOptions) {
	          if (this.configureOptions.hasOwnProperty(option)) {
	            this.allowCreation = false;
	            show = false;
	            if (typeof filter === 'function') {
	              show = filter(option, []);
	              show = show || this._handleObject(this.configureOptions[option], [option], true);
	            } else if (filter === true || filter.indexOf(option) !== -1) {
	              show = true;
	            }

	            if (show !== false) {
	              this.allowCreation = true;

	              // linebreak between categories
	              if (counter > 0) {
	                this._makeItem([]);
	              }
	              // a header for the category
	              this._makeHeader(option);

	              // get the sub options
	              this._handleObject(this.configureOptions[option], [option]);
	            }
	            counter++;
	          }
	        }

	        if (this.options.showButton === true) {
	          (function () {
	            var generateButton = document.createElement('div');
	            generateButton.className = 'vis-configuration vis-config-button';
	            generateButton.innerHTML = 'generate options';
	            generateButton.onclick = function () {
	              _this._printOptions();
	            };
	            generateButton.onmouseover = function () {
	              generateButton.className = 'vis-configuration vis-config-button hover';
	            };
	            generateButton.onmouseout = function () {
	              generateButton.className = 'vis-configuration vis-config-button';
	            };

	            _this.optionsContainer = document.createElement('div');
	            _this.optionsContainer.className = 'vis-configuration vis-config-option-container';

	            _this.domElements.push(_this.optionsContainer);
	            _this.domElements.push(generateButton);
	          })();
	        }

	        this._push();
	        //~ this.colorPicker.insertTo(this.container);
	      }

	      /**
	       * draw all DOM elements on the screen
	       * @private
	       */

	    }, {
	      key: '_push',
	      value: function _push() {
	        this.wrapper = document.createElement('div');
	        this.wrapper.className = 'vis-configuration-wrapper';
	        this.container.appendChild(this.wrapper);
	        for (var i = 0; i < this.domElements.length; i++) {
	          this.wrapper.appendChild(this.domElements[i]);
	        }

	        this._showPopupIfNeeded();
	      }

	      /**
	       * delete all DOM elements
	       * @private
	       */

	    }, {
	      key: '_clean',
	      value: function _clean() {
	        for (var i = 0; i < this.domElements.length; i++) {
	          this.wrapper.removeChild(this.domElements[i]);
	        }

	        if (this.wrapper !== undefined) {
	          this.container.removeChild(this.wrapper);
	          this.wrapper = undefined;
	        }
	        this.domElements = [];

	        this._removePopup();
	      }

	      /**
	       * get the value from the actualOptions if it exists
	       * @param {array} path    | where to look for the actual option
	       * @returns {*}
	       * @private
	       */

	    }, {
	      key: '_getValue',
	      value: function _getValue(path) {
	        var base = this.moduleOptions;
	        for (var i = 0; i < path.length; i++) {
	          if (base[path[i]] !== undefined) {
	            base = base[path[i]];
	          } else {
	            base = undefined;
	            break;
	          }
	        }
	        return base;
	      }

	      /**
	       * all option elements are wrapped in an item
	       * @param path
	       * @param domElements
	       * @private
	       */

	    }, {
	      key: '_makeItem',
	      value: function _makeItem(path) {
	        var _arguments = arguments,
	            _this2 = this;

	        if (this.allowCreation === true) {
	          var _len, domElements, _key;

	          var _ret2 = function () {
	            var item = document.createElement('div');
	            item.className = 'vis-configuration vis-config-item vis-config-s' + path.length;

	            for (_len = _arguments.length, domElements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	              domElements[_key - 1] = _arguments[_key];
	            }

	            domElements.forEach(function (element) {
	              item.appendChild(element);
	            });
	            _this2.domElements.push(item);
	            return {
	              v: _this2.domElements.length
	            };
	          }();

	          if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	        }
	        return 0;
	      }

	      /**
	       * header for major subjects
	       * @param name
	       * @private
	       */

	    }, {
	      key: '_makeHeader',
	      value: function _makeHeader(name) {
	        var div = document.createElement('div');
	        div.className = 'vis-configuration vis-config-header';
	        div.innerHTML = name;
	        this._makeItem([], div);
	      }

	      /**
	       * make a label, if it is an object label, it gets different styling.
	       * @param name
	       * @param path
	       * @param objectLabel
	       * @returns {HTMLElement}
	       * @private
	       */

	    }, {
	      key: '_makeLabel',
	      value: function _makeLabel(name, path) {
	        var objectLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	        var div = document.createElement('div');
	        div.className = 'vis-configuration vis-config-label vis-config-s' + path.length;
	        if (objectLabel === true) {
	          div.innerHTML = '<i><b>' + name + ':</b></i>';
	        } else {
	          div.innerHTML = name + ':';
	        }
	        return div;
	      }

	      /**
	       * make a dropdown list for multiple possible string optoins
	       * @param arr
	       * @param value
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_makeDropdown',
	      value: function _makeDropdown(arr, value, path) {
	        var select = document.createElement('select');
	        select.className = 'vis-configuration vis-config-select';
	        var selectedValue = 0;
	        if (value !== undefined) {
	          if (arr.indexOf(value) !== -1) {
	            selectedValue = arr.indexOf(value);
	          }
	        }

	        for (var i = 0; i < arr.length; i++) {
	          var option = document.createElement('option');
	          option.value = arr[i];
	          if (i === selectedValue) {
	            option.selected = 'selected';
	          }
	          option.innerHTML = arr[i];
	          select.appendChild(option);
	        }

	        var me = this;
	        select.onchange = function () {
	          me._update(this.value, path);
	        };

	        var label = this._makeLabel(path[path.length - 1], path);
	        this._makeItem(path, label, select);
	      }

	      /**
	       * make a range object for numeric options
	       * @param arr
	       * @param value
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_makeRange',
	      value: function _makeRange(arr, value, path) {
	        var defaultValue = arr[0];
	        var min = arr[1];
	        var max = arr[2];
	        var step = arr[3];
	        var range = document.createElement('input');
	        range.className = 'vis-configuration vis-config-range';
	        try {
	          range.type = 'range'; // not supported on IE9
	          range.min = min;
	          range.max = max;
	        } catch (err) {}
	        range.step = step;

	        // set up the popup settings in case they are needed.
	        var popupString = '';
	        var popupValue = 0;

	        if (value !== undefined) {
	          var factor = 1.20;
	          if (value < 0 && value * factor < min) {
	            range.min = Math.ceil(value * factor);
	            popupValue = range.min;
	            popupString = 'range increased';
	          } else if (value / factor < min) {
	            range.min = Math.ceil(value / factor);
	            popupValue = range.min;
	            popupString = 'range increased';
	          }
	          if (value * factor > max && max !== 1) {
	            range.max = Math.ceil(value * factor);
	            popupValue = range.max;
	            popupString = 'range increased';
	          }
	          range.value = value;
	        } else {
	          range.value = defaultValue;
	        }

	        var input = document.createElement('input');
	        input.className = 'vis-configuration vis-config-rangeinput';
	        input.value = range.value;

	        var me = this;
	        range.onchange = function () {
	          input.value = this.value;me._update(Number(this.value), path);
	        };
	        range.oninput = function () {
	          input.value = this.value;
	        };

	        var label = this._makeLabel(path[path.length - 1], path);
	        var itemIndex = this._makeItem(path, label, range, input);

	        // if a popup is needed AND it has not been shown for this value, show it.
	        if (popupString !== '' && this.popupHistory[itemIndex] !== popupValue) {
	          this.popupHistory[itemIndex] = popupValue;
	          this._setupPopup(popupString, itemIndex);
	        }
	      }

	      /**
	       * prepare the popup
	       * @param string
	       * @param index
	       * @private
	       */

	    }, {
	      key: '_setupPopup',
	      value: function _setupPopup(string, index) {
	        var _this3 = this;

	        if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
	          var div = document.createElement("div");
	          div.id = "vis-configuration-popup";
	          div.className = "vis-configuration-popup";
	          div.innerHTML = string;
	          div.onclick = function () {
	            _this3._removePopup();
	          };
	          this.popupCounter += 1;
	          this.popupDiv = { html: div, index: index };
	        }
	      }

	      /**
	       * remove the popup from the dom
	       * @private
	       */

	    }, {
	      key: '_removePopup',
	      value: function _removePopup() {
	        if (this.popupDiv.html !== undefined) {
	          this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
	          clearTimeout(this.popupDiv.hideTimeout);
	          clearTimeout(this.popupDiv.deleteTimeout);
	          this.popupDiv = {};
	        }
	      }

	      /**
	       * Show the popup if it is needed.
	       * @private
	       */

	    }, {
	      key: '_showPopupIfNeeded',
	      value: function _showPopupIfNeeded() {
	        var _this4 = this;

	        if (this.popupDiv.html !== undefined) {
	          var correspondingElement = this.domElements[this.popupDiv.index];
	          var rect = correspondingElement.getBoundingClientRect();
	          this.popupDiv.html.style.left = rect.left + "px";
	          this.popupDiv.html.style.top = rect.top - 30 + "px"; // 30 is the height;
	          document.body.appendChild(this.popupDiv.html);
	          this.popupDiv.hideTimeout = setTimeout(function () {
	            _this4.popupDiv.html.style.opacity = 0;
	          }, 1500);
	          this.popupDiv.deleteTimeout = setTimeout(function () {
	            _this4._removePopup();
	          }, 1800);
	        }
	      }

	      /**
	       * make a checkbox for boolean options.
	       * @param defaultValue
	       * @param value
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_makeCheckbox',
	      value: function _makeCheckbox(defaultValue, value, path) {
	        var checkbox = document.createElement('input');
	        checkbox.type = 'checkbox';
	        checkbox.className = 'vis-configuration vis-config-checkbox';
	        checkbox.checked = defaultValue;
	        if (value !== undefined) {
	          checkbox.checked = value;
	          if (value !== defaultValue) {
	            if ((typeof defaultValue === 'undefined' ? 'undefined' : _typeof(defaultValue)) === 'object') {
	              if (value !== defaultValue.enabled) {
	                this.changedOptions.push({ path: path, value: value });
	              }
	            } else {
	              this.changedOptions.push({ path: path, value: value });
	            }
	          }
	        }

	        var me = this;
	        checkbox.onchange = function () {
	          me._update(this.checked, path);
	        };

	        var label = this._makeLabel(path[path.length - 1], path);
	        this._makeItem(path, label, checkbox);
	      }

	      /**
	       * make a text input field for string options.
	       * @param defaultValue
	       * @param value
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_makeTextInput',
	      value: function _makeTextInput(defaultValue, value, path) {
	        var checkbox = document.createElement('input');
	        checkbox.type = 'text';
	        checkbox.className = 'vis-configuration vis-config-text';
	        checkbox.value = value;
	        if (value !== defaultValue) {
	          this.changedOptions.push({ path: path, value: value });
	        }

	        var me = this;
	        checkbox.onchange = function () {
	          me._update(this.value, path);
	        };

	        var label = this._makeLabel(path[path.length - 1], path);
	        this._makeItem(path, label, checkbox);
	      }

	      /**
	       * make a color field with a color picker for color fields
	       * @param arr
	       * @param value
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_makeColorField',
	      value: function _makeColorField(arr, value, path) {
	        var _this5 = this;

	        var defaultColor = arr[1];
	        var div = document.createElement('div');
	        value = value === undefined ? defaultColor : value;

	        if (value !== 'none') {
	          div.className = 'vis-configuration vis-config-colorBlock';
	          div.style.backgroundColor = value;
	        } else {
	          div.className = 'vis-configuration vis-config-colorBlock none';
	        }

	        value = value === undefined ? defaultColor : value;
	        div.onclick = function () {
	          _this5._showColorPicker(value, div, path);
	        };

	        var label = this._makeLabel(path[path.length - 1], path);
	        this._makeItem(path, label, div);
	      }

	      /**
	       * used by the color buttons to call the color picker.
	       * @param event
	       * @param value
	       * @param div
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_showColorPicker',
	      value: function _showColorPicker(value, div, path) {
	        var _this6 = this;

	        // clear the callback from this div
	        div.onclick = function () {};

	        this.colorPicker.insertTo(div);
	        this.colorPicker.show();

	        this.colorPicker.setColor(value);
	        this.colorPicker.setUpdateCallback(function (color) {
	          var colorString = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';
	          div.style.backgroundColor = colorString;
	          _this6._update(colorString, path);
	        });

	        // on close of the colorpicker, restore the callback.
	        this.colorPicker.setCloseCallback(function () {
	          div.onclick = function () {
	            _this6._showColorPicker(value, div, path);
	          };
	        });
	      }

	      /**
	       * parse an object and draw the correct items
	       * @param obj
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_handleObject',
	      value: function _handleObject(obj) {
	        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	        var checkOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	        var show = false;
	        var filter = this.options.filter;
	        var visibleInSet = false;
	        for (var subObj in obj) {
	          if (obj.hasOwnProperty(subObj)) {
	            show = true;
	            var item = obj[subObj];
	            var newPath = util.copyAndExtendArray(path, subObj);
	            if (typeof filter === 'function') {
	              show = filter(subObj, path);

	              // if needed we must go deeper into the object.
	              if (show === false) {
	                if (!(item instanceof Array) && typeof item !== 'string' && typeof item !== 'boolean' && item instanceof Object) {
	                  this.allowCreation = false;
	                  show = this._handleObject(item, newPath, true);
	                  this.allowCreation = checkOnly === false;
	                }
	              }
	            }

	            if (show !== false) {
	              visibleInSet = true;
	              var value = this._getValue(newPath);

	              if (item instanceof Array) {
	                this._handleArray(item, value, newPath);
	              } else if (typeof item === 'string') {
	                this._makeTextInput(item, value, newPath);
	              } else if (typeof item === 'boolean') {
	                this._makeCheckbox(item, value, newPath);
	              } else if (item instanceof Object) {
	                // collapse the physics options that are not enabled
	                var draw = true;
	                if (path.indexOf('physics') !== -1) {
	                  if (this.moduleOptions.physics.solver !== subObj) {
	                    draw = false;
	                  }
	                }

	                if (draw === true) {
	                  // initially collapse options with an disabled enabled option.
	                  if (item.enabled !== undefined) {
	                    var enabledPath = util.copyAndExtendArray(newPath, 'enabled');
	                    var enabledValue = this._getValue(enabledPath);
	                    if (enabledValue === true) {
	                      var label = this._makeLabel(subObj, newPath, true);
	                      this._makeItem(newPath, label);
	                      visibleInSet = this._handleObject(item, newPath) || visibleInSet;
	                    } else {
	                      this._makeCheckbox(item, enabledValue, newPath);
	                    }
	                  } else {
	                    var _label = this._makeLabel(subObj, newPath, true);
	                    this._makeItem(newPath, _label);
	                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;
	                  }
	                }
	              } else {
	                console.error('dont know how to handle', item, subObj, newPath);
	              }
	            }
	          }
	        }
	        return visibleInSet;
	      }

	      /**
	       * handle the array type of option
	       * @param optionName
	       * @param arr
	       * @param value
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_handleArray',
	      value: function _handleArray(arr, value, path) {
	        if (typeof arr[0] === 'string' && arr[0] === 'color') {
	          this._makeColorField(arr, value, path);
	          if (arr[1] !== value) {
	            this.changedOptions.push({ path: path, value: value });
	          }
	        } else if (typeof arr[0] === 'string') {
	          this._makeDropdown(arr, value, path);
	          if (arr[0] !== value) {
	            this.changedOptions.push({ path: path, value: value });
	          }
	        } else if (typeof arr[0] === 'number') {
	          this._makeRange(arr, value, path);
	          if (arr[0] !== value) {
	            this.changedOptions.push({ path: path, value: Number(value) });
	          }
	        }
	      }

	      /**
	       * called to update the network with the new settings.
	       * @param value
	       * @param path
	       * @private
	       */

	    }, {
	      key: '_update',
	      value: function _update(value, path) {
	        var options = this._constructOptions(value, path);

	        if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
	          this.parent.body.emitter.emit("configChange", options);
	        }
	        this.initialized = true;
	        this.parent.setOptions(options);
	      }
	    }, {
	      key: '_constructOptions',
	      value: function _constructOptions(value, path) {
	        var optionsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	        var pointer = optionsObj;

	        // when dropdown boxes can be string or boolean, we typecast it into correct types
	        value = value === 'true' ? true : value;
	        value = value === 'false' ? false : value;

	        for (var i = 0; i < path.length; i++) {
	          if (path[i] !== 'global') {
	            if (pointer[path[i]] === undefined) {
	              pointer[path[i]] = {};
	            }
	            if (i !== path.length - 1) {
	              pointer = pointer[path[i]];
	            } else {
	              pointer[path[i]] = value;
	            }
	          }
	        }
	        return optionsObj;
	      }
	    }, {
	      key: '_printOptions',
	      value: function _printOptions() {
	        var options = this.getOptions();
	        this.optionsContainer.innerHTML = '<pre>var options = ' + JSON.stringify(options, null, 2) + '</pre>';
	      }
	    }, {
	      key: 'getOptions',
	      value: function getOptions() {
	        var options = {};
	        for (var i = 0; i < this.changedOptions.length; i++) {
	          this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options);
	        }
	        return options;
	      }
	    }]);

	    return Configurator;
	  }();

	  exports.default = Configurator;

	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var Hammer = __webpack_require__(22);
	  var hammerUtil = __webpack_require__(30);
	  var util = __webpack_require__(1);

	  var ColorPicker = function () {
	    function ColorPicker() {
	      var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	      _classCallCheck(this, ColorPicker);

	      this.pixelRatio = pixelRatio;
	      this.generated = false;
	      this.centerCoordinates = { x: 289 / 2, y: 289 / 2 };
	      this.r = 289 * 0.49;
	      this.color = { r: 255, g: 255, b: 255, a: 1.0 };
	      this.hueCircle = undefined;
	      this.initialColor = { r: 255, g: 255, b: 255, a: 1.0 };
	      this.previousColor = undefined;
	      this.applied = false;

	      // bound by
	      this.updateCallback = function () {};
	      this.closeCallback = function () {};

	      // create all DOM elements
	      this._create();
	    }

	    /**
	     * this inserts the colorPicker into a div from the DOM
	     * @param container
	     */


	    _createClass(ColorPicker, [{
	      key: 'insertTo',
	      value: function insertTo(container) {
	        if (this.hammer !== undefined) {
	          this.hammer.destroy();
	          this.hammer = undefined;
	        }
	        this.container = container;
	        this.container.appendChild(this.frame);
	        this._bindHammer();

	        this._setSize();
	      }

	      /**
	       * the callback is executed on apply and save. Bind it to the application
	       * @param callback
	       */

	    }, {
	      key: 'setUpdateCallback',
	      value: function setUpdateCallback(callback) {
	        if (typeof callback === 'function') {
	          this.updateCallback = callback;
	        } else {
	          throw new Error("Function attempted to set as colorPicker update callback is not a function.");
	        }
	      }

	      /**
	       * the callback is executed on apply and save. Bind it to the application
	       * @param callback
	       */

	    }, {
	      key: 'setCloseCallback',
	      value: function setCloseCallback(callback) {
	        if (typeof callback === 'function') {
	          this.closeCallback = callback;
	        } else {
	          throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
	        }
	      }
	    }, {
	      key: '_isColorString',
	      value: function _isColorString(color) {
	        var htmlColors = { black: '#000000', navy: '#000080', darkblue: '#00008B', mediumblue: '#0000CD', blue: '#0000FF', darkgreen: '#006400', green: '#008000', teal: '#008080', darkcyan: '#008B8B', deepskyblue: '#00BFFF', darkturquoise: '#00CED1', mediumspringgreen: '#00FA9A', lime: '#00FF00', springgreen: '#00FF7F', aqua: '#00FFFF', cyan: '#00FFFF', midnightblue: '#191970', dodgerblue: '#1E90FF', lightseagreen: '#20B2AA', forestgreen: '#228B22', seagreen: '#2E8B57', darkslategray: '#2F4F4F', limegreen: '#32CD32', mediumseagreen: '#3CB371', turquoise: '#40E0D0', royalblue: '#4169E1', steelblue: '#4682B4', darkslateblue: '#483D8B', mediumturquoise: '#48D1CC', indigo: '#4B0082', darkolivegreen: '#556B2F', cadetblue: '#5F9EA0', cornflowerblue: '#6495ED', mediumaquamarine: '#66CDAA', dimgray: '#696969', slateblue: '#6A5ACD', olivedrab: '#6B8E23', slategray: '#708090', lightslategray: '#778899', mediumslateblue: '#7B68EE', lawngreen: '#7CFC00', chartreuse: '#7FFF00', aquamarine: '#7FFFD4', maroon: '#800000', purple: '#800080', olive: '#808000', gray: '#808080', skyblue: '#87CEEB', lightskyblue: '#87CEFA', blueviolet: '#8A2BE2', darkred: '#8B0000', darkmagenta: '#8B008B', saddlebrown: '#8B4513', darkseagreen: '#8FBC8F', lightgreen: '#90EE90', mediumpurple: '#9370D8', darkviolet: '#9400D3', palegreen: '#98FB98', darkorchid: '#9932CC', yellowgreen: '#9ACD32', sienna: '#A0522D', brown: '#A52A2A', darkgray: '#A9A9A9', lightblue: '#ADD8E6', greenyellow: '#ADFF2F', paleturquoise: '#AFEEEE', lightsteelblue: '#B0C4DE', powderblue: '#B0E0E6', firebrick: '#B22222', darkgoldenrod: '#B8860B', mediumorchid: '#BA55D3', rosybrown: '#BC8F8F', darkkhaki: '#BDB76B', silver: '#C0C0C0', mediumvioletred: '#C71585', indianred: '#CD5C5C', peru: '#CD853F', chocolate: '#D2691E', tan: '#D2B48C', lightgrey: '#D3D3D3', palevioletred: '#D87093', thistle: '#D8BFD8', orchid: '#DA70D6', goldenrod: '#DAA520', crimson: '#DC143C', gainsboro: '#DCDCDC', plum: '#DDA0DD', burlywood: '#DEB887', lightcyan: '#E0FFFF', lavender: '#E6E6FA', darksalmon: '#E9967A', violet: '#EE82EE', palegoldenrod: '#EEE8AA', lightcoral: '#F08080', khaki: '#F0E68C', aliceblue: '#F0F8FF', honeydew: '#F0FFF0', azure: '#F0FFFF', sandybrown: '#F4A460', wheat: '#F5DEB3', beige: '#F5F5DC', whitesmoke: '#F5F5F5', mintcream: '#F5FFFA', ghostwhite: '#F8F8FF', salmon: '#FA8072', antiquewhite: '#FAEBD7', linen: '#FAF0E6', lightgoldenrodyellow: '#FAFAD2', oldlace: '#FDF5E6', red: '#FF0000', fuchsia: '#FF00FF', magenta: '#FF00FF', deeppink: '#FF1493', orangered: '#FF4500', tomato: '#FF6347', hotpink: '#FF69B4', coral: '#FF7F50', darkorange: '#FF8C00', lightsalmon: '#FFA07A', orange: '#FFA500', lightpink: '#FFB6C1', pink: '#FFC0CB', gold: '#FFD700', peachpuff: '#FFDAB9', navajowhite: '#FFDEAD', moccasin: '#FFE4B5', bisque: '#FFE4C4', mistyrose: '#FFE4E1', blanchedalmond: '#FFEBCD', papayawhip: '#FFEFD5', lavenderblush: '#FFF0F5', seashell: '#FFF5EE', cornsilk: '#FFF8DC', lemonchiffon: '#FFFACD', floralwhite: '#FFFAF0', snow: '#FFFAFA', yellow: '#FFFF00', lightyellow: '#FFFFE0', ivory: '#FFFFF0', white: '#FFFFFF' };
	        if (typeof color === 'string') {
	          return htmlColors[color];
	        }
	      }

	      /**
	       * Set the color of the colorPicker
	       * Supported formats:
	       * 'red'                   --> HTML color string
	       * '#ffffff'               --> hex string
	       * 'rbg(255,255,255)'      --> rgb string
	       * 'rgba(255,255,255,1.0)' --> rgba string
	       * {r:255,g:255,b:255}     --> rgb object
	       * {r:255,g:255,b:255,a:1.0} --> rgba object
	       * @param color
	       * @param setInitial
	       */

	    }, {
	      key: 'setColor',
	      value: function setColor(color) {
	        var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        if (color === 'none') {
	          return;
	        }

	        var rgba = void 0;

	        // if a html color shorthand is used, convert to hex
	        var htmlColor = this._isColorString(color);
	        if (htmlColor !== undefined) {
	          color = htmlColor;
	        }

	        // check format
	        if (util.isString(color) === true) {
	          if (util.isValidRGB(color) === true) {
	            var rgbaArray = color.substr(4).substr(0, color.length - 5).split(',');
	            rgba = { r: rgbaArray[0], g: rgbaArray[1], b: rgbaArray[2], a: 1.0 };
	          } else if (util.isValidRGBA(color) === true) {
	            var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(',');
	            rgba = { r: _rgbaArray[0], g: _rgbaArray[1], b: _rgbaArray[2], a: _rgbaArray[3] };
	          } else if (util.isValidHex(color) === true) {
	            var rgbObj = util.hexToRGB(color);
	            rgba = { r: rgbObj.r, g: rgbObj.g, b: rgbObj.b, a: 1.0 };
	          }
	        } else {
	          if (color instanceof Object) {
	            if (color.r !== undefined && color.g !== undefined && color.b !== undefined) {
	              var alpha = color.a !== undefined ? color.a : '1.0';
	              rgba = { r: color.r, g: color.g, b: color.b, a: alpha };
	            }
	          }
	        }

	        // set color
	        if (rgba === undefined) {
	          throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + JSON.stringify(color));
	        } else {
	          this._setColor(rgba, setInitial);
	        }
	      }

	      /**
	       * this shows the color picker.
	       * The hue circle is constructed once and stored.
	       */

	    }, {
	      key: 'show',
	      value: function show() {
	        if (this.closeCallback !== undefined) {
	          this.closeCallback();
	          this.closeCallback = undefined;
	        }

	        this.applied = false;
	        this.frame.style.display = 'block';
	        this._generateHueCircle();
	      }

	      // ------------------------------------------ PRIVATE ----------------------------- //

	      /**
	       * Hide the picker. Is called by the cancel button.
	       * Optional boolean to store the previous color for easy access later on.
	       * @param storePrevious
	       * @private
	       */

	    }, {
	      key: '_hide',
	      value: function _hide() {
	        var _this = this;

	        var storePrevious = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	        // store the previous color for next time;
	        if (storePrevious === true) {
	          this.previousColor = util.extend({}, this.color);
	        }

	        if (this.applied === true) {
	          this.updateCallback(this.initialColor);
	        }

	        this.frame.style.display = 'none';

	        // call the closing callback, restoring the onclick method.
	        // this is in a setTimeout because it will trigger the show again before the click is done.
	        setTimeout(function () {
	          if (_this.closeCallback !== undefined) {
	            _this.closeCallback();
	            _this.closeCallback = undefined;
	          }
	        }, 0);
	      }

	      /**
	       * bound to the save button. Saves and hides.
	       * @private
	       */

	    }, {
	      key: '_save',
	      value: function _save() {
	        this.updateCallback(this.color);
	        this.applied = false;
	        this._hide();
	      }

	      /**
	       * Bound to apply button. Saves but does not close. Is undone by the cancel button.
	       * @private
	       */

	    }, {
	      key: '_apply',
	      value: function _apply() {
	        this.applied = true;
	        this.updateCallback(this.color);
	        this._updatePicker(this.color);
	      }

	      /**
	       * load the color from the previous session.
	       * @private
	       */

	    }, {
	      key: '_loadLast',
	      value: function _loadLast() {
	        if (this.previousColor !== undefined) {
	          this.setColor(this.previousColor, false);
	        } else {
	          alert("There is no last color to load...");
	        }
	      }

	      /**
	       * set the color, place the picker
	       * @param rgba
	       * @param setInitial
	       * @private
	       */

	    }, {
	      key: '_setColor',
	      value: function _setColor(rgba) {
	        var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        // store the initial color
	        if (setInitial === true) {
	          this.initialColor = util.extend({}, rgba);
	        }

	        this.color = rgba;
	        var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);

	        var angleConvert = 2 * Math.PI;
	        var radius = this.r * hsv.s;
	        var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
	        var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);

	        this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + 'px';
	        this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + 'px';

	        this._updatePicker(rgba);
	      }

	      /**
	       * bound to opacity control
	       * @param value
	       * @private
	       */

	    }, {
	      key: '_setOpacity',
	      value: function _setOpacity(value) {
	        this.color.a = value / 100;
	        this._updatePicker(this.color);
	      }

	      /**
	       * bound to brightness control
	       * @param value
	       * @private
	       */

	    }, {
	      key: '_setBrightness',
	      value: function _setBrightness(value) {
	        var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
	        hsv.v = value / 100;
	        var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
	        rgba['a'] = this.color.a;
	        this.color = rgba;
	        this._updatePicker();
	      }

	      /**
	       * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
	       * @param rgba
	       * @private
	       */

	    }, {
	      key: '_updatePicker',
	      value: function _updatePicker() {
	        var rgba = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.color;

	        var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);
	        var ctx = this.colorPickerCanvas.getContext('2d');
	        if (this.pixelRation === undefined) {
	          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
	        }
	        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

	        // clear the canvas
	        var w = this.colorPickerCanvas.clientWidth;
	        var h = this.colorPickerCanvas.clientHeight;
	        ctx.clearRect(0, 0, w, h);

	        ctx.putImageData(this.hueCircle, 0, 0);
	        ctx.fillStyle = 'rgba(0,0,0,' + (1 - hsv.v) + ')';
	        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
	        ctx.fill();

	        this.brightnessRange.value = 100 * hsv.v;
	        this.opacityRange.value = 100 * rgba.a;

	        this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
	        this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
	      }

	      /**
	       * used by create to set the size of the canvas.
	       * @private
	       */

	    }, {
	      key: '_setSize',
	      value: function _setSize() {
	        this.colorPickerCanvas.style.width = '100%';
	        this.colorPickerCanvas.style.height = '100%';

	        this.colorPickerCanvas.width = 289 * this.pixelRatio;
	        this.colorPickerCanvas.height = 289 * this.pixelRatio;
	      }

	      /**
	       * create all dom elements
	       * TODO: cleanup, lots of similar dom elements
	       * @private
	       */

	    }, {
	      key: '_create',
	      value: function _create() {
	        this.frame = document.createElement('div');
	        this.frame.className = 'vis-color-picker';

	        this.colorPickerDiv = document.createElement('div');
	        this.colorPickerSelector = document.createElement('div');
	        this.colorPickerSelector.className = 'vis-selector';
	        this.colorPickerDiv.appendChild(this.colorPickerSelector);

	        this.colorPickerCanvas = document.createElement('canvas');
	        this.colorPickerDiv.appendChild(this.colorPickerCanvas);

	        if (!this.colorPickerCanvas.getContext) {
	          var noCanvas = document.createElement('DIV');
	          noCanvas.style.color = 'red';
	          noCanvas.style.fontWeight = 'bold';
	          noCanvas.style.padding = '10px';
	          noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
	          this.colorPickerCanvas.appendChild(noCanvas);
	        } else {
	          var ctx = this.colorPickerCanvas.getContext("2d");
	          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);

	          this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
	        }

	        this.colorPickerDiv.className = 'vis-color';

	        this.opacityDiv = document.createElement('div');
	        this.opacityDiv.className = 'vis-opacity';

	        this.brightnessDiv = document.createElement('div');
	        this.brightnessDiv.className = 'vis-brightness';

	        this.arrowDiv = document.createElement('div');
	        this.arrowDiv.className = 'vis-arrow';

	        this.opacityRange = document.createElement('input');
	        try {
	          this.opacityRange.type = 'range'; // Not supported on IE9
	          this.opacityRange.min = '0';
	          this.opacityRange.max = '100';
	        } catch (err) {}
	        this.opacityRange.value = '100';
	        this.opacityRange.className = 'vis-range';

	        this.brightnessRange = document.createElement('input');
	        try {
	          this.brightnessRange.type = 'range'; // Not supported on IE9
	          this.brightnessRange.min = '0';
	          this.brightnessRange.max = '100';
	        } catch (err) {}
	        this.brightnessRange.value = '100';
	        this.brightnessRange.className = 'vis-range';

	        this.opacityDiv.appendChild(this.opacityRange);
	        this.brightnessDiv.appendChild(this.brightnessRange);

	        var me = this;
	        this.opacityRange.onchange = function () {
	          me._setOpacity(this.value);
	        };
	        this.opacityRange.oninput = function () {
	          me._setOpacity(this.value);
	        };
	        this.brightnessRange.onchange = function () {
	          me._setBrightness(this.value);
	        };
	        this.brightnessRange.oninput = function () {
	          me._setBrightness(this.value);
	        };

	        this.brightnessLabel = document.createElement("div");
	        this.brightnessLabel.className = "vis-label vis-brightness";
	        this.brightnessLabel.innerHTML = 'brightness:';

	        this.opacityLabel = document.createElement("div");
	        this.opacityLabel.className = "vis-label vis-opacity";
	        this.opacityLabel.innerHTML = 'opacity:';

	        this.newColorDiv = document.createElement("div");
	        this.newColorDiv.className = "vis-new-color";
	        this.newColorDiv.innerHTML = 'new';

	        this.initialColorDiv = document.createElement("div");
	        this.initialColorDiv.className = "vis-initial-color";
	        this.initialColorDiv.innerHTML = 'initial';

	        this.cancelButton = document.createElement("div");
	        this.cancelButton.className = "vis-button vis-cancel";
	        this.cancelButton.innerHTML = 'cancel';
	        this.cancelButton.onclick = this._hide.bind(this, false);

	        this.applyButton = document.createElement("div");
	        this.applyButton.className = "vis-button vis-apply";
	        this.applyButton.innerHTML = 'apply';
	        this.applyButton.onclick = this._apply.bind(this);

	        this.saveButton = document.createElement("div");
	        this.saveButton.className = "vis-button vis-save";
	        this.saveButton.innerHTML = 'save';
	        this.saveButton.onclick = this._save.bind(this);

	        this.loadButton = document.createElement("div");
	        this.loadButton.className = "vis-button vis-load";
	        this.loadButton.innerHTML = 'load last';
	        this.loadButton.onclick = this._loadLast.bind(this);

	        this.frame.appendChild(this.colorPickerDiv);
	        this.frame.appendChild(this.arrowDiv);
	        this.frame.appendChild(this.brightnessLabel);
	        this.frame.appendChild(this.brightnessDiv);
	        this.frame.appendChild(this.opacityLabel);
	        this.frame.appendChild(this.opacityDiv);
	        this.frame.appendChild(this.newColorDiv);
	        this.frame.appendChild(this.initialColorDiv);

	        this.frame.appendChild(this.cancelButton);
	        this.frame.appendChild(this.applyButton);
	        this.frame.appendChild(this.saveButton);
	        this.frame.appendChild(this.loadButton);
	      }

	      /**
	       * bind hammer to the color picker
	       * @private
	       */

	    }, {
	      key: '_bindHammer',
	      value: function _bindHammer() {
	        var _this2 = this;

	        this.drag = {};
	        this.pinch = {};
	        this.hammer = new Hammer(this.colorPickerCanvas);
	        this.hammer.get('pinch').set({ enable: true });

	        hammerUtil.onTouch(this.hammer, function (event) {
	          _this2._moveSelector(event);
	        });
	        this.hammer.on('tap', function (event) {
	          _this2._moveSelector(event);
	        });
	        this.hammer.on('panstart', function (event) {
	          _this2._moveSelector(event);
	        });
	        this.hammer.on('panmove', function (event) {
	          _this2._moveSelector(event);
	        });
	        this.hammer.on('panend', function (event) {
	          _this2._moveSelector(event);
	        });
	      }

	      /**
	       * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
	       * @private
	       */

	    }, {
	      key: '_generateHueCircle',
	      value: function _generateHueCircle() {
	        if (this.generated === false) {
	          var ctx = this.colorPickerCanvas.getContext('2d');
	          if (this.pixelRation === undefined) {
	            this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
	          }
	          ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

	          // clear the canvas
	          var w = this.colorPickerCanvas.clientWidth;
	          var h = this.colorPickerCanvas.clientHeight;
	          ctx.clearRect(0, 0, w, h);

	          // draw hue circle
	          var x = void 0,
	              y = void 0,
	              hue = void 0,
	              sat = void 0;
	          this.centerCoordinates = { x: w * 0.5, y: h * 0.5 };
	          this.r = 0.49 * w;
	          var angleConvert = 2 * Math.PI / 360;
	          var hfac = 1 / 360;
	          var sfac = 1 / this.r;
	          var rgb = void 0;
	          for (hue = 0; hue < 360; hue++) {
	            for (sat = 0; sat < this.r; sat++) {
	              x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
	              y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
	              rgb = util.HSVToRGB(hue * hfac, sat * sfac, 1);
	              ctx.fillStyle = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
	              ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
	            }
	          }
	          ctx.strokeStyle = 'rgba(0,0,0,1)';
	          ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
	          ctx.stroke();

	          this.hueCircle = ctx.getImageData(0, 0, w, h);
	        }
	        this.generated = true;
	      }

	      /**
	       * move the selector. This is called by hammer functions.
	       *
	       * @param event
	       * @private
	       */

	    }, {
	      key: '_moveSelector',
	      value: function _moveSelector(event) {
	        var rect = this.colorPickerDiv.getBoundingClientRect();
	        var left = event.center.x - rect.left;
	        var top = event.center.y - rect.top;

	        var centerY = 0.5 * this.colorPickerDiv.clientHeight;
	        var centerX = 0.5 * this.colorPickerDiv.clientWidth;

	        var x = left - centerX;
	        var y = top - centerY;

	        var angle = Math.atan2(x, y);
	        var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);

	        var newTop = Math.cos(angle) * radius + centerY;
	        var newLeft = Math.sin(angle) * radius + centerX;

	        this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + 'px';
	        this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + 'px';

	        // set color
	        var h = angle / (2 * Math.PI);
	        h = h < 0 ? h + 1 : h;
	        var s = radius / this.r;
	        var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
	        hsv.h = h;
	        hsv.s = s;
	        var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
	        rgba['a'] = this.color.a;
	        this.color = rgba;

	        // update previews
	        this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
	        this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
	      }
	    }]);

	    return ColorPicker;
	  }();

	  exports.default = ColorPicker;

	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Hammer = __webpack_require__(22);

	  /**
	   * Register a touch event, taking place before a gesture
	   * @param {Hammer} hammer       A hammer instance
	   * @param {function} callback   Callback, called as callback(event)
	   */
	  exports.onTouch = function (hammer, callback) {
	    callback.inputHandler = function (event) {
	      if (event.isFirst) {
	        callback(event);
	      }
	    };

	    hammer.on('hammer.input', callback.inputHandler);
	  };

	  /**
	   * Register a release event, taking place after a gesture
	   * @param {Hammer} hammer       A hammer instance
	   * @param {function} callback   Callback, called as callback(event)
	   */
	  exports.onRelease = function (hammer, callback) {
	    callback.inputHandler = function (event) {
	      if (event.isFinal) {
	        callback(event);
	      }
	    };

	    return hammer.on('hammer.input', callback.inputHandler);
	  };

	  /**
	   * Unregister a touch event, taking place before a gesture
	   * @param {Hammer} hammer       A hammer instance
	   * @param {function} callback   Callback, called as callback(event)
	   */
	  exports.offTouch = function (hammer, callback) {
	    hammer.off('hammer.input', callback.inputHandler);
	  };

	  /**
	   * Unregister a release event, taking place before a gesture
	   * @param {Hammer} hammer       A hammer instance
	   * @param {function} callback   Callback, called as callback(event)
	   */
	  exports.offRelease = exports.offTouch;

	  /**
	   * Hack the PinchRecognizer such that it doesn't prevent default behavior
	   * for vertical panning.
	   *
	   * Yeah ... this is quite a hack ... see https://github.com/hammerjs/hammer.js/issues/932
	   *
	   * @param {Hammer.Pinch} pinchRecognizer
	   * @return {Hammer.Pinch} returns the pinchRecognizer
	   */
	  exports.disablePreventDefaultVertically = function (pinchRecognizer) {
	    var TOUCH_ACTION_PAN_Y = 'pan-y';

	    pinchRecognizer.getTouchAction = function () {
	      // default method returns [TOUCH_ACTION_NONE]
	      return [TOUCH_ACTION_PAN_Y];
	    };

	    return pinchRecognizer;
	  };

	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var errorFound = false;
	  var allOptions = void 0;
	  var printStyle = 'background: #FFeeee; color: #dd0000';
	  /**
	   *  Used to validate options.
	   */

	  var Validator = function () {
	    function Validator() {
	      _classCallCheck(this, Validator);
	    }

	    /**
	     * Main function to be called
	     * @param options
	     * @param subObject
	     * @returns {boolean}
	     */


	    _createClass(Validator, null, [{
	      key: 'validate',
	      value: function validate(options, referenceOptions, subObject) {
	        errorFound = false;
	        allOptions = referenceOptions;
	        var usedOptions = referenceOptions;
	        if (subObject !== undefined) {
	          usedOptions = referenceOptions[subObject];
	        }
	        Validator.parse(options, usedOptions, []);
	        return errorFound;
	      }

	      /**
	       * Will traverse an object recursively and check every value
	       * @param options
	       * @param referenceOptions
	       * @param path
	       */

	    }, {
	      key: 'parse',
	      value: function parse(options, referenceOptions, path) {
	        for (var option in options) {
	          if (options.hasOwnProperty(option)) {
	            Validator.check(option, options, referenceOptions, path);
	          }
	        }
	      }

	      /**
	       * Check every value. If the value is an object, call the parse function on that object.
	       * @param option
	       * @param options
	       * @param referenceOptions
	       * @param path
	       */

	    }, {
	      key: 'check',
	      value: function check(option, options, referenceOptions, path) {
	        if (referenceOptions[option] === undefined && referenceOptions.__any__ === undefined) {
	          Validator.getSuggestion(option, referenceOptions, path);
	        } else if (referenceOptions[option] === undefined && referenceOptions.__any__ !== undefined) {
	          // __any__ is a wildcard. Any value is accepted and will be further analysed by reference.
	          if (Validator.getType(options[option]) === 'object' && referenceOptions['__any__'].__type__ !== undefined) {
	            // if the any subgroup is not a predefined object int he configurator we do not look deeper into the object.
	            Validator.checkFields(option, options, referenceOptions, '__any__', referenceOptions['__any__'].__type__, path);
	          } else {
	            Validator.checkFields(option, options, referenceOptions, '__any__', referenceOptions['__any__'], path);
	          }
	        } else {
	          // Since all options in the reference are objects, we can check whether they are supposed to be object to look for the __type__ field.
	          if (referenceOptions[option].__type__ !== undefined) {
	            // if this should be an object, we check if the correct type has been supplied to account for shorthand options.
	            Validator.checkFields(option, options, referenceOptions, option, referenceOptions[option].__type__, path);
	          } else {
	            Validator.checkFields(option, options, referenceOptions, option, referenceOptions[option], path);
	          }
	        }
	      }

	      /**
	       *
	       * @param {String}  option     | the option property
	       * @param {Object}  options    | The supplied options object
	       * @param {Object}  referenceOptions    | The reference options containing all options and their allowed formats
	       * @param {String}  referenceOption     | Usually this is the same as option, except when handling an __any__ tag.
	       * @param {String}  refOptionType       | This is the type object from the reference options
	       * @param {Array}   path      | where in the object is the option
	       */

	    }, {
	      key: 'checkFields',
	      value: function checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path) {
	        var optionType = Validator.getType(options[option]);
	        var refOptionType = refOptionObj[optionType];
	        if (refOptionType !== undefined) {
	          // if the type is correct, we check if it is supposed to be one of a few select values
	          if (Validator.getType(refOptionType) === 'array') {
	            if (refOptionType.indexOf(options[option]) === -1) {
	              console.log('%cInvalid option detected in "' + option + '".' + ' Allowed values are:' + Validator.print(refOptionType) + ' not "' + options[option] + '". ' + Validator.printLocation(path, option), printStyle);
	              errorFound = true;
	            } else if (optionType === 'object' && referenceOption !== "__any__") {
	              path = util.copyAndExtendArray(path, option);
	              Validator.parse(options[option], referenceOptions[referenceOption], path);
	            }
	          } else if (optionType === 'object' && referenceOption !== "__any__") {
	            path = util.copyAndExtendArray(path, option);
	            Validator.parse(options[option], referenceOptions[referenceOption], path);
	          }
	        } else if (refOptionObj['any'] === undefined) {
	          // type of the field is incorrect and the field cannot be any
	          console.log('%cInvalid type received for "' + option + '". Expected: ' + Validator.print(Object.keys(refOptionObj)) + '. Received [' + optionType + '] "' + options[option] + '"' + Validator.printLocation(path, option), printStyle);
	          errorFound = true;
	        }
	      }
	    }, {
	      key: 'getType',
	      value: function getType(object) {
	        var type = typeof object === 'undefined' ? 'undefined' : _typeof(object);

	        if (type === 'object') {
	          if (object === null) {
	            return 'null';
	          }
	          if (object instanceof Boolean) {
	            return 'boolean';
	          }
	          if (object instanceof Number) {
	            return 'number';
	          }
	          if (object instanceof String) {
	            return 'string';
	          }
	          if (Array.isArray(object)) {
	            return 'array';
	          }
	          if (object instanceof Date) {
	            return 'date';
	          }
	          if (object.nodeType !== undefined) {
	            return 'dom';
	          }
	          if (object._isAMomentObject === true) {
	            return 'moment';
	          }
	          return 'object';
	        } else if (type === 'number') {
	          return 'number';
	        } else if (type === 'boolean') {
	          return 'boolean';
	        } else if (type === 'string') {
	          return 'string';
	        } else if (type === undefined) {
	          return 'undefined';
	        }
	        return type;
	      }
	    }, {
	      key: 'getSuggestion',
	      value: function getSuggestion(option, options, path) {
	        var localSearch = Validator.findInOptions(option, options, path, false);
	        var globalSearch = Validator.findInOptions(option, allOptions, [], true);

	        var localSearchThreshold = 8;
	        var globalSearchThreshold = 4;

	        if (localSearch.indexMatch !== undefined) {
	          console.log('%cUnknown option detected: "' + option + '" in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n', printStyle);
	        } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
	          console.log('%cUnknown option detected: "' + option + '" in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was misplaced? Matching option found at: ' + Validator.printLocation(globalSearch.path, globalSearch.closestMatch, ''), printStyle);
	        } else if (localSearch.distance <= localSearchThreshold) {
	          console.log('%cUnknown option detected: "' + option + '". Did you mean "' + localSearch.closestMatch + '"?' + Validator.printLocation(localSearch.path, option), printStyle);
	        } else {
	          console.log('%cUnknown option detected: "' + option + '". Did you mean one of these: ' + Validator.print(Object.keys(options)) + Validator.printLocation(path, option), printStyle);
	        }

	        errorFound = true;
	      }

	      /**
	       * traverse the options in search for a match.
	       * @param option
	       * @param options
	       * @param path
	       * @param recursive
	       * @returns {{closestMatch: string, path: Array, distance: number}}
	       */

	    }, {
	      key: 'findInOptions',
	      value: function findInOptions(option, options, path) {
	        var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	        var min = 1e9;
	        var closestMatch = '';
	        var closestMatchPath = [];
	        var lowerCaseOption = option.toLowerCase();
	        var indexMatch = undefined;
	        for (var op in options) {
	          var distance = void 0;
	          if (options[op].__type__ !== undefined && recursive === true) {
	            var result = Validator.findInOptions(option, options[op], util.copyAndExtendArray(path, op));
	            if (min > result.distance) {
	              closestMatch = result.closestMatch;
	              closestMatchPath = result.path;
	              min = result.distance;
	              indexMatch = result.indexMatch;
	            }
	          } else {
	            if (op.toLowerCase().indexOf(lowerCaseOption) !== -1) {
	              indexMatch = op;
	            }
	            distance = Validator.levenshteinDistance(option, op);
	            if (min > distance) {
	              closestMatch = op;
	              closestMatchPath = util.copyArray(path);
	              min = distance;
	            }
	          }
	        }
	        return { closestMatch: closestMatch, path: closestMatchPath, distance: min, indexMatch: indexMatch };
	      }
	    }, {
	      key: 'printLocation',
	      value: function printLocation(path, option) {
	        var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Problem value found at: \n';

	        var str = '\n\n' + prefix + 'options = {\n';
	        for (var i = 0; i < path.length; i++) {
	          for (var j = 0; j < i + 1; j++) {
	            str += '  ';
	          }
	          str += path[i] + ': {\n';
	        }
	        for (var _j = 0; _j < path.length + 1; _j++) {
	          str += '  ';
	        }
	        str += option + '\n';
	        for (var _i = 0; _i < path.length + 1; _i++) {
	          for (var _j2 = 0; _j2 < path.length - _i; _j2++) {
	            str += '  ';
	          }
	          str += '}\n';
	        }
	        return str + '\n\n';
	      }
	    }, {
	      key: 'print',
	      value: function print(options) {
	        return JSON.stringify(options).replace(/(\")|(\[)|(\])|(,"__type__")/g, "").replace(/(\,)/g, ', ');
	      }

	      // Compute the edit distance between the two given strings
	      // http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
	      /*
	       Copyright (c) 2011 Andrei Mackenzie
	        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
	        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
	        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	       */

	    }, {
	      key: 'levenshteinDistance',
	      value: function levenshteinDistance(a, b) {
	        if (a.length === 0) return b.length;
	        if (b.length === 0) return a.length;

	        var matrix = [];

	        // increment along the first column of each row
	        var i;
	        for (i = 0; i <= b.length; i++) {
	          matrix[i] = [i];
	        }

	        // increment each column in the first row
	        var j;
	        for (j = 0; j <= a.length; j++) {
	          matrix[0][j] = j;
	        }

	        // Fill in the rest of the matrix
	        for (i = 1; i <= b.length; i++) {
	          for (j = 1; j <= a.length; j++) {
	            if (b.charAt(i - 1) == a.charAt(j - 1)) {
	              matrix[i][j] = matrix[i - 1][j - 1];
	            } else {
	              matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
	              Math.min(matrix[i][j - 1] + 1, // insertion
	              matrix[i - 1][j] + 1)); // deletion
	            }
	          }
	        }

	        return matrix[b.length][a.length];
	      }
	    }]);

	    return Validator;
	  }();

	  exports.default = Validator;
	  exports.printStyle = printStyle;

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var util = __webpack_require__(1);
	  var hammerUtil = __webpack_require__(30);
	  var moment = __webpack_require__(2);
	  var Component = __webpack_require__(33);
	  var DateUtil = __webpack_require__(34);

	  /**
	   * @constructor Range
	   * A Range controls a numeric range with a start and end value.
	   * The Range adjusts the range based on mouse events or programmatic changes,
	   * and triggers events when the range is changing or has been changed.
	   * @param {{dom: Object, domProps: Object, emitter: Emitter}} body
	   * @param {Object} [options]    See description at Range.setOptions
	   */
	  function Range(body, options) {
	    var now = moment().hours(0).minutes(0).seconds(0).milliseconds(0);
	    this.start = now.clone().add(-3, 'days').valueOf(); // Number
	    this.end = now.clone().add(4, 'days').valueOf(); // Number

	    this.body = body;
	    this.deltaDifference = 0;
	    this.scaleOffset = 0;
	    this.startToFront = false;
	    this.endToFront = true;

	    // default options
	    this.defaultOptions = {
	      rtl: false,
	      start: null,
	      end: null,
	      moment: moment,
	      direction: 'horizontal', // 'horizontal' or 'vertical'
	      moveable: true,
	      zoomable: true,
	      min: null,
	      max: null,
	      zoomMin: 10, // milliseconds
	      zoomMax: 1000 * 60 * 60 * 24 * 365 * 10000 // milliseconds
	    };
	    this.options = util.extend({}, this.defaultOptions);
	    this.props = {
	      touch: {}
	    };
	    this.animationTimer = null;

	    // drag listeners for dragging
	    this.body.emitter.on('panstart', this._onDragStart.bind(this));
	    this.body.emitter.on('panmove', this._onDrag.bind(this));
	    this.body.emitter.on('panend', this._onDragEnd.bind(this));

	    // mouse wheel for zooming
	    this.body.emitter.on('mousewheel', this._onMouseWheel.bind(this));

	    // pinch to zoom
	    this.body.emitter.on('touch', this._onTouch.bind(this));
	    this.body.emitter.on('pinch', this._onPinch.bind(this));

	    this.setOptions(options);
	  }

	  Range.prototype = new Component();

	  /**
	   * Set options for the range controller
	   * @param {Object} options      Available options:
	   *                              {Number | Date | String} start  Start date for the range
	   *                              {Number | Date | String} end    End date for the range
	   *                              {Number} min    Minimum value for start
	   *                              {Number} max    Maximum value for end
	   *                              {Number} zoomMin    Set a minimum value for
	   *                                                  (end - start).
	   *                              {Number} zoomMax    Set a maximum value for
	   *                                                  (end - start).
	   *                              {Boolean} moveable Enable moving of the range
	   *                                                 by dragging. True by default
	   *                              {Boolean} zoomable Enable zooming of the range
	   *                                                 by pinching/scrolling. True by default
	   */
	  Range.prototype.setOptions = function (options) {
	    if (options) {
	      // copy the options that we know
	      var fields = ['direction', 'min', 'max', 'zoomMin', 'zoomMax', 'moveable', 'zoomable', 'moment', 'activate', 'hiddenDates', 'zoomKey', 'rtl', 'horizontalScroll'];
	      util.selectiveExtend(fields, this.options, options);

	      if ('start' in options || 'end' in options) {
	        // apply a new range. both start and end are optional
	        this.setRange(options.start, options.end);
	      }
	    }
	  };

	  /**
	   * Test whether direction has a valid value
	   * @param {String} direction    'horizontal' or 'vertical'
	   */
	  function validateDirection(direction) {
	    if (direction != 'horizontal' && direction != 'vertical') {
	      throw new TypeError('Unknown direction "' + direction + '". ' + 'Choose "horizontal" or "vertical".');
	    }
	  }

	  /**
	   * Set a new start and end range
	   * @param {Date | Number | String} [start]
	   * @param {Date | Number | String} [end]
	   * @param {boolean | {duration: number, easingFunction: string}} [animation=false]
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   * @param {Boolean} [byUser=false]
	   *
	   */
	  Range.prototype.setRange = function (start, end, animation, byUser) {
	    if (byUser !== true) {
	      byUser = false;
	    }
	    var finalStart = start != undefined ? util.convert(start, 'Date').valueOf() : null;
	    var finalEnd = end != undefined ? util.convert(end, 'Date').valueOf() : null;
	    this._cancelAnimation();

	    if (animation) {
	      // true or an Object
	      var me = this;
	      var initStart = this.start;
	      var initEnd = this.end;
	      var duration = (typeof animation === 'undefined' ? 'undefined' : _typeof(animation)) === 'object' && 'duration' in animation ? animation.duration : 500;
	      var easingName = (typeof animation === 'undefined' ? 'undefined' : _typeof(animation)) === 'object' && 'easingFunction' in animation ? animation.easingFunction : 'easeInOutQuad';
	      var easingFunction = util.easingFunctions[easingName];
	      if (!easingFunction) {
	        throw new Error('Unknown easing function ' + JSON.stringify(easingName) + '. ' + 'Choose from: ' + Object.keys(util.easingFunctions).join(', '));
	      }

	      var initTime = new Date().valueOf();
	      var anyChanged = false;

	      var next = function next() {
	        if (!me.props.touch.dragging) {
	          var now = new Date().valueOf();
	          var time = now - initTime;
	          var ease = easingFunction(time / duration);
	          var done = time > duration;
	          var s = done || finalStart === null ? finalStart : initStart + (finalStart - initStart) * ease;
	          var e = done || finalEnd === null ? finalEnd : initEnd + (finalEnd - initEnd) * ease;

	          changed = me._applyRange(s, e);
	          DateUtil.updateHiddenDates(me.options.moment, me.body, me.options.hiddenDates);
	          anyChanged = anyChanged || changed;
	          if (changed) {
	            me.body.emitter.emit('rangechange', { start: new Date(me.start), end: new Date(me.end), byUser: byUser });
	          }

	          if (done) {
	            if (anyChanged) {
	              me.body.emitter.emit('rangechanged', { start: new Date(me.start), end: new Date(me.end), byUser: byUser });
	            }
	          } else {
	            // animate with as high as possible frame rate, leave 20 ms in between
	            // each to prevent the browser from blocking
	            me.animationTimer = setTimeout(next, 20);
	          }
	        }
	      };

	      return next();
	    } else {
	      var changed = this._applyRange(finalStart, finalEnd);
	      DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);
	      if (changed) {
	        var params = { start: new Date(this.start), end: new Date(this.end), byUser: byUser };
	        this.body.emitter.emit('rangechange', params);
	        this.body.emitter.emit('rangechanged', params);
	      }
	    }
	  };

	  /**
	   * Stop an animation
	   * @private
	   */
	  Range.prototype._cancelAnimation = function () {
	    if (this.animationTimer) {
	      clearTimeout(this.animationTimer);
	      this.animationTimer = null;
	    }
	  };

	  /**
	   * Set a new start and end range. This method is the same as setRange, but
	   * does not trigger a range change and range changed event, and it returns
	   * true when the range is changed
	   * @param {Number} [start]
	   * @param {Number} [end]
	   * @return {Boolean} changed
	   * @private
	   */
	  Range.prototype._applyRange = function (start, end) {
	    var newStart = start != null ? util.convert(start, 'Date').valueOf() : this.start,
	        newEnd = end != null ? util.convert(end, 'Date').valueOf() : this.end,
	        max = this.options.max != null ? util.convert(this.options.max, 'Date').valueOf() : null,
	        min = this.options.min != null ? util.convert(this.options.min, 'Date').valueOf() : null,
	        diff;

	    // check for valid number
	    if (isNaN(newStart) || newStart === null) {
	      throw new Error('Invalid start "' + start + '"');
	    }
	    if (isNaN(newEnd) || newEnd === null) {
	      throw new Error('Invalid end "' + end + '"');
	    }

	    // prevent start < end
	    if (newEnd < newStart) {
	      newEnd = newStart;
	    }

	    // prevent start < min
	    if (min !== null) {
	      if (newStart < min) {
	        diff = min - newStart;
	        newStart += diff;
	        newEnd += diff;

	        // prevent end > max
	        if (max != null) {
	          if (newEnd > max) {
	            newEnd = max;
	          }
	        }
	      }
	    }

	    // prevent end > max
	    if (max !== null) {
	      if (newEnd > max) {
	        diff = newEnd - max;
	        newStart -= diff;
	        newEnd -= diff;

	        // prevent start < min
	        if (min != null) {
	          if (newStart < min) {
	            newStart = min;
	          }
	        }
	      }
	    }

	    // prevent (end-start) < zoomMin
	    if (this.options.zoomMin !== null) {
	      var zoomMin = parseFloat(this.options.zoomMin);
	      if (zoomMin < 0) {
	        zoomMin = 0;
	      }
	      if (newEnd - newStart < zoomMin) {
	        if (this.end - this.start === zoomMin && newStart > this.start && newEnd < this.end) {
	          // ignore this action, we are already zoomed to the minimum
	          newStart = this.start;
	          newEnd = this.end;
	        } else {
	          // zoom to the minimum
	          diff = zoomMin - (newEnd - newStart);
	          newStart -= diff / 2;
	          newEnd += diff / 2;
	        }
	      }
	    }

	    // prevent (end-start) > zoomMax
	    if (this.options.zoomMax !== null) {
	      var zoomMax = parseFloat(this.options.zoomMax);
	      if (zoomMax < 0) {
	        zoomMax = 0;
	      }

	      if (newEnd - newStart > zoomMax) {
	        if (this.end - this.start === zoomMax && newStart < this.start && newEnd > this.end) {
	          // ignore this action, we are already zoomed to the maximum
	          newStart = this.start;
	          newEnd = this.end;
	        } else {
	          // zoom to the maximum
	          diff = newEnd - newStart - zoomMax;
	          newStart += diff / 2;
	          newEnd -= diff / 2;
	        }
	      }
	    }

	    var changed = this.start != newStart || this.end != newEnd;

	    // if the new range does NOT overlap with the old range, emit checkRangedItems to avoid not showing ranged items (ranged meaning has end time, not necessarily of type Range)
	    if (!(newStart >= this.start && newStart <= this.end || newEnd >= this.start && newEnd <= this.end) && !(this.start >= newStart && this.start <= newEnd || this.end >= newStart && this.end <= newEnd)) {
	      this.body.emitter.emit('checkRangedItems');
	    }

	    this.start = newStart;
	    this.end = newEnd;
	    return changed;
	  };

	  /**
	   * Retrieve the current range.
	   * @return {Object} An object with start and end properties
	   */
	  Range.prototype.getRange = function () {
	    return {
	      start: this.start,
	      end: this.end
	    };
	  };

	  /**
	   * Calculate the conversion offset and scale for current range, based on
	   * the provided width
	   * @param {Number} width
	   * @returns {{offset: number, scale: number}} conversion
	   */
	  Range.prototype.conversion = function (width, totalHidden) {
	    return Range.conversion(this.start, this.end, width, totalHidden);
	  };

	  /**
	   * Static method to calculate the conversion offset and scale for a range,
	   * based on the provided start, end, and width
	   * @param {Number} start
	   * @param {Number} end
	   * @param {Number} width
	   * @returns {{offset: number, scale: number}} conversion
	   */
	  Range.conversion = function (start, end, width, totalHidden) {
	    if (totalHidden === undefined) {
	      totalHidden = 0;
	    }
	    if (width != 0 && end - start != 0) {
	      return {
	        offset: start,
	        scale: width / (end - start - totalHidden)
	      };
	    } else {
	      return {
	        offset: 0,
	        scale: 1
	      };
	    }
	  };

	  /**
	   * Start dragging horizontally or vertically
	   * @param {Event} event
	   * @private
	   */
	  Range.prototype._onDragStart = function (event) {
	    this.deltaDifference = 0;
	    this.previousDelta = 0;

	    // only allow dragging when configured as movable
	    if (!this.options.moveable) return;

	    // only start dragging when the mouse is inside the current range
	    if (!this._isInsideRange(event)) return;

	    // refuse to drag when we where pinching to prevent the timeline make a jump
	    // when releasing the fingers in opposite order from the touch screen
	    if (!this.props.touch.allowDragging) return;

	    this.props.touch.start = this.start;
	    this.props.touch.end = this.end;
	    this.props.touch.dragging = true;

	    if (this.body.dom.root) {
	      this.body.dom.root.style.cursor = 'move';
	    }
	  };

	  /**
	   * Perform dragging operation
	   * @param {Event} event
	   * @private
	   */
	  Range.prototype._onDrag = function (event) {
	    if (!event) return;

	    if (!this.props.touch.dragging) return;

	    // only allow dragging when configured as movable
	    if (!this.options.moveable) return;

	    // TODO: this may be redundant in hammerjs2
	    // refuse to drag when we where pinching to prevent the timeline make a jump
	    // when releasing the fingers in opposite order from the touch screen
	    if (!this.props.touch.allowDragging) return;

	    var direction = this.options.direction;
	    validateDirection(direction);
	    var delta = direction == 'horizontal' ? event.deltaX : event.deltaY;
	    delta -= this.deltaDifference;
	    var interval = this.props.touch.end - this.props.touch.start;

	    // normalize dragging speed if cutout is in between.
	    var duration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
	    interval -= duration;

	    var width = direction == 'horizontal' ? this.body.domProps.center.width : this.body.domProps.center.height;

	    if (this.options.rtl) {
	      var diffRange = delta / width * interval;
	    } else {
	      var diffRange = -delta / width * interval;
	    }

	    var newStart = this.props.touch.start + diffRange;
	    var newEnd = this.props.touch.end + diffRange;

	    // snapping times away from hidden zones
	    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, this.previousDelta - delta, true);
	    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, this.previousDelta - delta, true);
	    if (safeStart != newStart || safeEnd != newEnd) {
	      this.deltaDifference += delta;
	      this.props.touch.start = safeStart;
	      this.props.touch.end = safeEnd;
	      this._onDrag(event);
	      return;
	    }

	    this.previousDelta = delta;
	    this._applyRange(newStart, newEnd);

	    var startDate = new Date(this.start);
	    var endDate = new Date(this.end);

	    // fire a rangechange event
	    this.body.emitter.emit('rangechange', {
	      start: startDate,
	      end: endDate,
	      byUser: true
	    });

	    // fire a panmove event
	    this.body.emitter.emit('panmove');
	  };

	  /**
	   * Stop dragging operation
	   * @param {event} event
	   * @private
	   */
	  Range.prototype._onDragEnd = function (event) {
	    if (!this.props.touch.dragging) return;

	    // only allow dragging when configured as movable
	    if (!this.options.moveable) return;

	    // TODO: this may be redundant in hammerjs2
	    // refuse to drag when we where pinching to prevent the timeline make a jump
	    // when releasing the fingers in opposite order from the touch screen
	    if (!this.props.touch.allowDragging) return;

	    this.props.touch.dragging = false;
	    if (this.body.dom.root) {
	      this.body.dom.root.style.cursor = 'auto';
	    }

	    // fire a rangechanged event
	    this.body.emitter.emit('rangechanged', {
	      start: new Date(this.start),
	      end: new Date(this.end),
	      byUser: true
	    });
	  };

	  /**
	   * Event handler for mouse wheel event, used to zoom
	   * Code from http://adomas.org/javascript-mouse-wheel/
	   * @param {Event} event
	   * @private
	   */
	  Range.prototype._onMouseWheel = function (event) {
	    // Prevent default actions caused by mouse wheel
	    // (else the page and timeline both zoom and scroll)
	    event.preventDefault();

	    // retrieve delta
	    var delta = 0;
	    if (event.wheelDelta) {
	      /* IE/Opera. */
	      delta = event.wheelDelta / 120;
	    } else if (event.detail) {
	      /* Mozilla case. */
	      // In Mozilla, sign of delta is different than in IE.
	      // Also, delta is multiple of 3.
	      delta = -event.detail / 3;
	    }

	    // don't allow zoom when the according key is pressed and the zoomKey option or not zoomable but movable
	    if (this.options.zoomKey && !event[this.options.zoomKey] && this.options.zoomable || !this.options.zoomable && this.options.moveable) {
	      if (this.options.horizontalScroll) {
	        // calculate a single scroll jump relative to the range scale
	        var diff = delta * (this.end - this.start) / 20;
	        // calculate new start and end
	        var newStart = this.start - diff;
	        var newEnd = this.end - diff;

	        this.setRange(newStart, newEnd);
	      }
	      return;
	    }

	    // only allow zooming when configured as zoomable and moveable
	    if (!(this.options.zoomable && this.options.moveable)) return;

	    // only zoom when the mouse is inside the current range
	    if (!this._isInsideRange(event)) return;

	    // If delta is nonzero, handle it.
	    // Basically, delta is now positive if wheel was scrolled up,
	    // and negative, if wheel was scrolled down.
	    if (delta) {
	      // perform the zoom action. Delta is normally 1 or -1

	      // adjust a negative delta such that zooming in with delta 0.1
	      // equals zooming out with a delta -0.1
	      var scale;
	      if (delta < 0) {
	        scale = 1 - delta / 5;
	      } else {
	        scale = 1 / (1 + delta / 5);
	      }

	      // calculate center, the date to zoom around
	      var pointer = this.getPointer({ x: event.clientX, y: event.clientY }, this.body.dom.center);
	      var pointerDate = this._pointerToDate(pointer);

	      this.zoom(scale, pointerDate, delta);
	    }
	  };

	  /**
	   * Start of a touch gesture
	   * @private
	   */
	  Range.prototype._onTouch = function (event) {
	    this.props.touch.start = this.start;
	    this.props.touch.end = this.end;
	    this.props.touch.allowDragging = true;
	    this.props.touch.center = null;
	    this.scaleOffset = 0;
	    this.deltaDifference = 0;
	  };

	  /**
	   * Handle pinch event
	   * @param {Event} event
	   * @private
	   */
	  Range.prototype._onPinch = function (event) {
	    // only allow zooming when configured as zoomable and moveable
	    if (!(this.options.zoomable && this.options.moveable)) return;

	    this.props.touch.allowDragging = false;

	    if (!this.props.touch.center) {
	      this.props.touch.center = this.getPointer(event.center, this.body.dom.center);
	    }

	    var scale = 1 / (event.scale + this.scaleOffset);
	    var centerDate = this._pointerToDate(this.props.touch.center);

	    var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
	    var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, centerDate);
	    var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;

	    // calculate new start and end
	    var newStart = centerDate - hiddenDurationBefore + (this.props.touch.start - (centerDate - hiddenDurationBefore)) * scale;
	    var newEnd = centerDate + hiddenDurationAfter + (this.props.touch.end - (centerDate + hiddenDurationAfter)) * scale;

	    // snapping times away from hidden zones
	    this.startToFront = 1 - scale <= 0; // used to do the right auto correction with periodic hidden times
	    this.endToFront = scale - 1 <= 0; // used to do the right auto correction with periodic hidden times

	    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, 1 - scale, true);
	    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, scale - 1, true);
	    if (safeStart != newStart || safeEnd != newEnd) {
	      this.props.touch.start = safeStart;
	      this.props.touch.end = safeEnd;
	      this.scaleOffset = 1 - event.scale;
	      newStart = safeStart;
	      newEnd = safeEnd;
	    }

	    this.setRange(newStart, newEnd, false, true);

	    this.startToFront = false; // revert to default
	    this.endToFront = true; // revert to default
	  };

	  /**
	   * Test whether the mouse from a mouse event is inside the visible window,
	   * between the current start and end date
	   * @param {Object} event
	   * @return {boolean} Returns true when inside the visible window
	   * @private
	   */
	  Range.prototype._isInsideRange = function (event) {
	    // calculate the time where the mouse is, check whether inside
	    // and no scroll action should happen.
	    var clientX = event.center ? event.center.x : event.clientX;
	    if (this.options.rtl) {
	      var x = clientX - util.getAbsoluteLeft(this.body.dom.centerContainer);
	    } else {
	      var x = util.getAbsoluteRight(this.body.dom.centerContainer) - clientX;
	    }
	    var time = this.body.util.toTime(x);

	    return time >= this.start && time <= this.end;
	  };

	  /**
	   * Helper function to calculate the center date for zooming
	   * @param {{x: Number, y: Number}} pointer
	   * @return {number} date
	   * @private
	   */
	  Range.prototype._pointerToDate = function (pointer) {
	    var conversion;
	    var direction = this.options.direction;

	    validateDirection(direction);

	    if (direction == 'horizontal') {
	      return this.body.util.toTime(pointer.x).valueOf();
	    } else {
	      var height = this.body.domProps.center.height;
	      conversion = this.conversion(height);
	      return pointer.y / conversion.scale + conversion.offset;
	    }
	  };

	  /**
	   * Get the pointer location relative to the location of the dom element
	   * @param {{x: Number, y: Number}} touch
	   * @param {Element} element   HTML DOM element
	   * @return {{x: Number, y: Number}} pointer
	   * @private
	   */
	  Range.prototype.getPointer = function (touch, element) {
	    if (this.options.rtl) {
	      return {
	        x: util.getAbsoluteRight(element) - touch.x,
	        y: touch.y - util.getAbsoluteTop(element)
	      };
	    } else {
	      return {
	        x: touch.x - util.getAbsoluteLeft(element),
	        y: touch.y - util.getAbsoluteTop(element)
	      };
	    }
	  };

	  /**
	   * Zoom the range the given scale in or out. Start and end date will
	   * be adjusted, and the timeline will be redrawn. You can optionally give a
	   * date around which to zoom.
	   * For example, try scale = 0.9 or 1.1
	   * @param {Number} scale      Scaling factor. Values above 1 will zoom out,
	   *                            values below 1 will zoom in.
	   * @param {Number} [center]   Value representing a date around which will
	   *                            be zoomed.
	   */
	  Range.prototype.zoom = function (scale, center, delta) {
	    // if centerDate is not provided, take it half between start Date and end Date
	    if (center == null) {
	      center = (this.start + this.end) / 2;
	    }

	    var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
	    var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, center);
	    var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;

	    // calculate new start and end
	    var newStart = center - hiddenDurationBefore + (this.start - (center - hiddenDurationBefore)) * scale;
	    var newEnd = center + hiddenDurationAfter + (this.end - (center + hiddenDurationAfter)) * scale;

	    // snapping times away from hidden zones
	    this.startToFront = delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times
	    this.endToFront = -delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times
	    var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, delta, true);
	    var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, -delta, true);
	    if (safeStart != newStart || safeEnd != newEnd) {
	      newStart = safeStart;
	      newEnd = safeEnd;
	    }

	    this.setRange(newStart, newEnd, false, true);

	    this.startToFront = false; // revert to default
	    this.endToFront = true; // revert to default
	  };

	  /**
	   * Move the range with a given delta to the left or right. Start and end
	   * value will be adjusted. For example, try delta = 0.1 or -0.1
	   * @param {Number}  delta     Moving amount. Positive value will move right,
	   *                            negative value will move left
	   */
	  Range.prototype.move = function (delta) {
	    // zoom start Date and end Date relative to the centerDate
	    var diff = this.end - this.start;

	    // apply new values
	    var newStart = this.start + diff * delta;
	    var newEnd = this.end + diff * delta;

	    // TODO: reckon with min and max range

	    this.start = newStart;
	    this.end = newEnd;
	  };

	  /**
	   * Move the range to a new center point
	   * @param {Number} moveTo      New center point of the range
	   */
	  Range.prototype.moveTo = function (moveTo) {
	    var center = (this.start + this.end) / 2;

	    var diff = center - moveTo;

	    // calculate new start and end
	    var newStart = this.start - diff;
	    var newEnd = this.end - diff;

	    this.setRange(newStart, newEnd);
	  };

	  module.exports = Range;

	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);

	  /**
	   * Prototype for visual components
	   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} [body]
	   * @param {Object} [options]
	   */
	  function Component(body, options) {
	    this.options = null;
	    this.props = null;
	  }

	  /**
	   * Set options for the component. The new options will be merged into the
	   * current options.
	   * @param {Object} options
	   */
	  Component.prototype.setOptions = function (options) {
	    if (options) {
	      util.extend(this.options, options);
	    }
	  };

	  /**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */
	  Component.prototype.redraw = function () {
	    // should be implemented by the component
	    return false;
	  };

	  /**
	   * Destroy the component. Cleanup DOM and event listeners
	   */
	  Component.prototype.destroy = function () {
	    // should be implemented by the component
	  };

	  /**
	   * Test whether the component is resized since the last time _isResized() was
	   * called.
	   * @return {Boolean} Returns true if the component is resized
	   * @protected
	   */
	  Component.prototype._isResized = function () {
	    var resized = this.props._previousWidth !== this.props.width || this.props._previousHeight !== this.props.height;

	    this.props._previousWidth = this.props.width;
	    this.props._previousHeight = this.props.height;

	    return resized;
	  };

	  module.exports = Component;

	/***/ },
	/* 34 */
	/***/ function(module, exports) {

	  "use strict";

	  /**
	   * used in Core to convert the options into a volatile variable
	   * 
	   * @param {function} moment
	   * @param {Object} body
	   * @param {Array | Object} hiddenDates
	   */
	  exports.convertHiddenOptions = function (moment, body, hiddenDates) {
	    if (hiddenDates && !Array.isArray(hiddenDates)) {
	      return exports.convertHiddenOptions(moment, body, [hiddenDates]);
	    }

	    body.hiddenDates = [];
	    if (hiddenDates) {
	      if (Array.isArray(hiddenDates) == true) {
	        for (var i = 0; i < hiddenDates.length; i++) {
	          if (hiddenDates[i].repeat === undefined) {
	            var dateItem = {};
	            dateItem.start = moment(hiddenDates[i].start).toDate().valueOf();
	            dateItem.end = moment(hiddenDates[i].end).toDate().valueOf();
	            body.hiddenDates.push(dateItem);
	          }
	        }
	        body.hiddenDates.sort(function (a, b) {
	          return a.start - b.start;
	        }); // sort by start time
	      }
	    }
	  };

	  /**
	   * create new entrees for the repeating hidden dates
	   * @param {function} moment
	   * @param {Object} body
	   * @param {Array | Object} hiddenDates
	   */
	  exports.updateHiddenDates = function (moment, body, hiddenDates) {
	    if (hiddenDates && !Array.isArray(hiddenDates)) {
	      return exports.updateHiddenDates(moment, body, [hiddenDates]);
	    }

	    if (hiddenDates && body.domProps.centerContainer.width !== undefined) {
	      exports.convertHiddenOptions(moment, body, hiddenDates);

	      var start = moment(body.range.start);
	      var end = moment(body.range.end);

	      var totalRange = body.range.end - body.range.start;
	      var pixelTime = totalRange / body.domProps.centerContainer.width;

	      for (var i = 0; i < hiddenDates.length; i++) {
	        if (hiddenDates[i].repeat !== undefined) {
	          var startDate = moment(hiddenDates[i].start);
	          var endDate = moment(hiddenDates[i].end);

	          if (startDate._d == "Invalid Date") {
	            throw new Error("Supplied start date is not valid: " + hiddenDates[i].start);
	          }
	          if (endDate._d == "Invalid Date") {
	            throw new Error("Supplied end date is not valid: " + hiddenDates[i].end);
	          }

	          var duration = endDate - startDate;
	          if (duration >= 4 * pixelTime) {

	            var offset = 0;
	            var runUntil = end.clone();
	            switch (hiddenDates[i].repeat) {
	              case "daily":
	                // case of time
	                if (startDate.day() != endDate.day()) {
	                  offset = 1;
	                }
	                startDate.dayOfYear(start.dayOfYear());
	                startDate.year(start.year());
	                startDate.subtract(7, 'days');

	                endDate.dayOfYear(start.dayOfYear());
	                endDate.year(start.year());
	                endDate.subtract(7 - offset, 'days');

	                runUntil.add(1, 'weeks');
	                break;
	              case "weekly":
	                var dayOffset = endDate.diff(startDate, 'days');
	                var day = startDate.day();

	                // set the start date to the range.start
	                startDate.date(start.date());
	                startDate.month(start.month());
	                startDate.year(start.year());
	                endDate = startDate.clone();

	                // force
	                startDate.day(day);
	                endDate.day(day);
	                endDate.add(dayOffset, 'days');

	                startDate.subtract(1, 'weeks');
	                endDate.subtract(1, 'weeks');

	                runUntil.add(1, 'weeks');
	                break;
	              case "monthly":
	                if (startDate.month() != endDate.month()) {
	                  offset = 1;
	                }
	                startDate.month(start.month());
	                startDate.year(start.year());
	                startDate.subtract(1, 'months');

	                endDate.month(start.month());
	                endDate.year(start.year());
	                endDate.subtract(1, 'months');
	                endDate.add(offset, 'months');

	                runUntil.add(1, 'months');
	                break;
	              case "yearly":
	                if (startDate.year() != endDate.year()) {
	                  offset = 1;
	                }
	                startDate.year(start.year());
	                startDate.subtract(1, 'years');
	                endDate.year(start.year());
	                endDate.subtract(1, 'years');
	                endDate.add(offset, 'years');

	                runUntil.add(1, 'years');
	                break;
	              default:
	                console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
	                return;
	            }
	            while (startDate < runUntil) {
	              body.hiddenDates.push({ start: startDate.valueOf(), end: endDate.valueOf() });
	              switch (hiddenDates[i].repeat) {
	                case "daily":
	                  startDate.add(1, 'days');
	                  endDate.add(1, 'days');
	                  break;
	                case "weekly":
	                  startDate.add(1, 'weeks');
	                  endDate.add(1, 'weeks');
	                  break;
	                case "monthly":
	                  startDate.add(1, 'months');
	                  endDate.add(1, 'months');
	                  break;
	                case "yearly":
	                  startDate.add(1, 'y');
	                  endDate.add(1, 'y');
	                  break;
	                default:
	                  console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
	                  return;
	              }
	            }
	            body.hiddenDates.push({ start: startDate.valueOf(), end: endDate.valueOf() });
	          }
	        }
	      }
	      // remove duplicates, merge where possible
	      exports.removeDuplicates(body);
	      // ensure the new positions are not on hidden dates
	      var startHidden = exports.isHidden(body.range.start, body.hiddenDates);
	      var endHidden = exports.isHidden(body.range.end, body.hiddenDates);
	      var rangeStart = body.range.start;
	      var rangeEnd = body.range.end;
	      if (startHidden.hidden == true) {
	        rangeStart = body.range.startToFront == true ? startHidden.startDate - 1 : startHidden.endDate + 1;
	      }
	      if (endHidden.hidden == true) {
	        rangeEnd = body.range.endToFront == true ? endHidden.startDate - 1 : endHidden.endDate + 1;
	      }
	      if (startHidden.hidden == true || endHidden.hidden == true) {
	        body.range._applyRange(rangeStart, rangeEnd);
	      }
	    }
	  };

	  /**
	   * remove duplicates from the hidden dates list. Duplicates are evil. They mess everything up.
	   * Scales with N^2
	   * @param body
	   */
	  exports.removeDuplicates = function (body) {
	    var hiddenDates = body.hiddenDates;
	    var safeDates = [];
	    for (var i = 0; i < hiddenDates.length; i++) {
	      for (var j = 0; j < hiddenDates.length; j++) {
	        if (i != j && hiddenDates[j].remove != true && hiddenDates[i].remove != true) {
	          // j inside i
	          if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
	            hiddenDates[j].remove = true;
	          }
	          // j start inside i
	          else if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].start <= hiddenDates[i].end) {
	              hiddenDates[i].end = hiddenDates[j].end;
	              hiddenDates[j].remove = true;
	            }
	            // j end inside i
	            else if (hiddenDates[j].end >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
	                hiddenDates[i].start = hiddenDates[j].start;
	                hiddenDates[j].remove = true;
	              }
	        }
	      }
	    }

	    for (var i = 0; i < hiddenDates.length; i++) {
	      if (hiddenDates[i].remove !== true) {
	        safeDates.push(hiddenDates[i]);
	      }
	    }

	    body.hiddenDates = safeDates;
	    body.hiddenDates.sort(function (a, b) {
	      return a.start - b.start;
	    }); // sort by start time
	  };

	  exports.printDates = function (dates) {
	    for (var i = 0; i < dates.length; i++) {
	      console.log(i, new Date(dates[i].start), new Date(dates[i].end), dates[i].start, dates[i].end, dates[i].remove);
	    }
	  };

	  /**
	   * Used in TimeStep to avoid the hidden times.
	   * @param {function} moment
	   * @param {TimeStep} timeStep
	   * @param previousTime
	   */
	  exports.stepOverHiddenDates = function (moment, timeStep, previousTime) {
	    var stepInHidden = false;
	    var currentValue = timeStep.current.valueOf();
	    for (var i = 0; i < timeStep.hiddenDates.length; i++) {
	      var startDate = timeStep.hiddenDates[i].start;
	      var endDate = timeStep.hiddenDates[i].end;
	      if (currentValue >= startDate && currentValue < endDate) {
	        stepInHidden = true;
	        break;
	      }
	    }

	    if (stepInHidden == true && currentValue < timeStep._end.valueOf() && currentValue != previousTime) {
	      var prevValue = moment(previousTime);
	      var newValue = moment(endDate);
	      //check if the next step should be major
	      if (prevValue.year() != newValue.year()) {
	        timeStep.switchedYear = true;
	      } else if (prevValue.month() != newValue.month()) {
	        timeStep.switchedMonth = true;
	      } else if (prevValue.dayOfYear() != newValue.dayOfYear()) {
	        timeStep.switchedDay = true;
	      }

	      timeStep.current = newValue;
	    }
	  };

	  ///**
	  // * Used in TimeStep to avoid the hidden times.
	  // * @param timeStep
	  // * @param previousTime
	  // */
	  //exports.checkFirstStep = function(timeStep) {
	  //  var stepInHidden = false;
	  //  var currentValue = timeStep.current.valueOf();
	  //  for (var i = 0; i < timeStep.hiddenDates.length; i++) {
	  //    var startDate = timeStep.hiddenDates[i].start;
	  //    var endDate = timeStep.hiddenDates[i].end;
	  //    if (currentValue >= startDate && currentValue < endDate) {
	  //      stepInHidden = true;
	  //      break;
	  //    }
	  //  }
	  //
	  //  if (stepInHidden == true && currentValue <= timeStep._end.valueOf()) {
	  //    var newValue = moment(endDate);
	  //    timeStep.current = newValue.toDate();
	  //  }
	  //};

	  /**
	   * replaces the Core toScreen methods
	   * @param Core
	   * @param time
	   * @param width
	   * @returns {number}
	   */
	  exports.toScreen = function (Core, time, width) {
	    if (Core.body.hiddenDates.length == 0) {
	      var conversion = Core.range.conversion(width);
	      return (time.valueOf() - conversion.offset) * conversion.scale;
	    } else {
	      var hidden = exports.isHidden(time, Core.body.hiddenDates);
	      if (hidden.hidden == true) {
	        time = hidden.startDate;
	      }

	      var duration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
	      if (time < Core.range.start) {
	        var conversion = Core.range.conversion(width, duration);
	        var hiddenBeforeStart = exports.getHiddenDurationBeforeStart(Core.body.hiddenDates, time, conversion.offset);
	        time = Core.options.moment(time).toDate().valueOf();
	        time = time + hiddenBeforeStart;
	        return -(conversion.offset - time.valueOf()) * conversion.scale;
	      } else if (time > Core.range.end) {
	        var rangeAfterEnd = { start: Core.range.start, end: time };
	        time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, rangeAfterEnd, time);
	        var conversion = Core.range.conversion(width, duration);
	        return (time.valueOf() - conversion.offset) * conversion.scale;
	      } else {
	        time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, Core.range, time);
	        var conversion = Core.range.conversion(width, duration);
	        return (time.valueOf() - conversion.offset) * conversion.scale;
	      }
	    }
	  };

	  /**
	   * Replaces the core toTime methods
	   * @param body
	   * @param range
	   * @param x
	   * @param width
	   * @returns {Date}
	   */
	  exports.toTime = function (Core, x, width) {
	    if (Core.body.hiddenDates.length == 0) {
	      var conversion = Core.range.conversion(width);
	      return new Date(x / conversion.scale + conversion.offset);
	    } else {
	      var hiddenDuration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
	      var totalDuration = Core.range.end - Core.range.start - hiddenDuration;
	      var partialDuration = totalDuration * x / width;
	      var accumulatedHiddenDuration = exports.getAccumulatedHiddenDuration(Core.body.hiddenDates, Core.range, partialDuration);

	      var newTime = new Date(accumulatedHiddenDuration + partialDuration + Core.range.start);
	      return newTime;
	    }
	  };

	  /**
	   * Support function
	   *
	   * @param hiddenDates
	   * @param range
	   * @returns {number}
	   */
	  exports.getHiddenDurationBetween = function (hiddenDates, start, end) {
	    var duration = 0;
	    for (var i = 0; i < hiddenDates.length; i++) {
	      var startDate = hiddenDates[i].start;
	      var endDate = hiddenDates[i].end;
	      // if time after the cutout, and the
	      if (startDate >= start && endDate < end) {
	        duration += endDate - startDate;
	      }
	    }
	    return duration;
	  };

	  /**
	     * Support function
	     *
	     * @param hiddenDates
	     * @param start
	     * @param end
	     * @returns {number}
	     */
	  exports.getHiddenDurationBeforeStart = function (hiddenDates, start, end) {
	    var duration = 0;
	    for (var i = 0; i < hiddenDates.length; i++) {
	      var startDate = hiddenDates[i].start;
	      var endDate = hiddenDates[i].end;

	      if (startDate >= start && endDate <= end) {
	        duration += endDate - startDate;
	      }
	    }
	    return duration;
	  };

	  /**
	   * Support function
	   * @param moment
	   * @param hiddenDates
	   * @param range
	   * @param time
	   * @returns {{duration: number, time: *, offset: number}}
	   */
	  exports.correctTimeForHidden = function (moment, hiddenDates, range, time) {
	    time = moment(time).toDate().valueOf();
	    time -= exports.getHiddenDurationBefore(moment, hiddenDates, range, time);
	    return time;
	  };

	  exports.getHiddenDurationBefore = function (moment, hiddenDates, range, time) {
	    var timeOffset = 0;
	    time = moment(time).toDate().valueOf();

	    for (var i = 0; i < hiddenDates.length; i++) {
	      var startDate = hiddenDates[i].start;
	      var endDate = hiddenDates[i].end;
	      // if time after the cutout, and the
	      if (startDate >= range.start && endDate < range.end) {
	        if (time >= endDate) {
	          timeOffset += endDate - startDate;
	        }
	      }
	    }
	    return timeOffset;
	  };

	  /**
	   * sum the duration from start to finish, including the hidden duration,
	   * until the required amount has been reached, return the accumulated hidden duration
	   * @param hiddenDates
	   * @param range
	   * @param time
	   * @returns {{duration: number, time: *, offset: number}}
	   */
	  exports.getAccumulatedHiddenDuration = function (hiddenDates, range, requiredDuration) {
	    var hiddenDuration = 0;
	    var duration = 0;
	    var previousPoint = range.start;
	    //exports.printDates(hiddenDates)
	    for (var i = 0; i < hiddenDates.length; i++) {
	      var startDate = hiddenDates[i].start;
	      var endDate = hiddenDates[i].end;
	      // if time after the cutout, and the
	      if (startDate >= range.start && endDate < range.end) {
	        duration += startDate - previousPoint;
	        previousPoint = endDate;
	        if (duration >= requiredDuration) {
	          break;
	        } else {
	          hiddenDuration += endDate - startDate;
	        }
	      }
	    }

	    return hiddenDuration;
	  };

	  /**
	   * used to step over to either side of a hidden block. Correction is disabled on tablets, might be set to true
	   * @param hiddenDates
	   * @param time
	   * @param direction
	   * @param correctionEnabled
	   * @returns {*}
	   */
	  exports.snapAwayFromHidden = function (hiddenDates, time, direction, correctionEnabled) {
	    var isHidden = exports.isHidden(time, hiddenDates);
	    if (isHidden.hidden == true) {
	      if (direction < 0) {
	        if (correctionEnabled == true) {
	          return isHidden.startDate - (isHidden.endDate - time) - 1;
	        } else {
	          return isHidden.startDate - 1;
	        }
	      } else {
	        if (correctionEnabled == true) {
	          return isHidden.endDate + (time - isHidden.startDate) + 1;
	        } else {
	          return isHidden.endDate + 1;
	        }
	      }
	    } else {
	      return time;
	    }
	  };

	  /**
	   * Check if a time is hidden
	   *
	   * @param time
	   * @param hiddenDates
	   * @returns {{hidden: boolean, startDate: Window.start, endDate: *}}
	   */
	  exports.isHidden = function (time, hiddenDates) {
	    for (var i = 0; i < hiddenDates.length; i++) {
	      var startDate = hiddenDates[i].start;
	      var endDate = hiddenDates[i].end;

	      if (time >= startDate && time < endDate) {
	        // if the start is entering a hidden zone
	        return { hidden: true, startDate: startDate, endDate: endDate };
	        break;
	      }
	    }
	    return { hidden: false, startDate: startDate, endDate: endDate };
	  };

	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var Emitter = __webpack_require__(13);
	  var Hammer = __webpack_require__(22);
	  var hammerUtil = __webpack_require__(30);
	  var util = __webpack_require__(1);
	  var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);
	  var Range = __webpack_require__(32);
	  var ItemSet = __webpack_require__(36);
	  var TimeAxis = __webpack_require__(46);
	  var Activator = __webpack_require__(47);
	  var DateUtil = __webpack_require__(34);
	  var CustomTime = __webpack_require__(48);

	  /**
	   * Create a timeline visualization
	   * @constructor
	   */
	  function Core() {}

	  // turn Core into an event emitter
	  Emitter(Core.prototype);

	  /**
	   * Create the main DOM for the Core: a root panel containing left, right,
	   * top, bottom, content, and background panel.
	   * @param {Element} container  The container element where the Core will
	   *                             be attached.
	   * @protected
	   */
	  Core.prototype._create = function (container) {
	    this.dom = {};

	    this.dom.container = container;

	    this.dom.root = document.createElement('div');
	    this.dom.background = document.createElement('div');
	    this.dom.backgroundVertical = document.createElement('div');
	    this.dom.backgroundHorizontal = document.createElement('div');
	    this.dom.centerContainer = document.createElement('div');
	    this.dom.leftContainer = document.createElement('div');
	    this.dom.rightContainer = document.createElement('div');
	    this.dom.center = document.createElement('div');
	    this.dom.left = document.createElement('div');
	    this.dom.right = document.createElement('div');
	    this.dom.top = document.createElement('div');
	    this.dom.bottom = document.createElement('div');
	    this.dom.shadowTop = document.createElement('div');
	    this.dom.shadowBottom = document.createElement('div');
	    this.dom.shadowTopLeft = document.createElement('div');
	    this.dom.shadowBottomLeft = document.createElement('div');
	    this.dom.shadowTopRight = document.createElement('div');
	    this.dom.shadowBottomRight = document.createElement('div');

	    this.dom.root.className = 'vis-timeline';
	    this.dom.background.className = 'vis-panel vis-background';
	    this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical';
	    this.dom.backgroundHorizontal.className = 'vis-panel vis-background vis-horizontal';
	    this.dom.centerContainer.className = 'vis-panel vis-center';
	    this.dom.leftContainer.className = 'vis-panel vis-left';
	    this.dom.rightContainer.className = 'vis-panel vis-right';
	    this.dom.top.className = 'vis-panel vis-top';
	    this.dom.bottom.className = 'vis-panel vis-bottom';
	    this.dom.left.className = 'vis-content';
	    this.dom.center.className = 'vis-content';
	    this.dom.right.className = 'vis-content';
	    this.dom.shadowTop.className = 'vis-shadow vis-top';
	    this.dom.shadowBottom.className = 'vis-shadow vis-bottom';
	    this.dom.shadowTopLeft.className = 'vis-shadow vis-top';
	    this.dom.shadowBottomLeft.className = 'vis-shadow vis-bottom';
	    this.dom.shadowTopRight.className = 'vis-shadow vis-top';
	    this.dom.shadowBottomRight.className = 'vis-shadow vis-bottom';

	    this.dom.root.appendChild(this.dom.background);
	    this.dom.root.appendChild(this.dom.backgroundVertical);
	    this.dom.root.appendChild(this.dom.backgroundHorizontal);
	    this.dom.root.appendChild(this.dom.centerContainer);
	    this.dom.root.appendChild(this.dom.leftContainer);
	    this.dom.root.appendChild(this.dom.rightContainer);
	    this.dom.root.appendChild(this.dom.top);
	    this.dom.root.appendChild(this.dom.bottom);

	    this.dom.centerContainer.appendChild(this.dom.center);
	    this.dom.leftContainer.appendChild(this.dom.left);
	    this.dom.rightContainer.appendChild(this.dom.right);
	    this.dom.centerContainer.appendChild(this.dom.shadowTop);
	    this.dom.centerContainer.appendChild(this.dom.shadowBottom);
	    this.dom.leftContainer.appendChild(this.dom.shadowTopLeft);
	    this.dom.leftContainer.appendChild(this.dom.shadowBottomLeft);
	    this.dom.rightContainer.appendChild(this.dom.shadowTopRight);
	    this.dom.rightContainer.appendChild(this.dom.shadowBottomRight);

	    // size properties of each of the panels
	    this.props = {
	      root: {},
	      background: {},
	      centerContainer: {},
	      leftContainer: {},
	      rightContainer: {},
	      center: {},
	      left: {},
	      right: {},
	      top: {},
	      bottom: {},
	      border: {},
	      scrollTop: 0,
	      scrollTopMin: 0
	    };

	    this.on('rangechange', function () {
	      if (this.initialDrawDone === true) {
	        this._redraw();
	      }
	    }.bind(this));
	    this.on('touch', this._onTouch.bind(this));
	    this.on('panmove', this._onDrag.bind(this));

	    var me = this;
	    this.on('_change', function (properties) {
	      if (properties && properties.queue == true) {
	        // redraw once on next tick
	        if (!me._redrawTimer) {
	          me._redrawTimer = setTimeout(function () {
	            me._redrawTimer = null;
	            me._redraw();
	          }, 0);
	        }
	      } else {
	        // redraw immediately
	        me._redraw();
	      }
	    });

	    // create event listeners for all interesting events, these events will be
	    // emitted via emitter
	    this.hammer = new Hammer(this.dom.root);
	    var pinchRecognizer = this.hammer.get('pinch').set({ enable: true });
	    hammerUtil.disablePreventDefaultVertically(pinchRecognizer);
	    this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });
	    this.listeners = {};

	    var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'
	    // TODO: cleanup
	    //'touch', 'pinch',
	    //'tap', 'doubletap', 'hold',
	    //'dragstart', 'drag', 'dragend',
	    //'mousewheel', 'DOMMouseScroll' // DOMMouseScroll is needed for Firefox
	    ];
	    events.forEach(function (type) {
	      var listener = function listener(event) {
	        if (me.isActive()) {
	          me.emit(type, event);
	        }
	      };
	      me.hammer.on(type, listener);
	      me.listeners[type] = listener;
	    });

	    // emulate a touch event (emitted before the start of a pan, pinch, tap, or press)
	    hammerUtil.onTouch(this.hammer, function (event) {
	      me.emit('touch', event);
	    }.bind(this));

	    // emulate a release event (emitted after a pan, pinch, tap, or press)
	    hammerUtil.onRelease(this.hammer, function (event) {
	      me.emit('release', event);
	    }.bind(this));

	    function onMouseWheel(event) {
	      if (this.isActive()) {
	        this.emit('mousewheel', event);
	      }

	      // prevent scrolling when zoomKey defined or activated
	      if (!this.options.zoomKey || event[this.options.zoomKey]) return;

	      // prevent scrolling vertically when horizontalScroll is true
	      if (this.options.horizontalScroll) return;

	      var delta = 0;
	      if (event.wheelDelta) {
	        /* IE/Opera. */
	        delta = event.wheelDelta / 120;
	      } else if (event.detail) {
	        /* Mozilla case. */
	        // In Mozilla, sign of delta is different than in IE.
	        // Also, delta is multiple of 3.
	        delta = -event.detail / 3;
	      }

	      var current = this.props.scrollTop;
	      var adjusted = current + delta * 120;

	      if (this.isActive()) {
	        this._setScrollTop(adjusted);
	        if (this.options.verticalScroll) {
	          this.dom.left.parentNode.scrollTop = -adjusted;
	          this.dom.right.parentNode.scrollTop = -adjusted;
	        }
	        this._redraw();
	        this.emit('scroll', event);
	      }

	      // Prevent default actions caused by mouse wheel
	      // (else the page and timeline both scroll)
	      event.preventDefault();
	    }

	    if (this.dom.centerContainer.addEventListener) {
	      // IE9, Chrome, Safari, Opera
	      this.dom.centerContainer.addEventListener("mousewheel", onMouseWheel.bind(this), false);
	      // Firefox
	      this.dom.centerContainer.addEventListener("DOMMouseScroll", onMouseWheel.bind(this), false);
	    } else {
	      // IE 6/7/8
	      this.dom.centerContainer.attachEvent("onmousewheel", onMouseWheel.bind(this));
	    }

	    function onMouseScrollSide(event) {
	      if (!me.options.verticalScroll) return;
	      event.preventDefault();
	      if (me.isActive()) {
	        var adjusted = -event.target.scrollTop;
	        me._setScrollTop(adjusted);
	        me._redraw();
	        me.emit('scrollSide', event);
	      }
	    }

	    this.dom.left.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));
	    this.dom.right.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));

	    var itemAddedToTimeline = false;

	    function handleDragOver(event) {
	      if (event.preventDefault) {
	        event.preventDefault(); // Necessary. Allows us to drop.
	      }

	      // make sure your target is a vis element
	      if (!event.target.className.includes('vis')) return;

	      // make sure only one item is added every time you're over the timeline
	      if (itemAddedToTimeline) return;

	      event.dataTransfer.dropEffect = 'move';
	      itemAddedToTimeline = true;
	      return false;
	    }

	    function handleDrop(event) {
	      // return when dropping non-vis items 
	      try {
	        var itemData = JSON.parse(event.dataTransfer.getData("text/plain"));
	        if (!itemData.content) return;
	      } catch (err) {
	        return false;
	      }

	      itemAddedToTimeline = false;
	      event.center = {
	        x: event.x,
	        y: event.y
	      };
	      me.itemSet._onAddItem(event);

	      return false;
	    }

	    this.dom.center.addEventListener('dragover', handleDragOver.bind(this), false);
	    this.dom.center.addEventListener('drop', handleDrop.bind(this), false);

	    this.customTimes = [];

	    // store state information needed for touch events
	    this.touch = {};

	    this.redrawCount = 0;
	    this.initialDrawDone = false;

	    // attach the root panel to the provided container
	    if (!container) throw new Error('No container provided');
	    container.appendChild(this.dom.root);
	  };

	  /**
	   * Set options. Options will be passed to all components loaded in the Timeline.
	   * @param {Object} [options]
	   *                           {String} orientation
	   *                              Vertical orientation for the Timeline,
	   *                              can be 'bottom' (default) or 'top'.
	   *                           {String | Number} width
	   *                              Width for the timeline, a number in pixels or
	   *                              a css string like '1000px' or '75%'. '100%' by default.
	   *                           {String | Number} height
	   *                              Fixed height for the Timeline, a number in pixels or
	   *                              a css string like '400px' or '75%'. If undefined,
	   *                              The Timeline will automatically size such that
	   *                              its contents fit.
	   *                           {String | Number} minHeight
	   *                              Minimum height for the Timeline, a number in pixels or
	   *                              a css string like '400px' or '75%'.
	   *                           {String | Number} maxHeight
	   *                              Maximum height for the Timeline, a number in pixels or
	   *                              a css string like '400px' or '75%'.
	   *                           {Number | Date | String} start
	   *                              Start date for the visible window
	   *                           {Number | Date | String} end
	   *                              End date for the visible window
	   */
	  Core.prototype.setOptions = function (options) {
	    if (options) {
	      // copy the known options
	      var fields = ['width', 'height', 'minHeight', 'maxHeight', 'autoResize', 'start', 'end', 'clickToUse', 'dataAttributes', 'hiddenDates', 'locale', 'locales', 'moment', 'rtl', 'zoomKey', 'horizontalScroll', 'verticalScroll'];
	      util.selectiveExtend(fields, this.options, options);

	      if (this.options.rtl) {
	        this.dom.container.style.direction = "rtl";
	        this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical-rtl';
	      }

	      if (this.options.verticalScroll) {
	        if (this.options.rtl) {
	          this.dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
	        } else {
	          this.dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';
	        }
	      }

	      this.options.orientation = { item: undefined, axis: undefined };
	      if ('orientation' in options) {
	        if (typeof options.orientation === 'string') {
	          this.options.orientation = {
	            item: options.orientation,
	            axis: options.orientation
	          };
	        } else if (_typeof(options.orientation) === 'object') {
	          if ('item' in options.orientation) {
	            this.options.orientation.item = options.orientation.item;
	          }
	          if ('axis' in options.orientation) {
	            this.options.orientation.axis = options.orientation.axis;
	          }
	        }
	      }

	      if (this.options.orientation.axis === 'both') {
	        if (!this.timeAxis2) {
	          var timeAxis2 = this.timeAxis2 = new TimeAxis(this.body);
	          timeAxis2.setOptions = function (options) {
	            var _options = options ? util.extend({}, options) : {};
	            _options.orientation = 'top'; // override the orientation option, always top
	            TimeAxis.prototype.setOptions.call(timeAxis2, _options);
	          };
	          this.components.push(timeAxis2);
	        }
	      } else {
	        if (this.timeAxis2) {
	          var index = this.components.indexOf(this.timeAxis2);
	          if (index !== -1) {
	            this.components.splice(index, 1);
	          }
	          this.timeAxis2.destroy();
	          this.timeAxis2 = null;
	        }
	      }

	      // if the graph2d's drawPoints is a function delegate the callback to the onRender property
	      if (typeof options.drawPoints == 'function') {
	        options.drawPoints = {
	          onRender: options.drawPoints
	        };
	      }

	      if ('hiddenDates' in this.options) {
	        DateUtil.convertHiddenOptions(this.options.moment, this.body, this.options.hiddenDates);
	      }

	      if ('clickToUse' in options) {
	        if (options.clickToUse) {
	          if (!this.activator) {
	            this.activator = new Activator(this.dom.root);
	          }
	        } else {
	          if (this.activator) {
	            this.activator.destroy();
	            delete this.activator;
	          }
	        }
	      }

	      if ('showCustomTime' in options) {
	        throw new Error('Option `showCustomTime` is deprecated. Create a custom time bar via timeline.addCustomTime(time [, id])');
	      }

	      // enable/disable autoResize
	      this._initAutoResize();
	    }

	    // propagate options to all components
	    this.components.forEach(function (component) {
	      return component.setOptions(options);
	    });

	    // enable/disable configure
	    if ('configure' in options) {
	      if (!this.configurator) {
	        this.configurator = this._createConfigurator();
	      }

	      this.configurator.setOptions(options.configure);

	      // collect the settings of all components, and pass them to the configuration system
	      var appliedOptions = util.deepExtend({}, this.options);
	      this.components.forEach(function (component) {
	        util.deepExtend(appliedOptions, component.options);
	      });
	      this.configurator.setModuleOptions({ global: appliedOptions });
	    }

	    // override redraw with a throttled version
	    if (!this._origRedraw) {
	      this._origRedraw = this._redraw.bind(this);
	      this._redraw = util.throttle(this._origRedraw);
	    } else {
	      // Not the initial run: redraw everything
	      this._redraw();
	    }
	  };

	  /**
	   * Returns true when the Timeline is active.
	   * @returns {boolean}
	   */
	  Core.prototype.isActive = function () {
	    return !this.activator || this.activator.active;
	  };

	  /**
	   * Destroy the Core, clean up all DOM elements and event listeners.
	   */
	  Core.prototype.destroy = function () {
	    // unbind datasets
	    this.setItems(null);
	    this.setGroups(null);

	    // remove all event listeners
	    this.off();

	    // stop checking for changed size
	    this._stopAutoResize();

	    // remove from DOM
	    if (this.dom.root.parentNode) {
	      this.dom.root.parentNode.removeChild(this.dom.root);
	    }
	    this.dom = null;

	    // remove Activator
	    if (this.activator) {
	      this.activator.destroy();
	      delete this.activator;
	    }

	    // cleanup hammer touch events
	    for (var event in this.listeners) {
	      if (this.listeners.hasOwnProperty(event)) {
	        delete this.listeners[event];
	      }
	    }
	    this.listeners = null;
	    this.hammer = null;

	    // give all components the opportunity to cleanup
	    this.components.forEach(function (component) {
	      return component.destroy();
	    });

	    this.body = null;
	  };

	  /**
	   * Set a custom time bar
	   * @param {Date} time
	   * @param {number} [id=undefined] Optional id of the custom time bar to be adjusted.
	   */
	  Core.prototype.setCustomTime = function (time, id) {
	    var customTimes = this.customTimes.filter(function (component) {
	      return id === component.options.id;
	    });

	    if (customTimes.length === 0) {
	      throw new Error('No custom time bar found with id ' + JSON.stringify(id));
	    }

	    if (customTimes.length > 0) {
	      customTimes[0].setCustomTime(time);
	    }
	  };

	  /**
	   * Retrieve the current custom time.
	   * @param {number} [id=undefined]    Id of the custom time bar.
	   * @return {Date | undefined} customTime
	   */
	  Core.prototype.getCustomTime = function (id) {
	    var customTimes = this.customTimes.filter(function (component) {
	      return component.options.id === id;
	    });

	    if (customTimes.length === 0) {
	      throw new Error('No custom time bar found with id ' + JSON.stringify(id));
	    }
	    return customTimes[0].getCustomTime();
	  };

	  /**
	   * Set a custom title for the custom time bar.
	   * @param {String} [title] Custom title
	   * @param {number} [id=undefined]    Id of the custom time bar.
	   */
	  Core.prototype.setCustomTimeTitle = function (title, id) {
	    var customTimes = this.customTimes.filter(function (component) {
	      return component.options.id === id;
	    });

	    if (customTimes.length === 0) {
	      throw new Error('No custom time bar found with id ' + JSON.stringify(id));
	    }
	    if (customTimes.length > 0) {
	      return customTimes[0].setCustomTitle(title);
	    }
	  };

	  /**
	   * Retrieve meta information from an event.
	   * Should be overridden by classes extending Core
	   * @param {Event} event
	   * @return {Object} An object with related information.
	   */
	  Core.prototype.getEventProperties = function (event) {
	    return { event: event };
	  };

	  /**
	   * Add custom vertical bar
	   * @param {Date | String | Number} [time]  A Date, unix timestamp, or
	   *                                         ISO date string. Time point where
	   *                                         the new bar should be placed.
	   *                                         If not provided, `new Date()` will
	   *                                         be used.
	   * @param {Number | String} [id=undefined] Id of the new bar. Optional
	   * @return {Number | String}               Returns the id of the new bar
	   */
	  Core.prototype.addCustomTime = function (time, id) {
	    var timestamp = time !== undefined ? util.convert(time, 'Date').valueOf() : new Date();

	    var exists = this.customTimes.some(function (customTime) {
	      return customTime.options.id === id;
	    });
	    if (exists) {
	      throw new Error('A custom time with id ' + JSON.stringify(id) + ' already exists');
	    }

	    var customTime = new CustomTime(this.body, util.extend({}, this.options, {
	      time: timestamp,
	      id: id
	    }));

	    this.customTimes.push(customTime);
	    this.components.push(customTime);
	    this._redraw();

	    return id;
	  };

	  /**
	   * Remove previously added custom bar
	   * @param {int} id ID of the custom bar to be removed
	   * @return {boolean} True if the bar exists and is removed, false otherwise
	   */
	  Core.prototype.removeCustomTime = function (id) {
	    var customTimes = this.customTimes.filter(function (bar) {
	      return bar.options.id === id;
	    });

	    if (customTimes.length === 0) {
	      throw new Error('No custom time bar found with id ' + JSON.stringify(id));
	    }

	    customTimes.forEach(function (customTime) {
	      this.customTimes.splice(this.customTimes.indexOf(customTime), 1);
	      this.components.splice(this.components.indexOf(customTime), 1);
	      customTime.destroy();
	    }.bind(this));
	  };

	  /**
	   * Get the id's of the currently visible items.
	   * @returns {Array} The ids of the visible items
	   */
	  Core.prototype.getVisibleItems = function () {
	    return this.itemSet && this.itemSet.getVisibleItems() || [];
	  };

	  /**
	   * Set Core window such that it fits all items
	   * @param {Object} [options]  Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */
	  Core.prototype.fit = function (options) {
	    var range = this.getDataRange();

	    // skip range set if there is no min and max date
	    if (range.min === null && range.max === null) {
	      return;
	    }

	    // apply a margin of 1% left and right of the data
	    var interval = range.max - range.min;
	    var min = new Date(range.min.valueOf() - interval * 0.01);
	    var max = new Date(range.max.valueOf() + interval * 0.01);
	    var animation = options && options.animation !== undefined ? options.animation : true;
	    this.range.setRange(min, max, animation);
	  };

	  /**
	   * Calculate the data range of the items start and end dates
	   * @returns {{min: Date | null, max: Date | null}}
	   * @protected
	   */
	  Core.prototype.getDataRange = function () {
	    // must be implemented by Timeline and Graph2d
	    throw new Error('Cannot invoke abstract method getDataRange');
	  };

	  /**
	   * Set the visible window. Both parameters are optional, you can change only
	   * start or only end. Syntax:
	   *
	   *     TimeLine.setWindow(start, end)
	   *     TimeLine.setWindow(start, end, options)
	   *     TimeLine.setWindow(range)
	   *
	   * Where start and end can be a Date, number, or string, and range is an
	   * object with properties start and end.
	   *
	   * @param {Date | Number | String | Object} [start] Start date of visible window
	   * @param {Date | Number | String} [end]            End date of visible window
	   * @param {Object} [options]  Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */
	  Core.prototype.setWindow = function (start, end, options) {
	    var animation;
	    if (arguments.length == 1) {
	      var range = arguments[0];
	      animation = range.animation !== undefined ? range.animation : true;
	      this.range.setRange(range.start, range.end, animation);
	    } else {
	      animation = options && options.animation !== undefined ? options.animation : true;
	      this.range.setRange(start, end, animation);
	    }
	  };

	  /**
	   * Move the window such that given time is centered on screen.
	   * @param {Date | Number | String} time
	   * @param {Object} [options]  Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */
	  Core.prototype.moveTo = function (time, options) {
	    var interval = this.range.end - this.range.start;
	    var t = util.convert(time, 'Date').valueOf();

	    var start = t - interval / 2;
	    var end = t + interval / 2;
	    var animation = options && options.animation !== undefined ? options.animation : true;

	    this.range.setRange(start, end, animation);
	  };

	  /**
	   * Get the visible window
	   * @return {{start: Date, end: Date}}   Visible range
	   */
	  Core.prototype.getWindow = function () {
	    var range = this.range.getRange();
	    return {
	      start: new Date(range.start),
	      end: new Date(range.end)
	    };
	  };

	  /**
	   * Zoom in the window such that given time is centered on screen.
	   * @param {Number} percentage - must be between [0..1]
	   */
	  Core.prototype.zoomIn = function (percentage) {
	    if (!percentage || percentage < 0 || percentage > 1) return;
	    var range = this.getWindow();
	    var start = range.start.valueOf();
	    var end = range.end.valueOf();
	    var interval = end - start;
	    var newInterval = interval / (1 + percentage);
	    var distance = (interval - newInterval) / 2;
	    var newStart = start + distance;
	    var newEnd = end - distance;

	    this.setWindow({
	      start: newStart,
	      end: newEnd
	    });
	  };

	  /**
	   * Zoom out the window such that given time is centered on screen.
	   * @param {Number} percentage - must be between [0..1]
	   */
	  Core.prototype.zoomOut = function (percentage) {
	    if (!percentage || percentage < 0 || percentage > 1) return;
	    var range = this.getWindow();
	    var start = range.start.valueOf();
	    var end = range.end.valueOf();
	    var interval = end - start;
	    var newStart = start - interval * percentage / 2;
	    var newEnd = end + interval * percentage / 2;

	    this.setWindow({
	      start: newStart,
	      end: newEnd
	    });
	  };

	  /**
	   * Force a redraw. Can be overridden by implementations of Core
	   *
	   * Note: this function will be overridden on construction with a trottled version
	   */
	  Core.prototype.redraw = function () {
	    this._redraw();
	  };

	  /**
	   * Redraw for internal use. Redraws all components. See also the public
	   * method redraw.
	   * @protected
	   */
	  Core.prototype._redraw = function () {
	    this.redrawCount++;
	    var resized = false;
	    var options = this.options;
	    var props = this.props;
	    var dom = this.dom;

	    if (!dom || !dom.container || dom.root.offsetWidth == 0) return; // when destroyed, or invisible

	    DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);

	    // update class names
	    if (options.orientation == 'top') {
	      util.addClassName(dom.root, 'vis-top');
	      util.removeClassName(dom.root, 'vis-bottom');
	    } else {
	      util.removeClassName(dom.root, 'vis-top');
	      util.addClassName(dom.root, 'vis-bottom');
	    }

	    // update root width and height options
	    dom.root.style.maxHeight = util.option.asSize(options.maxHeight, '');
	    dom.root.style.minHeight = util.option.asSize(options.minHeight, '');
	    dom.root.style.width = util.option.asSize(options.width, '');

	    // calculate border widths
	    props.border.left = (dom.centerContainer.offsetWidth - dom.centerContainer.clientWidth) / 2;
	    props.border.right = props.border.left;
	    props.border.top = (dom.centerContainer.offsetHeight - dom.centerContainer.clientHeight) / 2;
	    props.border.bottom = props.border.top;
	    var borderRootHeight = dom.root.offsetHeight - dom.root.clientHeight;
	    var borderRootWidth = dom.root.offsetWidth - dom.root.clientWidth;

	    // workaround for a bug in IE: the clientWidth of an element with
	    // a height:0px and overflow:hidden is not calculated and always has value 0
	    if (dom.centerContainer.clientHeight === 0) {
	      props.border.left = props.border.top;
	      props.border.right = props.border.left;
	    }
	    if (dom.root.clientHeight === 0) {
	      borderRootWidth = borderRootHeight;
	    }

	    // calculate the heights. If any of the side panels is empty, we set the height to
	    // minus the border width, such that the border will be invisible
	    props.center.height = dom.center.offsetHeight;
	    props.left.height = dom.left.offsetHeight;
	    props.right.height = dom.right.offsetHeight;
	    props.top.height = dom.top.clientHeight || -props.border.top;
	    props.bottom.height = dom.bottom.clientHeight || -props.border.bottom;

	    // TODO: compensate borders when any of the panels is empty.

	    // apply auto height
	    // TODO: only calculate autoHeight when needed (else we cause an extra reflow/repaint of the DOM)
	    var contentHeight = Math.max(props.left.height, props.center.height, props.right.height);
	    var autoHeight = props.top.height + contentHeight + props.bottom.height + borderRootHeight + props.border.top + props.border.bottom;
	    dom.root.style.height = util.option.asSize(options.height, autoHeight + 'px');

	    // calculate heights of the content panels
	    props.root.height = dom.root.offsetHeight;
	    props.background.height = props.root.height - borderRootHeight;
	    var containerHeight = props.root.height - props.top.height - props.bottom.height - borderRootHeight;
	    props.centerContainer.height = containerHeight;
	    props.leftContainer.height = containerHeight;
	    props.rightContainer.height = props.leftContainer.height;

	    // calculate the widths of the panels
	    props.root.width = dom.root.offsetWidth;
	    props.background.width = props.root.width - borderRootWidth;

	    if (!this.initialDrawDone) {
	      props.scrollbarWidth = util.getScrollBarWidth();
	    }

	    if (this.options.verticalScroll) {
	      if (this.options.rtl) {
	        props.left.width = dom.leftContainer.clientWidth || -props.border.left;
	        props.right.width = dom.rightContainer.clientWidth + props.scrollbarWidth || -props.border.right;
	      } else {
	        props.left.width = dom.leftContainer.clientWidth + props.scrollbarWidth || -props.border.left;
	        props.right.width = dom.rightContainer.clientWidth || -props.border.right;
	      }
	    } else {
	      props.left.width = dom.leftContainer.clientWidth || -props.border.left;
	      props.right.width = dom.rightContainer.clientWidth || -props.border.right;
	    }

	    props.leftContainer.width = props.left.width;
	    props.rightContainer.width = props.right.width;
	    var centerWidth = props.root.width - props.left.width - props.right.width - borderRootWidth;
	    props.center.width = centerWidth;
	    props.centerContainer.width = centerWidth;
	    props.top.width = centerWidth;
	    props.bottom.width = centerWidth;

	    // resize the panels
	    dom.background.style.height = props.background.height + 'px';
	    dom.backgroundVertical.style.height = props.background.height + 'px';
	    dom.backgroundHorizontal.style.height = props.centerContainer.height + 'px';
	    dom.centerContainer.style.height = props.centerContainer.height + 'px';
	    dom.leftContainer.style.height = props.leftContainer.height + 'px';
	    dom.rightContainer.style.height = props.rightContainer.height + 'px';

	    dom.background.style.width = props.background.width + 'px';
	    dom.backgroundVertical.style.width = props.centerContainer.width + 'px';
	    dom.backgroundHorizontal.style.width = props.background.width + 'px';
	    dom.centerContainer.style.width = props.center.width + 'px';
	    dom.top.style.width = props.top.width + 'px';
	    dom.bottom.style.width = props.bottom.width + 'px';

	    // reposition the panels
	    dom.background.style.left = '0';
	    dom.background.style.top = '0';
	    dom.backgroundVertical.style.left = props.left.width + props.border.left + 'px';
	    dom.backgroundVertical.style.top = '0';
	    dom.backgroundHorizontal.style.left = '0';
	    dom.backgroundHorizontal.style.top = props.top.height + 'px';
	    dom.centerContainer.style.left = props.left.width + 'px';
	    dom.centerContainer.style.top = props.top.height + 'px';
	    dom.leftContainer.style.left = '0';
	    dom.leftContainer.style.top = props.top.height + 'px';
	    dom.rightContainer.style.left = props.left.width + props.center.width + 'px';
	    dom.rightContainer.style.top = props.top.height + 'px';
	    dom.top.style.left = props.left.width + 'px';
	    dom.top.style.top = '0';
	    dom.bottom.style.left = props.left.width + 'px';
	    dom.bottom.style.top = props.top.height + props.centerContainer.height + 'px';

	    // update the scrollTop, feasible range for the offset can be changed
	    // when the height of the Core or of the contents of the center changed
	    var offset = this._updateScrollTop();

	    // reposition the scrollable contents
	    if (options.orientation.item != 'top') {
	      offset += Math.max(this.props.centerContainer.height - this.props.center.height - this.props.border.top - this.props.border.bottom, 0);
	    }
	    dom.center.style.left = '0';
	    dom.center.style.top = offset + 'px';
	    dom.left.style.left = '0';
	    dom.right.style.left = '0';

	    // show shadows when vertical scrolling is available
	    var visibilityTop = this.props.scrollTop == 0 ? 'hidden' : '';
	    var visibilityBottom = this.props.scrollTop == this.props.scrollTopMin ? 'hidden' : '';
	    dom.shadowTop.style.visibility = visibilityTop;
	    dom.shadowBottom.style.visibility = visibilityBottom;
	    dom.shadowTopLeft.style.visibility = visibilityTop;
	    dom.shadowBottomLeft.style.visibility = visibilityBottom;
	    dom.shadowTopRight.style.visibility = visibilityTop;
	    dom.shadowBottomRight.style.visibility = visibilityBottom;

	    if (this.options.verticalScroll) {
	      dom.shadowTopRight.style.visibility = "hidden";
	      dom.shadowBottomRight.style.visibility = "hidden";
	      dom.shadowTopLeft.style.visibility = "hidden";
	      dom.shadowBottomLeft.style.visibility = "hidden";
	    } else {
	      dom.left.style.top = offset + 'px';
	      dom.right.style.top = offset + 'px';
	    }

	    // enable/disable vertical panning
	    var contentsOverflow = this.props.center.height > this.props.centerContainer.height;
	    this.hammer.get('pan').set({
	      direction: contentsOverflow ? Hammer.DIRECTION_ALL : Hammer.DIRECTION_HORIZONTAL
	    });

	    // redraw all components
	    this.components.forEach(function (component) {
	      resized = component.redraw() || resized;
	    });
	    var MAX_REDRAW = 5;
	    if (resized) {
	      if (this.redrawCount < MAX_REDRAW) {
	        this.body.emitter.emit('_change');
	        return;
	      } else {
	        console.log('WARNING: infinite loop in redraw?');
	      }
	    } else {
	      this.redrawCount = 0;
	    }

	    this.initialDrawDone = true;

	    //Emit public 'changed' event for UI updates, see issue #1592
	    this.body.emitter.emit("changed");
	  };

	  // TODO: deprecated since version 1.1.0, remove some day
	  Core.prototype.repaint = function () {
	    throw new Error('Function repaint is deprecated. Use redraw instead.');
	  };

	  /**
	   * Set a current time. This can be used for example to ensure that a client's
	   * time is synchronized with a shared server time.
	   * Only applicable when option `showCurrentTime` is true.
	   * @param {Date | String | Number} time     A Date, unix timestamp, or
	   *                                          ISO date string.
	   */
	  Core.prototype.setCurrentTime = function (time) {
	    if (!this.currentTime) {
	      throw new Error('Option showCurrentTime must be true');
	    }

	    this.currentTime.setCurrentTime(time);
	  };

	  /**
	   * Get the current time.
	   * Only applicable when option `showCurrentTime` is true.
	   * @return {Date} Returns the current time.
	   */
	  Core.prototype.getCurrentTime = function () {
	    if (!this.currentTime) {
	      throw new Error('Option showCurrentTime must be true');
	    }

	    return this.currentTime.getCurrentTime();
	  };

	  /**
	   * Convert a position on screen (pixels) to a datetime
	   * @param {int}     x    Position on the screen in pixels
	   * @return {Date}   time The datetime the corresponds with given position x
	   * @protected
	   */
	  // TODO: move this function to Range
	  Core.prototype._toTime = function (x) {
	    return DateUtil.toTime(this, x, this.props.center.width);
	  };

	  /**
	   * Convert a position on the global screen (pixels) to a datetime
	   * @param {int}     x    Position on the screen in pixels
	   * @return {Date}   time The datetime the corresponds with given position x
	   * @protected
	   */
	  // TODO: move this function to Range
	  Core.prototype._toGlobalTime = function (x) {
	    return DateUtil.toTime(this, x, this.props.root.width);
	    //var conversion = this.range.conversion(this.props.root.width);
	    //return new Date(x / conversion.scale + conversion.offset);
	  };

	  /**
	   * Convert a datetime (Date object) into a position on the screen
	   * @param {Date}   time A date
	   * @return {int}   x    The position on the screen in pixels which corresponds
	   *                      with the given date.
	   * @protected
	   */
	  // TODO: move this function to Range
	  Core.prototype._toScreen = function (time) {
	    return DateUtil.toScreen(this, time, this.props.center.width);
	  };

	  /**
	   * Convert a datetime (Date object) into a position on the root
	   * This is used to get the pixel density estimate for the screen, not the center panel
	   * @param {Date}   time A date
	   * @return {int}   x    The position on root in pixels which corresponds
	   *                      with the given date.
	   * @protected
	   */
	  // TODO: move this function to Range
	  Core.prototype._toGlobalScreen = function (time) {
	    return DateUtil.toScreen(this, time, this.props.root.width);
	    //var conversion = this.range.conversion(this.props.root.width);
	    //return (time.valueOf() - conversion.offset) * conversion.scale;
	  };

	  /**
	   * Initialize watching when option autoResize is true
	   * @private
	   */
	  Core.prototype._initAutoResize = function () {
	    if (this.options.autoResize == true) {
	      this._startAutoResize();
	    } else {
	      this._stopAutoResize();
	    }
	  };

	  /**
	   * Watch for changes in the size of the container. On resize, the Panel will
	   * automatically redraw itself.
	   * @private
	   */
	  Core.prototype._startAutoResize = function () {
	    var me = this;

	    this._stopAutoResize();

	    this._onResize = function () {
	      if (me.options.autoResize != true) {
	        // stop watching when the option autoResize is changed to false
	        me._stopAutoResize();
	        return;
	      }

	      if (me.dom.root) {
	        // check whether the frame is resized
	        // Note: we compare offsetWidth here, not clientWidth. For some reason,
	        // IE does not restore the clientWidth from 0 to the actual width after
	        // changing the timeline's container display style from none to visible
	        if (me.dom.root.offsetWidth != me.props.lastWidth || me.dom.root.offsetHeight != me.props.lastHeight) {
	          me.props.lastWidth = me.dom.root.offsetWidth;
	          me.props.lastHeight = me.dom.root.offsetHeight;

	          me.body.emitter.emit('_change');
	        }
	      }
	    };

	    // add event listener to window resize
	    util.addEventListener(window, 'resize', this._onResize);

	    //Prevent initial unnecessary redraw
	    if (me.dom.root) {
	      me.props.lastWidth = me.dom.root.offsetWidth;
	      me.props.lastHeight = me.dom.root.offsetHeight;
	    }

	    this.watchTimer = setInterval(this._onResize, 1000);
	  };

	  /**
	   * Stop watching for a resize of the frame.
	   * @private
	   */
	  Core.prototype._stopAutoResize = function () {
	    if (this.watchTimer) {
	      clearInterval(this.watchTimer);
	      this.watchTimer = undefined;
	    }

	    // remove event listener on window.resize
	    if (this._onResize) {
	      util.removeEventListener(window, 'resize', this._onResize);
	      this._onResize = null;
	    }
	  };

	  /**
	   * Start moving the timeline vertically
	   * @param {Event} event
	   * @private
	   */
	  Core.prototype._onTouch = function (event) {
	    this.touch.allowDragging = true;
	    this.touch.initialScrollTop = this.props.scrollTop;
	  };

	  /**
	   * Start moving the timeline vertically
	   * @param {Event} event
	   * @private
	   */
	  Core.prototype._onPinch = function (event) {
	    this.touch.allowDragging = false;
	  };

	  /**
	   * Move the timeline vertically
	   * @param {Event} event
	   * @private
	   */
	  Core.prototype._onDrag = function (event) {
	    if (!event) return;
	    // refuse to drag when we where pinching to prevent the timeline make a jump
	    // when releasing the fingers in opposite order from the touch screen
	    if (!this.touch.allowDragging) return;

	    var delta = event.deltaY;

	    var oldScrollTop = this._getScrollTop();
	    var newScrollTop = this._setScrollTop(this.touch.initialScrollTop + delta);

	    if (this.options.verticalScroll) {
	      this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
	      this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
	    }

	    if (newScrollTop != oldScrollTop) {
	      this.emit("verticalDrag");
	    }
	  };

	  /**
	   * Apply a scrollTop
	   * @param {Number} scrollTop
	   * @returns {Number} scrollTop  Returns the applied scrollTop
	   * @private
	   */
	  Core.prototype._setScrollTop = function (scrollTop) {
	    this.props.scrollTop = scrollTop;
	    this._updateScrollTop();
	    return this.props.scrollTop;
	  };

	  /**
	   * Update the current scrollTop when the height of  the containers has been changed
	   * @returns {Number} scrollTop  Returns the applied scrollTop
	   * @private
	   */
	  Core.prototype._updateScrollTop = function () {
	    // recalculate the scrollTopMin
	    var scrollTopMin = Math.min(this.props.centerContainer.height - this.props.center.height, 0); // is negative or zero
	    if (scrollTopMin != this.props.scrollTopMin) {
	      // in case of bottom orientation, change the scrollTop such that the contents
	      // do not move relative to the time axis at the bottom
	      if (this.options.orientation.item != 'top') {
	        this.props.scrollTop += scrollTopMin - this.props.scrollTopMin;
	      }
	      this.props.scrollTopMin = scrollTopMin;
	    }

	    // limit the scrollTop to the feasible scroll range
	    if (this.props.scrollTop > 0) this.props.scrollTop = 0;
	    if (this.props.scrollTop < scrollTopMin) this.props.scrollTop = scrollTopMin;

	    return this.props.scrollTop;
	  };

	  /**
	   * Get the current scrollTop
	   * @returns {number} scrollTop
	   * @private
	   */
	  Core.prototype._getScrollTop = function () {
	    return this.props.scrollTop;
	  };

	  /**
	   * Load a configurator
	   * @return {Object}
	   * @private
	   */
	  Core.prototype._createConfigurator = function () {
	    throw new Error('Cannot invoke abstract method _createConfigurator');
	  };

	  module.exports = Core;

	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var Hammer = __webpack_require__(22);
	  var util = __webpack_require__(1);
	  var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);
	  var TimeStep = __webpack_require__(37);
	  var Component = __webpack_require__(33);
	  var Group = __webpack_require__(38);
	  var BackgroundGroup = __webpack_require__(42);
	  var BoxItem = __webpack_require__(43);
	  var PointItem = __webpack_require__(44);
	  var RangeItem = __webpack_require__(40);
	  var BackgroundItem = __webpack_require__(45);

	  var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items
	  var BACKGROUND = '__background__'; // reserved group id for background items without group

	  /**
	   * An ItemSet holds a set of items and ranges which can be displayed in a
	   * range. The width is determined by the parent of the ItemSet, and the height
	   * is determined by the size of the items.
	   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
	   * @param {Object} [options]      See ItemSet.setOptions for the available options.
	   * @constructor ItemSet
	   * @extends Component
	   */
	  function ItemSet(body, options) {
	    this.body = body;
	    this.defaultOptions = {
	      type: null, // 'box', 'point', 'range', 'background'
	      orientation: {
	        item: 'bottom' // item orientation: 'top' or 'bottom'
	      },
	      align: 'auto', // alignment of box items
	      stack: true,
	      groupOrderSwap: function groupOrderSwap(fromGroup, toGroup, groups) {
	        var targetOrder = toGroup.order;
	        toGroup.order = fromGroup.order;
	        fromGroup.order = targetOrder;
	      },
	      groupOrder: 'order',

	      selectable: true,
	      multiselect: false,
	      itemsAlwaysDraggable: false,

	      editable: {
	        updateTime: false,
	        updateGroup: false,
	        add: false,
	        remove: false
	      },

	      groupEditable: {
	        order: false,
	        add: false,
	        remove: false
	      },

	      snap: TimeStep.snap,

	      onAdd: function onAdd(item, callback) {
	        callback(item);
	      },
	      onUpdate: function onUpdate(item, callback) {
	        callback(item);
	      },
	      onMove: function onMove(item, callback) {
	        callback(item);
	      },
	      onRemove: function onRemove(item, callback) {
	        callback(item);
	      },
	      onMoving: function onMoving(item, callback) {
	        callback(item);
	      },
	      onAddGroup: function onAddGroup(item, callback) {
	        callback(item);
	      },
	      onMoveGroup: function onMoveGroup(item, callback) {
	        callback(item);
	      },
	      onRemoveGroup: function onRemoveGroup(item, callback) {
	        callback(item);
	      },

	      margin: {
	        item: {
	          horizontal: 10,
	          vertical: 10
	        },
	        axis: 20
	      },

	      tooltipOnItemUpdateTime: false
	    };

	    // options is shared by this ItemSet and all its items
	    this.options = util.extend({}, this.defaultOptions);
	    this.options.rtl = options.rtl;

	    // options for getting items from the DataSet with the correct type
	    this.itemOptions = {
	      type: { start: 'Date', end: 'Date' }
	    };

	    this.conversion = {
	      toScreen: body.util.toScreen,
	      toTime: body.util.toTime
	    };
	    this.dom = {};
	    this.props = {};
	    this.hammer = null;

	    var me = this;
	    this.itemsData = null; // DataSet
	    this.groupsData = null; // DataSet

	    // listeners for the DataSet of the items
	    this.itemListeners = {
	      'add': function add(event, params, senderId) {
	        me._onAdd(params.items);
	      },
	      'update': function update(event, params, senderId) {
	        me._onUpdate(params.items);
	      },
	      'remove': function remove(event, params, senderId) {
	        me._onRemove(params.items);
	      }
	    };

	    // listeners for the DataSet of the groups
	    this.groupListeners = {
	      'add': function add(event, params, senderId) {
	        me._onAddGroups(params.items);
	      },
	      'update': function update(event, params, senderId) {
	        me._onUpdateGroups(params.items);
	      },
	      'remove': function remove(event, params, senderId) {
	        me._onRemoveGroups(params.items);
	      }
	    };

	    this.items = {}; // object with an Item for every data item
	    this.groups = {}; // Group object for every group
	    this.groupIds = [];

	    this.selection = []; // list with the ids of all selected nodes
	    this.stackDirty = true; // if true, all items will be restacked on next redraw

	    this.touchParams = {}; // stores properties while dragging
	    this.groupTouchParams = {};
	    // create the HTML DOM

	    this._create();

	    this.setOptions(options);
	  }

	  ItemSet.prototype = new Component();

	  // available item types will be registered here
	  ItemSet.types = {
	    background: BackgroundItem,
	    box: BoxItem,
	    range: RangeItem,
	    point: PointItem
	  };

	  /**
	   * Create the HTML DOM for the ItemSet
	   */
	  ItemSet.prototype._create = function () {
	    var frame = document.createElement('div');
	    frame.className = 'vis-itemset';
	    frame['timeline-itemset'] = this;
	    this.dom.frame = frame;

	    // create background panel
	    var background = document.createElement('div');
	    background.className = 'vis-background';
	    frame.appendChild(background);
	    this.dom.background = background;

	    // create foreground panel
	    var foreground = document.createElement('div');
	    foreground.className = 'vis-foreground';
	    frame.appendChild(foreground);
	    this.dom.foreground = foreground;

	    // create axis panel
	    var axis = document.createElement('div');
	    axis.className = 'vis-axis';
	    this.dom.axis = axis;

	    // create labelset
	    var labelSet = document.createElement('div');
	    labelSet.className = 'vis-labelset';
	    this.dom.labelSet = labelSet;

	    // create ungrouped Group
	    this._updateUngrouped();

	    // create background Group
	    var backgroundGroup = new BackgroundGroup(BACKGROUND, null, this);
	    backgroundGroup.show();
	    this.groups[BACKGROUND] = backgroundGroup;

	    // attach event listeners
	    // Note: we bind to the centerContainer for the case where the height
	    //       of the center container is larger than of the ItemSet, so we
	    //       can click in the empty area to create a new item or deselect an item.
	    this.hammer = new Hammer(this.body.dom.centerContainer);

	    // drag items when selected
	    this.hammer.on('hammer.input', function (event) {
	      if (event.isFirst) {
	        this._onTouch(event);
	      }
	    }.bind(this));
	    this.hammer.on('panstart', this._onDragStart.bind(this));
	    this.hammer.on('panmove', this._onDrag.bind(this));
	    this.hammer.on('panend', this._onDragEnd.bind(this));
	    this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });

	    // single select (or unselect) when tapping an item
	    this.hammer.on('tap', this._onSelectItem.bind(this));

	    // multi select when holding mouse/touch, or on ctrl+click
	    this.hammer.on('press', this._onMultiSelectItem.bind(this));

	    // add item on doubletap
	    this.hammer.on('doubletap', this._onAddItem.bind(this));

	    if (this.options.rtl) {
	      this.groupHammer = new Hammer(this.body.dom.rightContainer);
	    } else {
	      this.groupHammer = new Hammer(this.body.dom.leftContainer);
	    }

	    this.groupHammer.on('panstart', this._onGroupDragStart.bind(this));
	    this.groupHammer.on('panmove', this._onGroupDrag.bind(this));
	    this.groupHammer.on('panend', this._onGroupDragEnd.bind(this));
	    this.groupHammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });

	    this.body.dom.centerContainer.addEventListener('mouseover', this._onMouseOver.bind(this));
	    this.body.dom.centerContainer.addEventListener('mouseout', this._onMouseOut.bind(this));

	    // attach to the DOM
	    this.show();
	  };

	  /**
	   * Set options for the ItemSet. Existing options will be extended/overwritten.
	   * @param {Object} [options] The following options are available:
	   *                           {String} type
	   *                              Default type for the items. Choose from 'box'
	   *                              (default), 'point', 'range', or 'background'.
	   *                              The default style can be overwritten by
	   *                              individual items.
	   *                           {String} align
	   *                              Alignment for the items, only applicable for
	   *                              BoxItem. Choose 'center' (default), 'left', or
	   *                              'right'.
	   *                           {String} orientation.item
	   *                              Orientation of the item set. Choose 'top' or
	   *                              'bottom' (default).
	   *                           {Function} groupOrder
	   *                              A sorting function for ordering groups
	   *                           {Boolean} stack
	   *                              If true (default), items will be stacked on
	   *                              top of each other.
	   *                           {Number} margin.axis
	   *                              Margin between the axis and the items in pixels.
	   *                              Default is 20.
	   *                           {Number} margin.item.horizontal
	   *                              Horizontal margin between items in pixels.
	   *                              Default is 10.
	   *                           {Number} margin.item.vertical
	   *                              Vertical Margin between items in pixels.
	   *                              Default is 10.
	   *                           {Number} margin.item
	   *                              Margin between items in pixels in both horizontal
	   *                              and vertical direction. Default is 10.
	   *                           {Number} margin
	   *                              Set margin for both axis and items in pixels.
	   *                           {Boolean} selectable
	   *                              If true (default), items can be selected.
	   *                           {Boolean} multiselect
	   *                              If true, multiple items can be selected.
	   *                              False by default.
	   *                           {Boolean} editable
	   *                              Set all editable options to true or false
	   *                           {Boolean} editable.updateTime
	   *                              Allow dragging an item to an other moment in time
	   *                           {Boolean} editable.updateGroup
	   *                              Allow dragging an item to an other group
	   *                           {Boolean} editable.add
	   *                              Allow creating new items on double tap
	   *                           {Boolean} editable.remove
	   *                              Allow removing items by clicking the delete button
	   *                              top right of a selected item.
	   *                           {Function(item: Item, callback: Function)} onAdd
	   *                              Callback function triggered when an item is about to be added:
	   *                              when the user double taps an empty space in the Timeline.
	   *                           {Function(item: Item, callback: Function)} onUpdate
	   *                              Callback function fired when an item is about to be updated.
	   *                              This function typically has to show a dialog where the user
	   *                              change the item. If not implemented, nothing happens.
	   *                           {Function(item: Item, callback: Function)} onMove
	   *                              Fired when an item has been moved. If not implemented,
	   *                              the move action will be accepted.
	   *                           {Function(item: Item, callback: Function)} onRemove
	   *                              Fired when an item is about to be deleted.
	   *                              If not implemented, the item will be always removed.
	   */
	  ItemSet.prototype.setOptions = function (options) {
	    if (options) {
	      // copy all options that we know
	      var fields = ['type', 'rtl', 'align', 'order', 'stack', 'selectable', 'multiselect', 'itemsAlwaysDraggable', 'multiselectPerGroup', 'groupOrder', 'dataAttributes', 'template', 'groupTemplate', 'hide', 'snap', 'groupOrderSwap', 'tooltipOnItemUpdateTime'];
	      util.selectiveExtend(fields, this.options, options);

	      if ('orientation' in options) {
	        if (typeof options.orientation === 'string') {
	          this.options.orientation.item = options.orientation === 'top' ? 'top' : 'bottom';
	        } else if (_typeof(options.orientation) === 'object' && 'item' in options.orientation) {
	          this.options.orientation.item = options.orientation.item;
	        }
	      }

	      if ('margin' in options) {
	        if (typeof options.margin === 'number') {
	          this.options.margin.axis = options.margin;
	          this.options.margin.item.horizontal = options.margin;
	          this.options.margin.item.vertical = options.margin;
	        } else if (_typeof(options.margin) === 'object') {
	          util.selectiveExtend(['axis'], this.options.margin, options.margin);
	          if ('item' in options.margin) {
	            if (typeof options.margin.item === 'number') {
	              this.options.margin.item.horizontal = options.margin.item;
	              this.options.margin.item.vertical = options.margin.item;
	            } else if (_typeof(options.margin.item) === 'object') {
	              util.selectiveExtend(['horizontal', 'vertical'], this.options.margin.item, options.margin.item);
	            }
	          }
	        }
	      }

	      if ('editable' in options) {
	        if (typeof options.editable === 'boolean') {
	          this.options.editable.updateTime = options.editable;
	          this.options.editable.updateGroup = options.editable;
	          this.options.editable.add = options.editable;
	          this.options.editable.remove = options.editable;
	        } else if (_typeof(options.editable) === 'object') {
	          util.selectiveExtend(['updateTime', 'updateGroup', 'add', 'remove'], this.options.editable, options.editable);
	        }
	      }

	      if ('groupEditable' in options) {
	        if (typeof options.groupEditable === 'boolean') {
	          this.options.groupEditable.order = options.groupEditable;
	          this.options.groupEditable.add = options.groupEditable;
	          this.options.groupEditable.remove = options.groupEditable;
	        } else if (_typeof(options.groupEditable) === 'object') {
	          util.selectiveExtend(['order', 'add', 'remove'], this.options.groupEditable, options.groupEditable);
	        }
	      }

	      // callback functions
	      var addCallback = function (name) {
	        var fn = options[name];
	        if (fn) {
	          if (!(fn instanceof Function)) {
	            throw new Error('option ' + name + ' must be a function ' + name + '(item, callback)');
	          }
	          this.options[name] = fn;
	        }
	      }.bind(this);
	      ['onAdd', 'onUpdate', 'onRemove', 'onMove', 'onMoving', 'onAddGroup', 'onMoveGroup', 'onRemoveGroup'].forEach(addCallback);

	      // force the itemSet to refresh: options like orientation and margins may be changed
	      this.markDirty();
	    }
	  };

	  /**
	   * Mark the ItemSet dirty so it will refresh everything with next redraw.
	   * Optionally, all items can be marked as dirty and be refreshed.
	   * @param {{refreshItems: boolean}} [options]
	   */
	  ItemSet.prototype.markDirty = function (options) {
	    this.groupIds = [];
	    this.stackDirty = true;

	    if (options && options.refreshItems) {
	      util.forEach(this.items, function (item) {
	        item.dirty = true;
	        if (item.displayed) item.redraw();
	      });
	    }
	  };

	  /**
	   * Destroy the ItemSet
	   */
	  ItemSet.prototype.destroy = function () {
	    this.hide();
	    this.setItems(null);
	    this.setGroups(null);

	    this.hammer = null;

	    this.body = null;
	    this.conversion = null;
	  };

	  /**
	   * Hide the component from the DOM
	   */
	  ItemSet.prototype.hide = function () {
	    // remove the frame containing the items
	    if (this.dom.frame.parentNode) {
	      this.dom.frame.parentNode.removeChild(this.dom.frame);
	    }

	    // remove the axis with dots
	    if (this.dom.axis.parentNode) {
	      this.dom.axis.parentNode.removeChild(this.dom.axis);
	    }

	    // remove the labelset containing all group labels
	    if (this.dom.labelSet.parentNode) {
	      this.dom.labelSet.parentNode.removeChild(this.dom.labelSet);
	    }
	  };

	  /**
	   * Show the component in the DOM (when not already visible).
	   * @return {Boolean} changed
	   */
	  ItemSet.prototype.show = function () {
	    // show frame containing the items
	    if (!this.dom.frame.parentNode) {
	      this.body.dom.center.appendChild(this.dom.frame);
	    }

	    // show axis with dots
	    if (!this.dom.axis.parentNode) {
	      this.body.dom.backgroundVertical.appendChild(this.dom.axis);
	    }

	    // show labelset containing labels
	    if (!this.dom.labelSet.parentNode) {
	      if (this.options.rtl) {
	        this.body.dom.right.appendChild(this.dom.labelSet);
	      } else {
	        this.body.dom.left.appendChild(this.dom.labelSet);
	      }
	    }
	  };

	  /**
	   * Set selected items by their id. Replaces the current selection
	   * Unknown id's are silently ignored.
	   * @param {string[] | string} [ids] An array with zero or more id's of the items to be
	   *                                  selected, or a single item id. If ids is undefined
	   *                                  or an empty array, all items will be unselected.
	   */
	  ItemSet.prototype.setSelection = function (ids) {
	    var i, ii, id, item;

	    if (ids == undefined) ids = [];
	    if (!Array.isArray(ids)) ids = [ids];

	    // unselect currently selected items
	    for (i = 0, ii = this.selection.length; i < ii; i++) {
	      id = this.selection[i];
	      item = this.items[id];
	      if (item) item.unselect();
	    }

	    // select items
	    this.selection = [];
	    for (i = 0, ii = ids.length; i < ii; i++) {
	      id = ids[i];
	      item = this.items[id];
	      if (item) {
	        this.selection.push(id);
	        item.select();
	      }
	    }
	  };

	  /**
	   * Get the selected items by their id
	   * @return {Array} ids  The ids of the selected items
	   */
	  ItemSet.prototype.getSelection = function () {
	    return this.selection.concat([]);
	  };

	  /**
	   * Get the id's of the currently visible items.
	   * @returns {Array} The ids of the visible items
	   */
	  ItemSet.prototype.getVisibleItems = function () {
	    var range = this.body.range.getRange();

	    if (this.options.rtl) {
	      var right = this.body.util.toScreen(range.start);
	      var left = this.body.util.toScreen(range.end);
	    } else {
	      var left = this.body.util.toScreen(range.start);
	      var right = this.body.util.toScreen(range.end);
	    }

	    var ids = [];
	    for (var groupId in this.groups) {
	      if (this.groups.hasOwnProperty(groupId)) {
	        var group = this.groups[groupId];
	        var rawVisibleItems = group.visibleItems;

	        // filter the "raw" set with visibleItems into a set which is really
	        // visible by pixels
	        for (var i = 0; i < rawVisibleItems.length; i++) {
	          var item = rawVisibleItems[i];
	          // TODO: also check whether visible vertically
	          if (this.options.rtl) {
	            if (item.right < left && item.right + item.width > right) {
	              ids.push(item.id);
	            }
	          } else {
	            if (item.left < right && item.left + item.width > left) {
	              ids.push(item.id);
	            }
	          }
	        }
	      }
	    }

	    return ids;
	  };

	  /**
	   * Deselect a selected item
	   * @param {String | Number} id
	   * @private
	   */
	  ItemSet.prototype._deselect = function (id) {
	    var selection = this.selection;
	    for (var i = 0, ii = selection.length; i < ii; i++) {
	      if (selection[i] == id) {
	        // non-strict comparison!
	        selection.splice(i, 1);
	        break;
	      }
	    }
	  };

	  /**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */
	  ItemSet.prototype.redraw = function () {
	    var margin = this.options.margin,
	        range = this.body.range,
	        asSize = util.option.asSize,
	        options = this.options,
	        orientation = options.orientation.item,
	        resized = false,
	        frame = this.dom.frame;

	    // recalculate absolute position (before redrawing groups)
	    this.props.top = this.body.domProps.top.height + this.body.domProps.border.top;

	    if (this.options.rtl) {
	      this.props.right = this.body.domProps.right.width + this.body.domProps.border.right;
	    } else {
	      this.props.left = this.body.domProps.left.width + this.body.domProps.border.left;
	    }

	    // update class name
	    frame.className = 'vis-itemset';

	    // reorder the groups (if needed)
	    resized = this._orderGroups() || resized;

	    // check whether zoomed (in that case we need to re-stack everything)
	    // TODO: would be nicer to get this as a trigger from Range
	    var visibleInterval = range.end - range.start;
	    var zoomed = visibleInterval != this.lastVisibleInterval || this.props.width != this.props.lastWidth;
	    if (zoomed) this.stackDirty = true;
	    this.lastVisibleInterval = visibleInterval;
	    this.props.lastWidth = this.props.width;

	    var restack = this.stackDirty;
	    var firstGroup = this._firstGroup();
	    var firstMargin = {
	      item: margin.item,
	      axis: margin.axis
	    };
	    var nonFirstMargin = {
	      item: margin.item,
	      axis: margin.item.vertical / 2
	    };
	    var height = 0;
	    var minHeight = margin.axis + margin.item.vertical;

	    // redraw the background group
	    this.groups[BACKGROUND].redraw(range, nonFirstMargin, restack);

	    // redraw all regular groups
	    util.forEach(this.groups, function (group) {
	      var groupMargin = group == firstGroup ? firstMargin : nonFirstMargin;
	      var groupResized = group.redraw(range, groupMargin, restack);
	      resized = groupResized || resized;
	      height += group.height;
	    });
	    height = Math.max(height, minHeight);
	    this.stackDirty = false;

	    // update frame height
	    frame.style.height = asSize(height);

	    // calculate actual size
	    this.props.width = frame.offsetWidth;
	    this.props.height = height;

	    // reposition axis
	    this.dom.axis.style.top = asSize(orientation == 'top' ? this.body.domProps.top.height + this.body.domProps.border.top : this.body.domProps.top.height + this.body.domProps.centerContainer.height);
	    if (this.options.rtl) {
	      this.dom.axis.style.right = '0';
	    } else {
	      this.dom.axis.style.left = '0';
	    }

	    // check if this component is resized
	    resized = this._isResized() || resized;

	    return resized;
	  };

	  /**
	   * Get the first group, aligned with the axis
	   * @return {Group | null} firstGroup
	   * @private
	   */
	  ItemSet.prototype._firstGroup = function () {
	    var firstGroupIndex = this.options.orientation.item == 'top' ? 0 : this.groupIds.length - 1;
	    var firstGroupId = this.groupIds[firstGroupIndex];
	    var firstGroup = this.groups[firstGroupId] || this.groups[UNGROUPED];

	    return firstGroup || null;
	  };

	  /**
	   * Create or delete the group holding all ungrouped items. This group is used when
	   * there are no groups specified.
	   * @protected
	   */
	  ItemSet.prototype._updateUngrouped = function () {
	    var ungrouped = this.groups[UNGROUPED];
	    var background = this.groups[BACKGROUND];
	    var item, itemId;

	    if (this.groupsData) {
	      // remove the group holding all ungrouped items
	      if (ungrouped) {
	        ungrouped.hide();
	        delete this.groups[UNGROUPED];

	        for (itemId in this.items) {
	          if (this.items.hasOwnProperty(itemId)) {
	            item = this.items[itemId];
	            item.parent && item.parent.remove(item);
	            var groupId = this._getGroupId(item.data);
	            var group = this.groups[groupId];
	            group && group.add(item) || item.hide();
	          }
	        }
	      }
	    } else {
	      // create a group holding all (unfiltered) items
	      if (!ungrouped) {
	        var id = null;
	        var data = null;
	        ungrouped = new Group(id, data, this);
	        this.groups[UNGROUPED] = ungrouped;

	        for (itemId in this.items) {
	          if (this.items.hasOwnProperty(itemId)) {
	            item = this.items[itemId];
	            ungrouped.add(item);
	          }
	        }

	        ungrouped.show();
	      }
	    }
	  };

	  /**
	   * Get the element for the labelset
	   * @return {HTMLElement} labelSet
	   */
	  ItemSet.prototype.getLabelSet = function () {
	    return this.dom.labelSet;
	  };

	  /**
	   * Set items
	   * @param {vis.DataSet | null} items
	   */
	  ItemSet.prototype.setItems = function (items) {
	    var me = this,
	        ids,
	        oldItemsData = this.itemsData;

	    // replace the dataset
	    if (!items) {
	      this.itemsData = null;
	    } else if (items instanceof DataSet || items instanceof DataView) {
	      this.itemsData = items;
	    } else {
	      throw new TypeError('Data must be an instance of DataSet or DataView');
	    }

	    if (oldItemsData) {
	      // unsubscribe from old dataset
	      util.forEach(this.itemListeners, function (callback, event) {
	        oldItemsData.off(event, callback);
	      });

	      // remove all drawn items
	      ids = oldItemsData.getIds();
	      this._onRemove(ids);
	    }

	    if (this.itemsData) {
	      // subscribe to new dataset
	      var id = this.id;
	      util.forEach(this.itemListeners, function (callback, event) {
	        me.itemsData.on(event, callback, id);
	      });

	      // add all new items
	      ids = this.itemsData.getIds();
	      this._onAdd(ids);

	      // update the group holding all ungrouped items
	      this._updateUngrouped();
	    }

	    this.body.emitter.emit('_change', { queue: true });
	  };

	  /**
	   * Get the current items
	   * @returns {vis.DataSet | null}
	   */
	  ItemSet.prototype.getItems = function () {
	    return this.itemsData;
	  };

	  /**
	   * Set groups
	   * @param {vis.DataSet} groups
	   */
	  ItemSet.prototype.setGroups = function (groups) {
	    var me = this,
	        ids;

	    // unsubscribe from current dataset
	    if (this.groupsData) {
	      util.forEach(this.groupListeners, function (callback, event) {
	        me.groupsData.off(event, callback);
	      });

	      // remove all drawn groups
	      ids = this.groupsData.getIds();
	      this.groupsData = null;
	      this._onRemoveGroups(ids); // note: this will cause a redraw
	    }

	    // replace the dataset
	    if (!groups) {
	      this.groupsData = null;
	    } else if (groups instanceof DataSet || groups instanceof DataView) {
	      this.groupsData = groups;
	    } else {
	      throw new TypeError('Data must be an instance of DataSet or DataView');
	    }

	    if (this.groupsData) {
	      // subscribe to new dataset
	      var id = this.id;
	      util.forEach(this.groupListeners, function (callback, event) {
	        me.groupsData.on(event, callback, id);
	      });

	      // draw all ms
	      ids = this.groupsData.getIds();
	      this._onAddGroups(ids);
	    }

	    // update the group holding all ungrouped items
	    this._updateUngrouped();

	    // update the order of all items in each group
	    this._order();

	    this.body.emitter.emit('_change', { queue: true });
	  };

	  /**
	   * Get the current groups
	   * @returns {vis.DataSet | null} groups
	   */
	  ItemSet.prototype.getGroups = function () {
	    return this.groupsData;
	  };

	  /**
	   * Remove an item by its id
	   * @param {String | Number} id
	   */
	  ItemSet.prototype.removeItem = function (id) {
	    var item = this.itemsData.get(id),
	        dataset = this.itemsData.getDataSet();

	    if (item) {
	      // confirm deletion
	      this.options.onRemove(item, function (item) {
	        if (item) {
	          // remove by id here, it is possible that an item has no id defined
	          // itself, so better not delete by the item itself
	          dataset.remove(id);
	        }
	      });
	    }
	  };

	  /**
	   * Get the time of an item based on it's data and options.type
	   * @param {Object} itemData
	   * @returns {string} Returns the type
	   * @private
	   */
	  ItemSet.prototype._getType = function (itemData) {
	    return itemData.type || this.options.type || (itemData.end ? 'range' : 'box');
	  };

	  /**
	   * Get the group id for an item
	   * @param {Object} itemData
	   * @returns {string} Returns the groupId
	   * @private
	   */
	  ItemSet.prototype._getGroupId = function (itemData) {
	    var type = this._getType(itemData);
	    if (type == 'background' && itemData.group == undefined) {
	      return BACKGROUND;
	    } else {
	      return this.groupsData ? itemData.group : UNGROUPED;
	    }
	  };

	  /**
	   * Handle updated items
	   * @param {Number[]} ids
	   * @protected
	   */
	  ItemSet.prototype._onUpdate = function (ids) {
	    var me = this;

	    ids.forEach(function (id) {
	      var itemData = me.itemsData.get(id, me.itemOptions);
	      var item = me.items[id];
	      var type = itemData ? me._getType(itemData) : null;

	      var constructor = ItemSet.types[type];
	      var selected;

	      if (item) {
	        // update item
	        if (!constructor || !(item instanceof constructor)) {
	          // item type has changed, delete the item and recreate it
	          selected = item.selected; // preserve selection of this item
	          me._removeItem(item);
	          item = null;
	        } else {
	          me._updateItem(item, itemData);
	        }
	      }

	      if (!item && itemData) {
	        // create item
	        if (constructor) {
	          item = new constructor(itemData, me.conversion, me.options);
	          item.id = id; // TODO: not so nice setting id afterwards
	          me._addItem(item);
	          if (selected) {
	            this.selection.push(id);
	            item.select();
	          }
	        } else if (type == 'rangeoverflow') {
	          // TODO: deprecated since version 2.1.0 (or 3.0.0?). cleanup some day
	          throw new TypeError('Item type "rangeoverflow" is deprecated. Use css styling instead: ' + '.vis-item.vis-range .vis-item-content {overflow: visible;}');
	        } else {
	          throw new TypeError('Unknown item type "' + type + '"');
	        }
	      }
	    }.bind(this));

	    this._order();
	    this.stackDirty = true; // force re-stacking of all items next redraw
	    this.body.emitter.emit('_change', { queue: true });
	  };

	  /**
	   * Handle added items
	   * @param {Number[]} ids
	   * @protected
	   */
	  ItemSet.prototype._onAdd = ItemSet.prototype._onUpdate;

	  /**
	   * Handle removed items
	   * @param {Number[]} ids
	   * @protected
	   */
	  ItemSet.prototype._onRemove = function (ids) {
	    var count = 0;
	    var me = this;
	    ids.forEach(function (id) {
	      var item = me.items[id];
	      if (item) {
	        count++;
	        me._removeItem(item);
	      }
	    });

	    if (count) {
	      // update order
	      this._order();
	      this.stackDirty = true; // force re-stacking of all items next redraw
	      this.body.emitter.emit('_change', { queue: true });
	    }
	  };

	  /**
	   * Update the order of item in all groups
	   * @private
	   */
	  ItemSet.prototype._order = function () {
	    // reorder the items in all groups
	    // TODO: optimization: only reorder groups affected by the changed items
	    util.forEach(this.groups, function (group) {
	      group.order();
	    });
	  };

	  /**
	   * Handle updated groups
	   * @param {Number[]} ids
	   * @private
	   */
	  ItemSet.prototype._onUpdateGroups = function (ids) {
	    this._onAddGroups(ids);
	  };

	  /**
	   * Handle changed groups (added or updated)
	   * @param {Number[]} ids
	   * @private
	   */
	  ItemSet.prototype._onAddGroups = function (ids) {
	    var me = this;

	    ids.forEach(function (id) {
	      var groupData = me.groupsData.get(id);
	      var group = me.groups[id];

	      if (!group) {
	        // check for reserved ids
	        if (id == UNGROUPED || id == BACKGROUND) {
	          throw new Error('Illegal group id. ' + id + ' is a reserved id.');
	        }

	        var groupOptions = Object.create(me.options);
	        util.extend(groupOptions, {
	          height: null
	        });

	        group = new Group(id, groupData, me);
	        me.groups[id] = group;

	        // add items with this groupId to the new group
	        for (var itemId in me.items) {
	          if (me.items.hasOwnProperty(itemId)) {
	            var item = me.items[itemId];
	            if (item.data.group == id) {
	              group.add(item);
	            }
	          }
	        }

	        group.order();
	        group.show();
	      } else {
	        // update group
	        group.setData(groupData);
	      }
	    });

	    this.body.emitter.emit('_change', { queue: true });
	  };

	  /**
	   * Handle removed groups
	   * @param {Number[]} ids
	   * @private
	   */
	  ItemSet.prototype._onRemoveGroups = function (ids) {
	    var groups = this.groups;
	    ids.forEach(function (id) {
	      var group = groups[id];

	      if (group) {
	        group.hide();
	        delete groups[id];
	      }
	    });

	    this.markDirty();

	    this.body.emitter.emit('_change', { queue: true });
	  };

	  /**
	   * Reorder the groups if needed
	   * @return {boolean} changed
	   * @private
	   */
	  ItemSet.prototype._orderGroups = function () {
	    if (this.groupsData) {
	      // reorder the groups
	      var groupIds = this.groupsData.getIds({
	        order: this.options.groupOrder
	      });

	      var changed = !util.equalArray(groupIds, this.groupIds);
	      if (changed) {
	        // hide all groups, removes them from the DOM
	        var groups = this.groups;
	        groupIds.forEach(function (groupId) {
	          groups[groupId].hide();
	        });

	        // show the groups again, attach them to the DOM in correct order
	        groupIds.forEach(function (groupId) {
	          groups[groupId].show();
	        });

	        this.groupIds = groupIds;
	      }

	      return changed;
	    } else {
	      return false;
	    }
	  };

	  /**
	   * Add a new item
	   * @param {Item} item
	   * @private
	   */
	  ItemSet.prototype._addItem = function (item) {
	    this.items[item.id] = item;

	    // add to group
	    var groupId = this._getGroupId(item.data);
	    var group = this.groups[groupId];
	    if (group) group.add(item);
	  };

	  /**
	   * Update an existing item
	   * @param {Item} item
	   * @param {Object} itemData
	   * @private
	   */
	  ItemSet.prototype._updateItem = function (item, itemData) {
	    var oldGroupId = item.data.group;
	    var oldSubGroupId = item.data.subgroup;

	    // update the items data (will redraw the item when displayed)
	    item.setData(itemData);

	    // update group
	    if (oldGroupId != item.data.group || oldSubGroupId != item.data.subgroup) {
	      var oldGroup = this.groups[oldGroupId];
	      if (oldGroup) oldGroup.remove(item);

	      var groupId = this._getGroupId(item.data);
	      var group = this.groups[groupId];
	      if (group) group.add(item);
	    }
	  };

	  /**
	   * Delete an item from the ItemSet: remove it from the DOM, from the map
	   * with items, and from the map with visible items, and from the selection
	   * @param {Item} item
	   * @private
	   */
	  ItemSet.prototype._removeItem = function (item) {
	    // remove from DOM
	    item.hide();

	    // remove from items
	    delete this.items[item.id];

	    // remove from selection
	    var index = this.selection.indexOf(item.id);
	    if (index != -1) this.selection.splice(index, 1);

	    // remove from group
	    item.parent && item.parent.remove(item);
	  };

	  /**
	   * Create an array containing all items being a range (having an end date)
	   * @param array
	   * @returns {Array}
	   * @private
	   */
	  ItemSet.prototype._constructByEndArray = function (array) {
	    var endArray = [];

	    for (var i = 0; i < array.length; i++) {
	      if (array[i] instanceof RangeItem) {
	        endArray.push(array[i]);
	      }
	    }
	    return endArray;
	  };

	  /**
	   * Register the clicked item on touch, before dragStart is initiated.
	   *
	   * dragStart is initiated from a mousemove event, AFTER the mouse/touch is
	   * already moving. Therefore, the mouse/touch can sometimes be above an other
	   * DOM element than the item itself.
	   *
	   * @param {Event} event
	   * @private
	   */
	  ItemSet.prototype._onTouch = function (event) {
	    // store the touched item, used in _onDragStart
	    this.touchParams.item = this.itemFromTarget(event);
	    this.touchParams.dragLeftItem = event.target.dragLeftItem || false;
	    this.touchParams.dragRightItem = event.target.dragRightItem || false;
	    this.touchParams.itemProps = null;
	  };

	  /**
	   * Given an group id, returns the index it has.
	   *
	   * @param {Number} groupID
	   * @private
	   */
	  ItemSet.prototype._getGroupIndex = function (groupId) {
	    for (var i = 0; i < this.groupIds.length; i++) {
	      if (groupId == this.groupIds[i]) return i;
	    }
	  };

	  /**
	   * Start dragging the selected events
	   * @param {Event} event
	   * @private
	   */
	  ItemSet.prototype._onDragStart = function (event) {
	    var item = this.touchParams.item || null;
	    var me = this;
	    var props;

	    if (item && (item.selected || this.options.itemsAlwaysDraggable)) {

	      if (!this.options.editable.updateTime && !this.options.editable.updateGroup && !item.editable) {
	        return;
	      }

	      // override options.editable
	      if (item.editable === false) {
	        return;
	      }

	      var dragLeftItem = this.touchParams.dragLeftItem;
	      var dragRightItem = this.touchParams.dragRightItem;
	      this.touchParams.itemIsDragging = true;

	      if (dragLeftItem) {
	        props = {
	          item: dragLeftItem,
	          initialX: event.center.x,
	          dragLeft: true,
	          data: this._cloneItemData(item.data)
	        };

	        this.touchParams.itemProps = [props];
	      } else if (dragRightItem) {
	        props = {
	          item: dragRightItem,
	          initialX: event.center.x,
	          dragRight: true,
	          data: this._cloneItemData(item.data)
	        };

	        this.touchParams.itemProps = [props];
	      } else {
	        this.touchParams.selectedItem = item;

	        var baseGroupIndex = this._getGroupIndex(item.data.group);

	        var itemsToDrag = this.options.itemsAlwaysDraggable && !item.selected ? [item.id] : this.getSelection();

	        this.touchParams.itemProps = itemsToDrag.map(function (id) {
	          var item = me.items[id];
	          var groupIndex = me._getGroupIndex(item.data.group);
	          return {
	            item: item,
	            initialX: event.center.x,
	            groupOffset: baseGroupIndex - groupIndex,
	            data: this._cloneItemData(item.data)
	          };
	        }.bind(this));
	      }

	      event.stopPropagation();
	    } else if (this.options.editable.add && (event.srcEvent.ctrlKey || event.srcEvent.metaKey)) {
	      // create a new range item when dragging with ctrl key down
	      this._onDragStartAddItem(event);
	    }
	  };

	  /**
	   * Start creating a new range item by dragging.
	   * @param {Event} event
	   * @private
	   */
	  ItemSet.prototype._onDragStartAddItem = function (event) {
	    var snap = this.options.snap || null;

	    if (this.options.rtl) {
	      var xAbs = util.getAbsoluteRight(this.dom.frame);
	      var x = xAbs - event.center.x + 10; // plus 10 to compensate for the drag starting as soon as you've moved 10px
	    } else {
	      var xAbs = util.getAbsoluteLeft(this.dom.frame);
	      var x = event.center.x - xAbs - 10; // minus 10 to compensate for the drag starting as soon as you've moved 10px
	    }

	    var time = this.body.util.toTime(x);
	    var scale = this.body.util.getScale();
	    var step = this.body.util.getStep();
	    var start = snap ? snap(time, scale, step) : time;
	    var end = start;

	    var itemData = {
	      type: 'range',
	      start: start,
	      end: end,
	      content: 'new item'
	    };

	    var id = util.randomUUID();
	    itemData[this.itemsData._fieldId] = id;

	    var group = this.groupFromTarget(event);
	    if (group) {
	      itemData.group = group.groupId;
	    }
	    var newItem = new RangeItem(itemData, this.conversion, this.options);
	    newItem.id = id; // TODO: not so nice setting id afterwards
	    newItem.data = this._cloneItemData(itemData);
	    this._addItem(newItem);

	    var props = {
	      item: newItem,
	      initialX: event.center.x,
	      data: newItem.data
	    };

	    if (this.options.rtl) {
	      props.dragLeft = true;
	    } else {
	      props.dragRight = true;
	    }
	    this.touchParams.itemProps = [props];

	    event.stopPropagation();
	  };

	  /**
	   * Drag selected items
	   * @param {Event} event
	   * @private
	   */
	  ItemSet.prototype._onDrag = function (event) {
	    if (this.touchParams.itemProps) {
	      event.stopPropagation();

	      var me = this;
	      var snap = this.options.snap || null;

	      if (this.options.rtl) {
	        var xOffset = this.body.dom.root.offsetLeft + this.body.domProps.right.width;
	      } else {
	        var xOffset = this.body.dom.root.offsetLeft + this.body.domProps.left.width;
	      }

	      var scale = this.body.util.getScale();
	      var step = this.body.util.getStep();

	      //only calculate the new group for the item that's actually dragged
	      var selectedItem = this.touchParams.selectedItem;
	      var updateGroupAllowed = me.options.editable.updateGroup;
	      var newGroupBase = null;
	      if (updateGroupAllowed && selectedItem) {
	        if (selectedItem.data.group != undefined) {
	          // drag from one group to another
	          var group = me.groupFromTarget(event);
	          if (group) {
	            //we know the offset for all items, so the new group for all items
	            //will be relative to this one.
	            newGroupBase = this._getGroupIndex(group.groupId);
	          }
	        }
	      }

	      // move
	      this.touchParams.itemProps.forEach(function (props) {
	        var current = me.body.util.toTime(event.center.x - xOffset);
	        var initial = me.body.util.toTime(props.initialX - xOffset);

	        if (this.options.rtl) {
	          var offset = -(current - initial); // ms
	        } else {
	          var offset = current - initial; // ms
	        }

	        var itemData = this._cloneItemData(props.item.data); // clone the data
	        if (props.item.editable === false) {
	          return;
	        }

	        var updateTimeAllowed = me.options.editable.updateTime || props.item.editable === true;
	        if (updateTimeAllowed) {
	          if (props.dragLeft) {
	            // drag left side of a range item
	            if (this.options.rtl) {
	              if (itemData.end != undefined) {
	                var initialEnd = util.convert(props.data.end, 'Date');
	                var end = new Date(initialEnd.valueOf() + offset);
	                // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	                itemData.end = snap ? snap(end, scale, step) : end;
	              }
	            } else {
	              if (itemData.start != undefined) {
	                var initialStart = util.convert(props.data.start, 'Date');
	                var start = new Date(initialStart.valueOf() + offset);
	                // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	                itemData.start = snap ? snap(start, scale, step) : start;
	              }
	            }
	          } else if (props.dragRight) {
	            // drag right side of a range item
	            if (this.options.rtl) {
	              if (itemData.start != undefined) {
	                var initialStart = util.convert(props.data.start, 'Date');
	                var start = new Date(initialStart.valueOf() + offset);
	                // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	                itemData.start = snap ? snap(start, scale, step) : start;
	              }
	            } else {
	              if (itemData.end != undefined) {
	                var initialEnd = util.convert(props.data.end, 'Date');
	                var end = new Date(initialEnd.valueOf() + offset);
	                // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	                itemData.end = snap ? snap(end, scale, step) : end;
	              }
	            }
	          } else {
	            // drag both start and end
	            if (itemData.start != undefined) {

	              var initialStart = util.convert(props.data.start, 'Date').valueOf();
	              var start = new Date(initialStart + offset);

	              if (itemData.end != undefined) {
	                var initialEnd = util.convert(props.data.end, 'Date');
	                var duration = initialEnd.valueOf() - initialStart.valueOf();

	                // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	                itemData.start = snap ? snap(start, scale, step) : start;
	                itemData.end = new Date(itemData.start.valueOf() + duration);
	              } else {
	                // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	                itemData.start = snap ? snap(start, scale, step) : start;
	              }
	            }
	          }
	        }

	        var updateGroupAllowed = me.options.editable.updateGroup || props.item.editable === true;

	        if (updateGroupAllowed && !props.dragLeft && !props.dragRight && newGroupBase != null) {
	          if (itemData.group != undefined) {
	            var newOffset = newGroupBase - props.groupOffset;

	            //make sure we stay in bounds
	            newOffset = Math.max(0, newOffset);
	            newOffset = Math.min(me.groupIds.length - 1, newOffset);

	            itemData.group = me.groupIds[newOffset];
	          }
	        }

	        // confirm moving the item
	        itemData = this._cloneItemData(itemData); // convert start and end to the correct type
	        me.options.onMoving(itemData, function (itemData) {
	          if (itemData) {
	            props.item.setData(this._cloneItemData(itemData, 'Date'));
	          }
	        }.bind(this));
	      }.bind(this));

	      this.stackDirty = true; // force re-stacking of all items next redraw
	      this.body.emitter.emit('_change');
	    }
	  };

	  /**
	   * Move an item to another group
	   * @param {Item} item
	   * @param {String | Number} groupId
	   * @private
	   */
	  ItemSet.prototype._moveToGroup = function (item, groupId) {
	    var group = this.groups[groupId];
	    if (group && group.groupId != item.data.group) {
	      var oldGroup = item.parent;
	      oldGroup.remove(item);
	      oldGroup.order();
	      group.add(item);
	      group.order();

	      item.data.group = group.groupId;
	    }
	  };

	  /**
	   * End of dragging selected items
	   * @param {Event} event
	   * @private
	   */
	  ItemSet.prototype._onDragEnd = function (event) {
	    if (this.touchParams.itemProps) {
	      event.stopPropagation();

	      var me = this;
	      var dataset = this.itemsData.getDataSet();
	      var itemProps = this.touchParams.itemProps;
	      this.touchParams.itemProps = null;
	      this.touchParams.itemIsDragging = false;

	      itemProps.forEach(function (props) {
	        var id = props.item.id;
	        var exists = me.itemsData.get(id, me.itemOptions) != null;

	        if (!exists) {
	          // add a new item
	          me.options.onAdd(props.item.data, function (itemData) {
	            me._removeItem(props.item); // remove temporary item
	            if (itemData) {
	              me.itemsData.getDataSet().add(itemData);
	            }

	            // force re-stacking of all items next redraw
	            me.stackDirty = true;
	            me.body.emitter.emit('_change');
	          });
	        } else {
	          // update existing item
	          var itemData = this._cloneItemData(props.item.data); // convert start and end to the correct type
	          me.options.onMove(itemData, function (itemData) {
	            if (itemData) {
	              // apply changes
	              itemData[dataset._fieldId] = id; // ensure the item contains its id (can be undefined)
	              dataset.update(itemData);
	            } else {
	              // restore original values
	              props.item.setData(props.data);

	              me.stackDirty = true; // force re-stacking of all items next redraw
	              me.body.emitter.emit('_change');
	            }
	          });
	        }
	      }.bind(this));
	    }
	  };

	  ItemSet.prototype._onGroupDragStart = function (event) {
	    if (this.options.groupEditable.order) {
	      this.groupTouchParams.group = this.groupFromTarget(event);

	      if (this.groupTouchParams.group) {
	        event.stopPropagation();

	        this.groupTouchParams.originalOrder = this.groupsData.getIds({
	          order: this.options.groupOrder
	        });
	      }
	    }
	  };

	  ItemSet.prototype._onGroupDrag = function (event) {
	    if (this.options.groupEditable.order && this.groupTouchParams.group) {
	      event.stopPropagation();

	      // drag from one group to another
	      var group = this.groupFromTarget(event);

	      // try to avoid toggling when groups differ in height
	      if (group && group.height != this.groupTouchParams.group.height) {
	        var movingUp = group.top < this.groupTouchParams.group.top;
	        var clientY = event.center ? event.center.y : event.clientY;
	        var targetGroupTop = util.getAbsoluteTop(group.dom.foreground);
	        var draggedGroupHeight = this.groupTouchParams.group.height;
	        if (movingUp) {
	          // skip swapping the groups when the dragged group is not below clientY afterwards
	          if (targetGroupTop + draggedGroupHeight < clientY) {
	            return;
	          }
	        } else {
	          var targetGroupHeight = group.height;
	          // skip swapping the groups when the dragged group is not below clientY afterwards
	          if (targetGroupTop + targetGroupHeight - draggedGroupHeight > clientY) {
	            return;
	          }
	        }
	      }

	      if (group && group != this.groupTouchParams.group) {
	        var groupsData = this.groupsData;
	        var targetGroup = groupsData.get(group.groupId);
	        var draggedGroup = groupsData.get(this.groupTouchParams.group.groupId);

	        // switch groups
	        if (draggedGroup && targetGroup) {
	          this.options.groupOrderSwap(draggedGroup, targetGroup, this.groupsData);
	          this.groupsData.update(draggedGroup);
	          this.groupsData.update(targetGroup);
	        }

	        // fetch current order of groups
	        var newOrder = this.groupsData.getIds({
	          order: this.options.groupOrder
	        });

	        // in case of changes since _onGroupDragStart
	        if (!util.equalArray(newOrder, this.groupTouchParams.originalOrder)) {
	          var groupsData = this.groupsData;
	          var origOrder = this.groupTouchParams.originalOrder;
	          var draggedId = this.groupTouchParams.group.groupId;
	          var numGroups = Math.min(origOrder.length, newOrder.length);
	          var curPos = 0;
	          var newOffset = 0;
	          var orgOffset = 0;
	          while (curPos < numGroups) {
	            // as long as the groups are where they should be step down along the groups order
	            while (curPos + newOffset < numGroups && curPos + orgOffset < numGroups && newOrder[curPos + newOffset] == origOrder[curPos + orgOffset]) {
	              curPos++;
	            }

	            // all ok
	            if (curPos + newOffset >= numGroups) {
	              break;
	            }

	            // not all ok
	            // if dragged group was move upwards everything below should have an offset
	            if (newOrder[curPos + newOffset] == draggedId) {
	              newOffset = 1;
	              continue;
	            }
	            // if dragged group was move downwards everything above should have an offset
	            else if (origOrder[curPos + orgOffset] == draggedId) {
	                orgOffset = 1;
	                continue;
	              }
	              // found a group (apart from dragged group) that has the wrong position -> switch with the 
	              // group at the position where other one should be, fix index arrays and continue
	              else {
	                  var slippedPosition = newOrder.indexOf(origOrder[curPos + orgOffset]);
	                  var switchGroup = groupsData.get(newOrder[curPos + newOffset]);
	                  var shouldBeGroup = groupsData.get(origOrder[curPos + orgOffset]);
	                  this.options.groupOrderSwap(switchGroup, shouldBeGroup, groupsData);
	                  groupsData.update(switchGroup);
	                  groupsData.update(shouldBeGroup);

	                  var switchGroupId = newOrder[curPos + newOffset];
	                  newOrder[curPos + newOffset] = origOrder[curPos + orgOffset];
	                  newOrder[slippedPosition] = switchGroupId;

	                  curPos++;
	                }
	          }
	        }
	      }
	    }
	  };

	  ItemSet.prototype._onGroupDragEnd = function (event) {
	    if (this.options.groupEditable.order && this.groupTouchParams.group) {
	      event.stopPropagation();

	      // update existing group
	      var me = this;
	      var id = me.groupTouchParams.group.groupId;
	      var dataset = me.groupsData.getDataSet();
	      var groupData = util.extend({}, dataset.get(id)); // clone the data
	      me.options.onMoveGroup(groupData, function (groupData) {
	        if (groupData) {
	          // apply changes
	          groupData[dataset._fieldId] = id; // ensure the group contains its id (can be undefined)
	          dataset.update(groupData);
	        } else {

	          // fetch current order of groups
	          var newOrder = dataset.getIds({
	            order: me.options.groupOrder
	          });

	          // restore original order
	          if (!util.equalArray(newOrder, me.groupTouchParams.originalOrder)) {
	            var origOrder = me.groupTouchParams.originalOrder;
	            var numGroups = Math.min(origOrder.length, newOrder.length);
	            var curPos = 0;
	            while (curPos < numGroups) {
	              // as long as the groups are where they should be step down along the groups order
	              while (curPos < numGroups && newOrder[curPos] == origOrder[curPos]) {
	                curPos++;
	              }

	              // all ok
	              if (curPos >= numGroups) {
	                break;
	              }

	              // found a group that has the wrong position -> switch with the 
	              // group at the position where other one should be, fix index arrays and continue
	              var slippedPosition = newOrder.indexOf(origOrder[curPos]);
	              var switchGroup = dataset.get(newOrder[curPos]);
	              var shouldBeGroup = dataset.get(origOrder[curPos]);
	              me.options.groupOrderSwap(switchGroup, shouldBeGroup, dataset);
	              groupsData.update(switchGroup);
	              groupsData.update(shouldBeGroup);

	              var switchGroupId = newOrder[curPos];
	              newOrder[curPos] = origOrder[curPos];
	              newOrder[slippedPosition] = switchGroupId;

	              curPos++;
	            }
	          }
	        }
	      });

	      me.body.emitter.emit('groupDragged', { groupId: id });
	    }
	  };

	  /**
	   * Handle selecting/deselecting an item when tapping it
	   * @param {Event} event
	   * @private
	   */
	  ItemSet.prototype._onSelectItem = function (event) {
	    if (!this.options.selectable) return;

	    var ctrlKey = event.srcEvent && (event.srcEvent.ctrlKey || event.srcEvent.metaKey);
	    var shiftKey = event.srcEvent && event.srcEvent.shiftKey;
	    if (ctrlKey || shiftKey) {
	      this._onMultiSelectItem(event);
	      return;
	    }

	    var oldSelection = this.getSelection();

	    var item = this.itemFromTarget(event);
	    var selection = item ? [item.id] : [];
	    this.setSelection(selection);

	    var newSelection = this.getSelection();

	    // emit a select event,
	    // except when old selection is empty and new selection is still empty
	    if (newSelection.length > 0 || oldSelection.length > 0) {
	      this.body.emitter.emit('select', {
	        items: newSelection,
	        event: event
	      });
	    }
	  };

	  /**
	   * Handle hovering an item
	   * @param {Event} event
	   * @private
	   */
	  ItemSet.prototype._onMouseOver = function (event) {
	    var item = this.itemFromTarget(event);
	    if (!item) return;
	    this.body.emitter.emit('itemover', {
	      item: item.id,
	      event: event
	    });
	  };
	  ItemSet.prototype._onMouseOut = function (event) {
	    var item = this.itemFromTarget(event);
	    if (!item) return;
	    this.body.emitter.emit('itemout', {
	      item: item.id,
	      event: event
	    });
	  };

	  /**
	   * Handle creation and updates of an item on double tap
	   * @param event
	   * @private
	   */
	  ItemSet.prototype._onAddItem = function (event) {
	    if (!this.options.selectable) return;
	    if (!this.options.editable.add) return;

	    var me = this;
	    var snap = this.options.snap || null;
	    var item = this.itemFromTarget(event);

	    if (item) {
	      // update item

	      // execute async handler to update the item (or cancel it)
	      var itemData = me.itemsData.get(item.id); // get a clone of the data from the dataset
	      this.options.onUpdate(itemData, function (itemData) {
	        if (itemData) {
	          me.itemsData.getDataSet().update(itemData);
	        }
	      });
	    } else {
	      // add item
	      if (this.options.rtl) {
	        var xAbs = util.getAbsoluteRight(this.dom.frame);
	        var x = xAbs - event.center.x;
	      } else {
	        var xAbs = util.getAbsoluteLeft(this.dom.frame);
	        var x = event.center.x - xAbs;
	      }
	      // var xAbs = util.getAbsoluteLeft(this.dom.frame);
	      // var x = event.center.x - xAbs;
	      var start = this.body.util.toTime(x);
	      var scale = this.body.util.getScale();
	      var step = this.body.util.getStep();

	      var newItemData = {
	        start: snap ? snap(start, scale, step) : start,
	        content: 'new item'
	      };

	      if (event.type == 'drop') {
	        var itemData = JSON.parse(event.dataTransfer.getData("text/plain"));
	        newItemData.content = itemData.content; // content is required 
	        newItemData.type = itemData.type || 'box';
	        newItemData[this.itemsData._fieldId] = itemData.id || util.randomUUID();

	        if (itemData.type == 'range' || itemData.end && itemData.start) {

	          if (!itemData.end) {
	            var end = this.body.util.toTime(x + this.props.width / 5);
	            newItemData.end = snap ? snap(end, scale, step) : end;
	          } else {
	            newItemData.end = new Date(newItemData.start._i).getTime() + new Date(itemData.end).getTime() - new Date(itemData.start).getTime();
	          }
	        }
	      } else {
	        newItemData[this.itemsData._fieldId] = util.randomUUID();

	        // when default type is a range, add a default end date to the new item
	        if (this.options.type === 'range') {
	          var end = this.body.util.toTime(x + this.props.width / 5);
	          newItemData.end = snap ? snap(end, scale, step) : end;
	        }
	      }

	      var group = this.groupFromTarget(event);
	      if (group) {
	        newItemData.group = group.groupId;
	      }

	      // execute async handler to customize (or cancel) adding an item
	      newItemData = this._cloneItemData(newItemData); // convert start and end to the correct type
	      this.options.onAdd(newItemData, function (item) {
	        if (item) {
	          me.itemsData.getDataSet().add(item);
	          if (event.type == 'drop') {
	            me.setSelection([item.id]);
	          }
	          // TODO: need to trigger a redraw?
	        }
	      });
	    }
	  };

	  /**
	   * Handle selecting/deselecting multiple items when holding an item
	   * @param {Event} event
	   * @private
	   */
	  ItemSet.prototype._onMultiSelectItem = function (event) {
	    if (!this.options.selectable) return;

	    var item = this.itemFromTarget(event);

	    if (item) {
	      // multi select items (if allowed)

	      var selection = this.options.multiselect ? this.getSelection() // take current selection
	      : []; // deselect current selection

	      var shiftKey = event.srcEvent && event.srcEvent.shiftKey || false;

	      if (shiftKey && this.options.multiselect) {
	        // select all items between the old selection and the tapped item
	        var itemGroup = this.itemsData.get(item.id).group;

	        // when filtering get the group of the last selected item
	        var lastSelectedGroup = undefined;
	        if (this.options.multiselectPerGroup) {
	          if (selection.length > 0) {
	            lastSelectedGroup = this.itemsData.get(selection[0]).group;
	          }
	        }

	        // determine the selection range
	        if (!this.options.multiselectPerGroup || lastSelectedGroup == undefined || lastSelectedGroup == itemGroup) {
	          selection.push(item.id);
	        }
	        var range = ItemSet._getItemRange(this.itemsData.get(selection, this.itemOptions));

	        if (!this.options.multiselectPerGroup || lastSelectedGroup == itemGroup) {
	          // select all items within the selection range
	          selection = [];
	          for (var id in this.items) {
	            if (this.items.hasOwnProperty(id)) {
	              var _item = this.items[id];
	              var start = _item.data.start;
	              var end = _item.data.end !== undefined ? _item.data.end : start;

	              if (start >= range.min && end <= range.max && (!this.options.multiselectPerGroup || lastSelectedGroup == this.itemsData.get(_item.id).group) && !(_item instanceof BackgroundItem)) {
	                selection.push(_item.id); // do not use id but item.id, id itself is stringified
	              }
	            }
	          }
	        }
	      } else {
	        // add/remove this item from the current selection
	        var index = selection.indexOf(item.id);
	        if (index == -1) {
	          // item is not yet selected -> select it
	          selection.push(item.id);
	        } else {
	          // item is already selected -> deselect it
	          selection.splice(index, 1);
	        }
	      }

	      this.setSelection(selection);

	      this.body.emitter.emit('select', {
	        items: this.getSelection(),
	        event: event
	      });
	    }
	  };

	  /**
	   * Calculate the time range of a list of items
	   * @param {Array.<Object>} itemsData
	   * @return {{min: Date, max: Date}} Returns the range of the provided items
	   * @private
	   */
	  ItemSet._getItemRange = function (itemsData) {
	    var max = null;
	    var min = null;

	    itemsData.forEach(function (data) {
	      if (min == null || data.start < min) {
	        min = data.start;
	      }

	      if (data.end != undefined) {
	        if (max == null || data.end > max) {
	          max = data.end;
	        }
	      } else {
	        if (max == null || data.start > max) {
	          max = data.start;
	        }
	      }
	    });

	    return {
	      min: min,
	      max: max
	    };
	  };

	  /**
	   * Find an item from an event target:
	   * searches for the attribute 'timeline-item' in the event target's element tree
	   * @param {Event} event
	   * @return {Item | null} item
	   */
	  ItemSet.prototype.itemFromTarget = function (event) {
	    var target = event.target;
	    while (target) {
	      if (target.hasOwnProperty('timeline-item')) {
	        return target['timeline-item'];
	      }
	      target = target.parentNode;
	    }

	    return null;
	  };

	  /**
	   * Find the Group from an event target:
	   * searches for the attribute 'timeline-group' in the event target's element tree
	   * @param {Event} event
	   * @return {Group | null} group
	   */
	  ItemSet.prototype.groupFromTarget = function (event) {
	    var clientY = event.center ? event.center.y : event.clientY;
	    for (var i = 0; i < this.groupIds.length; i++) {
	      var groupId = this.groupIds[i];
	      var group = this.groups[groupId];
	      var foreground = group.dom.foreground;
	      var top = util.getAbsoluteTop(foreground);
	      if (clientY > top && clientY < top + foreground.offsetHeight) {
	        return group;
	      }

	      if (this.options.orientation.item === 'top') {
	        if (i === this.groupIds.length - 1 && clientY > top) {
	          return group;
	        }
	      } else {
	        if (i === 0 && clientY < top + foreground.offset) {
	          return group;
	        }
	      }
	    }

	    return null;
	  };

	  /**
	   * Find the ItemSet from an event target:
	   * searches for the attribute 'timeline-itemset' in the event target's element tree
	   * @param {Event} event
	   * @return {ItemSet | null} item
	   */
	  ItemSet.itemSetFromTarget = function (event) {
	    var target = event.target;
	    while (target) {
	      if (target.hasOwnProperty('timeline-itemset')) {
	        return target['timeline-itemset'];
	      }
	      target = target.parentNode;
	    }

	    return null;
	  };

	  /**
	   * Clone the data of an item, and "normalize" it: convert the start and end date
	   * to the type (Date, Moment, ...) configured in the DataSet. If not configured,
	   * start and end are converted to Date.
	   * @param {Object} itemData, typically `item.data`
	   * @param {string} [type]  Optional Date type. If not provided, the type from the DataSet is taken
	   * @return {Object} The cloned object
	   * @private
	   */
	  ItemSet.prototype._cloneItemData = function (itemData, type) {
	    var clone = util.extend({}, itemData);

	    if (!type) {
	      // convert start and end date to the type (Date, Moment, ...) configured in the DataSet
	      type = this.itemsData.getDataSet()._options.type;
	    }

	    if (clone.start != undefined) {
	      clone.start = util.convert(clone.start, type && type.start || 'Date');
	    }
	    if (clone.end != undefined) {
	      clone.end = util.convert(clone.end, type && type.end || 'Date');
	    }

	    return clone;
	  };

	  module.exports = ItemSet;

	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var moment = __webpack_require__(2);
	  var DateUtil = __webpack_require__(34);
	  var util = __webpack_require__(1);

	  /**
	   * @constructor  TimeStep
	   * The class TimeStep is an iterator for dates. You provide a start date and an
	   * end date. The class itself determines the best scale (step size) based on the
	   * provided start Date, end Date, and minimumStep.
	   *
	   * If minimumStep is provided, the step size is chosen as close as possible
	   * to the minimumStep but larger than minimumStep. If minimumStep is not
	   * provided, the scale is set to 1 DAY.
	   * The minimumStep should correspond with the onscreen size of about 6 characters
	   *
	   * Alternatively, you can set a scale by hand.
	   * After creation, you can initialize the class by executing first(). Then you
	   * can iterate from the start date to the end date via next(). You can check if
	   * the end date is reached with the function hasNext(). After each step, you can
	   * retrieve the current date via getCurrent().
	   * The TimeStep has scales ranging from milliseconds, seconds, minutes, hours,
	   * days, to years.
	   *
	   * Version: 1.2
	   *
	   * @param {Date} [start]         The start date, for example new Date(2010, 9, 21)
	   *                               or new Date(2010, 9, 21, 23, 45, 00)
	   * @param {Date} [end]           The end date
	   * @param {Number} [minimumStep] Optional. Minimum step size in milliseconds
	   */
	  function TimeStep(start, end, minimumStep, hiddenDates) {
	    this.moment = moment;

	    // variables
	    this.current = this.moment();
	    this._start = this.moment();
	    this._end = this.moment();

	    this.autoScale = true;
	    this.scale = 'day';
	    this.step = 1;

	    // initialize the range
	    this.setRange(start, end, minimumStep);

	    // hidden Dates options
	    this.switchedDay = false;
	    this.switchedMonth = false;
	    this.switchedYear = false;
	    if (Array.isArray(hiddenDates)) {
	      this.hiddenDates = hiddenDates;
	    } else if (hiddenDates != undefined) {
	      this.hiddenDates = [hiddenDates];
	    } else {
	      this.hiddenDates = [];
	    }

	    this.format = TimeStep.FORMAT; // default formatting
	  }

	  // Time formatting
	  TimeStep.FORMAT = {
	    minorLabels: {
	      millisecond: 'SSS',
	      second: 's',
	      minute: 'HH:mm',
	      hour: 'HH:mm',
	      weekday: 'ddd D',
	      day: 'D',
	      month: 'MMM',
	      year: 'YYYY'
	    },
	    majorLabels: {
	      millisecond: 'HH:mm:ss',
	      second: 'D MMMM HH:mm',
	      minute: 'ddd D MMMM',
	      hour: 'ddd D MMMM',
	      weekday: 'MMMM YYYY',
	      day: 'MMMM YYYY',
	      month: 'YYYY',
	      year: ''
	    }
	  };

	  /**
	   * Set custom constructor function for moment. Can be used to set dates
	   * to UTC or to set a utcOffset.
	   * @param {function} moment
	   */
	  TimeStep.prototype.setMoment = function (moment) {
	    this.moment = moment;

	    // update the date properties, can have a new utcOffset
	    this.current = this.moment(this.current.valueOf());
	    this._start = this.moment(this._start.valueOf());
	    this._end = this.moment(this._end.valueOf());
	  };

	  /**
	   * Set custom formatting for the minor an major labels of the TimeStep.
	   * Both `minorLabels` and `majorLabels` are an Object with properties:
	   * 'millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'month', 'year'.
	   * @param {{minorLabels: Object, majorLabels: Object}} format
	   */
	  TimeStep.prototype.setFormat = function (format) {
	    var defaultFormat = util.deepExtend({}, TimeStep.FORMAT);
	    this.format = util.deepExtend(defaultFormat, format);
	  };

	  /**
	   * Set a new range
	   * If minimumStep is provided, the step size is chosen as close as possible
	   * to the minimumStep but larger than minimumStep. If minimumStep is not
	   * provided, the scale is set to 1 DAY.
	   * The minimumStep should correspond with the onscreen size of about 6 characters
	   * @param {Date} [start]      The start date and time.
	   * @param {Date} [end]        The end date and time.
	   * @param {int} [minimumStep] Optional. Minimum step size in milliseconds
	   */
	  TimeStep.prototype.setRange = function (start, end, minimumStep) {
	    if (!(start instanceof Date) || !(end instanceof Date)) {
	      throw "No legal start or end date in method setRange";
	    }

	    this._start = start != undefined ? this.moment(start.valueOf()) : new Date();
	    this._end = end != undefined ? this.moment(end.valueOf()) : new Date();

	    if (this.autoScale) {
	      this.setMinimumStep(minimumStep);
	    }
	  };

	  /**
	   * Set the range iterator to the start date.
	   */
	  TimeStep.prototype.start = function () {
	    this.current = this._start.clone();
	    this.roundToMinor();
	  };

	  /**
	   * Round the current date to the first minor date value
	   * This must be executed once when the current date is set to start Date
	   */
	  TimeStep.prototype.roundToMinor = function () {
	    // round to floor
	    // IMPORTANT: we have no breaks in this switch! (this is no bug)
	    // noinspection FallThroughInSwitchStatementJS
	    switch (this.scale) {
	      case 'year':
	        this.current.year(this.step * Math.floor(this.current.year() / this.step));
	        this.current.month(0);
	      case 'month':
	        this.current.date(1);
	      case 'day': // intentional fall through
	      case 'weekday':
	        this.current.hours(0);
	      case 'hour':
	        this.current.minutes(0);
	      case 'minute':
	        this.current.seconds(0);
	      case 'second':
	        this.current.milliseconds(0);
	      //case 'millisecond': // nothing to do for milliseconds
	    }

	    if (this.step != 1) {
	      // round down to the first minor value that is a multiple of the current step size
	      switch (this.scale) {
	        case 'millisecond':
	          this.current.subtract(this.current.milliseconds() % this.step, 'milliseconds');break;
	        case 'second':
	          this.current.subtract(this.current.seconds() % this.step, 'seconds');break;
	        case 'minute':
	          this.current.subtract(this.current.minutes() % this.step, 'minutes');break;
	        case 'hour':
	          this.current.subtract(this.current.hours() % this.step, 'hours');break;
	        case 'weekday': // intentional fall through
	        case 'day':
	          this.current.subtract((this.current.date() - 1) % this.step, 'day');break;
	        case 'month':
	          this.current.subtract(this.current.month() % this.step, 'month');break;
	        case 'year':
	          this.current.subtract(this.current.year() % this.step, 'year');break;
	        default:
	          break;
	      }
	    }
	  };

	  /**
	   * Check if the there is a next step
	   * @return {boolean}  true if the current date has not passed the end date
	   */
	  TimeStep.prototype.hasNext = function () {
	    return this.current.valueOf() <= this._end.valueOf();
	  };

	  /**
	   * Do the next step
	   */
	  TimeStep.prototype.next = function () {
	    var prev = this.current.valueOf();

	    // Two cases, needed to prevent issues with switching daylight savings
	    // (end of March and end of October)
	    if (this.current.month() < 6) {
	      switch (this.scale) {
	        case 'millisecond':
	          this.current.add(this.step, 'millisecond');break;
	        case 'second':
	          this.current.add(this.step, 'second');break;
	        case 'minute':
	          this.current.add(this.step, 'minute');break;
	        case 'hour':
	          this.current.add(this.step, 'hour');
	          // in case of skipping an hour for daylight savings, adjust the hour again (else you get: 0h 5h 9h ... instead of 0h 4h 8h ...)
	          // TODO: is this still needed now we use the function of moment.js?
	          this.current.subtract(this.current.hours() % this.step, 'hour');
	          break;
	        case 'weekday': // intentional fall through
	        case 'day':
	          this.current.add(this.step, 'day');break;
	        case 'month':
	          this.current.add(this.step, 'month');break;
	        case 'year':
	          this.current.add(this.step, 'year');break;
	        default:
	          break;
	      }
	    } else {
	      switch (this.scale) {
	        case 'millisecond':
	          this.current.add(this.step, 'millisecond');break;
	        case 'second':
	          this.current.add(this.step, 'second');break;
	        case 'minute':
	          this.current.add(this.step, 'minute');break;
	        case 'hour':
	          this.current.add(this.step, 'hour');break;
	        case 'weekday': // intentional fall through
	        case 'day':
	          this.current.add(this.step, 'day');break;
	        case 'month':
	          this.current.add(this.step, 'month');break;
	        case 'year':
	          this.current.add(this.step, 'year');break;
	        default:
	          break;
	      }
	    }

	    if (this.step != 1) {
	      // round down to the correct major value
	      switch (this.scale) {
	        case 'millisecond':
	          if (this.current.milliseconds() < this.step) this.current.milliseconds(0);break;
	        case 'second':
	          if (this.current.seconds() < this.step) this.current.seconds(0);break;
	        case 'minute':
	          if (this.current.minutes() < this.step) this.current.minutes(0);break;
	        case 'hour':
	          if (this.current.hours() < this.step) this.current.hours(0);break;
	        case 'weekday': // intentional fall through
	        case 'day':
	          if (this.current.date() < this.step + 1) this.current.date(1);break;
	        case 'month':
	          if (this.current.month() < this.step) this.current.month(0);break;
	        case 'year':
	          break; // nothing to do for year
	        default:
	          break;
	      }
	    }

	    // safety mechanism: if current time is still unchanged, move to the end
	    if (this.current.valueOf() == prev) {
	      this.current = this._end.clone();
	    }

	    // Reset switches for year, month and day. Will get set to true where appropriate in DateUtil.stepOverHiddenDates
	    this.switchedDay = false;
	    this.switchedMonth = false;
	    this.switchedYear = false;

	    DateUtil.stepOverHiddenDates(this.moment, this, prev);
	  };

	  /**
	   * Get the current datetime
	   * @return {Moment}  current The current date
	   */
	  TimeStep.prototype.getCurrent = function () {
	    return this.current;
	  };

	  /**
	   * Set a custom scale. Autoscaling will be disabled.
	   * For example setScale('minute', 5) will result
	   * in minor steps of 5 minutes, and major steps of an hour.
	   *
	   * @param {{scale: string, step: number}} params
	   *                               An object containing two properties:
	   *                               - A string 'scale'. Choose from 'millisecond', 'second',
	   *                                 'minute', 'hour', 'weekday', 'day', 'month', 'year'.
	   *                               - A number 'step'. A step size, by default 1.
	   *                                 Choose for example 1, 2, 5, or 10.
	   */
	  TimeStep.prototype.setScale = function (params) {
	    if (params && typeof params.scale == 'string') {
	      this.scale = params.scale;
	      this.step = params.step > 0 ? params.step : 1;
	      this.autoScale = false;
	    }
	  };

	  /**
	   * Enable or disable autoscaling
	   * @param {boolean} enable  If true, autoascaling is set true
	   */
	  TimeStep.prototype.setAutoScale = function (enable) {
	    this.autoScale = enable;
	  };

	  /**
	   * Automatically determine the scale that bests fits the provided minimum step
	   * @param {Number} [minimumStep]  The minimum step size in milliseconds
	   */
	  TimeStep.prototype.setMinimumStep = function (minimumStep) {
	    if (minimumStep == undefined) {
	      return;
	    }

	    //var b = asc + ds;

	    var stepYear = 1000 * 60 * 60 * 24 * 30 * 12;
	    var stepMonth = 1000 * 60 * 60 * 24 * 30;
	    var stepDay = 1000 * 60 * 60 * 24;
	    var stepHour = 1000 * 60 * 60;
	    var stepMinute = 1000 * 60;
	    var stepSecond = 1000;
	    var stepMillisecond = 1;

	    // find the smallest step that is larger than the provided minimumStep
	    if (stepYear * 1000 > minimumStep) {
	      this.scale = 'year';this.step = 1000;
	    }
	    if (stepYear * 500 > minimumStep) {
	      this.scale = 'year';this.step = 500;
	    }
	    if (stepYear * 100 > minimumStep) {
	      this.scale = 'year';this.step = 100;
	    }
	    if (stepYear * 50 > minimumStep) {
	      this.scale = 'year';this.step = 50;
	    }
	    if (stepYear * 10 > minimumStep) {
	      this.scale = 'year';this.step = 10;
	    }
	    if (stepYear * 5 > minimumStep) {
	      this.scale = 'year';this.step = 5;
	    }
	    if (stepYear > minimumStep) {
	      this.scale = 'year';this.step = 1;
	    }
	    if (stepMonth * 3 > minimumStep) {
	      this.scale = 'month';this.step = 3;
	    }
	    if (stepMonth > minimumStep) {
	      this.scale = 'month';this.step = 1;
	    }
	    if (stepDay * 5 > minimumStep) {
	      this.scale = 'day';this.step = 5;
	    }
	    if (stepDay * 2 > minimumStep) {
	      this.scale = 'day';this.step = 2;
	    }
	    if (stepDay > minimumStep) {
	      this.scale = 'day';this.step = 1;
	    }
	    if (stepDay / 2 > minimumStep) {
	      this.scale = 'weekday';this.step = 1;
	    }
	    if (stepHour * 4 > minimumStep) {
	      this.scale = 'hour';this.step = 4;
	    }
	    if (stepHour > minimumStep) {
	      this.scale = 'hour';this.step = 1;
	    }
	    if (stepMinute * 15 > minimumStep) {
	      this.scale = 'minute';this.step = 15;
	    }
	    if (stepMinute * 10 > minimumStep) {
	      this.scale = 'minute';this.step = 10;
	    }
	    if (stepMinute * 5 > minimumStep) {
	      this.scale = 'minute';this.step = 5;
	    }
	    if (stepMinute > minimumStep) {
	      this.scale = 'minute';this.step = 1;
	    }
	    if (stepSecond * 15 > minimumStep) {
	      this.scale = 'second';this.step = 15;
	    }
	    if (stepSecond * 10 > minimumStep) {
	      this.scale = 'second';this.step = 10;
	    }
	    if (stepSecond * 5 > minimumStep) {
	      this.scale = 'second';this.step = 5;
	    }
	    if (stepSecond > minimumStep) {
	      this.scale = 'second';this.step = 1;
	    }
	    if (stepMillisecond * 200 > minimumStep) {
	      this.scale = 'millisecond';this.step = 200;
	    }
	    if (stepMillisecond * 100 > minimumStep) {
	      this.scale = 'millisecond';this.step = 100;
	    }
	    if (stepMillisecond * 50 > minimumStep) {
	      this.scale = 'millisecond';this.step = 50;
	    }
	    if (stepMillisecond * 10 > minimumStep) {
	      this.scale = 'millisecond';this.step = 10;
	    }
	    if (stepMillisecond * 5 > minimumStep) {
	      this.scale = 'millisecond';this.step = 5;
	    }
	    if (stepMillisecond > minimumStep) {
	      this.scale = 'millisecond';this.step = 1;
	    }
	  };

	  /**
	   * Snap a date to a rounded value.
	   * The snap intervals are dependent on the current scale and step.
	   * Static function
	   * @param {Date} date    the date to be snapped.
	   * @param {string} scale Current scale, can be 'millisecond', 'second',
	   *                       'minute', 'hour', 'weekday, 'day', 'month', 'year'.
	   * @param {number} step  Current step (1, 2, 4, 5, ...
	   * @return {Date} snappedDate
	   */
	  TimeStep.snap = function (date, scale, step) {
	    var clone = moment(date);

	    if (scale == 'year') {
	      var year = clone.year() + Math.round(clone.month() / 12);
	      clone.year(Math.round(year / step) * step);
	      clone.month(0);
	      clone.date(0);
	      clone.hours(0);
	      clone.minutes(0);
	      clone.seconds(0);
	      clone.milliseconds(0);
	    } else if (scale == 'month') {
	      if (clone.date() > 15) {
	        clone.date(1);
	        clone.add(1, 'month');
	        // important: first set Date to 1, after that change the month.
	      } else {
	        clone.date(1);
	      }

	      clone.hours(0);
	      clone.minutes(0);
	      clone.seconds(0);
	      clone.milliseconds(0);
	    } else if (scale == 'day') {
	      //noinspection FallthroughInSwitchStatementJS
	      switch (step) {
	        case 5:
	        case 2:
	          clone.hours(Math.round(clone.hours() / 24) * 24);break;
	        default:
	          clone.hours(Math.round(clone.hours() / 12) * 12);break;
	      }
	      clone.minutes(0);
	      clone.seconds(0);
	      clone.milliseconds(0);
	    } else if (scale == 'weekday') {
	      //noinspection FallthroughInSwitchStatementJS
	      switch (step) {
	        case 5:
	        case 2:
	          clone.hours(Math.round(clone.hours() / 12) * 12);break;
	        default:
	          clone.hours(Math.round(clone.hours() / 6) * 6);break;
	      }
	      clone.minutes(0);
	      clone.seconds(0);
	      clone.milliseconds(0);
	    } else if (scale == 'hour') {
	      switch (step) {
	        case 4:
	          clone.minutes(Math.round(clone.minutes() / 60) * 60);break;
	        default:
	          clone.minutes(Math.round(clone.minutes() / 30) * 30);break;
	      }
	      clone.seconds(0);
	      clone.milliseconds(0);
	    } else if (scale == 'minute') {
	      //noinspection FallthroughInSwitchStatementJS
	      switch (step) {
	        case 15:
	        case 10:
	          clone.minutes(Math.round(clone.minutes() / 5) * 5);
	          clone.seconds(0);
	          break;
	        case 5:
	          clone.seconds(Math.round(clone.seconds() / 60) * 60);break;
	        default:
	          clone.seconds(Math.round(clone.seconds() / 30) * 30);break;
	      }
	      clone.milliseconds(0);
	    } else if (scale == 'second') {
	      //noinspection FallthroughInSwitchStatementJS
	      switch (step) {
	        case 15:
	        case 10:
	          clone.seconds(Math.round(clone.seconds() / 5) * 5);
	          clone.milliseconds(0);
	          break;
	        case 5:
	          clone.milliseconds(Math.round(clone.milliseconds() / 1000) * 1000);break;
	        default:
	          clone.milliseconds(Math.round(clone.milliseconds() / 500) * 500);break;
	      }
	    } else if (scale == 'millisecond') {
	      var _step = step > 5 ? step / 2 : 1;
	      clone.milliseconds(Math.round(clone.milliseconds() / _step) * _step);
	    }

	    return clone;
	  };

	  /**
	   * Check if the current value is a major value (for example when the step
	   * is DAY, a major value is each first day of the MONTH)
	   * @return {boolean} true if current date is major, else false.
	   */
	  TimeStep.prototype.isMajor = function () {
	    if (this.switchedYear == true) {
	      switch (this.scale) {
	        case 'year':
	        case 'month':
	        case 'weekday':
	        case 'day':
	        case 'hour':
	        case 'minute':
	        case 'second':
	        case 'millisecond':
	          return true;
	        default:
	          return false;
	      }
	    } else if (this.switchedMonth == true) {
	      switch (this.scale) {
	        case 'weekday':
	        case 'day':
	        case 'hour':
	        case 'minute':
	        case 'second':
	        case 'millisecond':
	          return true;
	        default:
	          return false;
	      }
	    } else if (this.switchedDay == true) {
	      switch (this.scale) {
	        case 'millisecond':
	        case 'second':
	        case 'minute':
	        case 'hour':
	          return true;
	        default:
	          return false;
	      }
	    }

	    var date = this.moment(this.current);
	    switch (this.scale) {
	      case 'millisecond':
	        return date.milliseconds() == 0;
	      case 'second':
	        return date.seconds() == 0;
	      case 'minute':
	        return date.hours() == 0 && date.minutes() == 0;
	      case 'hour':
	        return date.hours() == 0;
	      case 'weekday': // intentional fall through
	      case 'day':
	        return date.date() == 1;
	      case 'month':
	        return date.month() == 0;
	      case 'year':
	        return false;
	      default:
	        return false;
	    }
	  };

	  /**
	   * Returns formatted text for the minor axislabel, depending on the current
	   * date and the scale. For example when scale is MINUTE, the current time is
	   * formatted as "hh:mm".
	   * @param {Date} [date] custom date. if not provided, current date is taken
	   */
	  TimeStep.prototype.getLabelMinor = function (date) {
	    if (date == undefined) {
	      date = this.current;
	    }

	    if (typeof this.format.minorLabels === "function") {
	      return this.format.minorLabels(date, this.scale, this.step);
	    }

	    var format = this.format.minorLabels[this.scale];
	    return format && format.length > 0 ? this.moment(date).format(format) : '';
	  };

	  /**
	   * Returns formatted text for the major axis label, depending on the current
	   * date and the scale. For example when scale is MINUTE, the major scale is
	   * hours, and the hour will be formatted as "hh".
	   * @param {Date} [date] custom date. if not provided, current date is taken
	   */
	  TimeStep.prototype.getLabelMajor = function (date) {
	    if (date == undefined) {
	      date = this.current;
	    }

	    if (typeof this.format.majorLabels === "function") {
	      return this.format.majorLabels(date, this.scale, this.step);
	    }

	    var format = this.format.majorLabels[this.scale];
	    return format && format.length > 0 ? this.moment(date).format(format) : '';
	  };

	  TimeStep.prototype.getClassName = function () {
	    var _moment = this.moment;
	    var m = this.moment(this.current);
	    var current = m.locale ? m.locale('en') : m.lang('en'); // old versions of moment have .lang() function
	    var step = this.step;

	    function even(value) {
	      return value / step % 2 == 0 ? ' vis-even' : ' vis-odd';
	    }

	    function today(date) {
	      if (date.isSame(new Date(), 'day')) {
	        return ' vis-today';
	      }
	      if (date.isSame(_moment().add(1, 'day'), 'day')) {
	        return ' vis-tomorrow';
	      }
	      if (date.isSame(_moment().add(-1, 'day'), 'day')) {
	        return ' vis-yesterday';
	      }
	      return '';
	    }

	    function currentWeek(date) {
	      return date.isSame(new Date(), 'week') ? ' vis-current-week' : '';
	    }

	    function currentMonth(date) {
	      return date.isSame(new Date(), 'month') ? ' vis-current-month' : '';
	    }

	    function currentYear(date) {
	      return date.isSame(new Date(), 'year') ? ' vis-current-year' : '';
	    }

	    switch (this.scale) {
	      case 'millisecond':
	        return today(current) + even(current.milliseconds()).trim();

	      case 'second':
	        return today(current) + even(current.seconds()).trim();

	      case 'minute':
	        return today(current) + even(current.minutes()).trim();

	      case 'hour':
	        return 'vis-h' + current.hours() + (this.step == 4 ? '-h' + (current.hours() + 4) : '') + today(current) + even(current.hours());

	      case 'weekday':
	        return 'vis-' + current.format('dddd').toLowerCase() + today(current) + currentWeek(current) + even(current.date());

	      case 'day':
	        return 'vis-day' + current.date() + ' vis-' + current.format('MMMM').toLowerCase() + today(current) + currentMonth(current) + this.step <= 2 ? today(current) : '' + this.step <= 2 ? ' vis-' + current.format('dddd').toLowerCase() : '' + even(current.date() - 1);

	      case 'month':
	        return 'vis-' + current.format('MMMM').toLowerCase() + currentMonth(current) + even(current.month());

	      case 'year':
	        var year = current.year();
	        return 'vis-year' + year + currentYear(current) + even(year);

	      default:
	        return '';
	    }
	  };

	  module.exports = TimeStep;

	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);
	  var stack = __webpack_require__(39);
	  var RangeItem = __webpack_require__(40);

	  /**
	   * @constructor Group
	   * @param {Number | String} groupId
	   * @param {Object} data
	   * @param {ItemSet} itemSet
	   */
	  function Group(groupId, data, itemSet) {
	    this.groupId = groupId;
	    this.subgroups = {};
	    this.subgroupIndex = 0;
	    this.subgroupOrderer = data && data.subgroupOrder;
	    this.itemSet = itemSet;
	    this.isVisible = null;

	    this.dom = {};
	    this.props = {
	      label: {
	        width: 0,
	        height: 0
	      }
	    };
	    this.className = null;

	    this.items = {}; // items filtered by groupId of this group
	    this.visibleItems = []; // items currently visible in window
	    this.orderedItems = {
	      byStart: [],
	      byEnd: []
	    };
	    this.checkRangedItems = false; // needed to refresh the ranged items if the window is programatically changed with NO overlap.
	    var me = this;
	    this.itemSet.body.emitter.on("checkRangedItems", function () {
	      me.checkRangedItems = true;
	    });

	    this._create();

	    this.setData(data);
	  }

	  /**
	   * Create DOM elements for the group
	   * @private
	   */
	  Group.prototype._create = function () {
	    var label = document.createElement('div');
	    if (this.itemSet.options.groupEditable.order) {
	      label.className = 'vis-label draggable';
	    } else {
	      label.className = 'vis-label';
	    }
	    this.dom.label = label;

	    var inner = document.createElement('div');
	    inner.className = 'vis-inner';
	    label.appendChild(inner);
	    this.dom.inner = inner;

	    var foreground = document.createElement('div');
	    foreground.className = 'vis-group';
	    foreground['timeline-group'] = this;
	    this.dom.foreground = foreground;

	    this.dom.background = document.createElement('div');
	    this.dom.background.className = 'vis-group';

	    this.dom.axis = document.createElement('div');
	    this.dom.axis.className = 'vis-group';

	    // create a hidden marker to detect when the Timelines container is attached
	    // to the DOM, or the style of a parent of the Timeline is changed from
	    // display:none is changed to visible.
	    this.dom.marker = document.createElement('div');
	    this.dom.marker.style.visibility = 'hidden';
	    this.dom.marker.innerHTML = '?';
	    this.dom.background.appendChild(this.dom.marker);
	  };

	  /**
	   * Set the group data for this group
	   * @param {Object} data   Group data, can contain properties content and className
	   */
	  Group.prototype.setData = function (data) {
	    // update contents
	    var content;
	    var templateFunction;

	    if (this.itemSet.options && this.itemSet.options.groupTemplate) {
	      templateFunction = this.itemSet.options.groupTemplate.bind(this);
	      content = templateFunction(data, this.dom.inner);
	    } else {
	      content = data && data.content;
	    }

	    if (content instanceof Element) {
	      this.dom.inner.appendChild(content);
	      while (this.dom.inner.firstChild) {
	        this.dom.inner.removeChild(this.dom.inner.firstChild);
	      }
	      this.dom.inner.appendChild(content);
	    } else if (content instanceof Object) {
	      templateFunction(data, this.dom.inner);
	    } else if (content !== undefined && content !== null) {
	      this.dom.inner.innerHTML = content;
	    } else {
	      this.dom.inner.innerHTML = this.groupId || ''; // groupId can be null
	    }

	    // update title
	    this.dom.label.title = data && data.title || '';

	    if (!this.dom.inner.firstChild) {
	      util.addClassName(this.dom.inner, 'vis-hidden');
	    } else {
	      util.removeClassName(this.dom.inner, 'vis-hidden');
	    }

	    // update className
	    var className = data && data.className || null;
	    if (className != this.className) {
	      if (this.className) {
	        util.removeClassName(this.dom.label, this.className);
	        util.removeClassName(this.dom.foreground, this.className);
	        util.removeClassName(this.dom.background, this.className);
	        util.removeClassName(this.dom.axis, this.className);
	      }
	      util.addClassName(this.dom.label, className);
	      util.addClassName(this.dom.foreground, className);
	      util.addClassName(this.dom.background, className);
	      util.addClassName(this.dom.axis, className);
	      this.className = className;
	    }

	    // update style
	    if (this.style) {
	      util.removeCssText(this.dom.label, this.style);
	      this.style = null;
	    }
	    if (data && data.style) {
	      util.addCssText(this.dom.label, data.style);
	      this.style = data.style;
	    }
	  };

	  /**
	   * Get the width of the group label
	   * @return {number} width
	   */
	  Group.prototype.getLabelWidth = function () {
	    return this.props.label.width;
	  };

	  /**
	   * Repaint this group
	   * @param {{start: number, end: number}} range
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   * @param {boolean} [restack=false]  Force restacking of all items
	   * @return {boolean} Returns true if the group is resized
	   */
	  Group.prototype.redraw = function (range, margin, restack) {
	    var resized = false;

	    // force recalculation of the height of the items when the marker height changed
	    // (due to the Timeline being attached to the DOM or changed from display:none to visible)
	    var markerHeight = this.dom.marker.clientHeight;
	    if (markerHeight != this.lastMarkerHeight) {
	      this.lastMarkerHeight = markerHeight;

	      util.forEach(this.items, function (item) {
	        item.dirty = true;
	        if (item.displayed) item.redraw();
	      });

	      restack = true;
	    }

	    // recalculate the height of the subgroups
	    this._calculateSubGroupHeights();

	    this.isVisible = this._isGroupVisible(range, margin);

	    // calculate actual size and position
	    var foreground = this.dom.foreground;
	    this.top = foreground.offsetTop;
	    this.right = foreground.offsetLeft;
	    this.width = foreground.offsetWidth;

	    this.isVisible = this._isGroupVisible(range, margin);
	    // reposition visible items vertically
	    if (typeof this.itemSet.options.order === 'function') {
	      // a custom order function

	      if (restack) {
	        // brute force restack of all items

	        // show all items
	        var me = this;
	        var limitSize = false;
	        util.forEach(this.items, function (item) {
	          if (!item.displayed) {
	            item.redraw();
	            me.visibleItems.push(item);
	          }
	          item.repositionX(limitSize);
	        });

	        // order all items and force a restacking
	        var customOrderedItems = this.orderedItems.byStart.slice().sort(function (a, b) {
	          return me.itemSet.options.order(a.data, b.data);
	        });
	        stack.stack(customOrderedItems, margin, true /* restack=true */);
	      }

	      this.visibleItems = this._updateVisibleItems(this.orderedItems, this.visibleItems, range);
	    } else {
	      // no custom order function, lazy stacking

	      this.visibleItems = this._updateVisibleItems(this.orderedItems, this.visibleItems, range);
	      if (this.itemSet.options.stack) {
	        // TODO: ugly way to access options...
	        stack.stack(this.visibleItems, margin, restack);
	      } else {
	        // no stacking
	        stack.nostack(this.visibleItems, margin, this.subgroups);
	      }
	    }

	    if (!this.isVisible && this.height) {
	      return resized = false;
	    }

	    // recalculate the height of the group
	    var height = this._calculateHeight(margin);

	    // calculate actual size and position
	    var foreground = this.dom.foreground;
	    this.top = foreground.offsetTop;
	    this.right = foreground.offsetLeft;
	    this.width = foreground.offsetWidth;
	    resized = util.updateProperty(this, 'height', height) || resized;
	    // recalculate size of label
	    resized = util.updateProperty(this.props.label, 'width', this.dom.inner.clientWidth) || resized;
	    resized = util.updateProperty(this.props.label, 'height', this.dom.inner.clientHeight) || resized;

	    // apply new height
	    this.dom.background.style.height = height + 'px';
	    this.dom.foreground.style.height = height + 'px';
	    this.dom.label.style.height = height + 'px';

	    // update vertical position of items after they are re-stacked and the height of the group is calculated
	    for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
	      var item = this.visibleItems[i];
	      item.repositionY(margin);
	    }

	    return resized;
	  };

	  /**
	   * recalculate the height of the subgroups
	   * @private
	   */
	  Group.prototype._calculateSubGroupHeights = function () {
	    if (Object.keys(this.subgroups).length > 0) {
	      var me = this;

	      this.resetSubgroups();

	      util.forEach(this.visibleItems, function (item) {
	        if (item.data.subgroup !== undefined) {
	          me.subgroups[item.data.subgroup].height = Math.max(me.subgroups[item.data.subgroup].height, item.height);
	          me.subgroups[item.data.subgroup].visible = true;
	        }
	      });
	    }
	  };

	  /**
	   * check if group is visible
	   * @private
	    */
	  Group.prototype._isGroupVisible = function (range, margin) {
	    var isVisible = this.top <= range.body.domProps.centerContainer.height - range.body.domProps.scrollTop + margin.axis && this.top + this.height + margin.axis >= -range.body.domProps.scrollTop;
	    return isVisible;
	  };

	  /**
	   * recalculate the height of the group
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   * @returns {number} Returns the height
	   * @private
	   */
	  Group.prototype._calculateHeight = function (margin) {
	    // recalculate the height of the group
	    var height;
	    var visibleItems = this.visibleItems;
	    if (visibleItems.length > 0) {
	      var min = visibleItems[0].top;
	      var max = visibleItems[0].top + visibleItems[0].height;
	      util.forEach(visibleItems, function (item) {
	        min = Math.min(min, item.top);
	        max = Math.max(max, item.top + item.height);
	      });
	      if (min > margin.axis) {
	        // there is an empty gap between the lowest item and the axis
	        var offset = min - margin.axis;
	        max -= offset;
	        util.forEach(visibleItems, function (item) {
	          item.top -= offset;
	        });
	      }
	      height = max + margin.item.vertical / 2;
	    } else {
	      height = 0;
	    }
	    height = Math.max(height, this.props.label.height);

	    return height;
	  };

	  /**
	   * Show this group: attach to the DOM
	   */
	  Group.prototype.show = function () {
	    if (!this.dom.label.parentNode) {
	      this.itemSet.dom.labelSet.appendChild(this.dom.label);
	    }

	    if (!this.dom.foreground.parentNode) {
	      this.itemSet.dom.foreground.appendChild(this.dom.foreground);
	    }

	    if (!this.dom.background.parentNode) {
	      this.itemSet.dom.background.appendChild(this.dom.background);
	    }

	    if (!this.dom.axis.parentNode) {
	      this.itemSet.dom.axis.appendChild(this.dom.axis);
	    }
	  };

	  /**
	   * Hide this group: remove from the DOM
	   */
	  Group.prototype.hide = function () {
	    var label = this.dom.label;
	    if (label.parentNode) {
	      label.parentNode.removeChild(label);
	    }

	    var foreground = this.dom.foreground;
	    if (foreground.parentNode) {
	      foreground.parentNode.removeChild(foreground);
	    }

	    var background = this.dom.background;
	    if (background.parentNode) {
	      background.parentNode.removeChild(background);
	    }

	    var axis = this.dom.axis;
	    if (axis.parentNode) {
	      axis.parentNode.removeChild(axis);
	    }
	  };

	  /**
	   * Add an item to the group
	   * @param {Item} item
	   */
	  Group.prototype.add = function (item) {
	    this.items[item.id] = item;
	    item.setParent(this);

	    // add to
	    if (item.data.subgroup !== undefined) {
	      if (this.subgroups[item.data.subgroup] === undefined) {
	        this.subgroups[item.data.subgroup] = { height: 0, visible: false, index: this.subgroupIndex, items: [] };
	        this.subgroupIndex++;
	      }
	      this.subgroups[item.data.subgroup].items.push(item);
	    }
	    this.orderSubgroups();

	    if (this.visibleItems.indexOf(item) == -1) {
	      var range = this.itemSet.body.range; // TODO: not nice accessing the range like this
	      this._checkIfVisible(item, this.visibleItems, range);
	    }
	  };

	  Group.prototype.orderSubgroups = function () {
	    if (this.subgroupOrderer !== undefined) {
	      var sortArray = [];
	      if (typeof this.subgroupOrderer == 'string') {
	        for (var subgroup in this.subgroups) {
	          sortArray.push({ subgroup: subgroup, sortField: this.subgroups[subgroup].items[0].data[this.subgroupOrderer] });
	        }
	        sortArray.sort(function (a, b) {
	          return a.sortField - b.sortField;
	        });
	      } else if (typeof this.subgroupOrderer == 'function') {
	        for (var subgroup in this.subgroups) {
	          sortArray.push(this.subgroups[subgroup].items[0].data);
	        }
	        sortArray.sort(this.subgroupOrderer);
	      }

	      if (sortArray.length > 0) {
	        for (var i = 0; i < sortArray.length; i++) {
	          this.subgroups[sortArray[i].subgroup].index = i;
	        }
	      }
	    }
	  };

	  Group.prototype.resetSubgroups = function () {
	    for (var subgroup in this.subgroups) {
	      if (this.subgroups.hasOwnProperty(subgroup)) {
	        this.subgroups[subgroup].visible = false;
	      }
	    }
	  };

	  /**
	   * Remove an item from the group
	   * @param {Item} item
	   */
	  Group.prototype.remove = function (item) {
	    delete this.items[item.id];
	    item.setParent(null);

	    // remove from visible items
	    var index = this.visibleItems.indexOf(item);
	    if (index != -1) this.visibleItems.splice(index, 1);

	    if (item.data.subgroup !== undefined) {
	      var subgroup = this.subgroups[item.data.subgroup];
	      if (subgroup) {
	        var itemIndex = subgroup.items.indexOf(item);
	        subgroup.items.splice(itemIndex, 1);
	        if (!subgroup.items.length) {
	          delete this.subgroups[item.data.subgroup];
	          this.subgroupIndex--;
	        }
	        this.orderSubgroups();
	      }
	    }
	  };

	  /**
	   * Remove an item from the corresponding DataSet
	   * @param {Item} item
	   */
	  Group.prototype.removeFromDataSet = function (item) {
	    this.itemSet.removeItem(item.id);
	  };

	  /**
	   * Reorder the items
	   */
	  Group.prototype.order = function () {
	    var array = util.toArray(this.items);
	    var startArray = [];
	    var endArray = [];

	    for (var i = 0; i < array.length; i++) {
	      if (array[i].data.end !== undefined) {
	        endArray.push(array[i]);
	      }
	      startArray.push(array[i]);
	    }
	    this.orderedItems = {
	      byStart: startArray,
	      byEnd: endArray
	    };

	    stack.orderByStart(this.orderedItems.byStart);
	    stack.orderByEnd(this.orderedItems.byEnd);
	  };

	  /**
	   * Update the visible items
	   * @param {{byStart: Item[], byEnd: Item[]}} orderedItems   All items ordered by start date and by end date
	   * @param {Item[]} visibleItems                             The previously visible items.
	   * @param {{start: number, end: number}} range              Visible range
	   * @return {Item[]} visibleItems                            The new visible items.
	   * @private
	   */
	  Group.prototype._updateVisibleItems = function (orderedItems, oldVisibleItems, range) {
	    var visibleItems = [];
	    var visibleItemsLookup = {}; // we keep this to quickly look up if an item already exists in the list without using indexOf on visibleItems
	    if (!this.isVisible && this.groupId != "__background__") {
	      for (var i = 0; i < oldVisibleItems.length; i++) {
	        var item = oldVisibleItems[i];
	        if (item.displayed) item.hide();
	      }
	      return visibleItems;
	    }

	    var interval = (range.end - range.start) / 4;
	    var lowerBound = range.start - interval;
	    var upperBound = range.end + interval;

	    // this function is used to do the binary search.
	    var searchFunction = function searchFunction(value) {
	      if (value < lowerBound) {
	        return -1;
	      } else if (value <= upperBound) {
	        return 0;
	      } else {
	        return 1;
	      }
	    };

	    // first check if the items that were in view previously are still in view.
	    // IMPORTANT: this handles the case for the items with startdate before the window and enddate after the window!
	    // also cleans up invisible items.
	    if (oldVisibleItems.length > 0) {
	      for (var i = 0; i < oldVisibleItems.length; i++) {
	        this._checkIfVisibleWithReference(oldVisibleItems[i], visibleItems, visibleItemsLookup, range);
	      }
	    }

	    // we do a binary search for the items that have only start values.
	    var initialPosByStart = util.binarySearchCustom(orderedItems.byStart, searchFunction, 'data', 'start');

	    // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the start values.
	    this._traceVisible(initialPosByStart, orderedItems.byStart, visibleItems, visibleItemsLookup, function (item) {
	      return item.data.start < lowerBound || item.data.start > upperBound;
	    });

	    // if the window has changed programmatically without overlapping the old window, the ranged items with start < lowerBound and end > upperbound are not shown.
	    // We therefore have to brute force check all items in the byEnd list
	    if (this.checkRangedItems == true) {
	      this.checkRangedItems = false;
	      for (i = 0; i < orderedItems.byEnd.length; i++) {
	        this._checkIfVisibleWithReference(orderedItems.byEnd[i], visibleItems, visibleItemsLookup, range);
	      }
	    } else {
	      // we do a binary search for the items that have defined end times.
	      var initialPosByEnd = util.binarySearchCustom(orderedItems.byEnd, searchFunction, 'data', 'end');

	      // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the end values.
	      this._traceVisible(initialPosByEnd, orderedItems.byEnd, visibleItems, visibleItemsLookup, function (item) {
	        return item.data.end < lowerBound || item.data.end > upperBound;
	      });
	    }

	    // finally, we reposition all the visible items.
	    for (var i = 0; i < visibleItems.length; i++) {
	      var item = visibleItems[i];
	      if (!item.displayed) item.show();
	      // reposition item horizontally
	      item.repositionX();
	    }

	    return visibleItems;
	  };

	  Group.prototype._traceVisible = function (initialPos, items, visibleItems, visibleItemsLookup, breakCondition) {
	    if (initialPos != -1) {
	      for (var i = initialPos; i >= 0; i--) {
	        var item = items[i];
	        if (breakCondition(item)) {
	          break;
	        } else {
	          if (visibleItemsLookup[item.id] === undefined) {
	            visibleItemsLookup[item.id] = true;
	            visibleItems.push(item);
	          }
	        }
	      }

	      for (var i = initialPos + 1; i < items.length; i++) {
	        var item = items[i];
	        if (breakCondition(item)) {
	          break;
	        } else {
	          if (visibleItemsLookup[item.id] === undefined) {
	            visibleItemsLookup[item.id] = true;
	            visibleItems.push(item);
	          }
	        }
	      }
	    }
	  };

	  /**
	   * this function is very similar to the _checkIfInvisible() but it does not
	   * return booleans, hides the item if it should not be seen and always adds to
	   * the visibleItems.
	   * this one is for brute forcing and hiding.
	   *
	   * @param {Item} item
	   * @param {Array} visibleItems
	   * @param {{start:number, end:number}} range
	   * @private
	   */
	  Group.prototype._checkIfVisible = function (item, visibleItems, range) {
	    if (item.isVisible(range)) {
	      if (!item.displayed) item.show();
	      // reposition item horizontally
	      item.repositionX();
	      visibleItems.push(item);
	    } else {
	      if (item.displayed) item.hide();
	    }
	  };

	  /**
	   * this function is very similar to the _checkIfInvisible() but it does not
	   * return booleans, hides the item if it should not be seen and always adds to
	   * the visibleItems.
	   * this one is for brute forcing and hiding.
	   *
	   * @param {Item} item
	   * @param {Array} visibleItems
	   * @param {{start:number, end:number}} range
	   * @private
	   */
	  Group.prototype._checkIfVisibleWithReference = function (item, visibleItems, visibleItemsLookup, range) {
	    if (item.isVisible(range)) {
	      if (visibleItemsLookup[item.id] === undefined) {
	        visibleItemsLookup[item.id] = true;
	        visibleItems.push(item);
	      }
	    } else {
	      if (item.displayed) item.hide();
	    }
	  };

	  module.exports = Group;

	/***/ },
	/* 39 */
	/***/ function(module, exports) {

	  'use strict';

	  // Utility functions for ordering and stacking of items
	  var EPSILON = 0.001; // used when checking collisions, to prevent round-off errors

	  /**
	   * Order items by their start data
	   * @param {Item[]} items
	   */
	  exports.orderByStart = function (items) {
	    items.sort(function (a, b) {
	      return a.data.start - b.data.start;
	    });
	  };

	  /**
	   * Order items by their end date. If they have no end date, their start date
	   * is used.
	   * @param {Item[]} items
	   */
	  exports.orderByEnd = function (items) {
	    items.sort(function (a, b) {
	      var aTime = 'end' in a.data ? a.data.end : a.data.start,
	          bTime = 'end' in b.data ? b.data.end : b.data.start;

	      return aTime - bTime;
	    });
	  };

	  /**
	   * Adjust vertical positions of the items such that they don't overlap each
	   * other.
	   * @param {Item[]} items
	   *            All visible items
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   *            Margins between items and between items and the axis.
	   * @param {boolean} [force=false]
	   *            If true, all items will be repositioned. If false (default), only
	   *            items having a top===null will be re-stacked
	   */
	  exports.stack = function (items, margin, force) {
	    var i, iMax;
	    if (force) {
	      // reset top position of all items
	      for (i = 0, iMax = items.length; i < iMax; i++) {
	        items[i].top = null;
	      }
	    }

	    // calculate new, non-overlapping positions
	    for (i = 0, iMax = items.length; i < iMax; i++) {
	      var item = items[i];
	      if (item.stack && item.top === null) {
	        // initialize top position
	        item.top = margin.axis;

	        do {
	          // TODO: optimize checking for overlap. when there is a gap without items,
	          //       you only need to check for items from the next item on, not from zero
	          var collidingItem = null;
	          for (var j = 0, jj = items.length; j < jj; j++) {
	            var other = items[j];
	            if (other.top !== null && other !== item && other.stack && exports.collision(item, other, margin.item, other.options.rtl)) {
	              collidingItem = other;
	              break;
	            }
	          }

	          if (collidingItem != null) {
	            // There is a collision. Reposition the items above the colliding element
	            item.top = collidingItem.top + collidingItem.height + margin.item.vertical;
	          }
	        } while (collidingItem);
	      }
	    }
	  };

	  /**
	   * Adjust vertical positions of the items without stacking them
	   * @param {Item[]} items
	   *            All visible items
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   *            Margins between items and between items and the axis.
	   */
	  exports.nostack = function (items, margin, subgroups) {
	    var i, iMax, newTop;

	    // reset top position of all items
	    for (i = 0, iMax = items.length; i < iMax; i++) {
	      if (items[i].data.subgroup !== undefined) {
	        newTop = margin.axis;
	        for (var subgroup in subgroups) {
	          if (subgroups.hasOwnProperty(subgroup)) {
	            if (subgroups[subgroup].visible == true && subgroups[subgroup].index < subgroups[items[i].data.subgroup].index) {
	              newTop += subgroups[subgroup].height + margin.item.vertical;
	            }
	          }
	        }
	        items[i].top = newTop;
	      } else {
	        items[i].top = margin.axis;
	      }
	    }
	  };

	  /**
	   * Test if the two provided items collide
	   * The items must have parameters left, width, top, and height.
	   * @param {Item} a          The first item
	   * @param {Item} b          The second item
	   * @param {{horizontal: number, vertical: number}} margin
	   *                          An object containing a horizontal and vertical
	   *                          minimum required margin.
	   * @param {boolean} rtl
	   * @return {boolean}        true if a and b collide, else false
	   */
	  exports.collision = function (a, b, margin, rtl) {
	    if (rtl) {
	      return a.right - margin.horizontal + EPSILON < b.right + b.width && a.right + a.width + margin.horizontal - EPSILON > b.right && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
	    } else {
	      return a.left - margin.horizontal + EPSILON < b.left + b.width && a.left + a.width + margin.horizontal - EPSILON > b.left && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
	    }
	  };

	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Hammer = __webpack_require__(22);
	  var Item = __webpack_require__(41);

	  /**
	   * @constructor RangeItem
	   * @extends Item
	   * @param {Object} data             Object containing parameters start, end
	   *                                  content, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} [options]        Configuration options
	   *                                  // TODO: describe options
	   */
	  function RangeItem(data, conversion, options) {
	    this.props = {
	      content: {
	        width: 0
	      }
	    };
	    this.overflow = false; // if contents can overflow (css styling), this flag is set to true
	    this.options = options;
	    // validate data
	    if (data) {
	      if (data.start == undefined) {
	        throw new Error('Property "start" missing in item ' + data.id);
	      }
	      if (data.end == undefined) {
	        throw new Error('Property "end" missing in item ' + data.id);
	      }
	    }

	    Item.call(this, data, conversion, options);
	  }

	  RangeItem.prototype = new Item(null, null, null);

	  RangeItem.prototype.baseClassName = 'vis-item vis-range';

	  /**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */
	  RangeItem.prototype.isVisible = function (range) {
	    // determine visibility
	    return this.data.start < range.end && this.data.end > range.start;
	  };

	  /**
	   * Repaint the item
	   */
	  RangeItem.prototype.redraw = function () {
	    var dom = this.dom;
	    if (!dom) {
	      // create DOM
	      this.dom = {};
	      dom = this.dom;

	      // background box
	      dom.box = document.createElement('div');
	      // className is updated in redraw()

	      // frame box (to prevent the item contents from overflowing
	      dom.frame = document.createElement('div');
	      dom.frame.className = 'vis-item-overflow';
	      dom.box.appendChild(dom.frame);

	      // contents box
	      dom.content = document.createElement('div');
	      dom.content.className = 'vis-item-content';
	      dom.frame.appendChild(dom.content);

	      // attach this item as attribute
	      dom.box['timeline-item'] = this;

	      this.dirty = true;
	    }

	    // append DOM to parent DOM
	    if (!this.parent) {
	      throw new Error('Cannot redraw item: no parent attached');
	    }
	    if (!dom.box.parentNode) {
	      var foreground = this.parent.dom.foreground;
	      if (!foreground) {
	        throw new Error('Cannot redraw item: parent has no foreground container element');
	      }
	      foreground.appendChild(dom.box);
	    }
	    this.displayed = true;

	    // Update DOM when item is marked dirty. An item is marked dirty when:
	    // - the item is not yet rendered
	    // - the item's data is changed
	    // - the item is selected/deselected
	    if (this.dirty) {
	      this._updateContents(this.dom.content);
	      this._updateTitle(this.dom.box);
	      this._updateDataAttributes(this.dom.box);
	      this._updateStyle(this.dom.box);

	      var editable = (this.options.editable.updateTime || this.options.editable.updateGroup || this.editable === true) && this.editable !== false;

	      // update class
	      var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
	      dom.box.className = this.baseClassName + className;

	      // determine from css whether this box has overflow
	      this.overflow = window.getComputedStyle(dom.frame).overflow !== 'hidden';

	      // recalculate size
	      // turn off max-width to be able to calculate the real width
	      // this causes an extra browser repaint/reflow, but so be it
	      this.dom.content.style.maxWidth = 'none';
	      this.props.content.width = this.dom.content.offsetWidth;
	      this.height = this.dom.box.offsetHeight;
	      this.dom.content.style.maxWidth = '';

	      this.dirty = false;
	    }

	    this._repaintOnItemUpdateTimeTooltip(dom.box);
	    this._repaintDeleteButton(dom.box);
	    this._repaintDragCenter();
	    this._repaintDragLeft();
	    this._repaintDragRight();
	  };

	  /**
	   * Show the item in the DOM (when not already visible). The items DOM will
	   * be created when needed.
	   */
	  RangeItem.prototype.show = function () {
	    if (!this.displayed) {
	      this.redraw();
	    }
	  };

	  /**
	   * Hide the item from the DOM (when visible)
	   * @return {Boolean} changed
	   */
	  RangeItem.prototype.hide = function () {
	    if (this.displayed) {
	      var box = this.dom.box;

	      if (box.parentNode) {
	        box.parentNode.removeChild(box);
	      }

	      this.displayed = false;
	    }
	  };

	  /**
	   * Reposition the item horizontally
	   * @param {boolean} [limitSize=true] If true (default), the width of the range
	   *                                   item will be limited, as the browser cannot
	   *                                   display very wide divs. This means though
	   *                                   that the applied left and width may
	   *                                   not correspond to the ranges start and end
	   * @Override
	   */
	  RangeItem.prototype.repositionX = function (limitSize) {
	    var parentWidth = this.parent.width;
	    var start = this.conversion.toScreen(this.data.start);
	    var end = this.conversion.toScreen(this.data.end);
	    var contentStartPosition;
	    var contentWidth;

	    // limit the width of the range, as browsers cannot draw very wide divs
	    if (limitSize === undefined || limitSize === true) {
	      if (start < -parentWidth) {
	        start = -parentWidth;
	      }
	      if (end > 2 * parentWidth) {
	        end = 2 * parentWidth;
	      }
	    }

	    // add 0.5 to compensate floating-point values rounding
	    var boxWidth = Math.max(end - start + 0.5, 1);

	    if (this.overflow) {
	      if (this.options.rtl) {
	        this.right = start;
	      } else {
	        this.left = start;
	      }
	      this.width = boxWidth + this.props.content.width;
	      contentWidth = this.props.content.width;

	      // Note: The calculation of width is an optimistic calculation, giving
	      //       a width which will not change when moving the Timeline
	      //       So no re-stacking needed, which is nicer for the eye;
	    } else {
	      if (this.options.rtl) {
	        this.right = start;
	      } else {
	        this.left = start;
	      }
	      this.width = boxWidth;
	      contentWidth = Math.min(end - start, this.props.content.width);
	    }

	    if (this.options.rtl) {
	      this.dom.box.style.right = this.right + 'px';
	    } else {
	      this.dom.box.style.left = this.left + 'px';
	    }
	    this.dom.box.style.width = boxWidth + 'px';

	    switch (this.options.align) {
	      case 'left':
	        if (this.options.rtl) {
	          this.dom.content.style.right = '0';
	        } else {
	          this.dom.content.style.left = '0';
	        }
	        break;

	      case 'right':
	        if (this.options.rtl) {
	          this.dom.content.style.right = Math.max(boxWidth - contentWidth, 0) + 'px';
	        } else {
	          this.dom.content.style.left = Math.max(boxWidth - contentWidth, 0) + 'px';
	        }
	        break;

	      case 'center':
	        if (this.options.rtl) {
	          this.dom.content.style.right = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
	        } else {
	          this.dom.content.style.left = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
	        }

	        break;

	      default:
	        // 'auto'
	        // when range exceeds left of the window, position the contents at the left of the visible area
	        if (this.overflow) {
	          if (end > 0) {
	            contentStartPosition = Math.max(-start, 0);
	          } else {
	            contentStartPosition = -contentWidth; // ensure it's not visible anymore
	          }
	        } else {
	          if (start < 0) {
	            contentStartPosition = -start;
	          } else {
	            contentStartPosition = 0;
	          }
	        }
	        if (this.options.rtl) {
	          this.dom.content.style.right = contentStartPosition + 'px';
	        } else {
	          this.dom.content.style.left = contentStartPosition + 'px';
	          this.dom.content.style.width = 'calc(100% - ' + contentStartPosition + 'px)';
	        }
	    }
	  };

	  /**
	   * Reposition the item vertically
	   * @Override
	   */
	  RangeItem.prototype.repositionY = function () {
	    var orientation = this.options.orientation.item;
	    var box = this.dom.box;

	    if (orientation == 'top') {
	      box.style.top = this.top + 'px';
	    } else {
	      box.style.top = this.parent.height - this.top - this.height + 'px';
	    }
	  };

	  /**
	   * Repaint a drag area on the left side of the range when the range is selected
	   * @protected
	   */
	  RangeItem.prototype._repaintDragLeft = function () {
	    if (this.selected && this.options.editable.updateTime && !this.dom.dragLeft) {
	      // create and show drag area
	      var dragLeft = document.createElement('div');
	      dragLeft.className = 'vis-drag-left';
	      dragLeft.dragLeftItem = this;

	      this.dom.box.appendChild(dragLeft);
	      this.dom.dragLeft = dragLeft;
	    } else if (!this.selected && this.dom.dragLeft) {
	      // delete drag area
	      if (this.dom.dragLeft.parentNode) {
	        this.dom.dragLeft.parentNode.removeChild(this.dom.dragLeft);
	      }
	      this.dom.dragLeft = null;
	    }
	  };

	  /**
	   * Repaint a drag area on the right side of the range when the range is selected
	   * @protected
	   */
	  RangeItem.prototype._repaintDragRight = function () {
	    if (this.selected && this.options.editable.updateTime && !this.dom.dragRight) {
	      // create and show drag area
	      var dragRight = document.createElement('div');
	      dragRight.className = 'vis-drag-right';
	      dragRight.dragRightItem = this;

	      this.dom.box.appendChild(dragRight);
	      this.dom.dragRight = dragRight;
	    } else if (!this.selected && this.dom.dragRight) {
	      // delete drag area
	      if (this.dom.dragRight.parentNode) {
	        this.dom.dragRight.parentNode.removeChild(this.dom.dragRight);
	      }
	      this.dom.dragRight = null;
	    }
	  };

	  module.exports = RangeItem;

	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Hammer = __webpack_require__(22);
	  var util = __webpack_require__(1);
	  var moment = __webpack_require__(2);

	  /**
	   * @constructor Item
	   * @param {Object} data             Object containing (optional) parameters type,
	   *                                  start, end, content, group, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} options          Configuration options
	   *                                  // TODO: describe available options
	   */
	  function Item(data, conversion, options) {
	    this.id = null;
	    this.parent = null;
	    this.data = data;
	    this.dom = null;
	    this.conversion = conversion || {};
	    this.options = options || {};
	    this.selected = false;
	    this.displayed = false;
	    this.dirty = true;

	    this.top = null;
	    this.right = null;
	    this.left = null;
	    this.width = null;
	    this.height = null;

	    this.editable = null;
	    if (this.data && this.data.hasOwnProperty('editable') && typeof this.data.editable === 'boolean') {
	      this.editable = data.editable;
	    }
	  }

	  Item.prototype.stack = true;

	  /**
	   * Select current item
	   */
	  Item.prototype.select = function () {
	    this.selected = true;
	    this.dirty = true;
	    if (this.displayed) this.redraw();
	  };

	  /**
	   * Unselect current item
	   */
	  Item.prototype.unselect = function () {
	    this.selected = false;
	    this.dirty = true;
	    if (this.displayed) this.redraw();
	  };

	  /**
	   * Set data for the item. Existing data will be updated. The id should not
	   * be changed. When the item is displayed, it will be redrawn immediately.
	   * @param {Object} data
	   */
	  Item.prototype.setData = function (data) {
	    var groupChanged = data.group != undefined && this.data.group != data.group;
	    if (groupChanged) {
	      this.parent.itemSet._moveToGroup(this, data.group);
	    }

	    if (data.hasOwnProperty('editable') && typeof data.editable === 'boolean') {
	      this.editable = data.editable;
	    }

	    this.data = data;
	    this.dirty = true;
	    if (this.displayed) this.redraw();
	  };

	  /**
	   * Set a parent for the item
	   * @param {ItemSet | Group} parent
	   */
	  Item.prototype.setParent = function (parent) {
	    if (this.displayed) {
	      this.hide();
	      this.parent = parent;
	      if (this.parent) {
	        this.show();
	      }
	    } else {
	      this.parent = parent;
	    }
	  };

	  /**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */
	  Item.prototype.isVisible = function (range) {
	    return false;
	  };

	  /**
	   * Show the Item in the DOM (when not already visible)
	   * @return {Boolean} changed
	   */
	  Item.prototype.show = function () {
	    return false;
	  };

	  /**
	   * Hide the Item from the DOM (when visible)
	   * @return {Boolean} changed
	   */
	  Item.prototype.hide = function () {
	    return false;
	  };

	  /**
	   * Repaint the item
	   */
	  Item.prototype.redraw = function () {
	    // should be implemented by the item
	  };

	  /**
	   * Reposition the Item horizontally
	   */
	  Item.prototype.repositionX = function () {
	    // should be implemented by the item
	  };

	  /**
	   * Reposition the Item vertically
	   */
	  Item.prototype.repositionY = function () {
	    // should be implemented by the item
	  };

	  /**
	   * Repaint a delete button on the top right of the item when the item is selected
	   * @param {HTMLElement} anchor
	   * @protected
	   */
	  Item.prototype._repaintDeleteButton = function (anchor) {
	    var editable = (this.options.editable.remove || this.data.editable === true) && this.data.editable !== false;

	    if (this.selected && editable && !this.dom.deleteButton) {
	      // create and show button
	      var me = this;

	      var deleteButton = document.createElement('div');

	      if (this.options.rtl) {
	        deleteButton.className = 'vis-delete-rtl';
	      } else {
	        deleteButton.className = 'vis-delete';
	      }
	      deleteButton.title = 'Delete this item';

	      // TODO: be able to destroy the delete button
	      new Hammer(deleteButton).on('tap', function (event) {
	        event.stopPropagation();
	        me.parent.removeFromDataSet(me);
	      });

	      anchor.appendChild(deleteButton);
	      this.dom.deleteButton = deleteButton;
	    } else if (!this.selected && this.dom.deleteButton) {
	      // remove button
	      if (this.dom.deleteButton.parentNode) {
	        this.dom.deleteButton.parentNode.removeChild(this.dom.deleteButton);
	      }
	      this.dom.deleteButton = null;
	    }
	  };

	  /**
	   * Repaint a onChange tooltip on the top right of the item when the item is selected
	   * @param {HTMLElement} anchor
	   * @protected
	   */
	  Item.prototype._repaintOnItemUpdateTimeTooltip = function (anchor) {
	    if (!this.options.tooltipOnItemUpdateTime) return;

	    var editable = (this.options.editable.updateTime || this.data.editable === true) && this.data.editable !== false;

	    if (this.selected && editable && !this.dom.onItemUpdateTimeTooltip) {
	      // create and show tooltip
	      var me = this;

	      var onItemUpdateTimeTooltip = document.createElement('div');

	      onItemUpdateTimeTooltip.className = 'vis-onUpdateTime-tooltip';
	      anchor.appendChild(onItemUpdateTimeTooltip);
	      this.dom.onItemUpdateTimeTooltip = onItemUpdateTimeTooltip;
	    } else if (!this.selected && this.dom.onItemUpdateTimeTooltip) {
	      // remove button
	      if (this.dom.onItemUpdateTimeTooltip.parentNode) {
	        this.dom.onItemUpdateTimeTooltip.parentNode.removeChild(this.dom.onItemUpdateTimeTooltip);
	      }
	      this.dom.onItemUpdateTimeTooltip = null;
	    }

	    // position onChange tooltip
	    if (this.dom.onItemUpdateTimeTooltip) {

	      // only show when editing
	      this.dom.onItemUpdateTimeTooltip.style.visibility = this.parent.itemSet.touchParams.itemIsDragging ? 'visible' : 'hidden';

	      // position relative to item's content
	      if (this.options.rtl) {
	        this.dom.onItemUpdateTimeTooltip.style.right = this.dom.content.style.right;
	      } else {
	        this.dom.onItemUpdateTimeTooltip.style.left = this.dom.content.style.left;
	      }

	      // position above or below the item depending on the item's position in the window
	      var tooltipOffset = 50; // TODO: should be tooltip height (depends on template)
	      var scrollTop = this.parent.itemSet.body.domProps.scrollTop;

	      // TODO: this.top for orientation:true is actually the items distance from the bottom... 
	      // (should be this.bottom)
	      var itemDistanceFromTop;
	      if (this.options.orientation.item == 'top') {
	        itemDistanceFromTop = this.top;
	      } else {
	        itemDistanceFromTop = this.parent.height - this.top - this.height;
	      }
	      var isCloseToTop = itemDistanceFromTop + this.parent.top - tooltipOffset < -scrollTop;

	      if (isCloseToTop) {
	        this.dom.onItemUpdateTimeTooltip.style.bottom = "";
	        this.dom.onItemUpdateTimeTooltip.style.top = this.height + 2 + "px";
	      } else {
	        this.dom.onItemUpdateTimeTooltip.style.top = "";
	        this.dom.onItemUpdateTimeTooltip.style.bottom = this.height + 2 + "px";
	      }

	      // handle tooltip content
	      var content;
	      var templateFunction;

	      if (this.options.tooltipOnItemUpdateTime && this.options.tooltipOnItemUpdateTime.template) {
	        templateFunction = this.options.tooltipOnItemUpdateTime.template.bind(this);
	        content = templateFunction(this.data);
	      } else {
	        content = 'start: ' + moment(this.data.start).format('MM/DD/YYYY hh:mm');
	        if (this.data.end) {
	          content += '<br> end: ' + moment(this.data.end).format('MM/DD/YYYY hh:mm');
	        }
	      }
	      this.dom.onItemUpdateTimeTooltip.innerHTML = content;
	    }
	  };

	  /**
	   * Set HTML contents for the item
	   * @param {Element} element   HTML element to fill with the contents
	   * @private
	   */
	  Item.prototype._updateContents = function (element) {
	    var content;
	    var templateFunction;

	    if (this.options.template) {
	      var itemData = this.parent.itemSet.itemsData.get(this.id); // get a clone of the data from the dataset
	      templateFunction = this.options.template.bind(this);
	      content = templateFunction(itemData, element);
	    } else {
	      content = this.data.content;
	    }

	    if (content instanceof Object && !(content instanceof Element)) {
	      templateFunction(itemData, element);
	    } else {
	      var changed = this._contentToString(this.content) !== this._contentToString(content);
	      if (changed) {
	        // only replace the content when changed
	        if (content instanceof Element) {
	          element.innerHTML = '';
	          element.appendChild(content);
	        } else if (content != undefined) {
	          element.innerHTML = content;
	        } else {
	          if (!(this.data.type == 'background' && this.data.content === undefined)) {
	            throw new Error('Property "content" missing in item ' + this.id);
	          }
	        }

	        this.content = content;
	      }
	    }
	  };

	  /**
	   * Set HTML contents for the item
	   * @param {Element} element   HTML element to fill with the contents
	   * @private
	   */
	  Item.prototype._updateTitle = function (element) {
	    if (this.data.title != null) {
	      element.title = this.data.title || '';
	    } else {
	      element.removeAttribute('vis-title');
	    }
	  };

	  /**
	   * Process dataAttributes timeline option and set as data- attributes on dom.content
	   * @param {Element} element   HTML element to which the attributes will be attached
	   * @private
	   */
	  Item.prototype._updateDataAttributes = function (element) {
	    if (this.options.dataAttributes && this.options.dataAttributes.length > 0) {
	      var attributes = [];

	      if (Array.isArray(this.options.dataAttributes)) {
	        attributes = this.options.dataAttributes;
	      } else if (this.options.dataAttributes == 'all') {
	        attributes = Object.keys(this.data);
	      } else {
	        return;
	      }

	      for (var i = 0; i < attributes.length; i++) {
	        var name = attributes[i];
	        var value = this.data[name];

	        if (value != null) {
	          element.setAttribute('data-' + name, value);
	        } else {
	          element.removeAttribute('data-' + name);
	        }
	      }
	    }
	  };

	  /**
	   * Update custom styles of the element
	   * @param element
	   * @private
	   */
	  Item.prototype._updateStyle = function (element) {
	    // remove old styles
	    if (this.style) {
	      util.removeCssText(element, this.style);
	      this.style = null;
	    }

	    // append new styles
	    if (this.data.style) {
	      util.addCssText(element, this.data.style);
	      this.style = this.data.style;
	    }
	  };

	  /**
	   * Stringify the items contents
	   * @param {string | Element | undefined} content
	   * @returns {string | undefined}
	   * @private
	   */
	  Item.prototype._contentToString = function (content) {
	    if (typeof content === 'string') return content;
	    if (content && 'outerHTML' in content) return content.outerHTML;
	    return content;
	  };

	  /**
	   * Return the width of the item left from its start date
	   * @return {number}
	   */
	  Item.prototype.getWidthLeft = function () {
	    return 0;
	  };

	  /**
	   * Return the width of the item right from the max of its start and end date
	   * @return {number}
	   */
	  Item.prototype.getWidthRight = function () {
	    return 0;
	  };

	  /**
	   * Repaint a drag area on the center of the item when the item is selected
	   * @protected
	   */
	  Item.prototype._repaintDragCenter = function () {
	    if (this.selected && this.options.editable.updateTime && !this.dom.dragCenter) {
	      // create and show drag area
	      var dragCenter = document.createElement('div');
	      dragCenter.className = 'vis-drag-center';
	      dragCenter.dragCenterItem = this;

	      if (this.dom.box) {
	        this.dom.box.appendChild(dragCenter);
	      } else if (this.dom.point) {
	        this.dom.point.appendChild(dragCenter);
	      }

	      this.dom.dragCenter = dragCenter;
	    } else if (!this.selected && this.dom.dragCenter) {
	      // delete drag area
	      if (this.dom.dragCenter.parentNode) {
	        this.dom.dragCenter.parentNode.removeChild(this.dom.dragCenter);
	      }
	      this.dom.dragCenter = null;
	    }
	  };

	  module.exports = Item;

	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);
	  var Group = __webpack_require__(38);

	  /**
	   * @constructor BackgroundGroup
	   * @param {Number | String} groupId
	   * @param {Object} data
	   * @param {ItemSet} itemSet
	   */
	  function BackgroundGroup(groupId, data, itemSet) {
	    Group.call(this, groupId, data, itemSet);

	    this.width = 0;
	    this.height = 0;
	    this.top = 0;
	    this.left = 0;
	  }

	  BackgroundGroup.prototype = Object.create(Group.prototype);

	  /**
	   * Repaint this group
	   * @param {{start: number, end: number}} range
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   * @param {boolean} [restack=false]  Force restacking of all items
	   * @return {boolean} Returns true if the group is resized
	   */
	  BackgroundGroup.prototype.redraw = function (range, margin, restack) {
	    var resized = false;

	    this.visibleItems = this._updateVisibleItems(this.orderedItems, this.visibleItems, range);

	    // calculate actual size
	    this.width = this.dom.background.offsetWidth;

	    // apply new height (just always zero for BackgroundGroup
	    this.dom.background.style.height = '0';

	    // update vertical position of items after they are re-stacked and the height of the group is calculated
	    for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
	      var item = this.visibleItems[i];
	      item.repositionY(margin);
	    }

	    return resized;
	  };

	  /**
	   * Show this group: attach to the DOM
	   */
	  BackgroundGroup.prototype.show = function () {
	    if (!this.dom.background.parentNode) {
	      this.itemSet.dom.background.appendChild(this.dom.background);
	    }
	  };

	  module.exports = BackgroundGroup;

	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Item = __webpack_require__(41);
	  var util = __webpack_require__(1);

	  /**
	   * @constructor BoxItem
	   * @extends Item
	   * @param {Object} data             Object containing parameters start
	   *                                  content, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} [options]        Configuration options
	   *                                  // TODO: describe available options
	   */
	  function BoxItem(data, conversion, options) {
	    this.props = {
	      dot: {
	        width: 0,
	        height: 0
	      },
	      line: {
	        width: 0,
	        height: 0
	      }
	    };
	    this.options = options;
	    // validate data
	    if (data) {
	      if (data.start == undefined) {
	        throw new Error('Property "start" missing in item ' + data);
	      }
	    }

	    Item.call(this, data, conversion, options);
	  }

	  BoxItem.prototype = new Item(null, null, null);

	  /**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */
	  BoxItem.prototype.isVisible = function (range) {
	    // determine visibility
	    var isVisible;
	    var align = this.options.align;
	    var msPerPixel = (range.end - range.start) / range.body.dom.center.clientWidth;
	    var widthInMs = this.width * msPerPixel;

	    if (align == 'right') {
	      isVisible = this.data.start.getTime() > range.start && this.data.start.getTime() - widthInMs < range.end;
	    } else if (align == 'left') {
	      isVisible = this.data.start.getTime() + widthInMs > range.start && this.data.start.getTime() < range.end;
	    } else {
	      // default or 'center'
	      isVisible = this.data.start.getTime() + widthInMs / 2 > range.start && this.data.start.getTime() - widthInMs / 2 < range.end;
	    }
	    return isVisible;
	  };

	  /**
	   * Repaint the item
	   */
	  BoxItem.prototype.redraw = function () {
	    var dom = this.dom;
	    if (!dom) {
	      // create DOM
	      this.dom = {};
	      dom = this.dom;

	      // create main box
	      dom.box = document.createElement('DIV');

	      // contents box (inside the background box). used for making margins
	      dom.content = document.createElement('DIV');
	      dom.content.className = 'vis-item-content';
	      dom.box.appendChild(dom.content);

	      // line to axis
	      dom.line = document.createElement('DIV');
	      dom.line.className = 'vis-line';

	      // dot on axis
	      dom.dot = document.createElement('DIV');
	      dom.dot.className = 'vis-dot';

	      // attach this item as attribute
	      dom.box['timeline-item'] = this;

	      this.dirty = true;
	    }

	    // append DOM to parent DOM
	    if (!this.parent) {
	      throw new Error('Cannot redraw item: no parent attached');
	    }
	    if (!dom.box.parentNode) {
	      var foreground = this.parent.dom.foreground;
	      if (!foreground) throw new Error('Cannot redraw item: parent has no foreground container element');
	      foreground.appendChild(dom.box);
	    }
	    if (!dom.line.parentNode) {
	      var background = this.parent.dom.background;
	      if (!background) throw new Error('Cannot redraw item: parent has no background container element');
	      background.appendChild(dom.line);
	    }
	    if (!dom.dot.parentNode) {
	      var axis = this.parent.dom.axis;
	      if (!background) throw new Error('Cannot redraw item: parent has no axis container element');
	      axis.appendChild(dom.dot);
	    }
	    this.displayed = true;

	    // Update DOM when item is marked dirty. An item is marked dirty when:
	    // - the item is not yet rendered
	    // - the item's data is changed
	    // - the item is selected/deselected
	    if (this.dirty) {
	      this._updateContents(this.dom.content);
	      this._updateTitle(this.dom.box);
	      this._updateDataAttributes(this.dom.box);
	      this._updateStyle(this.dom.box);

	      var editable = (this.options.editable.updateTime || this.options.editable.updateGroup || this.editable === true) && this.editable !== false;

	      // update class
	      var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
	      dom.box.className = 'vis-item vis-box' + className;
	      dom.line.className = 'vis-item vis-line' + className;
	      dom.dot.className = 'vis-item vis-dot' + className;

	      // set initial position in the visible range of the grid so that the
	      // rendered box size can be determinated correctly, even the content
	      // has a dynamic width (fixes #2032).
	      var previousRight = dom.box.style.right;
	      var previousLeft = dom.box.style.left;
	      if (this.options.rtl) {
	        dom.box.style.right = "0px";
	      } else {
	        dom.box.style.left = "0px";
	      }

	      // recalculate size
	      this.props.dot.height = dom.dot.offsetHeight;
	      this.props.dot.width = dom.dot.offsetWidth;
	      this.props.line.width = dom.line.offsetWidth;
	      this.width = dom.box.offsetWidth;
	      this.height = dom.box.offsetHeight;

	      // restore previous position
	      if (this.options.rtl) {
	        dom.box.style.right = previousRight;
	      } else {
	        dom.box.style.left = previousLeft;
	      }

	      this.dirty = false;
	    }

	    this._repaintOnItemUpdateTimeTooltip(dom.box);
	    this._repaintDragCenter();
	    this._repaintDeleteButton(dom.box);
	  };

	  /**
	   * Show the item in the DOM (when not already displayed). The items DOM will
	   * be created when needed.
	   */
	  BoxItem.prototype.show = function () {
	    if (!this.displayed) {
	      this.redraw();
	    }
	  };

	  /**
	   * Hide the item from the DOM (when visible)
	   */
	  BoxItem.prototype.hide = function () {
	    if (this.displayed) {
	      var dom = this.dom;

	      if (dom.box.parentNode) dom.box.parentNode.removeChild(dom.box);
	      if (dom.line.parentNode) dom.line.parentNode.removeChild(dom.line);
	      if (dom.dot.parentNode) dom.dot.parentNode.removeChild(dom.dot);

	      this.displayed = false;
	    }
	  };

	  /**
	   * Reposition the item horizontally
	   * @Override
	   */
	  BoxItem.prototype.repositionX = function () {
	    var start = this.conversion.toScreen(this.data.start);
	    var align = this.options.align;

	    // calculate left position of the box
	    if (align == 'right') {
	      if (this.options.rtl) {
	        this.right = start - this.width;

	        // reposition box, line, and dot
	        this.dom.box.style.right = this.right + 'px';
	        this.dom.line.style.right = start - this.props.line.width + 'px';
	        this.dom.dot.style.right = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
	      } else {
	        this.left = start - this.width;

	        // reposition box, line, and dot
	        this.dom.box.style.left = this.left + 'px';
	        this.dom.line.style.left = start - this.props.line.width + 'px';
	        this.dom.dot.style.left = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
	      }
	    } else if (align == 'left') {
	      if (this.options.rtl) {
	        this.right = start;

	        // reposition box, line, and dot
	        this.dom.box.style.right = this.right + 'px';
	        this.dom.line.style.right = start + 'px';
	        this.dom.dot.style.right = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
	      } else {
	        this.left = start;

	        // reposition box, line, and dot
	        this.dom.box.style.left = this.left + 'px';
	        this.dom.line.style.left = start + 'px';
	        this.dom.dot.style.left = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
	      }
	    } else {
	      // default or 'center'
	      if (this.options.rtl) {
	        this.right = start - this.width / 2;

	        // reposition box, line, and dot
	        this.dom.box.style.right = this.right + 'px';
	        this.dom.line.style.right = start - this.props.line.width + 'px';
	        this.dom.dot.style.right = start - this.props.dot.width / 2 + 'px';
	      } else {
	        this.left = start - this.width / 2;

	        // reposition box, line, and dot
	        this.dom.box.style.left = this.left + 'px';
	        this.dom.line.style.left = start - this.props.line.width / 2 + 'px';
	        this.dom.dot.style.left = start - this.props.dot.width / 2 + 'px';
	      }
	    }
	  };

	  /**
	   * Reposition the item vertically
	   * @Override
	   */
	  BoxItem.prototype.repositionY = function () {
	    var orientation = this.options.orientation.item;
	    var box = this.dom.box;
	    var line = this.dom.line;
	    var dot = this.dom.dot;

	    if (orientation == 'top') {
	      box.style.top = (this.top || 0) + 'px';

	      line.style.top = '0';
	      line.style.height = this.parent.top + this.top + 1 + 'px';
	      line.style.bottom = '';
	    } else {
	      // orientation 'bottom'
	      var itemSetHeight = this.parent.itemSet.props.height; // TODO: this is nasty
	      var lineHeight = itemSetHeight - this.parent.top - this.parent.height + this.top;

	      box.style.top = (this.parent.height - this.top - this.height || 0) + 'px';
	      line.style.top = itemSetHeight - lineHeight + 'px';
	      line.style.bottom = '0';
	    }

	    dot.style.top = -this.props.dot.height / 2 + 'px';
	  };

	  /**
	   * Return the width of the item left from its start date
	   * @return {number}
	   */
	  BoxItem.prototype.getWidthLeft = function () {
	    return this.width / 2;
	  };

	  /**
	   * Return the width of the item right from its start date
	   * @return {number}
	   */
	  BoxItem.prototype.getWidthRight = function () {
	    return this.width / 2;
	  };

	  module.exports = BoxItem;

	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Item = __webpack_require__(41);

	  /**
	   * @constructor PointItem
	   * @extends Item
	   * @param {Object} data             Object containing parameters start
	   *                                  content, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} [options]        Configuration options
	   *                                  // TODO: describe available options
	   */
	  function PointItem(data, conversion, options) {
	    this.props = {
	      dot: {
	        top: 0,
	        width: 0,
	        height: 0
	      },
	      content: {
	        height: 0,
	        marginLeft: 0,
	        marginRight: 0
	      }
	    };
	    this.options = options;
	    // validate data
	    if (data) {
	      if (data.start == undefined) {
	        throw new Error('Property "start" missing in item ' + data);
	      }
	    }

	    Item.call(this, data, conversion, options);
	  }

	  PointItem.prototype = new Item(null, null, null);

	  /**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */
	  PointItem.prototype.isVisible = function (range) {
	    // determine visibility
	    var msPerPixel = (range.end - range.start) / range.body.dom.center.clientWidth;
	    var widthInMs = this.width * msPerPixel;

	    return this.data.start.getTime() + widthInMs > range.start && this.data.start < range.end;
	  };

	  /**
	   * Repaint the item
	   */
	  PointItem.prototype.redraw = function () {
	    var dom = this.dom;
	    if (!dom) {
	      // create DOM
	      this.dom = {};
	      dom = this.dom;

	      // background box
	      dom.point = document.createElement('div');
	      // className is updated in redraw()

	      // contents box, right from the dot
	      dom.content = document.createElement('div');
	      dom.content.className = 'vis-item-content';
	      dom.point.appendChild(dom.content);

	      // dot at start
	      dom.dot = document.createElement('div');
	      dom.point.appendChild(dom.dot);

	      // attach this item as attribute
	      dom.point['timeline-item'] = this;

	      this.dirty = true;
	    }

	    // append DOM to parent DOM
	    if (!this.parent) {
	      throw new Error('Cannot redraw item: no parent attached');
	    }
	    if (!dom.point.parentNode) {
	      var foreground = this.parent.dom.foreground;
	      if (!foreground) {
	        throw new Error('Cannot redraw item: parent has no foreground container element');
	      }
	      foreground.appendChild(dom.point);
	    }
	    this.displayed = true;

	    // Update DOM when item is marked dirty. An item is marked dirty when:
	    // - the item is not yet rendered
	    // - the item's data is changed
	    // - the item is selected/deselected
	    if (this.dirty) {
	      this._updateContents(this.dom.content);
	      this._updateTitle(this.dom.point);
	      this._updateDataAttributes(this.dom.point);
	      this._updateStyle(this.dom.point);

	      var editable = (this.options.editable.updateTime || this.options.editable.updateGroup || this.editable === true) && this.editable !== false;

	      // update class
	      var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
	      dom.point.className = 'vis-item vis-point' + className;
	      dom.dot.className = 'vis-item vis-dot' + className;

	      // recalculate size of dot and contents
	      this.props.dot.width = dom.dot.offsetWidth;
	      this.props.dot.height = dom.dot.offsetHeight;
	      this.props.content.height = dom.content.offsetHeight;

	      // resize contents
	      if (this.options.rtl) {
	        dom.content.style.marginRight = 2 * this.props.dot.width + 'px';
	      } else {
	        dom.content.style.marginLeft = 2 * this.props.dot.width + 'px';
	      }
	      //dom.content.style.marginRight = ... + 'px'; // TODO: margin right

	      // recalculate size
	      this.width = dom.point.offsetWidth;
	      this.height = dom.point.offsetHeight;

	      // reposition the dot
	      dom.dot.style.top = (this.height - this.props.dot.height) / 2 + 'px';
	      if (this.options.rtl) {
	        dom.dot.style.right = this.props.dot.width / 2 + 'px';
	      } else {
	        dom.dot.style.left = this.props.dot.width / 2 + 'px';
	      }

	      this.dirty = false;
	    }

	    this._repaintOnItemUpdateTimeTooltip(dom.point);
	    this._repaintDragCenter();
	    this._repaintDeleteButton(dom.point);
	  };

	  /**
	   * Show the item in the DOM (when not already visible). The items DOM will
	   * be created when needed.
	   */
	  PointItem.prototype.show = function () {
	    if (!this.displayed) {
	      this.redraw();
	    }
	  };

	  /**
	   * Hide the item from the DOM (when visible)
	   */
	  PointItem.prototype.hide = function () {
	    if (this.displayed) {
	      if (this.dom.point.parentNode) {
	        this.dom.point.parentNode.removeChild(this.dom.point);
	      }

	      this.displayed = false;
	    }
	  };

	  /**
	   * Reposition the item horizontally
	   * @Override
	   */
	  PointItem.prototype.repositionX = function () {
	    var start = this.conversion.toScreen(this.data.start);

	    if (this.options.rtl) {
	      this.right = start - this.props.dot.width;

	      // reposition point
	      this.dom.point.style.right = this.right + 'px';
	    } else {
	      this.left = start - this.props.dot.width;

	      // reposition point
	      this.dom.point.style.left = this.left + 'px';
	    }
	  };

	  /**
	   * Reposition the item vertically
	   * @Override
	   */
	  PointItem.prototype.repositionY = function () {
	    var orientation = this.options.orientation.item;
	    var point = this.dom.point;
	    if (orientation == 'top') {
	      point.style.top = this.top + 'px';
	    } else {
	      point.style.top = this.parent.height - this.top - this.height + 'px';
	    }
	  };

	  /**
	   * Return the width of the item left from its start date
	   * @return {number}
	   */
	  PointItem.prototype.getWidthLeft = function () {
	    return this.props.dot.width;
	  };

	  /**
	   * Return the width of the item right from  its start date
	   * @return {number}
	   */
	  PointItem.prototype.getWidthRight = function () {
	    return this.props.dot.width;
	  };

	  module.exports = PointItem;

	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Hammer = __webpack_require__(22);
	  var Item = __webpack_require__(41);
	  var BackgroundGroup = __webpack_require__(42);
	  var RangeItem = __webpack_require__(40);

	  /**
	   * @constructor BackgroundItem
	   * @extends Item
	   * @param {Object} data             Object containing parameters start, end
	   *                                  content, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} [options]        Configuration options
	   *                                  // TODO: describe options
	   */
	  // TODO: implement support for the BackgroundItem just having a start, then being displayed as a sort of an annotation
	  function BackgroundItem(data, conversion, options) {
	    this.props = {
	      content: {
	        width: 0
	      }
	    };
	    this.overflow = false; // if contents can overflow (css styling), this flag is set to true

	    // validate data
	    if (data) {
	      if (data.start == undefined) {
	        throw new Error('Property "start" missing in item ' + data.id);
	      }
	      if (data.end == undefined) {
	        throw new Error('Property "end" missing in item ' + data.id);
	      }
	    }

	    Item.call(this, data, conversion, options);
	  }

	  BackgroundItem.prototype = new Item(null, null, null);

	  BackgroundItem.prototype.baseClassName = 'vis-item vis-background';
	  BackgroundItem.prototype.stack = false;

	  /**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */
	  BackgroundItem.prototype.isVisible = function (range) {
	    // determine visibility
	    return this.data.start < range.end && this.data.end > range.start;
	  };

	  /**
	   * Repaint the item
	   */
	  BackgroundItem.prototype.redraw = function () {
	    var dom = this.dom;
	    if (!dom) {
	      // create DOM
	      this.dom = {};
	      dom = this.dom;

	      // background box
	      dom.box = document.createElement('div');
	      // className is updated in redraw()

	      // frame box (to prevent the item contents from overflowing
	      dom.frame = document.createElement('div');
	      dom.frame.className = 'vis-item-overflow';
	      dom.box.appendChild(dom.frame);

	      // contents box
	      dom.content = document.createElement('div');
	      dom.content.className = 'vis-item-content';
	      dom.frame.appendChild(dom.content);

	      // Note: we do NOT attach this item as attribute to the DOM,
	      //       such that background items cannot be selected
	      //dom.box['timeline-item'] = this;

	      this.dirty = true;
	    }

	    // append DOM to parent DOM
	    if (!this.parent) {
	      throw new Error('Cannot redraw item: no parent attached');
	    }
	    if (!dom.box.parentNode) {
	      var background = this.parent.dom.background;
	      if (!background) {
	        throw new Error('Cannot redraw item: parent has no background container element');
	      }
	      background.appendChild(dom.box);
	    }
	    this.displayed = true;

	    // Update DOM when item is marked dirty. An item is marked dirty when:
	    // - the item is not yet rendered
	    // - the item's data is changed
	    // - the item is selected/deselected
	    if (this.dirty) {
	      this._updateContents(this.dom.content);
	      this._updateTitle(this.dom.content);
	      this._updateDataAttributes(this.dom.content);
	      this._updateStyle(this.dom.box);

	      // update class
	      var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '');
	      dom.box.className = this.baseClassName + className;

	      // determine from css whether this box has overflow
	      this.overflow = window.getComputedStyle(dom.content).overflow !== 'hidden';

	      // recalculate size
	      this.props.content.width = this.dom.content.offsetWidth;
	      this.height = 0; // set height zero, so this item will be ignored when stacking items

	      this.dirty = false;
	    }
	  };

	  /**
	   * Show the item in the DOM (when not already visible). The items DOM will
	   * be created when needed.
	   */
	  BackgroundItem.prototype.show = RangeItem.prototype.show;

	  /**
	   * Hide the item from the DOM (when visible)
	   * @return {Boolean} changed
	   */
	  BackgroundItem.prototype.hide = RangeItem.prototype.hide;

	  /**
	   * Reposition the item horizontally
	   * @Override
	   */
	  BackgroundItem.prototype.repositionX = RangeItem.prototype.repositionX;

	  /**
	   * Reposition the item vertically
	   * @Override
	   */
	  BackgroundItem.prototype.repositionY = function (margin) {
	    var onTop = this.options.orientation.item === 'top';
	    this.dom.content.style.top = onTop ? '' : '0';
	    this.dom.content.style.bottom = onTop ? '0' : '';
	    var height;

	    // special positioning for subgroups
	    if (this.data.subgroup !== undefined) {
	      // TODO: instead of calculating the top position of the subgroups here for every BackgroundItem, calculate the top of the subgroup once in Itemset

	      var itemSubgroup = this.data.subgroup;
	      var subgroups = this.parent.subgroups;
	      var subgroupIndex = subgroups[itemSubgroup].index;
	      // if the orientation is top, we need to take the difference in height into account.
	      if (onTop == true) {
	        // the first subgroup will have to account for the distance from the top to the first item.
	        height = this.parent.subgroups[itemSubgroup].height + margin.item.vertical;
	        height += subgroupIndex == 0 ? margin.axis - 0.5 * margin.item.vertical : 0;
	        var newTop = this.parent.top;
	        for (var subgroup in subgroups) {
	          if (subgroups.hasOwnProperty(subgroup)) {
	            if (subgroups[subgroup].visible == true && subgroups[subgroup].index < subgroupIndex) {
	              newTop += subgroups[subgroup].height + margin.item.vertical;
	            }
	          }
	        }

	        // the others will have to be offset downwards with this same distance.
	        newTop += subgroupIndex != 0 ? margin.axis - 0.5 * margin.item.vertical : 0;
	        this.dom.box.style.top = newTop + 'px';
	        this.dom.box.style.bottom = '';
	      }
	      // and when the orientation is bottom:
	      else {
	          var newTop = this.parent.top;
	          var totalHeight = 0;
	          for (var subgroup in subgroups) {
	            if (subgroups.hasOwnProperty(subgroup)) {
	              if (subgroups[subgroup].visible == true) {
	                var newHeight = subgroups[subgroup].height + margin.item.vertical;
	                totalHeight += newHeight;
	                if (subgroups[subgroup].index > subgroupIndex) {
	                  newTop += newHeight;
	                }
	              }
	            }
	          }
	          height = this.parent.subgroups[itemSubgroup].height + margin.item.vertical;
	          this.dom.box.style.top = this.parent.height - totalHeight + newTop + 'px';
	          this.dom.box.style.bottom = '';
	        }
	    }
	    // and in the case of no subgroups:
	    else {
	        // we want backgrounds with groups to only show in groups.
	        if (this.parent instanceof BackgroundGroup) {
	          // if the item is not in a group:
	          height = Math.max(this.parent.height, this.parent.itemSet.body.domProps.center.height, this.parent.itemSet.body.domProps.centerContainer.height);
	          this.dom.box.style.top = onTop ? '0' : '';
	          this.dom.box.style.bottom = onTop ? '' : '0';
	        } else {
	          height = this.parent.height;
	          // same alignment for items when orientation is top or bottom
	          this.dom.box.style.top = this.parent.top + 'px';
	          this.dom.box.style.bottom = '';
	        }
	      }
	    this.dom.box.style.height = height + 'px';
	  };

	  module.exports = BackgroundItem;

	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var util = __webpack_require__(1);
	  var Component = __webpack_require__(33);
	  var TimeStep = __webpack_require__(37);
	  var DateUtil = __webpack_require__(34);
	  var moment = __webpack_require__(2);

	  /**
	   * A horizontal time axis
	   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
	   * @param {Object} [options]        See TimeAxis.setOptions for the available
	   *                                  options.
	   * @constructor TimeAxis
	   * @extends Component
	   */
	  function TimeAxis(body, options) {
	    this.dom = {
	      foreground: null,
	      lines: [],
	      majorTexts: [],
	      minorTexts: [],
	      redundant: {
	        lines: [],
	        majorTexts: [],
	        minorTexts: []
	      }
	    };
	    this.props = {
	      range: {
	        start: 0,
	        end: 0,
	        minimumStep: 0
	      },
	      lineTop: 0
	    };

	    this.defaultOptions = {
	      orientation: {
	        axis: 'bottom'
	      }, // axis orientation: 'top' or 'bottom'
	      showMinorLabels: true,
	      showMajorLabels: true,
	      maxMinorChars: 7,
	      format: TimeStep.FORMAT,
	      moment: moment,
	      timeAxis: null
	    };
	    this.options = util.extend({}, this.defaultOptions);

	    this.body = body;

	    // create the HTML DOM
	    this._create();

	    this.setOptions(options);
	  }

	  TimeAxis.prototype = new Component();

	  /**
	   * Set options for the TimeAxis.
	   * Parameters will be merged in current options.
	   * @param {Object} options  Available options:
	   *                          {string} [orientation.axis]
	   *                          {boolean} [showMinorLabels]
	   *                          {boolean} [showMajorLabels]
	   */
	  TimeAxis.prototype.setOptions = function (options) {
	    if (options) {
	      // copy all options that we know
	      util.selectiveExtend(['showMinorLabels', 'showMajorLabels', 'maxMinorChars', 'hiddenDates', 'timeAxis', 'moment', 'rtl'], this.options, options);

	      // deep copy the format options
	      util.selectiveDeepExtend(['format'], this.options, options);

	      if ('orientation' in options) {
	        if (typeof options.orientation === 'string') {
	          this.options.orientation.axis = options.orientation;
	        } else if (_typeof(options.orientation) === 'object' && 'axis' in options.orientation) {
	          this.options.orientation.axis = options.orientation.axis;
	        }
	      }

	      // apply locale to moment.js
	      // TODO: not so nice, this is applied globally to moment.js
	      if ('locale' in options) {
	        if (typeof moment.locale === 'function') {
	          // moment.js 2.8.1+
	          moment.locale(options.locale);
	        } else {
	          moment.lang(options.locale);
	        }
	      }
	    }
	  };

	  /**
	   * Create the HTML DOM for the TimeAxis
	   */
	  TimeAxis.prototype._create = function () {
	    this.dom.foreground = document.createElement('div');
	    this.dom.background = document.createElement('div');

	    this.dom.foreground.className = 'vis-time-axis vis-foreground';
	    this.dom.background.className = 'vis-time-axis vis-background';
	  };

	  /**
	   * Destroy the TimeAxis
	   */
	  TimeAxis.prototype.destroy = function () {
	    // remove from DOM
	    if (this.dom.foreground.parentNode) {
	      this.dom.foreground.parentNode.removeChild(this.dom.foreground);
	    }
	    if (this.dom.background.parentNode) {
	      this.dom.background.parentNode.removeChild(this.dom.background);
	    }

	    this.body = null;
	  };

	  /**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */
	  TimeAxis.prototype.redraw = function () {
	    var props = this.props;
	    var foreground = this.dom.foreground;
	    var background = this.dom.background;

	    // determine the correct parent DOM element (depending on option orientation)
	    var parent = this.options.orientation.axis == 'top' ? this.body.dom.top : this.body.dom.bottom;
	    var parentChanged = foreground.parentNode !== parent;

	    // calculate character width and height
	    this._calculateCharSize();

	    // TODO: recalculate sizes only needed when parent is resized or options is changed
	    var showMinorLabels = this.options.showMinorLabels && this.options.orientation.axis !== 'none';
	    var showMajorLabels = this.options.showMajorLabels && this.options.orientation.axis !== 'none';

	    // determine the width and height of the elemens for the axis
	    props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
	    props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;
	    props.height = props.minorLabelHeight + props.majorLabelHeight;
	    props.width = foreground.offsetWidth;

	    props.minorLineHeight = this.body.domProps.root.height - props.majorLabelHeight - (this.options.orientation.axis == 'top' ? this.body.domProps.bottom.height : this.body.domProps.top.height);
	    props.minorLineWidth = 1; // TODO: really calculate width
	    props.majorLineHeight = props.minorLineHeight + props.majorLabelHeight;
	    props.majorLineWidth = 1; // TODO: really calculate width

	    //  take foreground and background offline while updating (is almost twice as fast)
	    var foregroundNextSibling = foreground.nextSibling;
	    var backgroundNextSibling = background.nextSibling;
	    foreground.parentNode && foreground.parentNode.removeChild(foreground);
	    background.parentNode && background.parentNode.removeChild(background);

	    foreground.style.height = this.props.height + 'px';

	    this._repaintLabels();

	    // put DOM online again (at the same place)
	    if (foregroundNextSibling) {
	      parent.insertBefore(foreground, foregroundNextSibling);
	    } else {
	      parent.appendChild(foreground);
	    }
	    if (backgroundNextSibling) {
	      this.body.dom.backgroundVertical.insertBefore(background, backgroundNextSibling);
	    } else {
	      this.body.dom.backgroundVertical.appendChild(background);
	    }
	    return this._isResized() || parentChanged;
	  };

	  /**
	   * Repaint major and minor text labels and vertical grid lines
	   * @private
	   */
	  TimeAxis.prototype._repaintLabels = function () {
	    var orientation = this.options.orientation.axis;

	    // calculate range and step (step such that we have space for 7 characters per label)
	    var start = util.convert(this.body.range.start, 'Number');
	    var end = util.convert(this.body.range.end, 'Number');
	    var timeLabelsize = this.body.util.toTime((this.props.minorCharWidth || 10) * this.options.maxMinorChars).valueOf();
	    var minimumStep = timeLabelsize - DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this.body.range, timeLabelsize);
	    minimumStep -= this.body.util.toTime(0).valueOf();

	    var step = new TimeStep(new Date(start), new Date(end), minimumStep, this.body.hiddenDates);
	    step.setMoment(this.options.moment);
	    if (this.options.format) {
	      step.setFormat(this.options.format);
	    }
	    if (this.options.timeAxis) {
	      step.setScale(this.options.timeAxis);
	    }
	    this.step = step;

	    // Move all DOM elements to a "redundant" list, where they
	    // can be picked for re-use, and clear the lists with lines and texts.
	    // At the end of the function _repaintLabels, left over elements will be cleaned up
	    var dom = this.dom;
	    dom.redundant.lines = dom.lines;
	    dom.redundant.majorTexts = dom.majorTexts;
	    dom.redundant.minorTexts = dom.minorTexts;
	    dom.lines = [];
	    dom.majorTexts = [];
	    dom.minorTexts = [];

	    var current;
	    var next;
	    var x;
	    var xNext;
	    var isMajor, nextIsMajor;
	    var width = 0,
	        prevWidth;
	    var line;
	    var labelMinor;
	    var xFirstMajorLabel = undefined;
	    var count = 0;
	    var MAX = 1000;
	    var className;

	    step.start();
	    next = step.getCurrent();
	    xNext = this.body.util.toScreen(next);
	    while (step.hasNext() && count < MAX) {
	      count++;

	      isMajor = step.isMajor();
	      className = step.getClassName();
	      labelMinor = step.getLabelMinor();

	      current = next;
	      x = xNext;

	      step.next();
	      next = step.getCurrent();
	      nextIsMajor = step.isMajor();
	      xNext = this.body.util.toScreen(next);

	      prevWidth = width;
	      width = xNext - x;
	      var showMinorGrid = width >= prevWidth * 0.4; // prevent displaying of the 31th of the month on a scale of 5 days

	      if (this.options.showMinorLabels && showMinorGrid) {
	        var label = this._repaintMinorText(x, labelMinor, orientation, className);
	        label.style.width = width + 'px'; // set width to prevent overflow
	      }

	      if (isMajor && this.options.showMajorLabels) {
	        if (x > 0) {
	          if (xFirstMajorLabel == undefined) {
	            xFirstMajorLabel = x;
	          }
	          label = this._repaintMajorText(x, step.getLabelMajor(), orientation, className);
	        }
	        line = this._repaintMajorLine(x, width, orientation, className);
	      } else {
	        // minor line
	        if (showMinorGrid) {
	          line = this._repaintMinorLine(x, width, orientation, className);
	        } else {
	          if (line) {
	            // adjust the width of the previous grid
	            line.style.width = parseInt(line.style.width) + width + 'px';
	          }
	        }
	      }
	    }

	    if (count === MAX && !warnedForOverflow) {
	      console.warn('Something is wrong with the Timeline scale. Limited drawing of grid lines to ' + MAX + ' lines.');
	      warnedForOverflow = true;
	    }

	    // create a major label on the left when needed
	    if (this.options.showMajorLabels) {
	      var leftTime = this.body.util.toTime(0),
	          leftText = step.getLabelMajor(leftTime),
	          widthText = leftText.length * (this.props.majorCharWidth || 10) + 10; // upper bound estimation

	      if (xFirstMajorLabel == undefined || widthText < xFirstMajorLabel) {
	        this._repaintMajorText(0, leftText, orientation, className);
	      }
	    }

	    // Cleanup leftover DOM elements from the redundant list
	    util.forEach(this.dom.redundant, function (arr) {
	      while (arr.length) {
	        var elem = arr.pop();
	        if (elem && elem.parentNode) {
	          elem.parentNode.removeChild(elem);
	        }
	      }
	    });
	  };

	  /**
	   * Create a minor label for the axis at position x
	   * @param {Number} x
	   * @param {String} text
	   * @param {String} orientation   "top" or "bottom" (default)
	   * @param {String} className
	   * @return {Element} Returns the HTML element of the created label
	   * @private
	   */
	  TimeAxis.prototype._repaintMinorText = function (x, text, orientation, className) {
	    // reuse redundant label
	    var label = this.dom.redundant.minorTexts.shift();

	    if (!label) {
	      // create new label
	      var content = document.createTextNode('');
	      label = document.createElement('div');
	      label.appendChild(content);
	      this.dom.foreground.appendChild(label);
	    }
	    this.dom.minorTexts.push(label);

	    label.childNodes[0].nodeValue = text;

	    label.style.top = orientation == 'top' ? this.props.majorLabelHeight + 'px' : '0';

	    if (this.options.rtl) {
	      label.style.left = "";
	      label.style.right = x + 'px';
	    } else {
	      label.style.left = x + 'px';
	    };
	    label.className = 'vis-text vis-minor ' + className;
	    //label.title = title;  // TODO: this is a heavy operation

	    return label;
	  };

	  /**
	   * Create a Major label for the axis at position x
	   * @param {Number} x
	   * @param {String} text
	   * @param {String} orientation   "top" or "bottom" (default)
	   * @param {String} className
	   * @return {Element} Returns the HTML element of the created label
	   * @private
	   */
	  TimeAxis.prototype._repaintMajorText = function (x, text, orientation, className) {
	    // reuse redundant label
	    var label = this.dom.redundant.majorTexts.shift();

	    if (!label) {
	      // create label
	      var content = document.createTextNode(text);
	      label = document.createElement('div');
	      label.appendChild(content);
	      this.dom.foreground.appendChild(label);
	    }
	    this.dom.majorTexts.push(label);

	    label.childNodes[0].nodeValue = text;
	    label.className = 'vis-text vis-major ' + className;
	    //label.title = title; // TODO: this is a heavy operation

	    label.style.top = orientation == 'top' ? '0' : this.props.minorLabelHeight + 'px';
	    if (this.options.rtl) {
	      label.style.left = "";
	      label.style.right = x + 'px';
	    } else {
	      label.style.left = x + 'px';
	    };

	    return label;
	  };

	  /**
	   * Create a minor line for the axis at position x
	   * @param {Number} x
	   * @param {Number} width
	   * @param {String} orientation   "top" or "bottom" (default)
	   * @param {String} className
	   * @return {Element} Returns the created line
	   * @private
	   */
	  TimeAxis.prototype._repaintMinorLine = function (x, width, orientation, className) {
	    // reuse redundant line
	    var line = this.dom.redundant.lines.shift();
	    if (!line) {
	      // create vertical line
	      line = document.createElement('div');
	      this.dom.background.appendChild(line);
	    }
	    this.dom.lines.push(line);

	    var props = this.props;
	    if (orientation == 'top') {
	      line.style.top = props.majorLabelHeight + 'px';
	    } else {
	      line.style.top = this.body.domProps.top.height + 'px';
	    }
	    line.style.height = props.minorLineHeight + 'px';
	    if (this.options.rtl) {
	      line.style.left = "";
	      line.style.right = x - props.minorLineWidth / 2 + 'px';
	      line.className = 'vis-grid vis-vertical-rtl vis-minor ' + className;
	    } else {
	      line.style.left = x - props.minorLineWidth / 2 + 'px';
	      line.className = 'vis-grid vis-vertical vis-minor ' + className;
	    };
	    line.style.width = width + 'px';

	    return line;
	  };

	  /**
	   * Create a Major line for the axis at position x
	   * @param {Number} x
	   * @param {Number} width
	   * @param {String} orientation   "top" or "bottom" (default)
	   * @param {String} className
	   * @return {Element} Returns the created line
	   * @private
	   */
	  TimeAxis.prototype._repaintMajorLine = function (x, width, orientation, className) {
	    // reuse redundant line
	    var line = this.dom.redundant.lines.shift();
	    if (!line) {
	      // create vertical line
	      line = document.createElement('div');
	      this.dom.background.appendChild(line);
	    }
	    this.dom.lines.push(line);

	    var props = this.props;
	    if (orientation == 'top') {
	      line.style.top = '0';
	    } else {
	      line.style.top = this.body.domProps.top.height + 'px';
	    }

	    if (this.options.rtl) {
	      line.style.left = "";
	      line.style.right = x - props.majorLineWidth / 2 + 'px';
	      line.className = 'vis-grid vis-vertical-rtl vis-major ' + className;
	    } else {
	      line.style.left = x - props.majorLineWidth / 2 + 'px';
	      line.className = 'vis-grid vis-vertical vis-major ' + className;
	    }

	    line.style.height = props.majorLineHeight + 'px';
	    line.style.width = width + 'px';

	    return line;
	  };

	  /**
	   * Determine the size of text on the axis (both major and minor axis).
	   * The size is calculated only once and then cached in this.props.
	   * @private
	   */
	  TimeAxis.prototype._calculateCharSize = function () {
	    // Note: We calculate char size with every redraw. Size may change, for
	    // example when any of the timelines parents had display:none for example.

	    // determine the char width and height on the minor axis
	    if (!this.dom.measureCharMinor) {
	      this.dom.measureCharMinor = document.createElement('DIV');
	      this.dom.measureCharMinor.className = 'vis-text vis-minor vis-measure';
	      this.dom.measureCharMinor.style.position = 'absolute';

	      this.dom.measureCharMinor.appendChild(document.createTextNode('0'));
	      this.dom.foreground.appendChild(this.dom.measureCharMinor);
	    }
	    this.props.minorCharHeight = this.dom.measureCharMinor.clientHeight;
	    this.props.minorCharWidth = this.dom.measureCharMinor.clientWidth;

	    // determine the char width and height on the major axis
	    if (!this.dom.measureCharMajor) {
	      this.dom.measureCharMajor = document.createElement('DIV');
	      this.dom.measureCharMajor.className = 'vis-text vis-major vis-measure';
	      this.dom.measureCharMajor.style.position = 'absolute';

	      this.dom.measureCharMajor.appendChild(document.createTextNode('0'));
	      this.dom.foreground.appendChild(this.dom.measureCharMajor);
	    }
	    this.props.majorCharHeight = this.dom.measureCharMajor.clientHeight;
	    this.props.majorCharWidth = this.dom.measureCharMajor.clientWidth;
	  };

	  var warnedForOverflow = false;

	  module.exports = TimeAxis;

	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var keycharm = __webpack_require__(25);
	  var Emitter = __webpack_require__(13);
	  var Hammer = __webpack_require__(22);
	  var util = __webpack_require__(1);

	  /**
	   * Turn an element into an clickToUse element.
	   * When not active, the element has a transparent overlay. When the overlay is
	   * clicked, the mode is changed to active.
	   * When active, the element is displayed with a blue border around it, and
	   * the interactive contents of the element can be used. When clicked outside
	   * the element, the elements mode is changed to inactive.
	   * @param {Element} container
	   * @constructor
	   */
	  function Activator(container) {
	    this.active = false;

	    this.dom = {
	      container: container
	    };

	    this.dom.overlay = document.createElement('div');
	    this.dom.overlay.className = 'vis-overlay';

	    this.dom.container.appendChild(this.dom.overlay);

	    this.hammer = Hammer(this.dom.overlay);
	    this.hammer.on('tap', this._onTapOverlay.bind(this));

	    // block all touch events (except tap)
	    var me = this;
	    var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'];
	    events.forEach(function (event) {
	      me.hammer.on(event, function (event) {
	        event.stopPropagation();
	      });
	    });

	    // attach a click event to the window, in order to deactivate when clicking outside the timeline
	    if (document && document.body) {
	      this.onClick = function (event) {
	        if (!_hasParent(event.target, container)) {
	          me.deactivate();
	        }
	      };
	      document.body.addEventListener('click', this.onClick);
	    }

	    if (this.keycharm !== undefined) {
	      this.keycharm.destroy();
	    }
	    this.keycharm = keycharm();

	    // keycharm listener only bounded when active)
	    this.escListener = this.deactivate.bind(this);
	  }

	  // turn into an event emitter
	  Emitter(Activator.prototype);

	  // The currently active activator
	  Activator.current = null;

	  /**
	   * Destroy the activator. Cleans up all created DOM and event listeners
	   */
	  Activator.prototype.destroy = function () {
	    this.deactivate();

	    // remove dom
	    this.dom.overlay.parentNode.removeChild(this.dom.overlay);

	    // remove global event listener
	    if (this.onClick) {
	      document.body.removeEventListener('click', this.onClick);
	    }

	    // cleanup hammer instances
	    this.hammer.destroy();
	    this.hammer = null;
	    // FIXME: cleaning up hammer instances doesn't work (Timeline not removed from memory)
	  };

	  /**
	   * Activate the element
	   * Overlay is hidden, element is decorated with a blue shadow border
	   */
	  Activator.prototype.activate = function () {
	    // we allow only one active activator at a time
	    if (Activator.current) {
	      Activator.current.deactivate();
	    }
	    Activator.current = this;

	    this.active = true;
	    this.dom.overlay.style.display = 'none';
	    util.addClassName(this.dom.container, 'vis-active');

	    this.emit('change');
	    this.emit('activate');

	    // ugly hack: bind ESC after emitting the events, as the Network rebinds all
	    // keyboard events on a 'change' event
	    this.keycharm.bind('esc', this.escListener);
	  };

	  /**
	   * Deactivate the element
	   * Overlay is displayed on top of the element
	   */
	  Activator.prototype.deactivate = function () {
	    this.active = false;
	    this.dom.overlay.style.display = '';
	    util.removeClassName(this.dom.container, 'vis-active');
	    this.keycharm.unbind('esc', this.escListener);

	    this.emit('change');
	    this.emit('deactivate');
	  };

	  /**
	   * Handle a tap event: activate the container
	   * @param event
	   * @private
	   */
	  Activator.prototype._onTapOverlay = function (event) {
	    // activate the container
	    this.activate();
	    event.stopPropagation();
	  };

	  /**
	   * Test whether the element has the requested parent element somewhere in
	   * its chain of parent nodes.
	   * @param {HTMLElement} element
	   * @param {HTMLElement} parent
	   * @returns {boolean} Returns true when the parent is found somewhere in the
	   *                    chain of parent nodes.
	   * @private
	   */
	  function _hasParent(element, parent) {
	    while (element) {
	      if (element === parent) {
	        return true;
	      }
	      element = element.parentNode;
	    }
	    return false;
	  }

	  module.exports = Activator;

	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var Hammer = __webpack_require__(22);
	  var util = __webpack_require__(1);
	  var Component = __webpack_require__(33);
	  var moment = __webpack_require__(2);
	  var locales = __webpack_require__(49);

	  /**
	   * A custom time bar
	   * @param {{range: Range, dom: Object}} body
	   * @param {Object} [options]        Available parameters:
	   *                                  {number | string} id
	   *                                  {string} locales
	   *                                  {string} locale
	   * @constructor CustomTime
	   * @extends Component
	   */

	  function CustomTime(body, options) {
	    this.body = body;

	    // default options
	    this.defaultOptions = {
	      moment: moment,
	      locales: locales,
	      locale: 'en',
	      id: undefined,
	      title: undefined
	    };
	    this.options = util.extend({}, this.defaultOptions);

	    if (options && options.time) {
	      this.customTime = options.time;
	    } else {
	      this.customTime = new Date();
	    }

	    this.eventParams = {}; // stores state parameters while dragging the bar

	    this.setOptions(options);

	    // create the DOM
	    this._create();
	  }

	  CustomTime.prototype = new Component();

	  /**
	   * Set options for the component. Options will be merged in current options.
	   * @param {Object} options  Available parameters:
	   *                                  {number | string} id
	   *                                  {string} locales
	   *                                  {string} locale
	   */
	  CustomTime.prototype.setOptions = function (options) {
	    if (options) {
	      // copy all options that we know
	      util.selectiveExtend(['moment', 'locale', 'locales', 'id'], this.options, options);
	    }
	  };

	  /**
	   * Create the DOM for the custom time
	   * @private
	   */
	  CustomTime.prototype._create = function () {
	    var bar = document.createElement('div');
	    bar['custom-time'] = this;
	    bar.className = 'vis-custom-time ' + (this.options.id || '');
	    bar.style.position = 'absolute';
	    bar.style.top = '0px';
	    bar.style.height = '100%';
	    this.bar = bar;

	    var drag = document.createElement('div');
	    drag.style.position = 'relative';
	    drag.style.top = '0px';
	    drag.style.left = '-10px';
	    drag.style.height = '100%';
	    drag.style.width = '20px';
	    bar.appendChild(drag);

	    // attach event listeners
	    this.hammer = new Hammer(drag);
	    this.hammer.on('panstart', this._onDragStart.bind(this));
	    this.hammer.on('panmove', this._onDrag.bind(this));
	    this.hammer.on('panend', this._onDragEnd.bind(this));
	    this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });
	  };

	  /**
	   * Destroy the CustomTime bar
	   */
	  CustomTime.prototype.destroy = function () {
	    this.hide();

	    this.hammer.destroy();
	    this.hammer = null;

	    this.body = null;
	  };

	  /**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */
	  CustomTime.prototype.redraw = function () {
	    var parent = this.body.dom.backgroundVertical;
	    if (this.bar.parentNode != parent) {
	      // attach to the dom
	      if (this.bar.parentNode) {
	        this.bar.parentNode.removeChild(this.bar);
	      }
	      parent.appendChild(this.bar);
	    }

	    var x = this.body.util.toScreen(this.customTime);

	    var locale = this.options.locales[this.options.locale];
	    if (!locale) {
	      if (!this.warned) {
	        console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
	        this.warned = true;
	      }
	      locale = this.options.locales['en']; // fall back on english when not available
	    }

	    var title = this.options.title;
	    // To hide the title completely use empty string ''.
	    if (title === undefined) {
	      title = locale.time + ': ' + this.options.moment(this.customTime).format('dddd, MMMM Do YYYY, H:mm:ss');
	      title = title.charAt(0).toUpperCase() + title.substring(1);
	    }

	    this.bar.style.left = x + 'px';
	    this.bar.title = title;

	    return false;
	  };

	  /**
	   * Remove the CustomTime from the DOM
	   */
	  CustomTime.prototype.hide = function () {
	    // remove the line from the DOM
	    if (this.bar.parentNode) {
	      this.bar.parentNode.removeChild(this.bar);
	    }
	  };

	  /**
	   * Set custom time.
	   * @param {Date | number | string} time
	   */
	  CustomTime.prototype.setCustomTime = function (time) {
	    this.customTime = util.convert(time, 'Date');
	    this.redraw();
	  };

	  /**
	   * Retrieve the current custom time.
	   * @return {Date} customTime
	   */
	  CustomTime.prototype.getCustomTime = function () {
	    return new Date(this.customTime.valueOf());
	  };

	  /**
	    * Set custom title.
	    * @param {Date | number | string} title
	    */
	  CustomTime.prototype.setCustomTitle = function (title) {
	    this.options.title = title;
	  };

	  /**
	   * Start moving horizontally
	   * @param {Event} event
	   * @private
	   */
	  CustomTime.prototype._onDragStart = function (event) {
	    this.eventParams.dragging = true;
	    this.eventParams.customTime = this.customTime;

	    event.stopPropagation();
	  };

	  /**
	   * Perform moving operating.
	   * @param {Event} event
	   * @private
	   */
	  CustomTime.prototype._onDrag = function (event) {
	    if (!this.eventParams.dragging) return;

	    var x = this.body.util.toScreen(this.eventParams.customTime) + event.deltaX;
	    var time = this.body.util.toTime(x);

	    this.setCustomTime(time);

	    // fire a timechange event
	    this.body.emitter.emit('timechange', {
	      id: this.options.id,
	      time: new Date(this.customTime.valueOf())
	    });

	    event.stopPropagation();
	  };

	  /**
	   * Stop moving operating.
	   * @param {Event} event
	   * @private
	   */
	  CustomTime.prototype._onDragEnd = function (event) {
	    if (!this.eventParams.dragging) return;

	    // fire a timechanged event
	    this.body.emitter.emit('timechanged', {
	      id: this.options.id,
	      time: new Date(this.customTime.valueOf())
	    });

	    event.stopPropagation();
	  };

	  /**
	   * Find a custom time from an event target:
	   * searches for the attribute 'custom-time' in the event target's element tree
	   * @param {Event} event
	   * @return {CustomTime | null} customTime
	   */
	  CustomTime.customTimeFromTarget = function (event) {
	    var target = event.target;
	    while (target) {
	      if (target.hasOwnProperty('custom-time')) {
	        return target['custom-time'];
	      }
	      target = target.parentNode;
	    }

	    return null;
	  };

	  module.exports = CustomTime;

	/***/ },
	/* 49 */
	/***/ function(module, exports) {

	  'use strict';

	  // English
	  exports['en'] = {
	    current: 'current',
	    time: 'time'
	  };
	  exports['en_EN'] = exports['en'];
	  exports['en_US'] = exports['en'];

	  // Italiano
	  exports['it'] = {
	    current: 'attuale',
	    time: 'tempo'
	  };
	  exports['it_IT'] = exports['it'];
	  exports['it_CH'] = exports['it'];

	  // Dutch
	  exports['nl'] = {
	    current: 'huidige',
	    time: 'tijd'
	  };
	  exports['nl_NL'] = exports['nl'];
	  exports['nl_BE'] = exports['nl'];

	  // German
	  exports['de'] = {
	    current: 'Aktuelle',
	    time: 'Zeit'
	  };
	  exports['de_DE'] = exports['de'];

	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);
	  var Component = __webpack_require__(33);
	  var moment = __webpack_require__(2);
	  var locales = __webpack_require__(49);

	  /**
	   * A current time bar
	   * @param {{range: Range, dom: Object, domProps: Object}} body
	   * @param {Object} [options]        Available parameters:
	   *                                  {Boolean} [showCurrentTime]
	   * @constructor CurrentTime
	   * @extends Component
	   */
	  function CurrentTime(body, options) {
	    this.body = body;

	    // default options
	    this.defaultOptions = {
	      rtl: false,
	      showCurrentTime: true,

	      moment: moment,
	      locales: locales,
	      locale: 'en'
	    };
	    this.options = util.extend({}, this.defaultOptions);
	    this.offset = 0;

	    this._create();

	    this.setOptions(options);
	  }

	  CurrentTime.prototype = new Component();

	  /**
	   * Create the HTML DOM for the current time bar
	   * @private
	   */
	  CurrentTime.prototype._create = function () {
	    var bar = document.createElement('div');
	    bar.className = 'vis-current-time';
	    bar.style.position = 'absolute';
	    bar.style.top = '0px';
	    bar.style.height = '100%';

	    this.bar = bar;
	  };

	  /**
	   * Destroy the CurrentTime bar
	   */
	  CurrentTime.prototype.destroy = function () {
	    this.options.showCurrentTime = false;
	    this.redraw(); // will remove the bar from the DOM and stop refreshing

	    this.body = null;
	  };

	  /**
	   * Set options for the component. Options will be merged in current options.
	   * @param {Object} options  Available parameters:
	   *                          {boolean} [showCurrentTime]
	   */
	  CurrentTime.prototype.setOptions = function (options) {
	    if (options) {
	      // copy all options that we know
	      util.selectiveExtend(['rtl', 'showCurrentTime', 'moment', 'locale', 'locales'], this.options, options);
	    }
	  };

	  /**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */
	  CurrentTime.prototype.redraw = function () {
	    if (this.options.showCurrentTime) {
	      var parent = this.body.dom.backgroundVertical;
	      if (this.bar.parentNode != parent) {
	        // attach to the dom
	        if (this.bar.parentNode) {
	          this.bar.parentNode.removeChild(this.bar);
	        }
	        parent.appendChild(this.bar);

	        this.start();
	      }

	      var now = this.options.moment(new Date().valueOf() + this.offset);
	      var x = this.body.util.toScreen(now);

	      var locale = this.options.locales[this.options.locale];
	      if (!locale) {
	        if (!this.warned) {
	          console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
	          this.warned = true;
	        }
	        locale = this.options.locales['en']; // fall back on english when not available
	      }
	      var title = locale.current + ' ' + locale.time + ': ' + now.format('dddd, MMMM Do YYYY, H:mm:ss');
	      title = title.charAt(0).toUpperCase() + title.substring(1);

	      if (this.options.rtl) {
	        this.bar.style.right = x + 'px';
	      } else {
	        this.bar.style.left = x + 'px';
	      }
	      this.bar.title = title;
	    } else {
	      // remove the line from the DOM
	      if (this.bar.parentNode) {
	        this.bar.parentNode.removeChild(this.bar);
	      }
	      this.stop();
	    }

	    return false;
	  };

	  /**
	   * Start auto refreshing the current time bar
	   */
	  CurrentTime.prototype.start = function () {
	    var me = this;

	    function update() {
	      me.stop();

	      // determine interval to refresh
	      var scale = me.body.range.conversion(me.body.domProps.center.width).scale;
	      var interval = 1 / scale / 10;
	      if (interval < 30) interval = 30;
	      if (interval > 1000) interval = 1000;

	      me.redraw();
	      me.body.emitter.emit('currentTimeTick');

	      // start a renderTimer to adjust for the new time
	      me.currentTimeTimer = setTimeout(update, interval);
	    }

	    update();
	  };

	  /**
	   * Stop auto refreshing the current time bar
	   */
	  CurrentTime.prototype.stop = function () {
	    if (this.currentTimeTimer !== undefined) {
	      clearTimeout(this.currentTimeTimer);
	      delete this.currentTimeTimer;
	    }
	  };

	  /**
	   * Set a current time. This can be used for example to ensure that a client's
	   * time is synchronized with a shared server time.
	   * @param {Date | String | Number} time     A Date, unix timestamp, or
	   *                                          ISO date string.
	   */
	  CurrentTime.prototype.setCurrentTime = function (time) {
	    var t = util.convert(time, 'Date').valueOf();
	    var now = new Date().valueOf();
	    this.offset = t - now;
	    this.redraw();
	  };

	  /**
	   * Get the current time.
	   * @return {Date} Returns the current time.
	   */
	  CurrentTime.prototype.getCurrentTime = function () {
	    return new Date(new Date().valueOf() + this.offset);
	  };

	  module.exports = CurrentTime;

	/***/ },
	/* 51 */
	/***/ function(module, exports) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  /**
	   * This object contains all possible options. It will check if the types are correct, if required if the option is one
	   * of the allowed values.
	   *
	   * __any__ means that the name of the property does not matter.
	   * __type__ is a required field for all objects and contains the allowed types of all objects
	   */
	  var string = 'string';
	  var boolean = 'boolean';
	  var number = 'number';
	  var array = 'array';
	  var date = 'date';
	  var object = 'object'; // should only be in a __type__ property
	  var dom = 'dom';
	  var moment = 'moment';
	  var any = 'any';

	  var allOptions = {
	    configure: {
	      enabled: { boolean: boolean },
	      filter: { boolean: boolean, 'function': 'function' },
	      container: { dom: dom },
	      __type__: { object: object, boolean: boolean, 'function': 'function' }
	    },

	    //globals :
	    align: { string: string },
	    rtl: { boolean: boolean, 'undefined': 'undefined' },
	    verticalScroll: { boolean: boolean, 'undefined': 'undefined' },
	    horizontalScroll: { boolean: boolean, 'undefined': 'undefined' },
	    autoResize: { boolean: boolean },
	    clickToUse: { boolean: boolean },
	    dataAttributes: { string: string, array: array },
	    editable: {
	      add: { boolean: boolean, 'undefined': 'undefined' },
	      remove: { boolean: boolean, 'undefined': 'undefined' },
	      updateGroup: { boolean: boolean, 'undefined': 'undefined' },
	      updateTime: { boolean: boolean, 'undefined': 'undefined' },
	      __type__: { boolean: boolean, object: object }
	    },
	    end: { number: number, date: date, string: string, moment: moment },
	    format: {
	      minorLabels: {
	        millisecond: { string: string, 'undefined': 'undefined' },
	        second: { string: string, 'undefined': 'undefined' },
	        minute: { string: string, 'undefined': 'undefined' },
	        hour: { string: string, 'undefined': 'undefined' },
	        weekday: { string: string, 'undefined': 'undefined' },
	        day: { string: string, 'undefined': 'undefined' },
	        month: { string: string, 'undefined': 'undefined' },
	        year: { string: string, 'undefined': 'undefined' },
	        __type__: { object: object, 'function': 'function' }
	      },
	      majorLabels: {
	        millisecond: { string: string, 'undefined': 'undefined' },
	        second: { string: string, 'undefined': 'undefined' },
	        minute: { string: string, 'undefined': 'undefined' },
	        hour: { string: string, 'undefined': 'undefined' },
	        weekday: { string: string, 'undefined': 'undefined' },
	        day: { string: string, 'undefined': 'undefined' },
	        month: { string: string, 'undefined': 'undefined' },
	        year: { string: string, 'undefined': 'undefined' },
	        __type__: { object: object, 'function': 'function' }
	      },
	      __type__: { object: object }
	    },
	    moment: { 'function': 'function' },
	    groupOrder: { string: string, 'function': 'function' },
	    groupEditable: {
	      add: { boolean: boolean, 'undefined': 'undefined' },
	      remove: { boolean: boolean, 'undefined': 'undefined' },
	      order: { boolean: boolean, 'undefined': 'undefined' },
	      __type__: { boolean: boolean, object: object }
	    },
	    groupOrderSwap: { 'function': 'function' },
	    height: { string: string, number: number },
	    hiddenDates: {
	      start: { date: date, number: number, string: string, moment: moment },
	      end: { date: date, number: number, string: string, moment: moment },
	      repeat: { string: string },
	      __type__: { object: object, array: array }
	    },
	    itemsAlwaysDraggable: { boolean: boolean },
	    locale: { string: string },
	    locales: {
	      __any__: { any: any },
	      __type__: { object: object }
	    },
	    margin: {
	      axis: { number: number },
	      item: {
	        horizontal: { number: number, 'undefined': 'undefined' },
	        vertical: { number: number, 'undefined': 'undefined' },
	        __type__: { object: object, number: number }
	      },
	      __type__: { object: object, number: number }
	    },
	    max: { date: date, number: number, string: string, moment: moment },
	    maxHeight: { number: number, string: string },
	    maxMinorChars: { number: number },
	    min: { date: date, number: number, string: string, moment: moment },
	    minHeight: { number: number, string: string },
	    moveable: { boolean: boolean },
	    multiselect: { boolean: boolean },
	    multiselectPerGroup: { boolean: boolean },
	    onAdd: { 'function': 'function' },
	    onUpdate: { 'function': 'function' },
	    onMove: { 'function': 'function' },
	    onMoving: { 'function': 'function' },
	    onRemove: { 'function': 'function' },
	    onAddGroup: { 'function': 'function' },
	    onMoveGroup: { 'function': 'function' },
	    onRemoveGroup: { 'function': 'function' },
	    order: { 'function': 'function' },
	    orientation: {
	      axis: { string: string, 'undefined': 'undefined' },
	      item: { string: string, 'undefined': 'undefined' },
	      __type__: { string: string, object: object }
	    },
	    selectable: { boolean: boolean },
	    showCurrentTime: { boolean: boolean },
	    showMajorLabels: { boolean: boolean },
	    showMinorLabels: { boolean: boolean },
	    stack: { boolean: boolean },
	    snap: { 'function': 'function', 'null': 'null' },
	    start: { date: date, number: number, string: string, moment: moment },
	    template: { 'function': 'function' },
	    groupTemplate: { 'function': 'function' },
	    tooltipOnItemUpdateTime: {
	      template: { 'function': 'function' },
	      __type__: { boolean: boolean, object: object }
	    },
	    timeAxis: {
	      scale: { string: string, 'undefined': 'undefined' },
	      step: { number: number, 'undefined': 'undefined' },
	      __type__: { object: object }
	    },
	    type: { string: string },
	    width: { string: string, number: number },
	    zoomable: { boolean: boolean },
	    zoomKey: { string: ['ctrlKey', 'altKey', 'metaKey', ''] },
	    zoomMax: { number: number },
	    zoomMin: { number: number },

	    __type__: { object: object }
	  };

	  var configureOptions = {
	    global: {
	      align: ['center', 'left', 'right'],
	      direction: false,
	      autoResize: true,
	      clickToUse: false,
	      // dataAttributes: ['all'], // FIXME: can be 'all' or string[]
	      editable: {
	        add: false,
	        remove: false,
	        updateGroup: false,
	        updateTime: false
	      },
	      end: '',
	      format: {
	        minorLabels: {
	          millisecond: 'SSS',
	          second: 's',
	          minute: 'HH:mm',
	          hour: 'HH:mm',
	          weekday: 'ddd D',
	          day: 'D',
	          month: 'MMM',
	          year: 'YYYY'
	        },
	        majorLabels: {
	          millisecond: 'HH:mm:ss',
	          second: 'D MMMM HH:mm',
	          minute: 'ddd D MMMM',
	          hour: 'ddd D MMMM',
	          weekday: 'MMMM YYYY',
	          day: 'MMMM YYYY',
	          month: 'YYYY',
	          year: ''
	        }
	      },

	      //groupOrder: {string, 'function': 'function'},
	      groupsDraggable: false,
	      height: '',
	      //hiddenDates: {object, array},
	      locale: '',
	      margin: {
	        axis: [20, 0, 100, 1],
	        item: {
	          horizontal: [10, 0, 100, 1],
	          vertical: [10, 0, 100, 1]
	        }
	      },
	      max: '',
	      maxHeight: '',
	      maxMinorChars: [7, 0, 20, 1],
	      min: '',
	      minHeight: '',
	      moveable: false,
	      multiselect: false,
	      multiselectPerGroup: false,
	      //onAdd: {'function': 'function'},
	      //onUpdate: {'function': 'function'},
	      //onMove: {'function': 'function'},
	      //onMoving: {'function': 'function'},
	      //onRename: {'function': 'function'},
	      //order: {'function': 'function'},
	      orientation: {
	        axis: ['both', 'bottom', 'top'],
	        item: ['bottom', 'top']
	      },
	      selectable: true,
	      showCurrentTime: false,
	      showMajorLabels: true,
	      showMinorLabels: true,
	      stack: true,
	      //snap: {'function': 'function', nada},
	      start: '',
	      //template: {'function': 'function'},
	      //timeAxis: {
	      //  scale: ['millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'month', 'year'],
	      //  step: [1, 1, 10, 1]
	      //},
	      tooltipOnItemUpdateTime: false,
	      type: ['box', 'point', 'range', 'background'],
	      width: '100%',
	      zoomable: true,
	      zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
	      zoomMax: [315360000000000, 10, 315360000000000, 1],
	      zoomMin: [10, 10, 315360000000000, 1]
	    }
	  };

	  exports.allOptions = allOptions;
	  exports.configureOptions = configureOptions;

	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _Configurator = __webpack_require__(28);

	  var _Configurator2 = _interopRequireDefault(_Configurator);

	  var _Validator = __webpack_require__(31);

	  var _Validator2 = _interopRequireDefault(_Validator);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  var Emitter = __webpack_require__(13);
	  var Hammer = __webpack_require__(22);
	  var moment = __webpack_require__(2);
	  var util = __webpack_require__(1);
	  var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);
	  var Range = __webpack_require__(32);
	  var Core = __webpack_require__(35);
	  var TimeAxis = __webpack_require__(46);
	  var CurrentTime = __webpack_require__(50);
	  var CustomTime = __webpack_require__(48);
	  var LineGraph = __webpack_require__(53);

	  var printStyle = __webpack_require__(31).printStyle;
	  var allOptions = __webpack_require__(61).allOptions;
	  var configureOptions = __webpack_require__(61).configureOptions;

	  /**
	   * Create a timeline visualization
	   * @param {HTMLElement} container
	   * @param {vis.DataSet | Array} [items]
	   * @param {Object} [options]  See Graph2d.setOptions for the available options.
	   * @constructor
	   * @extends Core
	   */
	  function Graph2d(container, items, groups, options) {
	    // if the third element is options, the forth is groups (optionally);
	    if (!(Array.isArray(groups) || groups instanceof DataSet || groups instanceof DataView) && groups instanceof Object) {
	      var forthArgument = options;
	      options = groups;
	      groups = forthArgument;
	    }

	    var me = this;
	    this.defaultOptions = {
	      start: null,
	      end: null,

	      autoResize: true,

	      orientation: {
	        axis: 'bottom', // axis orientation: 'bottom', 'top', or 'both'
	        item: 'bottom' // not relevant for Graph2d
	      },

	      moment: moment,

	      width: null,
	      height: null,
	      maxHeight: null,
	      minHeight: null
	    };
	    this.options = util.deepExtend({}, this.defaultOptions);

	    // Create the DOM, props, and emitter
	    this._create(container);

	    // all components listed here will be repainted automatically
	    this.components = [];

	    this.body = {
	      dom: this.dom,
	      domProps: this.props,
	      emitter: {
	        on: this.on.bind(this),
	        off: this.off.bind(this),
	        emit: this.emit.bind(this)
	      },
	      hiddenDates: [],
	      util: {
	        toScreen: me._toScreen.bind(me),
	        toGlobalScreen: me._toGlobalScreen.bind(me), // this refers to the root.width
	        toTime: me._toTime.bind(me),
	        toGlobalTime: me._toGlobalTime.bind(me)
	      }
	    };

	    // range
	    this.range = new Range(this.body);
	    this.components.push(this.range);
	    this.body.range = this.range;

	    // time axis
	    this.timeAxis = new TimeAxis(this.body);
	    this.components.push(this.timeAxis);
	    //this.body.util.snap = this.timeAxis.snap.bind(this.timeAxis);

	    // current time bar
	    this.currentTime = new CurrentTime(this.body);
	    this.components.push(this.currentTime);

	    // item set
	    this.linegraph = new LineGraph(this.body);

	    this.components.push(this.linegraph);

	    this.itemsData = null; // DataSet
	    this.groupsData = null; // DataSet


	    this.on('tap', function (event) {
	      me.emit('click', me.getEventProperties(event));
	    });
	    this.on('doubletap', function (event) {
	      me.emit('doubleClick', me.getEventProperties(event));
	    });
	    this.dom.root.oncontextmenu = function (event) {
	      me.emit('contextmenu', me.getEventProperties(event));
	    };

	    // apply options
	    if (options) {
	      this.setOptions(options);
	    }

	    // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
	    if (groups) {
	      this.setGroups(groups);
	    }

	    // create itemset
	    if (items) {
	      this.setItems(items);
	    }

	    // draw for the first time
	    this._redraw();
	  }

	  // Extend the functionality from Core
	  Graph2d.prototype = new Core();

	  Graph2d.prototype.setOptions = function (options) {
	    // validate options
	    var errorFound = _Validator2.default.validate(options, allOptions);
	    if (errorFound === true) {
	      console.log('%cErrors have been found in the supplied options object.', printStyle);
	    }

	    Core.prototype.setOptions.call(this, options);
	  };

	  /**
	   * Set items
	   * @param {vis.DataSet | Array | null} items
	   */
	  Graph2d.prototype.setItems = function (items) {
	    var initialLoad = this.itemsData == null;

	    // convert to type DataSet when needed
	    var newDataSet;
	    if (!items) {
	      newDataSet = null;
	    } else if (items instanceof DataSet || items instanceof DataView) {
	      newDataSet = items;
	    } else {
	      // turn an array into a dataset
	      newDataSet = new DataSet(items, {
	        type: {
	          start: 'Date',
	          end: 'Date'
	        }
	      });
	    }

	    // set items
	    this.itemsData = newDataSet;
	    this.linegraph && this.linegraph.setItems(newDataSet);

	    if (initialLoad) {
	      if (this.options.start != undefined || this.options.end != undefined) {
	        var start = this.options.start != undefined ? this.options.start : null;
	        var end = this.options.end != undefined ? this.options.end : null;
	        this.setWindow(start, end, { animation: false });
	      } else {
	        this.fit({ animation: false });
	      }
	    }
	  };

	  /**
	   * Set groups
	   * @param {vis.DataSet | Array} groups
	   */
	  Graph2d.prototype.setGroups = function (groups) {
	    // convert to type DataSet when needed
	    var newDataSet;
	    if (!groups) {
	      newDataSet = null;
	    } else if (groups instanceof DataSet || groups instanceof DataView) {
	      newDataSet = groups;
	    } else {
	      // turn an array into a dataset
	      newDataSet = new DataSet(groups);
	    }

	    this.groupsData = newDataSet;
	    this.linegraph.setGroups(newDataSet);
	  };

	  /**
	   * Returns an object containing an SVG element with the icon of the group (size determined by iconWidth and iconHeight), the label of the group (content) and the yAxisOrientation of the group (left or right).
	   * @param groupId
	   * @param width
	   * @param height
	   */
	  Graph2d.prototype.getLegend = function (groupId, width, height) {
	    if (width === undefined) {
	      width = 15;
	    }
	    if (height === undefined) {
	      height = 15;
	    }
	    if (this.linegraph.groups[groupId] !== undefined) {
	      return this.linegraph.groups[groupId].getLegend(width, height);
	    } else {
	      return "cannot find group:'" + groupId + "'";
	    }
	  };

	  /**
	   * This checks if the visible option of the supplied group (by ID) is true or false.
	   * @param groupId
	   * @returns {*}
	   */
	  Graph2d.prototype.isGroupVisible = function (groupId) {
	    if (this.linegraph.groups[groupId] !== undefined) {
	      return this.linegraph.groups[groupId].visible && (this.linegraph.options.groups.visibility[groupId] === undefined || this.linegraph.options.groups.visibility[groupId] == true);
	    } else {
	      return false;
	    }
	  };

	  /**
	   * Get the data range of the item set.
	   * @returns {{min: Date, max: Date}} range  A range with a start and end Date.
	   *                                          When no minimum is found, min==null
	   *                                          When no maximum is found, max==null
	   */
	  Graph2d.prototype.getDataRange = function () {
	    var min = null;
	    var max = null;

	    // calculate min from start filed
	    for (var groupId in this.linegraph.groups) {
	      if (this.linegraph.groups.hasOwnProperty(groupId)) {
	        if (this.linegraph.groups[groupId].visible == true) {
	          for (var i = 0; i < this.linegraph.groups[groupId].itemsData.length; i++) {
	            var item = this.linegraph.groups[groupId].itemsData[i];
	            var value = util.convert(item.x, 'Date').valueOf();
	            min = min == null ? value : min > value ? value : min;
	            max = max == null ? value : max < value ? value : max;
	          }
	        }
	      }
	    }

	    return {
	      min: min != null ? new Date(min) : null,
	      max: max != null ? new Date(max) : null
	    };
	  };

	  /**
	   * Generate Timeline related information from an event
	   * @param {Event} event
	   * @return {Object} An object with related information, like on which area
	   *                  The event happened, whether clicked on an item, etc.
	   */
	  Graph2d.prototype.getEventProperties = function (event) {
	    var clientX = event.center ? event.center.x : event.clientX;
	    var clientY = event.center ? event.center.y : event.clientY;
	    var x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
	    var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);
	    var time = this._toTime(x);

	    var customTime = CustomTime.customTimeFromTarget(event);

	    var element = util.getTarget(event);
	    var what = null;
	    if (util.hasParent(element, this.timeAxis.dom.foreground)) {
	      what = 'axis';
	    } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
	      what = 'axis';
	    } else if (util.hasParent(element, this.linegraph.yAxisLeft.dom.frame)) {
	      what = 'data-axis';
	    } else if (util.hasParent(element, this.linegraph.yAxisRight.dom.frame)) {
	      what = 'data-axis';
	    } else if (util.hasParent(element, this.linegraph.legendLeft.dom.frame)) {
	      what = 'legend';
	    } else if (util.hasParent(element, this.linegraph.legendRight.dom.frame)) {
	      what = 'legend';
	    } else if (customTime != null) {
	      what = 'custom-time';
	    } else if (util.hasParent(element, this.currentTime.bar)) {
	      what = 'current-time';
	    } else if (util.hasParent(element, this.dom.center)) {
	      what = 'background';
	    }

	    var value = [];
	    var yAxisLeft = this.linegraph.yAxisLeft;
	    var yAxisRight = this.linegraph.yAxisRight;
	    if (!yAxisLeft.hidden) {
	      value.push(yAxisLeft.screenToValue(y));
	    }
	    if (!yAxisRight.hidden) {
	      value.push(yAxisRight.screenToValue(y));
	    }

	    return {
	      event: event,
	      what: what,
	      pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
	      pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
	      x: x,
	      y: y,
	      time: time,
	      value: value
	    };
	  };

	  /**
	   * Load a configurator
	   * @return {Object}
	   * @private
	   */
	  Graph2d.prototype._createConfigurator = function () {
	    return new _Configurator2.default(this, this.dom.container, configureOptions);
	  };

	  module.exports = Graph2d;

	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var util = __webpack_require__(1);
	  var DOMutil = __webpack_require__(8);
	  var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);
	  var Component = __webpack_require__(33);
	  var DataAxis = __webpack_require__(54);
	  var GraphGroup = __webpack_require__(56);
	  var Legend = __webpack_require__(60);
	  var Bars = __webpack_require__(57);
	  var Lines = __webpack_require__(59);
	  var Points = __webpack_require__(58);

	  var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items

	  /**
	   * This is the constructor of the LineGraph. It requires a Timeline body and options.
	   *
	   * @param body
	   * @param options
	   * @constructor
	   */
	  function LineGraph(body, options) {
	    this.id = util.randomUUID();
	    this.body = body;

	    this.defaultOptions = {
	      yAxisOrientation: 'left',
	      defaultGroup: 'default',
	      sort: true,
	      sampling: true,
	      stack: false,
	      graphHeight: '400px',
	      shaded: {
	        enabled: false,
	        orientation: 'bottom' // top, bottom, zero
	      },
	      style: 'line', // line, bar
	      barChart: {
	        width: 50,
	        sideBySide: false,
	        align: 'center' // left, center, right
	      },
	      interpolation: {
	        enabled: true,
	        parametrization: 'centripetal', // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	        alpha: 0.5
	      },
	      drawPoints: {
	        enabled: true,
	        size: 6,
	        style: 'square' // square, circle
	      },
	      dataAxis: {}, //Defaults are done on DataAxis level
	      legend: {}, //Defaults are done on Legend level
	      groups: {
	        visibility: {}
	      }
	    };

	    // options is shared by this lineGraph and all its items
	    this.options = util.extend({}, this.defaultOptions);
	    this.dom = {};
	    this.props = {};
	    this.hammer = null;
	    this.groups = {};
	    this.abortedGraphUpdate = false;
	    this.updateSVGheight = false;
	    this.updateSVGheightOnResize = false;
	    this.forceGraphUpdate = true;

	    var me = this;
	    this.itemsData = null; // DataSet
	    this.groupsData = null; // DataSet

	    // listeners for the DataSet of the items
	    this.itemListeners = {
	      'add': function add(event, params, senderId) {
	        me._onAdd(params.items);
	      },
	      'update': function update(event, params, senderId) {
	        me._onUpdate(params.items);
	      },
	      'remove': function remove(event, params, senderId) {
	        me._onRemove(params.items);
	      }
	    };

	    // listeners for the DataSet of the groups
	    this.groupListeners = {
	      'add': function add(event, params, senderId) {
	        me._onAddGroups(params.items);
	      },
	      'update': function update(event, params, senderId) {
	        me._onUpdateGroups(params.items);
	      },
	      'remove': function remove(event, params, senderId) {
	        me._onRemoveGroups(params.items);
	      }
	    };

	    this.items = {}; // object with an Item for every data item
	    this.selection = []; // list with the ids of all selected nodes
	    this.lastStart = this.body.range.start;
	    this.touchParams = {}; // stores properties while dragging

	    this.svgElements = {};
	    this.setOptions(options);
	    this.groupsUsingDefaultStyles = [0];
	    this.body.emitter.on('rangechanged', function () {
	      me.lastStart = me.body.range.start;
	      me.svg.style.left = util.option.asSize(-me.props.width);

	      me.forceGraphUpdate = true;
	      //Is this local redraw necessary? (Core also does a change event!)
	      me.redraw.call(me);
	    });

	    // create the HTML DOM
	    this._create();
	    this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };
	  }

	  LineGraph.prototype = new Component();

	  /**
	   * Create the HTML DOM for the ItemSet
	   */
	  LineGraph.prototype._create = function () {
	    var frame = document.createElement('div');
	    frame.className = 'vis-line-graph';
	    this.dom.frame = frame;

	    // create svg element for graph drawing.
	    this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	    this.svg.style.position = 'relative';
	    this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
	    this.svg.style.display = 'block';
	    frame.appendChild(this.svg);

	    // data axis
	    this.options.dataAxis.orientation = 'left';
	    this.yAxisLeft = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);

	    this.options.dataAxis.orientation = 'right';
	    this.yAxisRight = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);
	    delete this.options.dataAxis.orientation;

	    // legends
	    this.legendLeft = new Legend(this.body, this.options.legend, 'left', this.options.groups);
	    this.legendRight = new Legend(this.body, this.options.legend, 'right', this.options.groups);

	    this.show();
	  };

	  /**
	   * set the options of the LineGraph. the mergeOptions is used for subObjects that have an enabled element.
	   * @param {object} options
	   */
	  LineGraph.prototype.setOptions = function (options) {
	    if (options) {
	      var fields = ['sampling', 'defaultGroup', 'stack', 'height', 'graphHeight', 'yAxisOrientation', 'style', 'barChart', 'dataAxis', 'sort', 'groups'];
	      if (options.graphHeight === undefined && options.height !== undefined) {
	        this.updateSVGheight = true;
	        this.updateSVGheightOnResize = true;
	      } else if (this.body.domProps.centerContainer.height !== undefined && options.graphHeight !== undefined) {
	        if (parseInt((options.graphHeight + '').replace("px", '')) < this.body.domProps.centerContainer.height) {
	          this.updateSVGheight = true;
	        }
	      }
	      util.selectiveDeepExtend(fields, this.options, options);
	      util.mergeOptions(this.options, options, 'interpolation');
	      util.mergeOptions(this.options, options, 'drawPoints');
	      util.mergeOptions(this.options, options, 'shaded');
	      util.mergeOptions(this.options, options, 'legend');

	      if (options.interpolation) {
	        if (_typeof(options.interpolation) == 'object') {
	          if (options.interpolation.parametrization) {
	            if (options.interpolation.parametrization == 'uniform') {
	              this.options.interpolation.alpha = 0;
	            } else if (options.interpolation.parametrization == 'chordal') {
	              this.options.interpolation.alpha = 1.0;
	            } else {
	              this.options.interpolation.parametrization = 'centripetal';
	              this.options.interpolation.alpha = 0.5;
	            }
	          }
	        }
	      }

	      if (this.yAxisLeft) {
	        if (options.dataAxis !== undefined) {
	          this.yAxisLeft.setOptions(this.options.dataAxis);
	          this.yAxisRight.setOptions(this.options.dataAxis);
	        }
	      }

	      if (this.legendLeft) {
	        if (options.legend !== undefined) {
	          this.legendLeft.setOptions(this.options.legend);
	          this.legendRight.setOptions(this.options.legend);
	        }
	      }

	      if (this.groups.hasOwnProperty(UNGROUPED)) {
	        this.groups[UNGROUPED].setOptions(options);
	      }
	    }

	    // this is used to redraw the graph if the visibility of the groups is changed.
	    if (this.dom.frame) {
	      //not on initial run?
	      this.forceGraphUpdate = true;
	      this.body.emitter.emit("_change", { queue: true });
	    }
	  };

	  /**
	   * Hide the component from the DOM
	   */
	  LineGraph.prototype.hide = function () {
	    // remove the frame containing the items
	    if (this.dom.frame.parentNode) {
	      this.dom.frame.parentNode.removeChild(this.dom.frame);
	    }
	  };

	  /**
	   * Show the component in the DOM (when not already visible).
	   * @return {Boolean} changed
	   */
	  LineGraph.prototype.show = function () {
	    // show frame containing the items
	    if (!this.dom.frame.parentNode) {
	      this.body.dom.center.appendChild(this.dom.frame);
	    }
	  };

	  /**
	   * Set items
	   * @param {vis.DataSet | null} items
	   */
	  LineGraph.prototype.setItems = function (items) {
	    var me = this,
	        ids,
	        oldItemsData = this.itemsData;

	    // replace the dataset
	    if (!items) {
	      this.itemsData = null;
	    } else if (items instanceof DataSet || items instanceof DataView) {
	      this.itemsData = items;
	    } else {
	      throw new TypeError('Data must be an instance of DataSet or DataView');
	    }

	    if (oldItemsData) {
	      // unsubscribe from old dataset
	      util.forEach(this.itemListeners, function (callback, event) {
	        oldItemsData.off(event, callback);
	      });

	      // remove all drawn items
	      ids = oldItemsData.getIds();
	      this._onRemove(ids);
	    }

	    if (this.itemsData) {
	      // subscribe to new dataset
	      var id = this.id;
	      util.forEach(this.itemListeners, function (callback, event) {
	        me.itemsData.on(event, callback, id);
	      });

	      // add all new items
	      ids = this.itemsData.getIds();
	      this._onAdd(ids);
	    }
	  };

	  /**
	   * Set groups
	   * @param {vis.DataSet} groups
	   */
	  LineGraph.prototype.setGroups = function (groups) {
	    var me = this;
	    var ids;

	    // unsubscribe from current dataset
	    if (this.groupsData) {
	      util.forEach(this.groupListeners, function (callback, event) {
	        me.groupsData.off(event, callback);
	      });

	      // remove all drawn groups
	      ids = this.groupsData.getIds();
	      this.groupsData = null;
	      for (var i = 0; i < ids.length; i++) {
	        this._removeGroup(ids[i]);
	      }
	    }

	    // replace the dataset
	    if (!groups) {
	      this.groupsData = null;
	    } else if (groups instanceof DataSet || groups instanceof DataView) {
	      this.groupsData = groups;
	    } else {
	      throw new TypeError('Data must be an instance of DataSet or DataView');
	    }

	    if (this.groupsData) {
	      // subscribe to new dataset
	      var id = this.id;
	      util.forEach(this.groupListeners, function (callback, event) {
	        me.groupsData.on(event, callback, id);
	      });

	      // draw all ms
	      ids = this.groupsData.getIds();
	      this._onAddGroups(ids);
	    }
	  };

	  LineGraph.prototype._onUpdate = function (ids) {
	    this._updateAllGroupData();
	  };
	  LineGraph.prototype._onAdd = function (ids) {
	    this._onUpdate(ids);
	  };
	  LineGraph.prototype._onRemove = function (ids) {
	    this._onUpdate(ids);
	  };
	  LineGraph.prototype._onUpdateGroups = function (groupIds) {
	    this._updateAllGroupData();
	  };
	  LineGraph.prototype._onAddGroups = function (groupIds) {
	    this._onUpdateGroups(groupIds);
	  };

	  /**
	   * this cleans the group out off the legends and the dataaxis, updates the ungrouped and updates the graph
	   * @param {Array} groupIds
	   * @private
	   */
	  LineGraph.prototype._onRemoveGroups = function (groupIds) {
	    for (var i = 0; i < groupIds.length; i++) {
	      this._removeGroup(groupIds[i]);
	    }
	    this.forceGraphUpdate = true;
	    this.body.emitter.emit("_change", { queue: true });
	  };

	  /**
	   * this cleans the group out off the legends and the dataaxis
	   * @param groupId
	   * @private
	   */
	  LineGraph.prototype._removeGroup = function (groupId) {
	    if (this.groups.hasOwnProperty(groupId)) {
	      if (this.groups[groupId].options.yAxisOrientation == 'right') {
	        this.yAxisRight.removeGroup(groupId);
	        this.legendRight.removeGroup(groupId);
	        this.legendRight.redraw();
	      } else {
	        this.yAxisLeft.removeGroup(groupId);
	        this.legendLeft.removeGroup(groupId);
	        this.legendLeft.redraw();
	      }
	      delete this.groups[groupId];
	    }
	  };

	  /**
	   * update a group object with the group dataset entree
	   *
	   * @param group
	   * @param groupId
	   * @private
	   */
	  LineGraph.prototype._updateGroup = function (group, groupId) {
	    if (!this.groups.hasOwnProperty(groupId)) {
	      this.groups[groupId] = new GraphGroup(group, groupId, this.options, this.groupsUsingDefaultStyles);
	      if (this.groups[groupId].options.yAxisOrientation == 'right') {
	        this.yAxisRight.addGroup(groupId, this.groups[groupId]);
	        this.legendRight.addGroup(groupId, this.groups[groupId]);
	      } else {
	        this.yAxisLeft.addGroup(groupId, this.groups[groupId]);
	        this.legendLeft.addGroup(groupId, this.groups[groupId]);
	      }
	    } else {
	      this.groups[groupId].update(group);
	      if (this.groups[groupId].options.yAxisOrientation == 'right') {
	        this.yAxisRight.updateGroup(groupId, this.groups[groupId]);
	        this.legendRight.updateGroup(groupId, this.groups[groupId]);
	        //If yAxisOrientation changed, clean out the group from the other axis.
	        this.yAxisLeft.removeGroup(groupId);
	        this.legendLeft.removeGroup(groupId);
	      } else {
	        this.yAxisLeft.updateGroup(groupId, this.groups[groupId]);
	        this.legendLeft.updateGroup(groupId, this.groups[groupId]);
	        //If yAxisOrientation changed, clean out the group from the other axis.
	        this.yAxisRight.removeGroup(groupId);
	        this.legendRight.removeGroup(groupId);
	      }
	    }
	    this.legendLeft.redraw();
	    this.legendRight.redraw();
	  };

	  /**
	   * this updates all groups, it is used when there is an update the the itemset.
	   *
	   * @private
	   */
	  LineGraph.prototype._updateAllGroupData = function () {
	    if (this.itemsData != null) {
	      var groupsContent = {};
	      var items = this.itemsData.get();
	      //pre-Determine array sizes, for more efficient memory claim
	      var groupCounts = {};
	      for (var i = 0; i < items.length; i++) {
	        var item = items[i];
	        var groupId = item.group;
	        if (groupId === null || groupId === undefined) {
	          groupId = UNGROUPED;
	        }
	        groupCounts.hasOwnProperty(groupId) ? groupCounts[groupId]++ : groupCounts[groupId] = 1;
	      }
	      //Now insert data into the arrays.
	      for (var i = 0; i < items.length; i++) {
	        var item = items[i];
	        var groupId = item.group;
	        if (groupId === null || groupId === undefined) {
	          groupId = UNGROUPED;
	        }
	        if (!groupsContent.hasOwnProperty(groupId)) {
	          groupsContent[groupId] = new Array(groupCounts[groupId]);
	        }
	        //Copy data (because of unmodifiable DataView input.
	        var extended = util.bridgeObject(item);
	        extended.x = util.convert(item.x, 'Date');
	        extended.orginalY = item.y; //real Y
	        extended.y = Number(item.y);

	        var index = groupsContent[groupId].length - groupCounts[groupId]--;
	        groupsContent[groupId][index] = extended;
	      }

	      //Make sure all groups are present, to allow removal of old groups
	      for (var groupId in this.groups) {
	        if (this.groups.hasOwnProperty(groupId)) {
	          if (!groupsContent.hasOwnProperty(groupId)) {
	            groupsContent[groupId] = new Array(0);
	          }
	        }
	      }

	      //Update legendas, style and axis
	      for (var groupId in groupsContent) {
	        if (groupsContent.hasOwnProperty(groupId)) {
	          if (groupsContent[groupId].length == 0) {
	            if (this.groups.hasOwnProperty(groupId)) {
	              this._removeGroup(groupId);
	            }
	          } else {
	            var group = undefined;
	            if (this.groupsData != undefined) {
	              group = this.groupsData.get(groupId);
	            }
	            if (group == undefined) {
	              group = { id: groupId, content: this.options.defaultGroup + groupId };
	            }
	            this._updateGroup(group, groupId);
	            this.groups[groupId].setItems(groupsContent[groupId]);
	          }
	        }
	      }
	      this.forceGraphUpdate = true;
	      this.body.emitter.emit("_change", { queue: true });
	    }
	  };

	  /**
	   * Redraw the component, mandatory function
	   * @return {boolean} Returns true if the component is resized
	   */
	  LineGraph.prototype.redraw = function () {
	    var resized = false;

	    // calculate actual size and position
	    this.props.width = this.dom.frame.offsetWidth;
	    this.props.height = this.body.domProps.centerContainer.height - this.body.domProps.border.top - this.body.domProps.border.bottom;

	    // check if this component is resized
	    resized = this._isResized() || resized;

	    // check whether zoomed (in that case we need to re-stack everything)
	    var visibleInterval = this.body.range.end - this.body.range.start;
	    var zoomed = visibleInterval != this.lastVisibleInterval;
	    this.lastVisibleInterval = visibleInterval;

	    // the svg element is three times as big as the width, this allows for fully dragging left and right
	    // without reloading the graph. the controls for this are bound to events in the constructor
	    if (resized == true) {
	      this.svg.style.width = util.option.asSize(3 * this.props.width);
	      this.svg.style.left = util.option.asSize(-this.props.width);

	      // if the height of the graph is set as proportional, change the height of the svg
	      if ((this.options.height + '').indexOf("%") != -1 || this.updateSVGheightOnResize == true) {
	        this.updateSVGheight = true;
	      }
	    }

	    // update the height of the graph on each redraw of the graph.
	    if (this.updateSVGheight == true) {
	      if (this.options.graphHeight != this.props.height + 'px') {
	        this.options.graphHeight = this.props.height + 'px';
	        this.svg.style.height = this.props.height + 'px';
	      }
	      this.updateSVGheight = false;
	    } else {
	      this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
	    }

	    // zoomed is here to ensure that animations are shown correctly.
	    if (resized == true || zoomed == true || this.abortedGraphUpdate == true || this.forceGraphUpdate == true) {
	      resized = this._updateGraph() || resized;
	      this.forceGraphUpdate = false;
	    } else {
	      // move the whole svg while dragging
	      if (this.lastStart != 0) {
	        var offset = this.body.range.start - this.lastStart;
	        var range = this.body.range.end - this.body.range.start;
	        if (this.props.width != 0) {
	          var rangePerPixelInv = this.props.width / range;
	          var xOffset = offset * rangePerPixelInv;
	          this.svg.style.left = -this.props.width - xOffset + 'px';
	        }
	      }
	    }
	    this.legendLeft.redraw();
	    this.legendRight.redraw();
	    return resized;
	  };

	  LineGraph.prototype._getSortedGroupIds = function () {
	    // getting group Ids
	    var grouplist = [];
	    for (var groupId in this.groups) {
	      if (this.groups.hasOwnProperty(groupId)) {
	        var group = this.groups[groupId];
	        if (group.visible == true && (this.options.groups.visibility[groupId] === undefined || this.options.groups.visibility[groupId] == true)) {
	          grouplist.push({ id: groupId, zIndex: group.options.zIndex });
	        }
	      }
	    }
	    util.insertSort(grouplist, function (a, b) {
	      var az = a.zIndex;
	      var bz = b.zIndex;
	      if (az === undefined) az = 0;
	      if (bz === undefined) bz = 0;
	      return az == bz ? 0 : az < bz ? -1 : 1;
	    });
	    var groupIds = new Array(grouplist.length);
	    for (var i = 0; i < grouplist.length; i++) {
	      groupIds[i] = grouplist[i].id;
	    }
	    return groupIds;
	  };

	  /**
	   * Update and redraw the graph.
	   *
	   */
	  LineGraph.prototype._updateGraph = function () {
	    // reset the svg elements
	    DOMutil.prepareElements(this.svgElements);
	    if (this.props.width != 0 && this.itemsData != null) {
	      var group, i;
	      var groupRanges = {};
	      var changeCalled = false;
	      // this is the range of the SVG canvas
	      var minDate = this.body.util.toGlobalTime(-this.body.domProps.root.width);
	      var maxDate = this.body.util.toGlobalTime(2 * this.body.domProps.root.width);

	      // getting group Ids
	      var groupIds = this._getSortedGroupIds();
	      if (groupIds.length > 0) {
	        var groupsData = {};

	        // fill groups data, this only loads the data we require based on the timewindow
	        this._getRelevantData(groupIds, groupsData, minDate, maxDate);

	        // apply sampling, if disabled, it will pass through this function.
	        this._applySampling(groupIds, groupsData);

	        // we transform the X coordinates to detect collisions
	        for (i = 0; i < groupIds.length; i++) {
	          this._convertXcoordinates(groupsData[groupIds[i]]);
	        }

	        // now all needed data has been collected we start the processing.
	        this._getYRanges(groupIds, groupsData, groupRanges);

	        // update the Y axis first, we use this data to draw at the correct Y points
	        changeCalled = this._updateYAxis(groupIds, groupRanges);

	        //  at changeCalled, abort this update cycle as the graph needs another update with new Width input from the Redraw container.
	        //  Cleanup SVG elements on abort.
	        if (changeCalled == true) {
	          DOMutil.cleanupElements(this.svgElements);
	          this.abortedGraphUpdate = true;
	          return true;
	        }
	        this.abortedGraphUpdate = false;

	        // With the yAxis scaled correctly, use this to get the Y values of the points.
	        var below = undefined;
	        for (i = 0; i < groupIds.length; i++) {
	          group = this.groups[groupIds[i]];
	          if (this.options.stack === true && this.options.style === 'line') {
	            if (group.options.excludeFromStacking == undefined || !group.options.excludeFromStacking) {
	              if (below != undefined) {
	                this._stack(groupsData[group.id], groupsData[below.id]);
	                if (group.options.shaded.enabled == true && group.options.shaded.orientation !== "group") {
	                  if (group.options.shaded.orientation == "top" && below.options.shaded.orientation !== "group") {
	                    below.options.shaded.orientation = "group";
	                    below.options.shaded.groupId = group.id;
	                  } else {
	                    group.options.shaded.orientation = "group";
	                    group.options.shaded.groupId = below.id;
	                  }
	                }
	              }
	              below = group;
	            }
	          }
	          this._convertYcoordinates(groupsData[groupIds[i]], group);
	        }

	        //Precalculate paths and draw shading if appropriate. This will make sure the shading is always behind any lines.
	        var paths = {};
	        for (i = 0; i < groupIds.length; i++) {
	          group = this.groups[groupIds[i]];
	          if (group.options.style === 'line' && group.options.shaded.enabled == true) {
	            var dataset = groupsData[groupIds[i]];
	            if (dataset == null || dataset.length == 0) {
	              continue;
	            }
	            if (!paths.hasOwnProperty(groupIds[i])) {
	              paths[groupIds[i]] = Lines.calcPath(dataset, group);
	            }
	            if (group.options.shaded.orientation === "group") {
	              var subGroupId = group.options.shaded.groupId;
	              if (groupIds.indexOf(subGroupId) === -1) {
	                console.log(group.id + ": Unknown shading group target given:" + subGroupId);
	                continue;
	              }
	              if (!paths.hasOwnProperty(subGroupId)) {
	                paths[subGroupId] = Lines.calcPath(groupsData[subGroupId], this.groups[subGroupId]);
	              }
	              Lines.drawShading(paths[groupIds[i]], group, paths[subGroupId], this.framework);
	            } else {
	              Lines.drawShading(paths[groupIds[i]], group, undefined, this.framework);
	            }
	          }
	        }

	        // draw the groups, calculating paths if still necessary.
	        Bars.draw(groupIds, groupsData, this.framework);
	        for (i = 0; i < groupIds.length; i++) {
	          group = this.groups[groupIds[i]];
	          if (groupsData[groupIds[i]].length > 0) {
	            switch (group.options.style) {
	              case "line":
	                if (!paths.hasOwnProperty(groupIds[i])) {
	                  paths[groupIds[i]] = Lines.calcPath(groupsData[groupIds[i]], group);
	                }
	                Lines.draw(paths[groupIds[i]], group, this.framework);
	              //explicit no break;
	              case "point":
	              //explicit no break;
	              case "points":
	                if (group.options.style == "point" || group.options.style == "points" || group.options.drawPoints.enabled == true) {
	                  Points.draw(groupsData[groupIds[i]], group, this.framework);
	                }
	                break;
	              case "bar":
	              // bar needs to be drawn enmasse
	              //explicit no break
	              default:
	              //do nothing...
	            }
	          }
	        }
	      }
	    }

	    // cleanup unused svg elements
	    DOMutil.cleanupElements(this.svgElements);
	    return false;
	  };

	  LineGraph.prototype._stack = function (data, subData) {
	    var index, dx, dy, subPrevPoint, subNextPoint;
	    index = 0;
	    // for each data point we look for a matching on in the set below
	    for (var j = 0; j < data.length; j++) {
	      subPrevPoint = undefined;
	      subNextPoint = undefined;
	      // we look for time matches or a before-after point
	      for (var k = index; k < subData.length; k++) {
	        // if times match exactly
	        if (subData[k].x === data[j].x) {
	          subPrevPoint = subData[k];
	          subNextPoint = subData[k];
	          index = k;
	          break;
	        } else if (subData[k].x > data[j].x) {
	          // overshoot
	          subNextPoint = subData[k];
	          if (k == 0) {
	            subPrevPoint = subNextPoint;
	          } else {
	            subPrevPoint = subData[k - 1];
	          }
	          index = k;
	          break;
	        }
	      }
	      // in case the last data point has been used, we assume it stays like this.
	      if (subNextPoint === undefined) {
	        subPrevPoint = subData[subData.length - 1];
	        subNextPoint = subData[subData.length - 1];
	      }
	      // linear interpolation
	      dx = subNextPoint.x - subPrevPoint.x;
	      dy = subNextPoint.y - subPrevPoint.y;
	      if (dx == 0) {
	        data[j].y = data[j].orginalY + subNextPoint.y;
	      } else {
	        data[j].y = data[j].orginalY + dy / dx * (data[j].x - subPrevPoint.x) + subPrevPoint.y; // ax + b where b is data[j].y
	      }
	    }
	  };

	  /**
	   * first select and preprocess the data from the datasets.
	   * the groups have their preselection of data, we now loop over this data to see
	   * what data we need to draw. Sorted data is much faster.
	   * more optimization is possible by doing the sampling before and using the binary search
	   * to find the end date to determine the increment.
	   *
	   * @param {array}  groupIds
	   * @param {object} groupsData
	   * @param {date}   minDate
	   * @param {date}   maxDate
	   * @private
	   */
	  LineGraph.prototype._getRelevantData = function (groupIds, groupsData, minDate, maxDate) {
	    var group, i, j, item;
	    if (groupIds.length > 0) {
	      for (i = 0; i < groupIds.length; i++) {
	        group = this.groups[groupIds[i]];
	        var itemsData = group.getItems();
	        // optimization for sorted data
	        if (group.options.sort == true) {
	          var dateComparator = function dateComparator(a, b) {
	            return a.getTime() == b.getTime() ? 0 : a < b ? -1 : 1;
	          };
	          var first = Math.max(0, util.binarySearchValue(itemsData, minDate, 'x', 'before', dateComparator));
	          var last = Math.min(itemsData.length, util.binarySearchValue(itemsData, maxDate, 'x', 'after', dateComparator) + 1);
	          if (last <= 0) {
	            last = itemsData.length;
	          }
	          var dataContainer = new Array(last - first);
	          for (j = first; j < last; j++) {
	            item = group.itemsData[j];
	            dataContainer[j - first] = item;
	          }
	          groupsData[groupIds[i]] = dataContainer;
	        } else {
	          // If unsorted data, all data is relevant, just returning entire structure
	          groupsData[groupIds[i]] = group.itemsData;
	        }
	      }
	    }
	  };

	  /**
	   *
	   * @param groupIds
	   * @param groupsData
	   * @private
	   */
	  LineGraph.prototype._applySampling = function (groupIds, groupsData) {
	    var group;
	    if (groupIds.length > 0) {
	      for (var i = 0; i < groupIds.length; i++) {
	        group = this.groups[groupIds[i]];
	        if (group.options.sampling == true) {
	          var dataContainer = groupsData[groupIds[i]];
	          if (dataContainer.length > 0) {
	            var increment = 1;
	            var amountOfPoints = dataContainer.length;

	            // the global screen is used because changing the width of the yAxis may affect the increment, resulting in an endless loop
	            // of width changing of the yAxis.
	            var xDistance = this.body.util.toGlobalScreen(dataContainer[dataContainer.length - 1].x) - this.body.util.toGlobalScreen(dataContainer[0].x);
	            var pointsPerPixel = amountOfPoints / xDistance;
	            increment = Math.min(Math.ceil(0.2 * amountOfPoints), Math.max(1, Math.round(pointsPerPixel)));

	            var sampledData = new Array(amountOfPoints);
	            for (var j = 0; j < amountOfPoints; j += increment) {
	              var idx = Math.round(j / increment);
	              sampledData[idx] = dataContainer[j];
	            }
	            groupsData[groupIds[i]] = sampledData.splice(0, Math.round(amountOfPoints / increment));
	          }
	        }
	      }
	    }
	  };

	  /**
	   *
	   *
	   * @param {array}  groupIds
	   * @param {object} groupsData
	   * @param {object} groupRanges  | this is being filled here
	   * @private
	   */
	  LineGraph.prototype._getYRanges = function (groupIds, groupsData, groupRanges) {
	    var groupData, group, i;
	    var combinedDataLeft = [];
	    var combinedDataRight = [];
	    var options;
	    if (groupIds.length > 0) {
	      for (i = 0; i < groupIds.length; i++) {
	        groupData = groupsData[groupIds[i]];
	        options = this.groups[groupIds[i]].options;
	        if (groupData.length > 0) {
	          group = this.groups[groupIds[i]];
	          // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
	          if (options.stack === true && options.style === 'bar') {
	            if (options.yAxisOrientation === 'left') {
	              combinedDataLeft = combinedDataLeft.concat(group.getItems());
	            } else {
	              combinedDataRight = combinedDataRight.concat(group.getItems());
	            }
	          } else {
	            groupRanges[groupIds[i]] = group.getYRange(groupData, groupIds[i]);
	          }
	        }
	      }

	      // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
	      Bars.getStackedYRange(combinedDataLeft, groupRanges, groupIds, '__barStackLeft', 'left');
	      Bars.getStackedYRange(combinedDataRight, groupRanges, groupIds, '__barStackRight', 'right');
	    }
	  };

	  /**
	   * this sets the Y ranges for the Y axis. It also determines which of the axis should be shown or hidden.
	   * @param {Array} groupIds
	   * @param {Object} groupRanges
	   * @private
	   */
	  LineGraph.prototype._updateYAxis = function (groupIds, groupRanges) {
	    var resized = false;
	    var yAxisLeftUsed = false;
	    var yAxisRightUsed = false;
	    var minLeft = 1e9,
	        minRight = 1e9,
	        maxLeft = -1e9,
	        maxRight = -1e9,
	        minVal,
	        maxVal;
	    // if groups are present
	    if (groupIds.length > 0) {
	      // this is here to make sure that if there are no items in the axis but there are groups, that there is no infinite draw/redraw loop.
	      for (var i = 0; i < groupIds.length; i++) {
	        var group = this.groups[groupIds[i]];
	        if (group && group.options.yAxisOrientation != 'right') {
	          yAxisLeftUsed = true;
	          minLeft = 1e9;
	          maxLeft = -1e9;
	        } else if (group && group.options.yAxisOrientation) {
	          yAxisRightUsed = true;
	          minRight = 1e9;
	          maxRight = -1e9;
	        }
	      }

	      // if there are items:
	      for (var i = 0; i < groupIds.length; i++) {
	        if (groupRanges.hasOwnProperty(groupIds[i])) {
	          if (groupRanges[groupIds[i]].ignore !== true) {
	            minVal = groupRanges[groupIds[i]].min;
	            maxVal = groupRanges[groupIds[i]].max;

	            if (groupRanges[groupIds[i]].yAxisOrientation != 'right') {
	              yAxisLeftUsed = true;
	              minLeft = minLeft > minVal ? minVal : minLeft;
	              maxLeft = maxLeft < maxVal ? maxVal : maxLeft;
	            } else {
	              yAxisRightUsed = true;
	              minRight = minRight > minVal ? minVal : minRight;
	              maxRight = maxRight < maxVal ? maxVal : maxRight;
	            }
	          }
	        }
	      }

	      if (yAxisLeftUsed == true) {
	        this.yAxisLeft.setRange(minLeft, maxLeft);
	      }
	      if (yAxisRightUsed == true) {
	        this.yAxisRight.setRange(minRight, maxRight);
	      }
	    }
	    resized = this._toggleAxisVisiblity(yAxisLeftUsed, this.yAxisLeft) || resized;
	    resized = this._toggleAxisVisiblity(yAxisRightUsed, this.yAxisRight) || resized;

	    if (yAxisRightUsed == true && yAxisLeftUsed == true) {
	      this.yAxisLeft.drawIcons = true;
	      this.yAxisRight.drawIcons = true;
	    } else {
	      this.yAxisLeft.drawIcons = false;
	      this.yAxisRight.drawIcons = false;
	    }
	    this.yAxisRight.master = !yAxisLeftUsed;
	    this.yAxisRight.masterAxis = this.yAxisLeft;

	    if (this.yAxisRight.master == false) {
	      if (yAxisRightUsed == true) {
	        this.yAxisLeft.lineOffset = this.yAxisRight.width;
	      } else {
	        this.yAxisLeft.lineOffset = 0;
	      }

	      resized = this.yAxisLeft.redraw() || resized;
	      resized = this.yAxisRight.redraw() || resized;
	    } else {
	      resized = this.yAxisRight.redraw() || resized;
	    }

	    // clean the accumulated lists
	    var tempGroups = ['__barStackLeft', '__barStackRight', '__lineStackLeft', '__lineStackRight'];
	    for (var i = 0; i < tempGroups.length; i++) {
	      if (groupIds.indexOf(tempGroups[i]) != -1) {
	        groupIds.splice(groupIds.indexOf(tempGroups[i]), 1);
	      }
	    }

	    return resized;
	  };

	  /**
	   * This shows or hides the Y axis if needed. If there is a change, the changed event is emitted by the updateYAxis function
	   *
	   * @param {boolean} axisUsed
	   * @returns {boolean}
	   * @private
	   * @param axis
	   */
	  LineGraph.prototype._toggleAxisVisiblity = function (axisUsed, axis) {
	    var changed = false;
	    if (axisUsed == false) {
	      if (axis.dom.frame.parentNode && axis.hidden == false) {
	        axis.hide();
	        changed = true;
	      }
	    } else {
	      if (!axis.dom.frame.parentNode && axis.hidden == true) {
	        axis.show();
	        changed = true;
	      }
	    }
	    return changed;
	  };

	  /**
	   * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
	   * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
	   * the yAxis.
	   *
	   * @param datapoints
	   * @returns {Array}
	   * @private
	   */
	  LineGraph.prototype._convertXcoordinates = function (datapoints) {
	    var toScreen = this.body.util.toScreen;
	    for (var i = 0; i < datapoints.length; i++) {
	      datapoints[i].screen_x = toScreen(datapoints[i].x) + this.props.width;
	      datapoints[i].screen_y = datapoints[i].y; //starting point for range calculations
	    }
	  };

	  /**
	   * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
	   * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
	   * the yAxis.
	   *
	   * @param datapoints
	   * @param group
	   * @returns {Array}
	   * @private
	   */
	  LineGraph.prototype._convertYcoordinates = function (datapoints, group) {
	    var axis = this.yAxisLeft;
	    var svgHeight = Number(this.svg.style.height.replace('px', ''));
	    if (group.options.yAxisOrientation == 'right') {
	      axis = this.yAxisRight;
	    }
	    for (var i = 0; i < datapoints.length; i++) {
	      datapoints[i].screen_y = Math.round(axis.convertValue(datapoints[i].y));
	    }
	    group.setZeroPosition(Math.min(svgHeight, axis.convertValue(0)));
	  };

	  module.exports = LineGraph;

	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);
	  var DOMutil = __webpack_require__(8);
	  var Component = __webpack_require__(33);
	  var DataScale = __webpack_require__(55);
	  /**
	   * A horizontal time axis
	   * @param {Object} [options]        See DataAxis.setOptions for the available
	   *                                  options.
	   * @constructor DataAxis
	   * @extends Component
	   * @param body
	   */
	  function DataAxis(body, options, svg, linegraphOptions) {
	    this.id = util.randomUUID();
	    this.body = body;

	    this.defaultOptions = {
	      orientation: 'left', // supported: 'left', 'right'
	      showMinorLabels: true,
	      showMajorLabels: true,
	      icons: false,
	      majorLinesOffset: 7,
	      minorLinesOffset: 4,
	      labelOffsetX: 10,
	      labelOffsetY: 2,
	      iconWidth: 20,
	      width: '40px',
	      visible: true,
	      alignZeros: true,
	      left: {
	        range: { min: undefined, max: undefined },
	        format: function format(value) {
	          return '' + parseFloat(value.toPrecision(3));
	        },
	        title: { text: undefined, style: undefined }
	      },
	      right: {
	        range: { min: undefined, max: undefined },
	        format: function format(value) {
	          return '' + parseFloat(value.toPrecision(3));
	        },
	        title: { text: undefined, style: undefined }
	      }
	    };

	    this.linegraphOptions = linegraphOptions;
	    this.linegraphSVG = svg;
	    this.props = {};
	    this.DOMelements = { // dynamic elements
	      lines: {},
	      labels: {},
	      title: {}
	    };

	    this.dom = {};
	    this.scale = undefined;
	    this.range = { start: 0, end: 0 };

	    this.options = util.extend({}, this.defaultOptions);
	    this.conversionFactor = 1;

	    this.setOptions(options);
	    this.width = Number(('' + this.options.width).replace("px", ""));
	    this.minWidth = this.width;
	    this.height = this.linegraphSVG.getBoundingClientRect().height;
	    this.hidden = false;

	    this.stepPixels = 25;
	    this.zeroCrossing = -1;
	    this.amountOfSteps = -1;

	    this.lineOffset = 0;
	    this.master = true;
	    this.masterAxis = null;
	    this.svgElements = {};
	    this.iconsRemoved = false;

	    this.groups = {};
	    this.amountOfGroups = 0;

	    // create the HTML DOM
	    this._create();
	    this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };

	    var me = this;
	    this.body.emitter.on("verticalDrag", function () {
	      me.dom.lineContainer.style.top = me.body.domProps.scrollTop + 'px';
	    });
	  }

	  DataAxis.prototype = new Component();

	  DataAxis.prototype.addGroup = function (label, graphOptions) {
	    if (!this.groups.hasOwnProperty(label)) {
	      this.groups[label] = graphOptions;
	    }
	    this.amountOfGroups += 1;
	  };

	  DataAxis.prototype.updateGroup = function (label, graphOptions) {
	    if (!this.groups.hasOwnProperty(label)) {
	      this.amountOfGroups += 1;
	    }
	    this.groups[label] = graphOptions;
	  };

	  DataAxis.prototype.removeGroup = function (label) {
	    if (this.groups.hasOwnProperty(label)) {
	      delete this.groups[label];
	      this.amountOfGroups -= 1;
	    }
	  };

	  DataAxis.prototype.setOptions = function (options) {
	    if (options) {
	      var redraw = false;
	      if (this.options.orientation != options.orientation && options.orientation !== undefined) {
	        redraw = true;
	      }
	      var fields = ['orientation', 'showMinorLabels', 'showMajorLabels', 'icons', 'majorLinesOffset', 'minorLinesOffset', 'labelOffsetX', 'labelOffsetY', 'iconWidth', 'width', 'visible', 'left', 'right', 'alignZeros'];
	      util.selectiveDeepExtend(fields, this.options, options);

	      this.minWidth = Number(('' + this.options.width).replace("px", ""));
	      if (redraw === true && this.dom.frame) {
	        this.hide();
	        this.show();
	      }
	    }
	  };

	  /**
	   * Create the HTML DOM for the DataAxis
	   */
	  DataAxis.prototype._create = function () {
	    this.dom.frame = document.createElement('div');
	    this.dom.frame.style.width = this.options.width;
	    this.dom.frame.style.height = this.height;

	    this.dom.lineContainer = document.createElement('div');
	    this.dom.lineContainer.style.width = '100%';
	    this.dom.lineContainer.style.height = this.height;
	    this.dom.lineContainer.style.position = 'relative';

	    // create svg element for graph drawing.
	    this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
	    this.svg.style.position = "absolute";
	    this.svg.style.top = '0px';
	    this.svg.style.height = '100%';
	    this.svg.style.width = '100%';
	    this.svg.style.display = "block";
	    this.dom.frame.appendChild(this.svg);
	  };

	  DataAxis.prototype._redrawGroupIcons = function () {
	    DOMutil.prepareElements(this.svgElements);

	    var x;
	    var iconWidth = this.options.iconWidth;
	    var iconHeight = 15;
	    var iconOffset = 4;
	    var y = iconOffset + 0.5 * iconHeight;

	    if (this.options.orientation === 'left') {
	      x = iconOffset;
	    } else {
	      x = this.width - iconWidth - iconOffset;
	    }

	    var groupArray = Object.keys(this.groups);
	    groupArray.sort(function (a, b) {
	      return a < b ? -1 : 1;
	    });

	    for (var i = 0; i < groupArray.length; i++) {
	      var groupId = groupArray[i];
	      if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
	        this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
	        y += iconHeight + iconOffset;
	      }
	    }

	    DOMutil.cleanupElements(this.svgElements);
	    this.iconsRemoved = false;
	  };

	  DataAxis.prototype._cleanupIcons = function () {
	    if (this.iconsRemoved === false) {
	      DOMutil.prepareElements(this.svgElements);
	      DOMutil.cleanupElements(this.svgElements);
	      this.iconsRemoved = true;
	    }
	  };

	  /**
	   * Create the HTML DOM for the DataAxis
	   */
	  DataAxis.prototype.show = function () {
	    this.hidden = false;
	    if (!this.dom.frame.parentNode) {
	      if (this.options.orientation === 'left') {
	        this.body.dom.left.appendChild(this.dom.frame);
	      } else {
	        this.body.dom.right.appendChild(this.dom.frame);
	      }
	    }

	    if (!this.dom.lineContainer.parentNode) {
	      this.body.dom.backgroundHorizontal.appendChild(this.dom.lineContainer);
	    }
	  };

	  /**
	   * Create the HTML DOM for the DataAxis
	   */
	  DataAxis.prototype.hide = function () {
	    this.hidden = true;
	    if (this.dom.frame.parentNode) {
	      this.dom.frame.parentNode.removeChild(this.dom.frame);
	    }

	    if (this.dom.lineContainer.parentNode) {
	      this.dom.lineContainer.parentNode.removeChild(this.dom.lineContainer);
	    }
	  };

	  /**
	   * Set a range (start and end)
	   * @param end
	   * @param start
	   * @param end
	   */
	  DataAxis.prototype.setRange = function (start, end) {
	    this.range.start = start;
	    this.range.end = end;
	  };

	  /**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */
	  DataAxis.prototype.redraw = function () {
	    var resized = false;
	    var activeGroups = 0;

	    // Make sure the line container adheres to the vertical scrolling.
	    this.dom.lineContainer.style.top = this.body.domProps.scrollTop + 'px';

	    for (var groupId in this.groups) {
	      if (this.groups.hasOwnProperty(groupId)) {
	        if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
	          activeGroups++;
	        }
	      }
	    }
	    if (this.amountOfGroups === 0 || activeGroups === 0) {
	      this.hide();
	    } else {
	      this.show();
	      this.height = Number(this.linegraphSVG.style.height.replace("px", ""));

	      // svg offsetheight did not work in firefox and explorer...
	      this.dom.lineContainer.style.height = this.height + 'px';
	      this.width = this.options.visible === true ? Number(('' + this.options.width).replace("px", "")) : 0;

	      var props = this.props;
	      var frame = this.dom.frame;

	      // update classname
	      frame.className = 'vis-data-axis';

	      // calculate character width and height
	      this._calculateCharSize();

	      var orientation = this.options.orientation;
	      var showMinorLabels = this.options.showMinorLabels;
	      var showMajorLabels = this.options.showMajorLabels;

	      // determine the width and height of the elements for the axis
	      props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
	      props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;

	      props.minorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.minorLinesOffset;
	      props.minorLineHeight = 1;
	      props.majorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.majorLinesOffset;
	      props.majorLineHeight = 1;

	      //  take frame offline while updating (is almost twice as fast)
	      if (orientation === 'left') {
	        frame.style.top = '0';
	        frame.style.left = '0';
	        frame.style.bottom = '';
	        frame.style.width = this.width + 'px';
	        frame.style.height = this.height + "px";
	        this.props.width = this.body.domProps.left.width;
	        this.props.height = this.body.domProps.left.height;
	      } else {
	        // right
	        frame.style.top = '';
	        frame.style.bottom = '0';
	        frame.style.left = '0';
	        frame.style.width = this.width + 'px';
	        frame.style.height = this.height + "px";
	        this.props.width = this.body.domProps.right.width;
	        this.props.height = this.body.domProps.right.height;
	      }

	      resized = this._redrawLabels();
	      resized = this._isResized() || resized;

	      if (this.options.icons === true) {
	        this._redrawGroupIcons();
	      } else {
	        this._cleanupIcons();
	      }

	      this._redrawTitle(orientation);
	    }
	    return resized;
	  };

	  /**
	   * Repaint major and minor text labels and vertical grid lines
	   * @private
	   */
	  DataAxis.prototype._redrawLabels = function () {
	    var _this = this;

	    var resized = false;
	    DOMutil.prepareElements(this.DOMelements.lines);
	    DOMutil.prepareElements(this.DOMelements.labels);
	    var orientation = this.options['orientation'];
	    var customRange = this.options[orientation].range != undefined ? this.options[orientation].range : {};

	    //Override range with manual options:
	    var autoScaleEnd = true;
	    if (customRange.max != undefined) {
	      this.range.end = customRange.max;
	      autoScaleEnd = false;
	    }
	    var autoScaleStart = true;
	    if (customRange.min != undefined) {
	      this.range.start = customRange.min;
	      autoScaleStart = false;
	    }

	    this.scale = new DataScale(this.range.start, this.range.end, autoScaleStart, autoScaleEnd, this.dom.frame.offsetHeight, this.props.majorCharHeight, this.options.alignZeros, this.options[orientation].format);

	    if (this.master === false && this.masterAxis != undefined) {
	      this.scale.followScale(this.masterAxis.scale);
	    }

	    //Is updated in side-effect of _redrawLabel():
	    this.maxLabelSize = 0;

	    var lines = this.scale.getLines();
	    lines.forEach(function (line) {
	      var y = line.y;
	      var isMajor = line.major;
	      if (_this.options['showMinorLabels'] && isMajor === false) {
	        _this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-minor', _this.props.minorCharHeight);
	      }
	      if (isMajor) {
	        if (y >= 0) {
	          _this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-major', _this.props.majorCharHeight);
	        }
	      }
	      if (_this.master === true) {
	        if (isMajor) {
	          _this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-major', _this.options.majorLinesOffset, _this.props.majorLineWidth);
	        } else {
	          _this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-minor', _this.options.minorLinesOffset, _this.props.minorLineWidth);
	        }
	      }
	    });

	    // Note that title is rotated, so we're using the height, not width!
	    var titleWidth = 0;
	    if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
	      titleWidth = this.props.titleCharHeight;
	    }
	    var offset = this.options.icons === true ? Math.max(this.options.iconWidth, titleWidth) + this.options.labelOffsetX + 15 : titleWidth + this.options.labelOffsetX + 15;

	    // this will resize the yAxis to accommodate the labels.
	    if (this.maxLabelSize > this.width - offset && this.options.visible === true) {
	      this.width = this.maxLabelSize + offset;
	      this.options.width = this.width + "px";
	      DOMutil.cleanupElements(this.DOMelements.lines);
	      DOMutil.cleanupElements(this.DOMelements.labels);
	      this.redraw();
	      resized = true;
	    }
	    // this will resize the yAxis if it is too big for the labels.
	    else if (this.maxLabelSize < this.width - offset && this.options.visible === true && this.width > this.minWidth) {
	        this.width = Math.max(this.minWidth, this.maxLabelSize + offset);
	        this.options.width = this.width + "px";
	        DOMutil.cleanupElements(this.DOMelements.lines);
	        DOMutil.cleanupElements(this.DOMelements.labels);
	        this.redraw();
	        resized = true;
	      } else {
	        DOMutil.cleanupElements(this.DOMelements.lines);
	        DOMutil.cleanupElements(this.DOMelements.labels);
	        resized = false;
	      }

	    return resized;
	  };

	  DataAxis.prototype.convertValue = function (value) {
	    return this.scale.convertValue(value);
	  };

	  DataAxis.prototype.screenToValue = function (x) {
	    return this.scale.screenToValue(x);
	  };

	  /**
	   * Create a label for the axis at position x
	   * @private
	   * @param y
	   * @param text
	   * @param orientation
	   * @param className
	   * @param characterHeight
	   */
	  DataAxis.prototype._redrawLabel = function (y, text, orientation, className, characterHeight) {
	    // reuse redundant label
	    var label = DOMutil.getDOMElement('div', this.DOMelements.labels, this.dom.frame); //this.dom.redundant.labels.shift();
	    label.className = className;
	    label.innerHTML = text;
	    if (orientation === 'left') {
	      label.style.left = '-' + this.options.labelOffsetX + 'px';
	      label.style.textAlign = "right";
	    } else {
	      label.style.right = '-' + this.options.labelOffsetX + 'px';
	      label.style.textAlign = "left";
	    }

	    label.style.top = y - 0.5 * characterHeight + this.options.labelOffsetY + 'px';

	    text += '';

	    var largestWidth = Math.max(this.props.majorCharWidth, this.props.minorCharWidth);
	    if (this.maxLabelSize < text.length * largestWidth) {
	      this.maxLabelSize = text.length * largestWidth;
	    }
	  };

	  /**
	   * Create a minor line for the axis at position y
	   * @param y
	   * @param orientation
	   * @param className
	   * @param offset
	   * @param width
	   */
	  DataAxis.prototype._redrawLine = function (y, orientation, className, offset, width) {
	    if (this.master === true) {
	      var line = DOMutil.getDOMElement('div', this.DOMelements.lines, this.dom.lineContainer); //this.dom.redundant.lines.shift();
	      line.className = className;
	      line.innerHTML = '';

	      if (orientation === 'left') {
	        line.style.left = this.width - offset + 'px';
	      } else {
	        line.style.right = this.width - offset + 'px';
	      }

	      line.style.width = width + 'px';
	      line.style.top = y + 'px';
	    }
	  };

	  /**
	   * Create a title for the axis
	   * @private
	   * @param orientation
	   */
	  DataAxis.prototype._redrawTitle = function (orientation) {
	    DOMutil.prepareElements(this.DOMelements.title);

	    // Check if the title is defined for this axes
	    if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
	      var title = DOMutil.getDOMElement('div', this.DOMelements.title, this.dom.frame);
	      title.className = 'vis-y-axis vis-title vis-' + orientation;
	      title.innerHTML = this.options[orientation].title.text;

	      // Add style - if provided
	      if (this.options[orientation].title.style !== undefined) {
	        util.addCssText(title, this.options[orientation].title.style);
	      }

	      if (orientation === 'left') {
	        title.style.left = this.props.titleCharHeight + 'px';
	      } else {
	        title.style.right = this.props.titleCharHeight + 'px';
	      }

	      title.style.width = this.height + 'px';
	    }

	    // we need to clean up in case we did not use all elements.
	    DOMutil.cleanupElements(this.DOMelements.title);
	  };

	  /**
	   * Determine the size of text on the axis (both major and minor axis).
	   * The size is calculated only once and then cached in this.props.
	   * @private
	   */
	  DataAxis.prototype._calculateCharSize = function () {
	    // determine the char width and height on the minor axis
	    if (!('minorCharHeight' in this.props)) {
	      var textMinor = document.createTextNode('0');
	      var measureCharMinor = document.createElement('div');
	      measureCharMinor.className = 'vis-y-axis vis-minor vis-measure';
	      measureCharMinor.appendChild(textMinor);
	      this.dom.frame.appendChild(measureCharMinor);

	      this.props.minorCharHeight = measureCharMinor.clientHeight;
	      this.props.minorCharWidth = measureCharMinor.clientWidth;

	      this.dom.frame.removeChild(measureCharMinor);
	    }

	    if (!('majorCharHeight' in this.props)) {
	      var textMajor = document.createTextNode('0');
	      var measureCharMajor = document.createElement('div');
	      measureCharMajor.className = 'vis-y-axis vis-major vis-measure';
	      measureCharMajor.appendChild(textMajor);
	      this.dom.frame.appendChild(measureCharMajor);

	      this.props.majorCharHeight = measureCharMajor.clientHeight;
	      this.props.majorCharWidth = measureCharMajor.clientWidth;

	      this.dom.frame.removeChild(measureCharMajor);
	    }

	    if (!('titleCharHeight' in this.props)) {
	      var textTitle = document.createTextNode('0');
	      var measureCharTitle = document.createElement('div');
	      measureCharTitle.className = 'vis-y-axis vis-title vis-measure';
	      measureCharTitle.appendChild(textTitle);
	      this.dom.frame.appendChild(measureCharTitle);

	      this.props.titleCharHeight = measureCharTitle.clientHeight;
	      this.props.titleCharWidth = measureCharTitle.clientWidth;

	      this.dom.frame.removeChild(measureCharTitle);
	    }
	  };

	  module.exports = DataAxis;

	/***/ },
	/* 55 */
	/***/ function(module, exports) {

	  'use strict';

	  /**
	   * Created by ludo on 25-1-16.
	   */

	  function DataScale(start, end, autoScaleStart, autoScaleEnd, containerHeight, majorCharHeight) {
	    var zeroAlign = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
	    var formattingFunction = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;

	    this.majorSteps = [1, 2, 5, 10];
	    this.minorSteps = [0.25, 0.5, 1, 2];
	    this.customLines = null;

	    this.containerHeight = containerHeight;
	    this.majorCharHeight = majorCharHeight;
	    this._start = start;
	    this._end = end;

	    this.scale = 1;
	    this.minorStepIdx = -1;
	    this.magnitudefactor = 1;
	    this.determineScale();

	    this.zeroAlign = zeroAlign;
	    this.autoScaleStart = autoScaleStart;
	    this.autoScaleEnd = autoScaleEnd;

	    this.formattingFunction = formattingFunction;

	    if (autoScaleStart || autoScaleEnd) {
	      var me = this;
	      var roundToMinor = function roundToMinor(value) {
	        var rounded = value - value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]);
	        if (value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]) > 0.5 * (me.magnitudefactor * me.minorSteps[me.minorStepIdx])) {
	          return rounded + me.magnitudefactor * me.minorSteps[me.minorStepIdx];
	        } else {
	          return rounded;
	        }
	      };
	      if (autoScaleStart) {
	        this._start -= this.magnitudefactor * 2 * this.minorSteps[this.minorStepIdx];
	        this._start = roundToMinor(this._start);
	      }

	      if (autoScaleEnd) {
	        this._end += this.magnitudefactor * this.minorSteps[this.minorStepIdx];
	        this._end = roundToMinor(this._end);
	      }
	      this.determineScale();
	    }
	  }

	  DataScale.prototype.setCharHeight = function (majorCharHeight) {
	    this.majorCharHeight = majorCharHeight;
	  };

	  DataScale.prototype.setHeight = function (containerHeight) {
	    this.containerHeight = containerHeight;
	  };

	  DataScale.prototype.determineScale = function () {
	    var range = this._end - this._start;
	    this.scale = this.containerHeight / range;
	    var minimumStepValue = this.majorCharHeight / this.scale;
	    var orderOfMagnitude = range > 0 ? Math.round(Math.log(range) / Math.LN10) : 0;

	    this.minorStepIdx = -1;
	    this.magnitudefactor = Math.pow(10, orderOfMagnitude);

	    var start = 0;
	    if (orderOfMagnitude < 0) {
	      start = orderOfMagnitude;
	    }

	    var solutionFound = false;
	    for (var l = start; Math.abs(l) <= Math.abs(orderOfMagnitude); l++) {
	      this.magnitudefactor = Math.pow(10, l);
	      for (var j = 0; j < this.minorSteps.length; j++) {
	        var stepSize = this.magnitudefactor * this.minorSteps[j];
	        if (stepSize >= minimumStepValue) {
	          solutionFound = true;
	          this.minorStepIdx = j;
	          break;
	        }
	      }
	      if (solutionFound === true) {
	        break;
	      }
	    }
	  };

	  DataScale.prototype.is_major = function (value) {
	    return value % (this.magnitudefactor * this.majorSteps[this.minorStepIdx]) === 0;
	  };

	  DataScale.prototype.getStep = function () {
	    return this.magnitudefactor * this.minorSteps[this.minorStepIdx];
	  };

	  DataScale.prototype.getFirstMajor = function () {
	    var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
	    return this.convertValue(this._start + (majorStep - this._start % majorStep) % majorStep);
	  };

	  DataScale.prototype.formatValue = function (current) {
	    var returnValue = current.toPrecision(5);
	    if (typeof this.formattingFunction === 'function') {
	      returnValue = this.formattingFunction(current);
	    }

	    if (typeof returnValue === 'number') {
	      return '' + returnValue;
	    } else if (typeof returnValue === 'string') {
	      return returnValue;
	    } else {
	      return current.toPrecision(5);
	    }
	  };

	  DataScale.prototype.getLines = function () {
	    var lines = [];
	    var step = this.getStep();
	    var bottomOffset = (step - this._start % step) % step;
	    for (var i = this._start + bottomOffset; this._end - i > 0.00001; i += step) {
	      if (i != this._start) {
	        //Skip the bottom line
	        lines.push({ major: this.is_major(i), y: this.convertValue(i), val: this.formatValue(i) });
	      }
	    }
	    return lines;
	  };

	  DataScale.prototype.followScale = function (other) {
	    var oldStepIdx = this.minorStepIdx;
	    var oldStart = this._start;
	    var oldEnd = this._end;

	    var me = this;
	    var increaseMagnitude = function increaseMagnitude() {
	      me.magnitudefactor *= 2;
	    };
	    var decreaseMagnitude = function decreaseMagnitude() {
	      me.magnitudefactor /= 2;
	    };

	    if (other.minorStepIdx <= 1 && this.minorStepIdx <= 1 || other.minorStepIdx > 1 && this.minorStepIdx > 1) {
	      //easy, no need to change stepIdx nor multiplication factor
	    } else if (other.minorStepIdx < this.minorStepIdx) {
	      //I'm 5, they are 4 per major.
	      this.minorStepIdx = 1;
	      if (oldStepIdx == 2) {
	        increaseMagnitude();
	      } else {
	        increaseMagnitude();
	        increaseMagnitude();
	      }
	    } else {
	      //I'm 4, they are 5 per major
	      this.minorStepIdx = 2;
	      if (oldStepIdx == 1) {
	        decreaseMagnitude();
	      } else {
	        decreaseMagnitude();
	        decreaseMagnitude();
	      }
	    }

	    //Get masters stats:
	    var lines = other.getLines();
	    var otherZero = other.convertValue(0);
	    var otherStep = other.getStep() * other.scale;

	    var done = false;
	    var count = 0;
	    //Loop until magnitude is correct for given constrains.
	    while (!done && count++ < 5) {

	      //Get my stats:
	      this.scale = otherStep / (this.minorSteps[this.minorStepIdx] * this.magnitudefactor);
	      var newRange = this.containerHeight / this.scale;

	      //For the case the magnitudefactor has changed:
	      this._start = oldStart;
	      this._end = this._start + newRange;

	      var myOriginalZero = this._end * this.scale;
	      var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
	      var majorOffset = this.getFirstMajor() - other.getFirstMajor();

	      if (this.zeroAlign) {
	        var zeroOffset = otherZero - myOriginalZero;
	        this._end += zeroOffset / this.scale;
	        this._start = this._end - newRange;
	      } else {
	        if (!this.autoScaleStart) {
	          this._start += majorStep - majorOffset / this.scale;
	          this._end = this._start + newRange;
	        } else {
	          this._start -= majorOffset / this.scale;
	          this._end = this._start + newRange;
	        }
	      }
	      if (!this.autoScaleEnd && this._end > oldEnd + 0.00001) {
	        //Need to decrease magnitude to prevent scale overshoot! (end)
	        decreaseMagnitude();
	        done = false;
	        continue;
	      }
	      if (!this.autoScaleStart && this._start < oldStart - 0.00001) {
	        if (this.zeroAlign && oldStart >= 0) {
	          console.warn("Can't adhere to given 'min' range, due to zeroalign");
	        } else {
	          //Need to decrease magnitude to prevent scale overshoot! (start)
	          decreaseMagnitude();
	          done = false;
	          continue;
	        }
	      }
	      if (this.autoScaleStart && this.autoScaleEnd && newRange < oldEnd - oldStart) {
	        increaseMagnitude();
	        done = false;
	        continue;
	      }
	      done = true;
	    }
	  };

	  DataScale.prototype.convertValue = function (value) {
	    return this.containerHeight - (value - this._start) * this.scale;
	  };

	  DataScale.prototype.screenToValue = function (pixels) {
	    return (this.containerHeight - pixels) / this.scale + this._start;
	  };

	  module.exports = DataScale;

	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var util = __webpack_require__(1);
	  var DOMutil = __webpack_require__(8);
	  var Bars = __webpack_require__(57);
	  var Lines = __webpack_require__(59);
	  var Points = __webpack_require__(58);

	  /**
	   * /**
	   * @param {object} group            | the object of the group from the dataset
	   * @param {string} groupId          | ID of the group
	   * @param {object} options          | the default options
	   * @param {array} groupsUsingDefaultStyles  | this array has one entree.
	   *                                            It is passed as an array so it is passed by reference.
	   *                                            It enumerates through the default styles
	   * @constructor
	   */
	  function GraphGroup(group, groupId, options, groupsUsingDefaultStyles) {
	    this.id = groupId;
	    var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'drawPoints', 'shaded', 'interpolation', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
	    this.options = util.selectiveBridgeObject(fields, options);
	    this.usingDefaultStyle = group.className === undefined;
	    this.groupsUsingDefaultStyles = groupsUsingDefaultStyles;
	    this.zeroPosition = 0;
	    this.update(group);
	    if (this.usingDefaultStyle == true) {
	      this.groupsUsingDefaultStyles[0] += 1;
	    }
	    this.itemsData = [];
	    this.visible = group.visible === undefined ? true : group.visible;
	  }

	  /**
	   * this loads a reference to all items in this group into this group.
	   * @param {array} items
	   */
	  GraphGroup.prototype.setItems = function (items) {
	    if (items != null) {
	      this.itemsData = items;
	      if (this.options.sort == true) {
	        util.insertSort(this.itemsData, function (a, b) {
	          return a.x > b.x ? 1 : -1;
	        });
	      }
	    } else {
	      this.itemsData = [];
	    }
	  };

	  GraphGroup.prototype.getItems = function () {
	    return this.itemsData;
	  };

	  /**
	   * this is used for barcharts and shading, this way, we only have to calculate it once.
	   * @param pos
	   */
	  GraphGroup.prototype.setZeroPosition = function (pos) {
	    this.zeroPosition = pos;
	  };

	  /**
	   * set the options of the graph group over the default options.
	   * @param options
	   */
	  GraphGroup.prototype.setOptions = function (options) {
	    if (options !== undefined) {
	      var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
	      util.selectiveDeepExtend(fields, this.options, options);

	      // if the group's drawPoints is a function delegate the callback to the onRender property
	      if (typeof options.drawPoints == 'function') {
	        options.drawPoints = {
	          onRender: options.drawPoints
	        };
	      }

	      util.mergeOptions(this.options, options, 'interpolation');
	      util.mergeOptions(this.options, options, 'drawPoints');
	      util.mergeOptions(this.options, options, 'shaded');

	      if (options.interpolation) {
	        if (_typeof(options.interpolation) == 'object') {
	          if (options.interpolation.parametrization) {
	            if (options.interpolation.parametrization == 'uniform') {
	              this.options.interpolation.alpha = 0;
	            } else if (options.interpolation.parametrization == 'chordal') {
	              this.options.interpolation.alpha = 1.0;
	            } else {
	              this.options.interpolation.parametrization = 'centripetal';
	              this.options.interpolation.alpha = 0.5;
	            }
	          }
	        }
	      }
	    }
	  };

	  /**
	   * this updates the current group class with the latest group dataset entree, used in _updateGroup in linegraph
	   * @param group
	   */
	  GraphGroup.prototype.update = function (group) {
	    this.group = group;
	    this.content = group.content || 'graph';
	    this.className = group.className || this.className || 'vis-graph-group' + this.groupsUsingDefaultStyles[0] % 10;
	    this.visible = group.visible === undefined ? true : group.visible;
	    this.style = group.style;
	    this.setOptions(group.options);
	  };

	  /**
	   * return the legend entree for this group.
	   *
	   * @param iconWidth
	   * @param iconHeight
	   * @returns {{icon: HTMLElement, label: (group.content|*|string), orientation: (.options.yAxisOrientation|*)}}
	   */
	  GraphGroup.prototype.getLegend = function (iconWidth, iconHeight, framework, x, y) {
	    if (framework == undefined || framework == null) {
	      var svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
	      framework = { svg: svg, svgElements: {}, options: this.options, groups: [this] };
	    }
	    if (x == undefined || x == null) {
	      x = 0;
	    }
	    if (y == undefined || y == null) {
	      y = 0.5 * iconHeight;
	    }
	    switch (this.options.style) {
	      case "line":
	        Lines.drawIcon(this, x, y, iconWidth, iconHeight, framework);
	        break;
	      case "points": //explicit no break
	      case "point":
	        Points.drawIcon(this, x, y, iconWidth, iconHeight, framework);
	        break;
	      case "bar":
	        Bars.drawIcon(this, x, y, iconWidth, iconHeight, framework);
	        break;
	    }
	    return { icon: framework.svg, label: this.content, orientation: this.options.yAxisOrientation };
	  };

	  GraphGroup.prototype.getYRange = function (groupData) {
	    var yMin = groupData[0].y;
	    var yMax = groupData[0].y;
	    for (var j = 0; j < groupData.length; j++) {
	      yMin = yMin > groupData[j].y ? groupData[j].y : yMin;
	      yMax = yMax < groupData[j].y ? groupData[j].y : yMax;
	    }
	    return { min: yMin, max: yMax, yAxisOrientation: this.options.yAxisOrientation };
	  };

	  module.exports = GraphGroup;

	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var DOMutil = __webpack_require__(8);
	  var Points = __webpack_require__(58);

	  function Bargraph(groupId, options) {}

	  Bargraph.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
	    var fillHeight = iconHeight * 0.5;
	    var path, fillPath;

	    var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
	    outline.setAttributeNS(null, "x", x);
	    outline.setAttributeNS(null, "y", y - fillHeight);
	    outline.setAttributeNS(null, "width", iconWidth);
	    outline.setAttributeNS(null, "height", 2 * fillHeight);
	    outline.setAttributeNS(null, "class", "vis-outline");

	    var barWidth = Math.round(0.3 * iconWidth);
	    var originalWidth = group.options.barChart.width;
	    var scale = originalWidth / barWidth;
	    var bar1Height = Math.round(0.4 * iconHeight);
	    var bar2Height = Math.round(0.75 * iconHeight);

	    var offset = Math.round((iconWidth - 2 * barWidth) / 3);

	    DOMutil.drawBar(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, barWidth, bar1Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);
	    DOMutil.drawBar(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, barWidth, bar2Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);

	    if (group.options.drawPoints.enabled == true) {
	      var groupTemplate = {
	        style: group.options.drawPoints.style,
	        styles: group.options.drawPoints.styles,
	        size: group.options.drawPoints.size / scale,
	        className: group.className
	      };
	      DOMutil.drawPoint(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, groupTemplate, framework.svgElements, framework.svg);
	      DOMutil.drawPoint(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, groupTemplate, framework.svgElements, framework.svg);
	    }
	  };

	  /**
	   * draw a bar graph
	   *
	   * @param groupIds
	   * @param processedGroupData
	   */
	  Bargraph.draw = function (groupIds, processedGroupData, framework) {
	    var combinedData = [];
	    var intersections = {};
	    var coreDistance;
	    var key, drawData;
	    var group;
	    var i, j;
	    var barPoints = 0;

	    // combine all barchart data
	    for (i = 0; i < groupIds.length; i++) {
	      group = framework.groups[groupIds[i]];
	      if (group.options.style === 'bar') {
	        if (group.visible === true && (framework.options.groups.visibility[groupIds[i]] === undefined || framework.options.groups.visibility[groupIds[i]] === true)) {
	          for (j = 0; j < processedGroupData[groupIds[i]].length; j++) {
	            combinedData.push({
	              screen_x: processedGroupData[groupIds[i]][j].screen_x,
	              screen_y: processedGroupData[groupIds[i]][j].screen_y,
	              x: processedGroupData[groupIds[i]][j].x,
	              y: processedGroupData[groupIds[i]][j].y,
	              groupId: groupIds[i],
	              label: processedGroupData[groupIds[i]][j].label
	            });
	            barPoints += 1;
	          }
	        }
	      }
	    }

	    if (barPoints === 0) {
	      return;
	    }

	    // sort by time and by group
	    combinedData.sort(function (a, b) {
	      if (a.screen_x === b.screen_x) {
	        return a.groupId < b.groupId ? -1 : 1;
	      } else {
	        return a.screen_x - b.screen_x;
	      }
	    });

	    // get intersections
	    Bargraph._getDataIntersections(intersections, combinedData);

	    // plot barchart
	    for (i = 0; i < combinedData.length; i++) {
	      group = framework.groups[combinedData[i].groupId];
	      var minWidth = group.options.barChart.minWidth != undefined ? group.options.barChart.minWidth : 0.1 * group.options.barChart.width;

	      key = combinedData[i].screen_x;
	      var heightOffset = 0;
	      if (intersections[key] === undefined) {
	        if (i + 1 < combinedData.length) {
	          coreDistance = Math.abs(combinedData[i + 1].screen_x - key);
	        }
	        drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
	      } else {
	        var nextKey = i + (intersections[key].amount - intersections[key].resolved);
	        var prevKey = i - (intersections[key].resolved + 1);
	        if (nextKey < combinedData.length) {
	          coreDistance = Math.abs(combinedData[nextKey].screen_x - key);
	        }
	        drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
	        intersections[key].resolved += 1;

	        if (group.options.stack === true && group.options.excludeFromStacking !== true) {
	          if (combinedData[i].screen_y < group.zeroPosition) {
	            heightOffset = intersections[key].accumulatedNegative;
	            intersections[key].accumulatedNegative += group.zeroPosition - combinedData[i].screen_y;
	          } else {
	            heightOffset = intersections[key].accumulatedPositive;
	            intersections[key].accumulatedPositive += group.zeroPosition - combinedData[i].screen_y;
	          }
	        } else if (group.options.barChart.sideBySide === true) {
	          drawData.width = drawData.width / intersections[key].amount;
	          drawData.offset += intersections[key].resolved * drawData.width - 0.5 * drawData.width * (intersections[key].amount + 1);
	        }
	      }
	      DOMutil.drawBar(combinedData[i].screen_x + drawData.offset, combinedData[i].screen_y - heightOffset, drawData.width, group.zeroPosition - combinedData[i].screen_y, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);
	      // draw points
	      if (group.options.drawPoints.enabled === true) {
	        var pointData = {
	          screen_x: combinedData[i].screen_x,
	          screen_y: combinedData[i].screen_y - heightOffset,
	          x: combinedData[i].x,
	          y: combinedData[i].y,
	          groupId: combinedData[i].groupId,
	          label: combinedData[i].label
	        };
	        Points.draw([pointData], group, framework, drawData.offset);
	        //DOMutil.drawPoint(combinedData[i].x + drawData.offset, combinedData[i].y, group, framework.svgElements, framework.svg);
	      }
	    }
	  };

	  /**
	   * Fill the intersections object with counters of how many datapoints share the same x coordinates
	   * @param intersections
	   * @param combinedData
	   * @private
	   */
	  Bargraph._getDataIntersections = function (intersections, combinedData) {
	    // get intersections
	    var coreDistance;
	    for (var i = 0; i < combinedData.length; i++) {
	      if (i + 1 < combinedData.length) {
	        coreDistance = Math.abs(combinedData[i + 1].screen_x - combinedData[i].screen_x);
	      }
	      if (i > 0) {
	        coreDistance = Math.min(coreDistance, Math.abs(combinedData[i - 1].screen_x - combinedData[i].screen_x));
	      }
	      if (coreDistance === 0) {
	        if (intersections[combinedData[i].screen_x] === undefined) {
	          intersections[combinedData[i].screen_x] = {
	            amount: 0,
	            resolved: 0,
	            accumulatedPositive: 0,
	            accumulatedNegative: 0
	          };
	        }
	        intersections[combinedData[i].screen_x].amount += 1;
	      }
	    }
	  };

	  /**
	   * Get the width and offset for bargraphs based on the coredistance between datapoints
	   *
	   * @param coreDistance
	   * @param group
	   * @param minWidth
	   * @returns {{width: Number, offset: Number}}
	   * @private
	   */
	  Bargraph._getSafeDrawData = function (coreDistance, group, minWidth) {
	    var width, offset;
	    if (coreDistance < group.options.barChart.width && coreDistance > 0) {
	      width = coreDistance < minWidth ? minWidth : coreDistance;

	      offset = 0; // recalculate offset with the new width;
	      if (group.options.barChart.align === 'left') {
	        offset -= 0.5 * coreDistance;
	      } else if (group.options.barChart.align === 'right') {
	        offset += 0.5 * coreDistance;
	      }
	    } else {
	      // default settings
	      width = group.options.barChart.width;
	      offset = 0;
	      if (group.options.barChart.align === 'left') {
	        offset -= 0.5 * group.options.barChart.width;
	      } else if (group.options.barChart.align === 'right') {
	        offset += 0.5 * group.options.barChart.width;
	      }
	    }

	    return { width: width, offset: offset };
	  };

	  Bargraph.getStackedYRange = function (combinedData, groupRanges, groupIds, groupLabel, orientation) {
	    if (combinedData.length > 0) {
	      // sort by time and by group
	      combinedData.sort(function (a, b) {
	        if (a.screen_x === b.screen_x) {
	          return a.groupId < b.groupId ? -1 : 1;
	        } else {
	          return a.screen_x - b.screen_x;
	        }
	      });
	      var intersections = {};

	      Bargraph._getDataIntersections(intersections, combinedData);
	      groupRanges[groupLabel] = Bargraph._getStackedYRange(intersections, combinedData);
	      groupRanges[groupLabel].yAxisOrientation = orientation;
	      groupIds.push(groupLabel);
	    }
	  };

	  Bargraph._getStackedYRange = function (intersections, combinedData) {
	    var key;
	    var yMin = combinedData[0].screen_y;
	    var yMax = combinedData[0].screen_y;
	    for (var i = 0; i < combinedData.length; i++) {
	      key = combinedData[i].screen_x;
	      if (intersections[key] === undefined) {
	        yMin = yMin > combinedData[i].screen_y ? combinedData[i].screen_y : yMin;
	        yMax = yMax < combinedData[i].screen_y ? combinedData[i].screen_y : yMax;
	      } else {
	        if (combinedData[i].screen_y < 0) {
	          intersections[key].accumulatedNegative += combinedData[i].screen_y;
	        } else {
	          intersections[key].accumulatedPositive += combinedData[i].screen_y;
	        }
	      }
	    }
	    for (var xpos in intersections) {
	      if (intersections.hasOwnProperty(xpos)) {
	        yMin = yMin > intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMin;
	        yMin = yMin > intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMin;
	        yMax = yMax < intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMax;
	        yMax = yMax < intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMax;
	      }
	    }

	    return { min: yMin, max: yMax };
	  };

	  module.exports = Bargraph;

	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var DOMutil = __webpack_require__(8);

	  function Points(groupId, options) {}

	  /**
	   * draw the data points
	   *
	   * @param {Array} dataset
	   * @param {Object} JSONcontainer
	   * @param {Object} svg            | SVG DOM element
	   * @param {GraphGroup} group
	   * @param {Number} [offset]
	   */
	  Points.draw = function (dataset, group, framework, offset) {
	    offset = offset || 0;
	    var callback = getCallback(framework, group);

	    for (var i = 0; i < dataset.length; i++) {
	      if (!callback) {
	        // draw the point the simple way.
	        DOMutil.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group), framework.svgElements, framework.svg, dataset[i].label);
	      } else {
	        var callbackResult = callback(dataset[i], group); // result might be true, false or an object
	        if (callbackResult === true || (typeof callbackResult === 'undefined' ? 'undefined' : _typeof(callbackResult)) === 'object') {
	          DOMutil.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group, callbackResult), framework.svgElements, framework.svg, dataset[i].label);
	        }
	      }
	    }
	  };

	  Points.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
	    var fillHeight = iconHeight * 0.5;
	    var path, fillPath;

	    var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
	    outline.setAttributeNS(null, "x", x);
	    outline.setAttributeNS(null, "y", y - fillHeight);
	    outline.setAttributeNS(null, "width", iconWidth);
	    outline.setAttributeNS(null, "height", 2 * fillHeight);
	    outline.setAttributeNS(null, "class", "vis-outline");

	    //Don't call callback on icon
	    DOMutil.drawPoint(x + 0.5 * iconWidth, y, getGroupTemplate(group), framework.svgElements, framework.svg);
	  };

	  function getGroupTemplate(group, callbackResult) {
	    callbackResult = typeof callbackResult === 'undefined' ? {} : callbackResult;
	    return {
	      style: callbackResult.style || group.options.drawPoints.style,
	      styles: callbackResult.styles || group.options.drawPoints.styles,
	      size: callbackResult.size || group.options.drawPoints.size,
	      className: callbackResult.className || group.className
	    };
	  }

	  function getCallback(framework, group) {
	    var callback = undefined;
	    // check for the graph2d onRender
	    if (framework.options && framework.options.drawPoints && framework.options.drawPoints.onRender && typeof framework.options.drawPoints.onRender == 'function') {
	      callback = framework.options.drawPoints.onRender;
	    }

	    // override it with the group onRender if defined
	    if (group.group.options && group.group.options.drawPoints && group.group.options.drawPoints.onRender && typeof group.group.options.drawPoints.onRender == 'function') {
	      callback = group.group.options.drawPoints.onRender;
	    }
	    return callback;
	  }

	  module.exports = Points;

	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {

	  "use strict";

	  var DOMutil = __webpack_require__(8);

	  function Line(groupId, options) {}

	  Line.calcPath = function (dataset, group) {
	      if (dataset != null) {
	          if (dataset.length > 0) {
	              var d = [];

	              // construct path from dataset
	              if (group.options.interpolation.enabled == true) {
	                  d = Line._catmullRom(dataset, group);
	              } else {
	                  d = Line._linear(dataset);
	              }
	              return d;
	          }
	      }
	  };

	  Line.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
	      var fillHeight = iconHeight * 0.5;
	      var path, fillPath;

	      var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
	      outline.setAttributeNS(null, "x", x);
	      outline.setAttributeNS(null, "y", y - fillHeight);
	      outline.setAttributeNS(null, "width", iconWidth);
	      outline.setAttributeNS(null, "height", 2 * fillHeight);
	      outline.setAttributeNS(null, "class", "vis-outline");

	      path = DOMutil.getSVGElement("path", framework.svgElements, framework.svg);
	      path.setAttributeNS(null, "class", group.className);
	      if (group.style !== undefined) {
	          path.setAttributeNS(null, "style", group.style);
	      }

	      path.setAttributeNS(null, "d", "M" + x + "," + y + " L" + (x + iconWidth) + "," + y + "");
	      if (group.options.shaded.enabled == true) {
	          fillPath = DOMutil.getSVGElement("path", framework.svgElements, framework.svg);
	          if (group.options.shaded.orientation == 'top') {
	              fillPath.setAttributeNS(null, "d", "M" + x + ", " + (y - fillHeight) + "L" + x + "," + y + " L" + (x + iconWidth) + "," + y + " L" + (x + iconWidth) + "," + (y - fillHeight));
	          } else {
	              fillPath.setAttributeNS(null, "d", "M" + x + "," + y + " " + "L" + x + "," + (y + fillHeight) + " " + "L" + (x + iconWidth) + "," + (y + fillHeight) + "L" + (x + iconWidth) + "," + y);
	          }
	          fillPath.setAttributeNS(null, "class", group.className + " vis-icon-fill");
	          if (group.options.shaded.style !== undefined && group.options.shaded.style !== "") {
	              fillPath.setAttributeNS(null, "style", group.options.shaded.style);
	          }
	      }

	      if (group.options.drawPoints.enabled == true) {
	          var groupTemplate = {
	              style: group.options.drawPoints.style,
	              styles: group.options.drawPoints.styles,
	              size: group.options.drawPoints.size,
	              className: group.className
	          };
	          DOMutil.drawPoint(x + 0.5 * iconWidth, y, groupTemplate, framework.svgElements, framework.svg);
	      }
	  };

	  Line.drawShading = function (pathArray, group, subPathArray, framework) {
	      // append shading to the path
	      if (group.options.shaded.enabled == true) {
	          var svgHeight = Number(framework.svg.style.height.replace('px', ''));
	          var fillPath = DOMutil.getSVGElement('path', framework.svgElements, framework.svg);
	          var type = "L";
	          if (group.options.interpolation.enabled == true) {
	              type = "C";
	          }
	          var dFill;
	          var zero = 0;
	          if (group.options.shaded.orientation == 'top') {
	              zero = 0;
	          } else if (group.options.shaded.orientation == 'bottom') {
	              zero = svgHeight;
	          } else {
	              zero = Math.min(Math.max(0, group.zeroPosition), svgHeight);
	          }
	          if (group.options.shaded.orientation == 'group' && subPathArray != null && subPathArray != undefined) {
	              dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' L' + subPathArray[subPathArray.length - 1][0] + "," + subPathArray[subPathArray.length - 1][1] + " " + this.serializePath(subPathArray, type, true) + subPathArray[0][0] + "," + subPathArray[0][1] + " Z";
	          } else {
	              dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' V' + zero + ' H' + pathArray[0][0] + " Z";
	          }

	          fillPath.setAttributeNS(null, 'class', group.className + ' vis-fill');
	          if (group.options.shaded.style !== undefined) {
	              fillPath.setAttributeNS(null, 'style', group.options.shaded.style);
	          }
	          fillPath.setAttributeNS(null, 'd', dFill);
	      }
	  };

	  /**
	   * draw a line graph
	   *
	   * @param dataset
	   * @param group
	   */
	  Line.draw = function (pathArray, group, framework) {
	      if (pathArray != null && pathArray != undefined) {
	          var path = DOMutil.getSVGElement('path', framework.svgElements, framework.svg);
	          path.setAttributeNS(null, "class", group.className);
	          if (group.style !== undefined) {
	              path.setAttributeNS(null, "style", group.style);
	          }

	          var type = "L";
	          if (group.options.interpolation.enabled == true) {
	              type = "C";
	          }
	          // copy properties to path for drawing.
	          path.setAttributeNS(null, 'd', 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false));
	      }
	  };

	  Line.serializePath = function (pathArray, type, inverse) {
	      if (pathArray.length < 2) {
	          //Too little data to create a path.
	          return "";
	      }
	      var d = type;
	      if (inverse) {
	          for (var i = pathArray.length - 2; i > 0; i--) {
	              d += pathArray[i][0] + "," + pathArray[i][1] + " ";
	          }
	      } else {
	          for (var i = 1; i < pathArray.length; i++) {
	              d += pathArray[i][0] + "," + pathArray[i][1] + " ";
	          }
	      }
	      return d;
	  };

	  /**
	   * This uses an uniform parametrization of the interpolation algorithm:
	   * 'On the Parameterization of Catmull-Rom Curves' by Cem Yuksel et al.
	   * @param data
	   * @returns {string}
	   * @private
	   */
	  Line._catmullRomUniform = function (data) {
	      // catmull rom
	      var p0, p1, p2, p3, bp1, bp2;
	      var d = [];
	      d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
	      var normalization = 1 / 6;
	      var length = data.length;
	      for (var i = 0; i < length - 1; i++) {

	          p0 = i == 0 ? data[0] : data[i - 1];
	          p1 = data[i];
	          p2 = data[i + 1];
	          p3 = i + 2 < length ? data[i + 2] : p2;

	          // Catmull-Rom to Cubic Bezier conversion matrix
	          //    0       1       0       0
	          //  -1/6      1      1/6      0
	          //    0      1/6      1     -1/6
	          //    0       0       1       0

	          //    bp0 = { x: p1.x,                               y: p1.y };
	          bp1 = {
	              screen_x: (-p0.screen_x + 6 * p1.screen_x + p2.screen_x) * normalization,
	              screen_y: (-p0.screen_y + 6 * p1.screen_y + p2.screen_y) * normalization
	          };
	          bp2 = {
	              screen_x: (p1.screen_x + 6 * p2.screen_x - p3.screen_x) * normalization,
	              screen_y: (p1.screen_y + 6 * p2.screen_y - p3.screen_y) * normalization
	          };
	          //    bp0 = { x: p2.x,                               y: p2.y };

	          d.push([bp1.screen_x, bp1.screen_y]);
	          d.push([bp2.screen_x, bp2.screen_y]);
	          d.push([p2.screen_x, p2.screen_y]);
	      }

	      return d;
	  };

	  /**
	   * This uses either the chordal or centripetal parameterization of the catmull-rom algorithm.
	   * By default, the centripetal parameterization is used because this gives the nicest results.
	   * These parameterizations are relatively heavy because the distance between 4 points have to be calculated.
	   *
	   * One optimization can be used to reuse distances since this is a sliding window approach.
	   * @param data
	   * @param group
	   * @returns {string}
	   * @private
	   */
	  Line._catmullRom = function (data, group) {
	      var alpha = group.options.interpolation.alpha;
	      if (alpha == 0 || alpha === undefined) {
	          return this._catmullRomUniform(data);
	      } else {
	          var p0, p1, p2, p3, bp1, bp2, d1, d2, d3, A, B, N, M;
	          var d3powA, d2powA, d3pow2A, d2pow2A, d1pow2A, d1powA;
	          var d = [];
	          d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
	          var length = data.length;
	          for (var i = 0; i < length - 1; i++) {

	              p0 = i == 0 ? data[0] : data[i - 1];
	              p1 = data[i];
	              p2 = data[i + 1];
	              p3 = i + 2 < length ? data[i + 2] : p2;

	              d1 = Math.sqrt(Math.pow(p0.screen_x - p1.screen_x, 2) + Math.pow(p0.screen_y - p1.screen_y, 2));
	              d2 = Math.sqrt(Math.pow(p1.screen_x - p2.screen_x, 2) + Math.pow(p1.screen_y - p2.screen_y, 2));
	              d3 = Math.sqrt(Math.pow(p2.screen_x - p3.screen_x, 2) + Math.pow(p2.screen_y - p3.screen_y, 2));

	              // Catmull-Rom to Cubic Bezier conversion matrix

	              // A = 2d1^2a + 3d1^a * d2^a + d3^2a
	              // B = 2d3^2a + 3d3^a * d2^a + d2^2a

	              // [   0             1            0          0          ]
	              // [   -d2^2a /N     A/N          d1^2a /N   0          ]
	              // [   0             d3^2a /M     B/M        -d2^2a /M  ]
	              // [   0             0            1          0          ]

	              d3powA = Math.pow(d3, alpha);
	              d3pow2A = Math.pow(d3, 2 * alpha);
	              d2powA = Math.pow(d2, alpha);
	              d2pow2A = Math.pow(d2, 2 * alpha);
	              d1powA = Math.pow(d1, alpha);
	              d1pow2A = Math.pow(d1, 2 * alpha);

	              A = 2 * d1pow2A + 3 * d1powA * d2powA + d2pow2A;
	              B = 2 * d3pow2A + 3 * d3powA * d2powA + d2pow2A;
	              N = 3 * d1powA * (d1powA + d2powA);
	              if (N > 0) {
	                  N = 1 / N;
	              }
	              M = 3 * d3powA * (d3powA + d2powA);
	              if (M > 0) {
	                  M = 1 / M;
	              }

	              bp1 = {
	                  screen_x: (-d2pow2A * p0.screen_x + A * p1.screen_x + d1pow2A * p2.screen_x) * N,
	                  screen_y: (-d2pow2A * p0.screen_y + A * p1.screen_y + d1pow2A * p2.screen_y) * N
	              };

	              bp2 = {
	                  screen_x: (d3pow2A * p1.screen_x + B * p2.screen_x - d2pow2A * p3.screen_x) * M,
	                  screen_y: (d3pow2A * p1.screen_y + B * p2.screen_y - d2pow2A * p3.screen_y) * M
	              };

	              if (bp1.screen_x == 0 && bp1.screen_y == 0) {
	                  bp1 = p1;
	              }
	              if (bp2.screen_x == 0 && bp2.screen_y == 0) {
	                  bp2 = p2;
	              }
	              d.push([bp1.screen_x, bp1.screen_y]);
	              d.push([bp2.screen_x, bp2.screen_y]);
	              d.push([p2.screen_x, p2.screen_y]);
	          }

	          return d;
	      }
	  };

	  /**
	   * this generates the SVG path for a linear drawing between datapoints.
	   * @param data
	   * @returns {string}
	   * @private
	   */
	  Line._linear = function (data) {
	      // linear
	      var d = [];
	      for (var i = 0; i < data.length; i++) {
	          d.push([data[i].screen_x, data[i].screen_y]);
	      }
	      return d;
	  };

	  module.exports = Line;

	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var util = __webpack_require__(1);
	  var DOMutil = __webpack_require__(8);
	  var Component = __webpack_require__(33);

	  /**
	   * Legend for Graph2d
	   */
	  function Legend(body, options, side, linegraphOptions) {
	    this.body = body;
	    this.defaultOptions = {
	      enabled: false,
	      icons: true,
	      iconSize: 20,
	      iconSpacing: 6,
	      left: {
	        visible: true,
	        position: 'top-left' // top/bottom - left,center,right
	      },
	      right: {
	        visible: true,
	        position: 'top-right' // top/bottom - left,center,right
	      }
	    };

	    this.side = side;
	    this.options = util.extend({}, this.defaultOptions);
	    this.linegraphOptions = linegraphOptions;

	    this.svgElements = {};
	    this.dom = {};
	    this.groups = {};
	    this.amountOfGroups = 0;
	    this._create();
	    this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };

	    this.setOptions(options);
	  }

	  Legend.prototype = new Component();

	  Legend.prototype.clear = function () {
	    this.groups = {};
	    this.amountOfGroups = 0;
	  };

	  Legend.prototype.addGroup = function (label, graphOptions) {

	    // Include a group only if the group option 'excludeFromLegend: false' is not set.
	    if (graphOptions.options.excludeFromLegend != true) {
	      if (!this.groups.hasOwnProperty(label)) {
	        this.groups[label] = graphOptions;
	      }
	      this.amountOfGroups += 1;
	    }
	  };

	  Legend.prototype.updateGroup = function (label, graphOptions) {
	    this.groups[label] = graphOptions;
	  };

	  Legend.prototype.removeGroup = function (label) {
	    if (this.groups.hasOwnProperty(label)) {
	      delete this.groups[label];
	      this.amountOfGroups -= 1;
	    }
	  };

	  Legend.prototype._create = function () {
	    this.dom.frame = document.createElement('div');
	    this.dom.frame.className = 'vis-legend';
	    this.dom.frame.style.position = "absolute";
	    this.dom.frame.style.top = "10px";
	    this.dom.frame.style.display = "block";

	    this.dom.textArea = document.createElement('div');
	    this.dom.textArea.className = 'vis-legend-text';
	    this.dom.textArea.style.position = "relative";
	    this.dom.textArea.style.top = "0px";

	    this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
	    this.svg.style.position = 'absolute';
	    this.svg.style.top = 0 + 'px';
	    this.svg.style.width = this.options.iconSize + 5 + 'px';
	    this.svg.style.height = '100%';

	    this.dom.frame.appendChild(this.svg);
	    this.dom.frame.appendChild(this.dom.textArea);
	  };

	  /**
	   * Hide the component from the DOM
	   */
	  Legend.prototype.hide = function () {
	    // remove the frame containing the items
	    if (this.dom.frame.parentNode) {
	      this.dom.frame.parentNode.removeChild(this.dom.frame);
	    }
	  };

	  /**
	   * Show the component in the DOM (when not already visible).
	   * @return {Boolean} changed
	   */
	  Legend.prototype.show = function () {
	    // show frame containing the items
	    if (!this.dom.frame.parentNode) {
	      this.body.dom.center.appendChild(this.dom.frame);
	    }
	  };

	  Legend.prototype.setOptions = function (options) {
	    var fields = ['enabled', 'orientation', 'icons', 'left', 'right'];
	    util.selectiveDeepExtend(fields, this.options, options);
	  };

	  Legend.prototype.redraw = function () {
	    var activeGroups = 0;
	    var groupArray = Object.keys(this.groups);
	    groupArray.sort(function (a, b) {
	      return a < b ? -1 : 1;
	    });

	    for (var i = 0; i < groupArray.length; i++) {
	      var groupId = groupArray[i];
	      if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
	        activeGroups++;
	      }
	    }

	    if (this.options[this.side].visible == false || this.amountOfGroups == 0 || this.options.enabled == false || activeGroups == 0) {
	      this.hide();
	    } else {
	      this.show();
	      if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'bottom-left') {
	        this.dom.frame.style.left = '4px';
	        this.dom.frame.style.textAlign = "left";
	        this.dom.textArea.style.textAlign = "left";
	        this.dom.textArea.style.left = this.options.iconSize + 15 + 'px';
	        this.dom.textArea.style.right = '';
	        this.svg.style.left = 0 + 'px';
	        this.svg.style.right = '';
	      } else {
	        this.dom.frame.style.right = '4px';
	        this.dom.frame.style.textAlign = "right";
	        this.dom.textArea.style.textAlign = "right";
	        this.dom.textArea.style.right = this.options.iconSize + 15 + 'px';
	        this.dom.textArea.style.left = '';
	        this.svg.style.right = 0 + 'px';
	        this.svg.style.left = '';
	      }

	      if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'top-right') {
	        this.dom.frame.style.top = 4 - Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
	        this.dom.frame.style.bottom = '';
	      } else {
	        var scrollableHeight = this.body.domProps.center.height - this.body.domProps.centerContainer.height;
	        this.dom.frame.style.bottom = 4 + scrollableHeight + Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
	        this.dom.frame.style.top = '';
	      }

	      if (this.options.icons == false) {
	        this.dom.frame.style.width = this.dom.textArea.offsetWidth + 10 + 'px';
	        this.dom.textArea.style.right = '';
	        this.dom.textArea.style.left = '';
	        this.svg.style.width = '0px';
	      } else {
	        this.dom.frame.style.width = this.options.iconSize + 15 + this.dom.textArea.offsetWidth + 10 + 'px';
	        this.drawLegendIcons();
	      }

	      var content = '';
	      for (var i = 0; i < groupArray.length; i++) {
	        var groupId = groupArray[i];
	        if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
	          content += this.groups[groupId].content + '<br />';
	        }
	      }
	      this.dom.textArea.innerHTML = content;
	      this.dom.textArea.style.lineHeight = 0.75 * this.options.iconSize + this.options.iconSpacing + 'px';
	    }
	  };

	  Legend.prototype.drawLegendIcons = function () {
	    if (this.dom.frame.parentNode) {
	      var groupArray = Object.keys(this.groups);
	      groupArray.sort(function (a, b) {
	        return a < b ? -1 : 1;
	      });

	      // this resets the elements so the order is maintained
	      DOMutil.resetElements(this.svgElements);

	      var padding = window.getComputedStyle(this.dom.frame).paddingTop;
	      var iconOffset = Number(padding.replace('px', ''));
	      var x = iconOffset;
	      var iconWidth = this.options.iconSize;
	      var iconHeight = 0.75 * this.options.iconSize;
	      var y = iconOffset + 0.5 * iconHeight + 3;

	      this.svg.style.width = iconWidth + 5 + iconOffset + 'px';

	      for (var i = 0; i < groupArray.length; i++) {
	        var groupId = groupArray[i];
	        if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
	          this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
	          y += iconHeight + this.options.iconSpacing;
	        }
	      }
	    }
	  };

	  module.exports = Legend;

	/***/ },
	/* 61 */
	/***/ function(module, exports) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  /**
	   * This object contains all possible options. It will check if the types are correct, if required if the option is one
	   * of the allowed values.
	   *
	   * __any__ means that the name of the property does not matter.
	   * __type__ is a required field for all objects and contains the allowed types of all objects
	   */
	  var string = 'string';
	  var boolean = 'boolean';
	  var number = 'number';
	  var array = 'array';
	  var date = 'date';
	  var object = 'object'; // should only be in a __type__ property
	  var dom = 'dom';
	  var moment = 'moment';
	  var any = 'any';

	  var allOptions = {
	    configure: {
	      enabled: { boolean: boolean },
	      filter: { boolean: boolean, 'function': 'function' },
	      container: { dom: dom },
	      __type__: { object: object, boolean: boolean, 'function': 'function' }
	    },

	    //globals :
	    yAxisOrientation: { string: ['left', 'right'] },
	    defaultGroup: { string: string },
	    sort: { boolean: boolean },
	    sampling: { boolean: boolean },
	    stack: { boolean: boolean },
	    graphHeight: { string: string, number: number },
	    shaded: {
	      enabled: { boolean: boolean },
	      orientation: { string: ['bottom', 'top', 'zero', 'group'] }, // top, bottom, zero, group
	      groupId: { object: object },
	      __type__: { boolean: boolean, object: object }
	    },
	    style: { string: ['line', 'bar', 'points'] }, // line, bar
	    barChart: {
	      width: { number: number },
	      minWidth: { number: number },
	      sideBySide: { boolean: boolean },
	      align: { string: ['left', 'center', 'right'] },
	      __type__: { object: object }
	    },
	    interpolation: {
	      enabled: { boolean: boolean },
	      parametrization: { string: ['centripetal', 'chordal', 'uniform'] }, // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	      alpha: { number: number },
	      __type__: { object: object, boolean: boolean }
	    },
	    drawPoints: {
	      enabled: { boolean: boolean },
	      onRender: { 'function': 'function' },
	      size: { number: number },
	      style: { string: ['square', 'circle'] }, // square, circle
	      __type__: { object: object, boolean: boolean, 'function': 'function' }
	    },
	    dataAxis: {
	      showMinorLabels: { boolean: boolean },
	      showMajorLabels: { boolean: boolean },
	      icons: { boolean: boolean },
	      width: { string: string, number: number },
	      visible: { boolean: boolean },
	      alignZeros: { boolean: boolean },
	      left: {
	        range: { min: { number: number }, max: { number: number }, __type__: { object: object } },
	        format: { 'function': 'function' },
	        title: { text: { string: string, number: number }, style: { string: string }, __type__: { object: object } },
	        __type__: { object: object }
	      },
	      right: {
	        range: { min: { number: number }, max: { number: number }, __type__: { object: object } },
	        format: { 'function': 'function' },
	        title: { text: { string: string, number: number }, style: { string: string }, __type__: { object: object } },
	        __type__: { object: object }
	      },
	      __type__: { object: object }
	    },
	    legend: {
	      enabled: { boolean: boolean },
	      icons: { boolean: boolean },
	      left: {
	        visible: { boolean: boolean },
	        position: { string: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] },
	        __type__: { object: object }
	      },
	      right: {
	        visible: { boolean: boolean },
	        position: { string: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] },
	        __type__: { object: object }
	      },
	      __type__: { object: object, boolean: boolean }
	    },
	    groups: {
	      visibility: { any: any },
	      __type__: { object: object }
	    },

	    autoResize: { boolean: boolean },
	    clickToUse: { boolean: boolean },
	    end: { number: number, date: date, string: string, moment: moment },
	    format: {
	      minorLabels: {
	        millisecond: { string: string, 'undefined': 'undefined' },
	        second: { string: string, 'undefined': 'undefined' },
	        minute: { string: string, 'undefined': 'undefined' },
	        hour: { string: string, 'undefined': 'undefined' },
	        weekday: { string: string, 'undefined': 'undefined' },
	        day: { string: string, 'undefined': 'undefined' },
	        month: { string: string, 'undefined': 'undefined' },
	        year: { string: string, 'undefined': 'undefined' },
	        __type__: { object: object }
	      },
	      majorLabels: {
	        millisecond: { string: string, 'undefined': 'undefined' },
	        second: { string: string, 'undefined': 'undefined' },
	        minute: { string: string, 'undefined': 'undefined' },
	        hour: { string: string, 'undefined': 'undefined' },
	        weekday: { string: string, 'undefined': 'undefined' },
	        day: { string: string, 'undefined': 'undefined' },
	        month: { string: string, 'undefined': 'undefined' },
	        year: { string: string, 'undefined': 'undefined' },
	        __type__: { object: object }
	      },
	      __type__: { object: object }
	    },
	    moment: { 'function': 'function' },
	    height: { string: string, number: number },
	    hiddenDates: {
	      start: { date: date, number: number, string: string, moment: moment },
	      end: { date: date, number: number, string: string, moment: moment },
	      repeat: { string: string },
	      __type__: { object: object, array: array }
	    },
	    locale: { string: string },
	    locales: {
	      __any__: { any: any },
	      __type__: { object: object }
	    },
	    max: { date: date, number: number, string: string, moment: moment },
	    maxHeight: { number: number, string: string },
	    maxMinorChars: { number: number },
	    min: { date: date, number: number, string: string, moment: moment },
	    minHeight: { number: number, string: string },
	    moveable: { boolean: boolean },
	    multiselect: { boolean: boolean },
	    orientation: { string: string },
	    showCurrentTime: { boolean: boolean },
	    showMajorLabels: { boolean: boolean },
	    showMinorLabels: { boolean: boolean },
	    start: { date: date, number: number, string: string, moment: moment },
	    timeAxis: {
	      scale: { string: string, 'undefined': 'undefined' },
	      step: { number: number, 'undefined': 'undefined' },
	      __type__: { object: object }
	    },
	    width: { string: string, number: number },
	    zoomable: { boolean: boolean },
	    zoomKey: { string: ['ctrlKey', 'altKey', 'metaKey', ''] },
	    zoomMax: { number: number },
	    zoomMin: { number: number },
	    zIndex: { number: number },
	    __type__: { object: object }
	  };

	  var configureOptions = {
	    global: {
	      //yAxisOrientation: ['left','right'], // TDOO: enable as soon as Grahp2d doesn't crash when changing this on the fly
	      sort: true,
	      sampling: true,
	      stack: false,
	      shaded: {
	        enabled: false,
	        orientation: ['zero', 'top', 'bottom', 'group'] // zero, top, bottom
	      },
	      style: ['line', 'bar', 'points'], // line, bar
	      barChart: {
	        width: [50, 5, 100, 5],
	        minWidth: [50, 5, 100, 5],
	        sideBySide: false,
	        align: ['left', 'center', 'right'] // left, center, right
	      },
	      interpolation: {
	        enabled: true,
	        parametrization: ['centripetal', 'chordal', 'uniform'] // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	      },
	      drawPoints: {
	        enabled: true,
	        size: [6, 2, 30, 1],
	        style: ['square', 'circle'] // square, circle
	      },
	      dataAxis: {
	        showMinorLabels: true,
	        showMajorLabels: true,
	        icons: false,
	        width: [40, 0, 200, 1],
	        visible: true,
	        alignZeros: true,
	        left: {
	          //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
	          //format: function (value) {return value;},
	          title: { text: '', style: '' }
	        },
	        right: {
	          //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
	          //format: function (value) {return value;},
	          title: { text: '', style: '' }
	        }
	      },
	      legend: {
	        enabled: false,
	        icons: true,
	        left: {
	          visible: true,
	          position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right
	        },
	        right: {
	          visible: true,
	          position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right
	        }
	      },

	      autoResize: true,
	      clickToUse: false,
	      end: '',
	      format: {
	        minorLabels: {
	          millisecond: 'SSS',
	          second: 's',
	          minute: 'HH:mm',
	          hour: 'HH:mm',
	          weekday: 'ddd D',
	          day: 'D',
	          month: 'MMM',
	          year: 'YYYY'
	        },
	        majorLabels: {
	          millisecond: 'HH:mm:ss',
	          second: 'D MMMM HH:mm',
	          minute: 'ddd D MMMM',
	          hour: 'ddd D MMMM',
	          weekday: 'MMMM YYYY',
	          day: 'MMMM YYYY',
	          month: 'YYYY',
	          year: ''
	        }
	      },

	      height: '',
	      locale: '',
	      max: '',
	      maxHeight: '',
	      maxMinorChars: [7, 0, 20, 1],
	      min: '',
	      minHeight: '',
	      moveable: true,
	      orientation: ['both', 'bottom', 'top'],
	      showCurrentTime: false,
	      showMajorLabels: true,
	      showMinorLabels: true,
	      start: '',
	      width: '100%',
	      zoomable: true,
	      zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
	      zoomMax: [315360000000000, 10, 315360000000000, 1],
	      zoomMin: [10, 10, 315360000000000, 1],
	      zIndex: 0
	    }
	  };

	  exports.allOptions = allOptions;
	  exports.configureOptions = configureOptions;

	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  // utils
	  exports.util = __webpack_require__(1);
	  exports.DOMutil = __webpack_require__(8);

	  // data
	  exports.DataSet = __webpack_require__(9);
	  exports.DataView = __webpack_require__(11);
	  exports.Queue = __webpack_require__(10);

	  // Network
	  exports.Network = __webpack_require__(63);
	  exports.network = {
	    Images: __webpack_require__(64),
	    dotparser: __webpack_require__(120),
	    gephiParser: __webpack_require__(121),
	    allOptions: __webpack_require__(116)
	  };
	  exports.network.convertDot = function (input) {
	    return exports.network.dotparser.DOTToGraph(input);
	  };
	  exports.network.convertGephi = function (input, options) {
	    return exports.network.gephiParser.parseGephi(input, options);
	  };

	  // bundled external libraries
	  exports.moment = __webpack_require__(2);
	  exports.Hammer = __webpack_require__(22);
	  exports.keycharm = __webpack_require__(25);

	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  var _Images = __webpack_require__(64);

	  var _Images2 = _interopRequireDefault(_Images);

	  var _Groups = __webpack_require__(65);

	  var _Groups2 = _interopRequireDefault(_Groups);

	  var _NodesHandler = __webpack_require__(66);

	  var _NodesHandler2 = _interopRequireDefault(_NodesHandler);

	  var _EdgesHandler = __webpack_require__(86);

	  var _EdgesHandler2 = _interopRequireDefault(_EdgesHandler);

	  var _PhysicsEngine = __webpack_require__(95);

	  var _PhysicsEngine2 = _interopRequireDefault(_PhysicsEngine);

	  var _Clustering = __webpack_require__(104);

	  var _Clustering2 = _interopRequireDefault(_Clustering);

	  var _CanvasRenderer = __webpack_require__(107);

	  var _CanvasRenderer2 = _interopRequireDefault(_CanvasRenderer);

	  var _Canvas = __webpack_require__(108);

	  var _Canvas2 = _interopRequireDefault(_Canvas);

	  var _View = __webpack_require__(109);

	  var _View2 = _interopRequireDefault(_View);

	  var _InteractionHandler = __webpack_require__(110);

	  var _InteractionHandler2 = _interopRequireDefault(_InteractionHandler);

	  var _SelectionHandler = __webpack_require__(113);

	  var _SelectionHandler2 = _interopRequireDefault(_SelectionHandler);

	  var _LayoutEngine = __webpack_require__(114);

	  var _LayoutEngine2 = _interopRequireDefault(_LayoutEngine);

	  var _ManipulationSystem = __webpack_require__(115);

	  var _ManipulationSystem2 = _interopRequireDefault(_ManipulationSystem);

	  var _Configurator = __webpack_require__(28);

	  var _Configurator2 = _interopRequireDefault(_Configurator);

	  var _Validator = __webpack_require__(31);

	  var _Validator2 = _interopRequireDefault(_Validator);

	  var _options = __webpack_require__(116);

	  var _KamadaKawai = __webpack_require__(117);

	  var _KamadaKawai2 = _interopRequireDefault(_KamadaKawai);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  // Load custom shapes into CanvasRenderingContext2D
	  __webpack_require__(119);

	  var Emitter = __webpack_require__(13);
	  var util = __webpack_require__(1);
	  var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);
	  var dotparser = __webpack_require__(120);
	  var gephiParser = __webpack_require__(121);
	  var Activator = __webpack_require__(47);
	  var locales = __webpack_require__(122);

	  /**
	   * @constructor Network
	   * Create a network visualization, displaying nodes and edges.
	   *
	   * @param {Element} container   The DOM element in which the Network will
	   *                                  be created. Normally a div element.
	   * @param {Object} data         An object containing parameters
	   *                              {Array} nodes
	   *                              {Array} edges
	   * @param {Object} options      Options
	   */
	  function Network(container, data, options) {
	    var _this = this;

	    if (!(this instanceof Network)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // set constant values
	    this.options = {};
	    this.defaultOptions = {
	      locale: 'en',
	      locales: locales,
	      clickToUse: false
	    };
	    util.extend(this.options, this.defaultOptions);

	    // containers for nodes and edges
	    this.body = {
	      container: container,
	      nodes: {},
	      nodeIndices: [],
	      edges: {},
	      edgeIndices: [],
	      emitter: {
	        on: this.on.bind(this),
	        off: this.off.bind(this),
	        emit: this.emit.bind(this),
	        once: this.once.bind(this)
	      },
	      eventListeners: {
	        onTap: function onTap() {},
	        onTouch: function onTouch() {},
	        onDoubleTap: function onDoubleTap() {},
	        onHold: function onHold() {},
	        onDragStart: function onDragStart() {},
	        onDrag: function onDrag() {},
	        onDragEnd: function onDragEnd() {},
	        onMouseWheel: function onMouseWheel() {},
	        onPinch: function onPinch() {},
	        onMouseMove: function onMouseMove() {},
	        onRelease: function onRelease() {},
	        onContext: function onContext() {}
	      },
	      data: {
	        nodes: null, // A DataSet or DataView
	        edges: null // A DataSet or DataView
	      },
	      functions: {
	        createNode: function createNode() {},
	        createEdge: function createEdge() {},
	        getPointer: function getPointer() {}
	      },
	      modules: {},
	      view: {
	        scale: 1,
	        translation: { x: 0, y: 0 }
	      }
	    };

	    // bind the event listeners
	    this.bindEventListeners();

	    // setting up all modules
	    this.images = new _Images2.default(function () {
	      return _this.body.emitter.emit("_requestRedraw");
	    }); // object with images
	    this.groups = new _Groups2.default(); // object with groups
	    this.canvas = new _Canvas2.default(this.body); // DOM handler
	    this.selectionHandler = new _SelectionHandler2.default(this.body, this.canvas); // Selection handler
	    this.interactionHandler = new _InteractionHandler2.default(this.body, this.canvas, this.selectionHandler); // Interaction handler handles all the hammer bindings (that are bound by canvas), key
	    this.view = new _View2.default(this.body, this.canvas); // camera handler, does animations and zooms
	    this.renderer = new _CanvasRenderer2.default(this.body, this.canvas); // renderer, starts renderloop, has events that modules can hook into
	    this.physics = new _PhysicsEngine2.default(this.body); // physics engine, does all the simulations
	    this.layoutEngine = new _LayoutEngine2.default(this.body); // layout engine for inital layout and hierarchical layout
	    this.clustering = new _Clustering2.default(this.body); // clustering api
	    this.manipulation = new _ManipulationSystem2.default(this.body, this.canvas, this.selectionHandler); // data manipulation system

	    this.nodesHandler = new _NodesHandler2.default(this.body, this.images, this.groups, this.layoutEngine); // Handle adding, deleting and updating of nodes as well as global options
	    this.edgesHandler = new _EdgesHandler2.default(this.body, this.images, this.groups); // Handle adding, deleting and updating of edges as well as global options

	    this.body.modules["kamadaKawai"] = new _KamadaKawai2.default(this.body, 150, 0.05); // Layouting algorithm.
	    this.body.modules["clustering"] = this.clustering;

	    // create the DOM elements
	    this.canvas._create();

	    // apply options
	    this.setOptions(options);

	    // load data (the disable start variable will be the same as the enabled clustering)
	    this.setData(data);
	  }

	  // Extend Network with an Emitter mixin
	  Emitter(Network.prototype);

	  /**
	   * Set options
	   * @param {Object} options
	   */
	  Network.prototype.setOptions = function (options) {
	    var _this2 = this;

	    if (options !== undefined) {
	      var errorFound = _Validator2.default.validate(options, _options.allOptions);
	      if (errorFound === true) {
	        console.log('%cErrors have been found in the supplied options object.', _Validator.printStyle);
	      }

	      // copy the global fields over
	      var fields = ['locale', 'locales', 'clickToUse'];
	      util.selectiveDeepExtend(fields, this.options, options);

	      // the hierarchical system can adapt the edges and the physics to it's own options because not all combinations work with the hierarichical system.
	      options = this.layoutEngine.setOptions(options.layout, options);

	      this.canvas.setOptions(options); // options for canvas are in globals

	      // pass the options to the modules
	      this.groups.setOptions(options.groups);
	      this.nodesHandler.setOptions(options.nodes);
	      this.edgesHandler.setOptions(options.edges);
	      this.physics.setOptions(options.physics);
	      this.manipulation.setOptions(options.manipulation, options, this.options); // manipulation uses the locales in the globals

	      this.interactionHandler.setOptions(options.interaction);
	      this.renderer.setOptions(options.interaction); // options for rendering are in interaction
	      this.selectionHandler.setOptions(options.interaction); // options for selection are in interaction

	      // reload the settings of the nodes to apply changes in groups that are not referenced by pointer.
	      if (options.groups !== undefined) {
	        this.body.emitter.emit("refreshNodes");
	      }
	      // these two do not have options at the moment, here for completeness
	      //this.view.setOptions(options.view);
	      //this.clustering.setOptions(options.clustering);

	      if ('configure' in options) {
	        if (!this.configurator) {
	          this.configurator = new _Configurator2.default(this, this.body.container, _options.configureOptions, this.canvas.pixelRatio);
	        }

	        this.configurator.setOptions(options.configure);
	      }

	      // if the configuration system is enabled, copy all options and put them into the config system
	      if (this.configurator && this.configurator.options.enabled === true) {
	        var networkOptions = { nodes: {}, edges: {}, layout: {}, interaction: {}, manipulation: {}, physics: {}, global: {} };
	        util.deepExtend(networkOptions.nodes, this.nodesHandler.options);
	        util.deepExtend(networkOptions.edges, this.edgesHandler.options);
	        util.deepExtend(networkOptions.layout, this.layoutEngine.options);
	        // load the selectionHandler and render default options in to the interaction group
	        util.deepExtend(networkOptions.interaction, this.selectionHandler.options);
	        util.deepExtend(networkOptions.interaction, this.renderer.options);

	        util.deepExtend(networkOptions.interaction, this.interactionHandler.options);
	        util.deepExtend(networkOptions.manipulation, this.manipulation.options);
	        util.deepExtend(networkOptions.physics, this.physics.options);

	        // load globals into the global object
	        util.deepExtend(networkOptions.global, this.canvas.options);
	        util.deepExtend(networkOptions.global, this.options);

	        this.configurator.setModuleOptions(networkOptions);
	      }

	      // handle network global options
	      if (options.clickToUse !== undefined) {
	        if (options.clickToUse === true) {
	          if (this.activator === undefined) {
	            this.activator = new Activator(this.canvas.frame);
	            this.activator.on('change', function () {
	              _this2.body.emitter.emit("activate");
	            });
	          }
	        } else {
	          if (this.activator !== undefined) {
	            this.activator.destroy();
	            delete this.activator;
	          }
	          this.body.emitter.emit("activate");
	        }
	      } else {
	        this.body.emitter.emit("activate");
	      }

	      this.canvas.setSize();
	      // start the physics simulation. Can be safely called multiple times.
	      this.body.emitter.emit("startSimulation");
	    }
	  };

	  /**
	   * Update the this.body.nodeIndices with the most recent node index list
	   * @private
	   */
	  Network.prototype._updateVisibleIndices = function () {
	    var nodes = this.body.nodes;
	    var edges = this.body.edges;
	    this.body.nodeIndices = [];
	    this.body.edgeIndices = [];

	    for (var nodeId in nodes) {
	      if (nodes.hasOwnProperty(nodeId)) {
	        if (nodes[nodeId].options.hidden === false) {
	          this.body.nodeIndices.push(nodes[nodeId].id);
	        }
	      }
	    }

	    for (var edgeId in edges) {
	      if (edges.hasOwnProperty(edgeId)) {
	        if (edges[edgeId].options.hidden === false) {
	          this.body.edgeIndices.push(edges[edgeId].id);
	        }
	      }
	    }
	  };

	  /**
	   * Bind all events
	   */
	  Network.prototype.bindEventListeners = function () {
	    var _this3 = this;

	    // this event will trigger a rebuilding of the cache everything. Used when nodes or edges have been added or removed.
	    this.body.emitter.on("_dataChanged", function () {
	      // update shortcut lists
	      _this3._updateVisibleIndices();
	      _this3.body.emitter.emit("_requestRedraw");
	      // call the dataUpdated event because the only difference between the two is the updating of the indices
	      _this3.body.emitter.emit("_dataUpdated");
	    });

	    // this is called when options of EXISTING nodes or edges have changed.
	    this.body.emitter.on("_dataUpdated", function () {
	      // update values
	      _this3._updateValueRange(_this3.body.nodes);
	      _this3._updateValueRange(_this3.body.edges);
	      // start simulation (can be called safely, even if already running)
	      _this3.body.emitter.emit("startSimulation");
	      _this3.body.emitter.emit("_requestRedraw");
	    });
	  };

	  /**
	   * Set nodes and edges, and optionally options as well.
	   *
	   * @param {Object} data              Object containing parameters:
	   *                                   {Array | DataSet | DataView} [nodes] Array with nodes
	   *                                   {Array | DataSet | DataView} [edges] Array with edges
	   *                                   {String} [dot] String containing data in DOT format
	   *                                   {String} [gephi] String containing data in gephi JSON format
	   *                                   {Options} [options] Object with options
	   */
	  Network.prototype.setData = function (data) {
	    // reset the physics engine.
	    this.body.emitter.emit("resetPhysics");
	    this.body.emitter.emit("_resetData");

	    // unselect all to ensure no selections from old data are carried over.
	    this.selectionHandler.unselectAll();

	    if (data && data.dot && (data.nodes || data.edges)) {
	      throw new SyntaxError('Data must contain either parameter "dot" or ' + ' parameter pair "nodes" and "edges", but not both.');
	    }

	    // set options
	    this.setOptions(data && data.options);
	    // set all data
	    if (data && data.dot) {
	      console.log('The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);');
	      // parse DOT file
	      var dotData = dotparser.DOTToGraph(data.dot);
	      this.setData(dotData);
	      return;
	    } else if (data && data.gephi) {
	      // parse DOT file
	      console.log('The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);');
	      var gephiData = gephiParser.parseGephi(data.gephi);
	      this.setData(gephiData);
	      return;
	    } else {
	      this.nodesHandler.setData(data && data.nodes, true);
	      this.edgesHandler.setData(data && data.edges, true);
	    }

	    // emit change in data
	    this.body.emitter.emit("_dataChanged");

	    // emit data loaded
	    this.body.emitter.emit("_dataLoaded");

	    // find a stable position or start animating to a stable position
	    this.body.emitter.emit("initPhysics");
	  };

	  /**
	   * Cleans up all bindings of the network, removing it fully from the memory IF the variable is set to null after calling this function.
	   * var network = new vis.Network(..);
	   * network.destroy();
	   * network = null;
	   */
	  Network.prototype.destroy = function () {
	    this.body.emitter.emit("destroy");
	    // clear events
	    this.body.emitter.off();
	    this.off();

	    // delete modules
	    delete this.groups;
	    delete this.canvas;
	    delete this.selectionHandler;
	    delete this.interactionHandler;
	    delete this.view;
	    delete this.renderer;
	    delete this.physics;
	    delete this.layoutEngine;
	    delete this.clustering;
	    delete this.manipulation;
	    delete this.nodesHandler;
	    delete this.edgesHandler;
	    delete this.configurator;
	    delete this.images;

	    for (var nodeId in this.body.nodes) {
	      delete this.body.nodes[nodeId];
	    }
	    for (var edgeId in this.body.edges) {
	      delete this.body.edges[edgeId];
	    }

	    // remove the container and everything inside it recursively
	    util.recursiveDOMDelete(this.body.container);
	  };

	  /**
	   * Update the values of all object in the given array according to the current
	   * value range of the objects in the array.
	   * @param {Object} obj    An object containing a set of Edges or Nodes
	   *                        The objects must have a method getValue() and
	   *                        setValueRange(min, max).
	   * @private
	   */
	  Network.prototype._updateValueRange = function (obj) {
	    var id;

	    // determine the range of the objects
	    var valueMin = undefined;
	    var valueMax = undefined;
	    var valueTotal = 0;
	    for (id in obj) {
	      if (obj.hasOwnProperty(id)) {
	        var value = obj[id].getValue();
	        if (value !== undefined) {
	          valueMin = valueMin === undefined ? value : Math.min(value, valueMin);
	          valueMax = valueMax === undefined ? value : Math.max(value, valueMax);
	          valueTotal += value;
	        }
	      }
	    }

	    // adjust the range of all objects
	    if (valueMin !== undefined && valueMax !== undefined) {
	      for (id in obj) {
	        if (obj.hasOwnProperty(id)) {
	          obj[id].setValueRange(valueMin, valueMax, valueTotal);
	        }
	      }
	    }
	  };

	  /**
	   * Returns true when the Network is active.
	   * @returns {boolean}
	   */
	  Network.prototype.isActive = function () {
	    return !this.activator || this.activator.active;
	  };

	  Network.prototype.setSize = function () {
	    return this.canvas.setSize.apply(this.canvas, arguments);
	  };
	  Network.prototype.canvasToDOM = function () {
	    return this.canvas.canvasToDOM.apply(this.canvas, arguments);
	  };
	  Network.prototype.DOMtoCanvas = function () {
	    return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
	  };
	  Network.prototype.findNode = function () {
	    return this.clustering.findNode.apply(this.clustering, arguments);
	  };
	  Network.prototype.isCluster = function () {
	    return this.clustering.isCluster.apply(this.clustering, arguments);
	  };
	  Network.prototype.openCluster = function () {
	    return this.clustering.openCluster.apply(this.clustering, arguments);
	  };
	  Network.prototype.cluster = function () {
	    return this.clustering.cluster.apply(this.clustering, arguments);
	  };
	  Network.prototype.getNodesInCluster = function () {
	    return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
	  };
	  Network.prototype.clusterByConnection = function () {
	    return this.clustering.clusterByConnection.apply(this.clustering, arguments);
	  };
	  Network.prototype.clusterByHubsize = function () {
	    return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
	  };
	  Network.prototype.clusterOutliers = function () {
	    return this.clustering.clusterOutliers.apply(this.clustering, arguments);
	  };
	  Network.prototype.getSeed = function () {
	    return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
	  };
	  Network.prototype.enableEditMode = function () {
	    return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
	  };
	  Network.prototype.disableEditMode = function () {
	    return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
	  };
	  Network.prototype.addNodeMode = function () {
	    return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
	  };
	  Network.prototype.editNode = function () {
	    return this.manipulation.editNode.apply(this.manipulation, arguments);
	  };
	  Network.prototype.editNodeMode = function () {
	    console.log("Deprecated: Please use editNode instead of editNodeMode.");return this.manipulation.editNode.apply(this.manipulation, arguments);
	  };
	  Network.prototype.addEdgeMode = function () {
	    return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
	  };
	  Network.prototype.editEdgeMode = function () {
	    return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
	  };
	  Network.prototype.deleteSelected = function () {
	    return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
	  };
	  Network.prototype.getPositions = function () {
	    return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
	  };
	  Network.prototype.storePositions = function () {
	    return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
	  };
	  Network.prototype.moveNode = function () {
	    return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
	  };
	  Network.prototype.getBoundingBox = function () {
	    return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
	  };
	  Network.prototype.getConnectedNodes = function (objectId) {
	    if (this.body.nodes[objectId] !== undefined) {
	      return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);
	    } else {
	      return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
	    }
	  };
	  Network.prototype.getConnectedEdges = function () {
	    return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
	  };
	  Network.prototype.startSimulation = function () {
	    return this.physics.startSimulation.apply(this.physics, arguments);
	  };
	  Network.prototype.stopSimulation = function () {
	    return this.physics.stopSimulation.apply(this.physics, arguments);
	  };
	  Network.prototype.stabilize = function () {
	    return this.physics.stabilize.apply(this.physics, arguments);
	  };
	  Network.prototype.getSelection = function () {
	    return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
	  };
	  Network.prototype.setSelection = function () {
	    return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
	  };
	  Network.prototype.getSelectedNodes = function () {
	    return this.selectionHandler.getSelectedNodes.apply(this.selectionHandler, arguments);
	  };
	  Network.prototype.getSelectedEdges = function () {
	    return this.selectionHandler.getSelectedEdges.apply(this.selectionHandler, arguments);
	  };
	  Network.prototype.getNodeAt = function () {
	    var node = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
	    if (node !== undefined && node.id !== undefined) {
	      return node.id;
	    }
	    return node;
	  };
	  Network.prototype.getEdgeAt = function () {
	    var edge = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
	    if (edge !== undefined && edge.id !== undefined) {
	      return edge.id;
	    }
	    return edge;
	  };
	  Network.prototype.selectNodes = function () {
	    return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
	  };
	  Network.prototype.selectEdges = function () {
	    return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
	  };
	  Network.prototype.unselectAll = function () {
	    this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);
	    this.redraw();
	  };
	  Network.prototype.redraw = function () {
	    return this.renderer.redraw.apply(this.renderer, arguments);
	  };
	  Network.prototype.getScale = function () {
	    return this.view.getScale.apply(this.view, arguments);
	  };
	  Network.prototype.getViewPosition = function () {
	    return this.view.getViewPosition.apply(this.view, arguments);
	  };
	  Network.prototype.fit = function () {
	    return this.view.fit.apply(this.view, arguments);
	  };
	  Network.prototype.moveTo = function () {
	    return this.view.moveTo.apply(this.view, arguments);
	  };
	  Network.prototype.focus = function () {
	    return this.view.focus.apply(this.view, arguments);
	  };
	  Network.prototype.releaseNode = function () {
	    return this.view.releaseNode.apply(this.view, arguments);
	  };
	  Network.prototype.getOptionsFromConfigurator = function () {
	    var options = {};
	    if (this.configurator) {
	      options = this.configurator.getOptions.apply(this.configurator);
	    }
	    return options;
	  };

	  module.exports = Network;

	/***/ },
	/* 64 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	      value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  /**
	   * @class Images
	   * This class loads images and keeps them stored.
	   */
	  var Images = function () {
	      function Images(callback) {
	          _classCallCheck(this, Images);

	          this.images = {};
	          this.imageBroken = {};
	          this.callback = callback;
	      }

	      /**
	       * @param {string} url                      The Url to cache the image as 
	        * @return {Image} imageToLoadBrokenUrlOn  The image object
	       */


	      _createClass(Images, [{
	          key: "_addImageToCache",
	          value: function _addImageToCache(url, imageToCache) {
	              // IE11 fix -- thanks dponch!
	              if (imageToCache.width === 0) {
	                  document.body.appendChild(imageToCache);
	                  imageToCache.width = imageToCache.offsetWidth;
	                  imageToCache.height = imageToCache.offsetHeight;
	                  document.body.removeChild(imageToCache);
	              }

	              this.images[url] = imageToCache;
	          }

	          /**
	           * @param {string} url                      The original Url that failed to load, if the broken image is successfully loaded it will be added to the cache using this Url as the key so that subsequent requests for this Url will return the broken image
	           * @param {string} brokenUrl                Url the broken image to try and load
	           * @return {Image} imageToLoadBrokenUrlOn   The image object
	           */

	      }, {
	          key: "_tryloadBrokenUrl",
	          value: function _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {
	              var _this = this;

	              //If any of the parameters aren't specified then exit the function because nothing constructive can be done
	              if (url === undefined || brokenUrl === undefined || imageToLoadBrokenUrlOn === undefined) return;

	              //Clear the old subscription to the error event and put a new in place that only handle errors in loading the brokenImageUrl
	              imageToLoadBrokenUrlOn.onerror = function () {
	                  console.error("Could not load brokenImage:", brokenUrl);
	                  //Add an empty image to the cache so that when subsequent load calls are made for the url we don't try load the image and broken image again
	                  _this._addImageToCache(url, new Image());
	              };

	              //Set the source of the image to the brokenUrl, this is actually what kicks off the loading of the broken image
	              imageToLoadBrokenUrlOn.src = brokenUrl;
	          }

	          /**
	           * @return {Image} imageToRedrawWith The images that will be passed to the callback when it is invoked
	           */

	      }, {
	          key: "_redrawWithImage",
	          value: function _redrawWithImage(imageToRedrawWith) {
	              if (this.callback) {
	                  this.callback(imageToRedrawWith);
	              }
	          }

	          /**
	           * @param {string} url          Url of the image
	           * @param {string} brokenUrl    Url of an image to use if the url image is not found
	           * @return {Image} img          The image object
	           */

	      }, {
	          key: "load",
	          value: function load(url, brokenUrl, id) {
	              var _this2 = this;

	              //Try and get the image from the cache, if successful then return the cached image   
	              var cachedImage = this.images[url];
	              if (cachedImage) return cachedImage;

	              //Create a new image
	              var img = new Image();

	              //Subscribe to the event that is raised if the image loads successfully 
	              img.onload = function () {
	                  //Add the image to the cache and then request a redraw
	                  _this2._addImageToCache(url, img);
	                  _this2._redrawWithImage(img);
	              };

	              //Subscribe to the event that is raised if the image fails to load
	              img.onerror = function () {
	                  console.error("Could not load image:", url);
	                  //Try and load the image specified by the brokenUrl using
	                  _this2._tryloadBrokenUrl(url, brokenUrl, img);
	              };

	              //Set the source of the image to the url, this is actuall what kicks off the loading of the image
	              img.src = url;

	              //Return the new image
	              return img;
	          }
	      }]);

	      return Images;
	  }();

	  exports.default = Images;

	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  /**
	   * @class Groups
	   * This class can store groups and options specific for groups.
	   */

	  var Groups = function () {
	    function Groups() {
	      _classCallCheck(this, Groups);

	      this.clear();
	      this.defaultIndex = 0;
	      this.groupsArray = [];
	      this.groupIndex = 0;

	      this.defaultGroups = [{ border: "#2B7CE9", background: "#97C2FC", highlight: { border: "#2B7CE9", background: "#D2E5FF" }, hover: { border: "#2B7CE9", background: "#D2E5FF" } }, // 0: blue
	      { border: "#FFA500", background: "#FFFF00", highlight: { border: "#FFA500", background: "#FFFFA3" }, hover: { border: "#FFA500", background: "#FFFFA3" } }, // 1: yellow
	      { border: "#FA0A10", background: "#FB7E81", highlight: { border: "#FA0A10", background: "#FFAFB1" }, hover: { border: "#FA0A10", background: "#FFAFB1" } }, // 2: red
	      { border: "#41A906", background: "#7BE141", highlight: { border: "#41A906", background: "#A1EC76" }, hover: { border: "#41A906", background: "#A1EC76" } }, // 3: green
	      { border: "#E129F0", background: "#EB7DF4", highlight: { border: "#E129F0", background: "#F0B3F5" }, hover: { border: "#E129F0", background: "#F0B3F5" } }, // 4: magenta
	      { border: "#7C29F0", background: "#AD85E4", highlight: { border: "#7C29F0", background: "#D3BDF0" }, hover: { border: "#7C29F0", background: "#D3BDF0" } }, // 5: purple
	      { border: "#C37F00", background: "#FFA807", highlight: { border: "#C37F00", background: "#FFCA66" }, hover: { border: "#C37F00", background: "#FFCA66" } }, // 6: orange
	      { border: "#4220FB", background: "#6E6EFD", highlight: { border: "#4220FB", background: "#9B9BFD" }, hover: { border: "#4220FB", background: "#9B9BFD" } }, // 7: darkblue
	      { border: "#FD5A77", background: "#FFC0CB", highlight: { border: "#FD5A77", background: "#FFD1D9" }, hover: { border: "#FD5A77", background: "#FFD1D9" } }, // 8: pink
	      { border: "#4AD63A", background: "#C2FABC", highlight: { border: "#4AD63A", background: "#E6FFE3" }, hover: { border: "#4AD63A", background: "#E6FFE3" } }, // 9: mint

	      { border: "#990000", background: "#EE0000", highlight: { border: "#BB0000", background: "#FF3333" }, hover: { border: "#BB0000", background: "#FF3333" } }, // 10:bright red

	      { border: "#FF6000", background: "#FF6000", highlight: { border: "#FF6000", background: "#FF6000" }, hover: { border: "#FF6000", background: "#FF6000" } }, // 12: real orange
	      { border: "#97C2FC", background: "#2B7CE9", highlight: { border: "#D2E5FF", background: "#2B7CE9" }, hover: { border: "#D2E5FF", background: "#2B7CE9" } }, // 13: blue
	      { border: "#399605", background: "#255C03", highlight: { border: "#399605", background: "#255C03" }, hover: { border: "#399605", background: "#255C03" } }, // 14: green
	      { border: "#B70054", background: "#FF007E", highlight: { border: "#B70054", background: "#FF007E" }, hover: { border: "#B70054", background: "#FF007E" } }, // 15: magenta
	      { border: "#AD85E4", background: "#7C29F0", highlight: { border: "#D3BDF0", background: "#7C29F0" }, hover: { border: "#D3BDF0", background: "#7C29F0" } }, // 16: purple
	      { border: "#4557FA", background: "#000EA1", highlight: { border: "#6E6EFD", background: "#000EA1" }, hover: { border: "#6E6EFD", background: "#000EA1" } }, // 17: darkblue
	      { border: "#FFC0CB", background: "#FD5A77", highlight: { border: "#FFD1D9", background: "#FD5A77" }, hover: { border: "#FFD1D9", background: "#FD5A77" } }, // 18: pink
	      { border: "#C2FABC", background: "#74D66A", highlight: { border: "#E6FFE3", background: "#74D66A" }, hover: { border: "#E6FFE3", background: "#74D66A" } }, // 19: mint

	      { border: "#EE0000", background: "#990000", highlight: { border: "#FF3333", background: "#BB0000" }, hover: { border: "#FF3333", background: "#BB0000" } } // 20:bright red
	      ];

	      this.options = {};
	      this.defaultOptions = {
	        useDefaultGroups: true
	      };
	      util.extend(this.options, this.defaultOptions);
	    }

	    _createClass(Groups, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        var optionFields = ['useDefaultGroups'];

	        if (options !== undefined) {
	          for (var groupName in options) {
	            if (options.hasOwnProperty(groupName)) {
	              if (optionFields.indexOf(groupName) === -1) {
	                var group = options[groupName];
	                this.add(groupName, group);
	              }
	            }
	          }
	        }
	      }

	      /**
	       * Clear all groups
	       */

	    }, {
	      key: "clear",
	      value: function clear() {
	        this.groups = {};
	        this.groupsArray = [];
	      }

	      /**
	       * get group options of a groupname. If groupname is not found, a new group
	       * is added.
	       * @param {*} groupname        Can be a number, string, Date, etc.
	       * @return {Object} group      The created group, containing all group options
	       */

	    }, {
	      key: "get",
	      value: function get(groupname) {
	        var group = this.groups[groupname];
	        if (group === undefined) {
	          if (this.options.useDefaultGroups === false && this.groupsArray.length > 0) {
	            // create new group
	            var index = this.groupIndex % this.groupsArray.length;
	            this.groupIndex++;
	            group = {};
	            group.color = this.groups[this.groupsArray[index]];
	            this.groups[groupname] = group;
	          } else {
	            // create new group
	            var _index = this.defaultIndex % this.defaultGroups.length;
	            this.defaultIndex++;
	            group = {};
	            group.color = this.defaultGroups[_index];
	            this.groups[groupname] = group;
	          }
	        }

	        return group;
	      }

	      /**
	       * Add a custom group style
	       * @param {String} groupName
	       * @param {Object} style       An object containing borderColor,
	       *                             backgroundColor, etc.
	       * @return {Object} group      The created group object
	       */

	    }, {
	      key: "add",
	      value: function add(groupName, style) {
	        this.groups[groupName] = style;
	        this.groupsArray.push(groupName);
	        return style;
	      }
	    }]);

	    return Groups;
	  }();

	  exports.default = Groups;

	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _Node = __webpack_require__(67);

	  var _Node2 = _interopRequireDefault(_Node);

	  var _Label = __webpack_require__(68);

	  var _Label2 = _interopRequireDefault(_Label);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);
	  var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);

	  var NodesHandler = function () {
	    function NodesHandler(body, images, groups, layoutEngine) {
	      var _this = this;

	      _classCallCheck(this, NodesHandler);

	      this.body = body;
	      this.images = images;
	      this.groups = groups;
	      this.layoutEngine = layoutEngine;

	      // create the node API in the body container
	      this.body.functions.createNode = this.create.bind(this);

	      this.nodesListeners = {
	        add: function add(event, params) {
	          _this.add(params.items);
	        },
	        update: function update(event, params) {
	          _this.update(params.items, params.data);
	        },
	        remove: function remove(event, params) {
	          _this.remove(params.items);
	        }
	      };

	      this.options = {};
	      this.defaultOptions = {
	        borderWidth: 1,
	        borderWidthSelected: 2,
	        brokenImage: undefined,
	        color: {
	          border: '#2B7CE9',
	          background: '#97C2FC',
	          highlight: {
	            border: '#2B7CE9',
	            background: '#D2E5FF'
	          },
	          hover: {
	            border: '#2B7CE9',
	            background: '#D2E5FF'
	          }
	        },
	        fixed: {
	          x: false,
	          y: false
	        },
	        font: {
	          color: '#343434',
	          size: 14, // px
	          face: 'arial',
	          background: 'none',
	          strokeWidth: 0, // px
	          strokeColor: '#ffffff',
	          align: 'center'
	        },
	        group: undefined,
	        hidden: false,
	        icon: {
	          face: 'FontAwesome', //'FontAwesome',
	          code: undefined, //'\uf007',
	          size: 50, //50,
	          color: '#2B7CE9' //'#aa00ff'
	        },
	        image: undefined, // --> URL
	        label: undefined,
	        labelHighlightBold: true,
	        level: undefined,
	        mass: 1,
	        physics: true,
	        scaling: {
	          min: 10,
	          max: 30,
	          label: {
	            enabled: false,
	            min: 14,
	            max: 30,
	            maxVisible: 30,
	            drawThreshold: 5
	          },
	          customScalingFunction: function customScalingFunction(min, max, total, value) {
	            if (max === min) {
	              return 0.5;
	            } else {
	              var scale = 1 / (max - min);
	              return Math.max(0, (value - min) * scale);
	            }
	          }
	        },
	        shadow: {
	          enabled: false,
	          color: 'rgba(0,0,0,0.5)',
	          size: 10,
	          x: 5,
	          y: 5
	        },
	        shape: 'ellipse',
	        shapeProperties: {
	          borderDashes: false, // only for borders
	          borderRadius: 6, // only for box shape
	          interpolation: true, // only for image and circularImage shapes
	          useImageSize: false, // only for image and circularImage shapes
	          useBorderWithImage: false // only for image shape
	        },
	        size: 25,
	        title: undefined,
	        value: undefined,
	        x: undefined,
	        y: undefined
	      };
	      util.extend(this.options, this.defaultOptions);

	      this.bindEventListeners();
	    }

	    _createClass(NodesHandler, [{
	      key: 'bindEventListeners',
	      value: function bindEventListeners() {
	        var _this2 = this;

	        // refresh the nodes. Used when reverting from hierarchical layout
	        this.body.emitter.on('refreshNodes', this.refresh.bind(this));
	        this.body.emitter.on('refresh', this.refresh.bind(this));
	        this.body.emitter.on('destroy', function () {
	          util.forEach(_this2.nodesListeners, function (callback, event) {
	            if (_this2.body.data.nodes) _this2.body.data.nodes.off(event, callback);
	          });
	          delete _this2.body.functions.createNode;
	          delete _this2.nodesListeners.add;
	          delete _this2.nodesListeners.update;
	          delete _this2.nodesListeners.remove;
	          delete _this2.nodesListeners;
	        });
	      }
	    }, {
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (options !== undefined) {
	          _Node2.default.parseOptions(this.options, options);

	          // update the shape in all nodes
	          if (options.shape !== undefined) {
	            for (var nodeId in this.body.nodes) {
	              if (this.body.nodes.hasOwnProperty(nodeId)) {
	                this.body.nodes[nodeId].updateShape();
	              }
	            }
	          }

	          // update the font in all nodes
	          if (options.font !== undefined) {
	            _Label2.default.parseOptions(this.options.font, options);
	            for (var _nodeId in this.body.nodes) {
	              if (this.body.nodes.hasOwnProperty(_nodeId)) {
	                this.body.nodes[_nodeId].updateLabelModule();
	                this.body.nodes[_nodeId]._reset();
	              }
	            }
	          }

	          // update the shape size in all nodes
	          if (options.size !== undefined) {
	            for (var _nodeId2 in this.body.nodes) {
	              if (this.body.nodes.hasOwnProperty(_nodeId2)) {
	                this.body.nodes[_nodeId2]._reset();
	              }
	            }
	          }

	          // update the state of the letiables if needed
	          if (options.hidden !== undefined || options.physics !== undefined) {
	            this.body.emitter.emit('_dataChanged');
	          }
	        }
	      }

	      /**
	       * Set a data set with nodes for the network
	       * @param {Array | DataSet | DataView} nodes         The data containing the nodes.
	       * @private
	       */

	    }, {
	      key: 'setData',
	      value: function setData(nodes) {
	        var _this3 = this;

	        var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        var oldNodesData = this.body.data.nodes;

	        if (nodes instanceof DataSet || nodes instanceof DataView) {
	          this.body.data.nodes = nodes;
	        } else if (Array.isArray(nodes)) {
	          this.body.data.nodes = new DataSet();
	          this.body.data.nodes.add(nodes);
	        } else if (!nodes) {
	          this.body.data.nodes = new DataSet();
	        } else {
	          throw new TypeError('Array or DataSet expected');
	        }

	        if (oldNodesData) {
	          // unsubscribe from old dataset
	          util.forEach(this.nodesListeners, function (callback, event) {
	            oldNodesData.off(event, callback);
	          });
	        }

	        // remove drawn nodes
	        this.body.nodes = {};

	        if (this.body.data.nodes) {
	          (function () {
	            // subscribe to new dataset
	            var me = _this3;
	            util.forEach(_this3.nodesListeners, function (callback, event) {
	              me.body.data.nodes.on(event, callback);
	            });

	            // draw all new nodes
	            var ids = _this3.body.data.nodes.getIds();
	            _this3.add(ids, true);
	          })();
	        }

	        if (doNotEmit === false) {
	          this.body.emitter.emit("_dataChanged");
	        }
	      }

	      /**
	       * Add nodes
	       * @param {Number[] | String[]} ids
	       * @private
	       */

	    }, {
	      key: 'add',
	      value: function add(ids) {
	        var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        var id = void 0;
	        var newNodes = [];
	        for (var i = 0; i < ids.length; i++) {
	          id = ids[i];
	          var properties = this.body.data.nodes.get(id);
	          var node = this.create(properties);
	          newNodes.push(node);
	          this.body.nodes[id] = node; // note: this may replace an existing node
	        }

	        this.layoutEngine.positionInitially(newNodes);

	        if (doNotEmit === false) {
	          this.body.emitter.emit("_dataChanged");
	        }
	      }

	      /**
	       * Update existing nodes, or create them when not yet existing
	       * @param {Number[] | String[]} ids
	       * @private
	       */

	    }, {
	      key: 'update',
	      value: function update(ids, changedData) {
	        var nodes = this.body.nodes;
	        var dataChanged = false;
	        for (var i = 0; i < ids.length; i++) {
	          var id = ids[i];
	          var node = nodes[id];
	          var data = changedData[i];
	          if (node !== undefined) {
	            // update node
	            dataChanged = node.setOptions(data);
	          } else {
	            dataChanged = true;
	            // create node
	            node = this.create(data);
	            nodes[id] = node;
	          }
	        }
	        if (dataChanged === true) {
	          this.body.emitter.emit("_dataChanged");
	        } else {
	          this.body.emitter.emit("_dataUpdated");
	        }
	      }

	      /**
	       * Remove existing nodes. If nodes do not exist, the method will just ignore it.
	       * @param {Number[] | String[]} ids
	       * @private
	       */

	    }, {
	      key: 'remove',
	      value: function remove(ids) {
	        var nodes = this.body.nodes;

	        for (var i = 0; i < ids.length; i++) {
	          var id = ids[i];
	          delete nodes[id];
	        }

	        this.body.emitter.emit("_dataChanged");
	      }

	      /**
	       * create a node
	       * @param properties
	       * @param constructorClass
	       */

	    }, {
	      key: 'create',
	      value: function create(properties) {
	        var constructorClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Node2.default;

	        return new constructorClass(properties, this.body, this.images, this.groups, this.options);
	      }
	    }, {
	      key: 'refresh',
	      value: function refresh() {
	        var clearPositions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	        var nodes = this.body.nodes;
	        for (var nodeId in nodes) {
	          var node = undefined;
	          if (nodes.hasOwnProperty(nodeId)) {
	            node = nodes[nodeId];
	          }
	          var data = this.body.data.nodes._data[nodeId];
	          if (node !== undefined && data !== undefined) {
	            if (clearPositions === true) {
	              node.setOptions({ x: null, y: null });
	            }
	            node.setOptions({ fixed: false });
	            node.setOptions(data);
	          }
	        }
	      }

	      /**
	       * Returns the positions of the nodes.
	       * @param ids  --> optional, can be array of nodeIds, can be string
	       * @returns {{}}
	       */

	    }, {
	      key: 'getPositions',
	      value: function getPositions(ids) {
	        var dataArray = {};
	        if (ids !== undefined) {
	          if (Array.isArray(ids) === true) {
	            for (var i = 0; i < ids.length; i++) {
	              if (this.body.nodes[ids[i]] !== undefined) {
	                var node = this.body.nodes[ids[i]];
	                dataArray[ids[i]] = { x: Math.round(node.x), y: Math.round(node.y) };
	              }
	            }
	          } else {
	            if (this.body.nodes[ids] !== undefined) {
	              var _node = this.body.nodes[ids];
	              dataArray[ids] = { x: Math.round(_node.x), y: Math.round(_node.y) };
	            }
	          }
	        } else {
	          for (var _i = 0; _i < this.body.nodeIndices.length; _i++) {
	            var _node2 = this.body.nodes[this.body.nodeIndices[_i]];
	            dataArray[this.body.nodeIndices[_i]] = { x: Math.round(_node2.x), y: Math.round(_node2.y) };
	          }
	        }
	        return dataArray;
	      }

	      /**
	       * Load the XY positions of the nodes into the dataset.
	       */

	    }, {
	      key: 'storePositions',
	      value: function storePositions() {
	        // todo: add support for clusters and hierarchical.
	        var dataArray = [];
	        var dataset = this.body.data.nodes.getDataSet();

	        for (var nodeId in dataset._data) {
	          if (dataset._data.hasOwnProperty(nodeId)) {
	            var node = this.body.nodes[nodeId];
	            if (dataset._data[nodeId].x != Math.round(node.x) || dataset._data[nodeId].y != Math.round(node.y)) {
	              dataArray.push({ id: node.id, x: Math.round(node.x), y: Math.round(node.y) });
	            }
	          }
	        }
	        dataset.update(dataArray);
	      }

	      /**
	       * get the bounding box of a node.
	       * @param nodeId
	       * @returns {j|*}
	       */

	    }, {
	      key: 'getBoundingBox',
	      value: function getBoundingBox(nodeId) {
	        if (this.body.nodes[nodeId] !== undefined) {
	          return this.body.nodes[nodeId].shape.boundingBox;
	        }
	      }

	      /**
	       * Get the Ids of nodes connected to this node.
	       * @param nodeId
	       * @returns {Array}
	       */

	    }, {
	      key: 'getConnectedNodes',
	      value: function getConnectedNodes(nodeId) {
	        var nodeList = [];
	        if (this.body.nodes[nodeId] !== undefined) {
	          var node = this.body.nodes[nodeId];
	          var nodeObj = {}; // used to quickly check if node already exists
	          for (var i = 0; i < node.edges.length; i++) {
	            var edge = node.edges[i];
	            if (edge.toId == node.id) {
	              // these are double equals since ids can be numeric or string
	              if (nodeObj[edge.fromId] === undefined) {
	                nodeList.push(edge.fromId);
	                nodeObj[edge.fromId] = true;
	              }
	            } else if (edge.fromId == node.id) {
	              // these are double equals since ids can be numeric or string
	              if (nodeObj[edge.toId] === undefined) {
	                nodeList.push(edge.toId);
	                nodeObj[edge.toId] = true;
	              }
	            }
	          }
	        }
	        return nodeList;
	      }

	      /**
	       * Get the ids of the edges connected to this node.
	       * @param nodeId
	       * @returns {*}
	       */

	    }, {
	      key: 'getConnectedEdges',
	      value: function getConnectedEdges(nodeId) {
	        var edgeList = [];
	        if (this.body.nodes[nodeId] !== undefined) {
	          var node = this.body.nodes[nodeId];
	          for (var i = 0; i < node.edges.length; i++) {
	            edgeList.push(node.edges[i].id);
	          }
	        } else {
	          console.log("NodeId provided for getConnectedEdges does not exist. Provided: ", nodeId);
	        }
	        return edgeList;
	      }

	      /**
	       * Move a node.
	       * @param String nodeId
	       * @param Number x
	       * @param Number y
	       */

	    }, {
	      key: 'moveNode',
	      value: function moveNode(nodeId, x, y) {
	        var _this4 = this;

	        if (this.body.nodes[nodeId] !== undefined) {
	          this.body.nodes[nodeId].x = Number(x);
	          this.body.nodes[nodeId].y = Number(y);
	          setTimeout(function () {
	            _this4.body.emitter.emit("startSimulation");
	          }, 0);
	        } else {
	          console.log("Node id supplied to moveNode does not exist. Provided: ", nodeId);
	        }
	      }
	    }]);

	    return NodesHandler;
	  }();

	  exports.default = NodesHandler;

	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _Label = __webpack_require__(68);

	  var _Label2 = _interopRequireDefault(_Label);

	  var _Box = __webpack_require__(69);

	  var _Box2 = _interopRequireDefault(_Box);

	  var _Circle = __webpack_require__(71);

	  var _Circle2 = _interopRequireDefault(_Circle);

	  var _CircularImage = __webpack_require__(73);

	  var _CircularImage2 = _interopRequireDefault(_CircularImage);

	  var _Database = __webpack_require__(74);

	  var _Database2 = _interopRequireDefault(_Database);

	  var _Diamond = __webpack_require__(75);

	  var _Diamond2 = _interopRequireDefault(_Diamond);

	  var _Dot = __webpack_require__(77);

	  var _Dot2 = _interopRequireDefault(_Dot);

	  var _Ellipse = __webpack_require__(78);

	  var _Ellipse2 = _interopRequireDefault(_Ellipse);

	  var _Icon = __webpack_require__(79);

	  var _Icon2 = _interopRequireDefault(_Icon);

	  var _Image = __webpack_require__(80);

	  var _Image2 = _interopRequireDefault(_Image);

	  var _Square = __webpack_require__(81);

	  var _Square2 = _interopRequireDefault(_Square);

	  var _Star = __webpack_require__(82);

	  var _Star2 = _interopRequireDefault(_Star);

	  var _Text = __webpack_require__(83);

	  var _Text2 = _interopRequireDefault(_Text);

	  var _Triangle = __webpack_require__(84);

	  var _Triangle2 = _interopRequireDefault(_Triangle);

	  var _TriangleDown = __webpack_require__(85);

	  var _TriangleDown2 = _interopRequireDefault(_TriangleDown);

	  var _Validator = __webpack_require__(31);

	  var _Validator2 = _interopRequireDefault(_Validator);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  /**
	   * @class Node
	   * A node. A node can be connected to other nodes via one or multiple edges.
	   * @param {object} options An object containing options for the node. All
	   *                            options are optional, except for the id.
	   *                              {number} id     Id of the node. Required
	   *                              {string} label  Text label for the node
	   *                              {number} x      Horizontal position of the node
	   *                              {number} y      Vertical position of the node
	   *                              {string} shape  Node shape, available:
	   *                                              "database", "circle", "ellipse",
	   *                                              "box", "image", "text", "dot",
	   *                                              "star", "triangle", "triangleDown",
	   *                                              "square", "icon"
	   *                              {string} image  An image url
	   *                              {string} title  An title text, can be HTML
	   *                              {anytype} group A group name or number
	   * @param {Network.Images} imagelist    A list with images. Only needed
	   *                                            when the node has an image
	   * @param {Network.Groups} grouplist    A list with groups. Needed for
	   *                                            retrieving group options
	   * @param {Object}               constants    An object with default values for
	   *                                            example for the color
	   *
	   */
	  var Node = function () {
	    function Node(options, body, imagelist, grouplist, globalOptions) {
	      _classCallCheck(this, Node);

	      this.options = util.bridgeObject(globalOptions);
	      this.globalOptions = globalOptions;
	      this.body = body;

	      this.edges = []; // all edges connected to this node

	      // set defaults for the options
	      this.id = undefined;
	      this.imagelist = imagelist;
	      this.grouplist = grouplist;

	      // state options
	      this.x = undefined;
	      this.y = undefined;
	      this.baseSize = this.options.size;
	      this.baseFontSize = this.options.font.size;
	      this.predefinedPosition = false; // used to check if initial fit should just take the range or approximate
	      this.selected = false;
	      this.hover = false;

	      this.labelModule = new _Label2.default(this.body, this.options, false /* Not edge label */);
	      this.setOptions(options);
	    }

	    /**
	     * Attach a edge to the node
	     * @param {Edge} edge
	     */


	    _createClass(Node, [{
	      key: 'attachEdge',
	      value: function attachEdge(edge) {
	        if (this.edges.indexOf(edge) === -1) {
	          this.edges.push(edge);
	        }
	      }

	      /**
	       * Detach a edge from the node
	       * @param {Edge} edge
	       */

	    }, {
	      key: 'detachEdge',
	      value: function detachEdge(edge) {
	        var index = this.edges.indexOf(edge);
	        if (index != -1) {
	          this.edges.splice(index, 1);
	        }
	      }

	      /**
	       * Set or overwrite options for the node
	       * @param {Object} options an object with options
	       * @param {Object} constants  and object with default, global options
	       */

	    }, {
	      key: 'setOptions',
	      value: function setOptions(options) {
	        var currentShape = this.options.shape;
	        if (!options) {
	          return;
	        }
	        // basic options
	        if (options.id !== undefined) {
	          this.id = options.id;
	        }

	        if (this.id === undefined) {
	          throw "Node must have an id";
	        }

	        // set these options locally
	        // clear x and y positions
	        if (options.x !== undefined) {
	          if (options.x === null) {
	            this.x = undefined;this.predefinedPosition = false;
	          } else {
	            this.x = parseInt(options.x);this.predefinedPosition = true;
	          }
	        }
	        if (options.y !== undefined) {
	          if (options.y === null) {
	            this.y = undefined;this.predefinedPosition = false;
	          } else {
	            this.y = parseInt(options.y);this.predefinedPosition = true;
	          }
	        }
	        if (options.size !== undefined) {
	          this.baseSize = options.size;
	        }
	        if (options.value !== undefined) {
	          options.value = parseFloat(options.value);
	        }

	        // copy group options
	        if (typeof options.group === 'number' || typeof options.group === 'string' && options.group != '') {
	          var groupObj = this.grouplist.get(options.group);
	          util.deepExtend(this.options, groupObj);
	          // the color object needs to be completely defined. Since groups can partially overwrite the colors, we parse it again, just in case.
	          this.options.color = util.parseColor(this.options.color);
	        }

	        // this transforms all shorthands into fully defined options
	        Node.parseOptions(this.options, options, true, this.globalOptions);

	        // load the images
	        if (this.options.image !== undefined) {
	          if (this.imagelist) {
	            this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
	          } else {
	            throw "No imagelist provided";
	          }
	        }

	        this.updateLabelModule();
	        this.updateShape(currentShape);

	        if (options.hidden !== undefined || options.physics !== undefined) {
	          return true;
	        }
	        return false;
	      }

	      /**
	       * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.
	       * Static so it can also be used by the handler.
	       * @param parentOptions
	       * @param newOptions
	       * @param allowDeletion
	       * @param globalOptions
	       */

	    }, {
	      key: 'updateLabelModule',
	      value: function updateLabelModule() {
	        if (this.options.label === undefined || this.options.label === null) {
	          this.options.label = '';
	        }
	        this.labelModule.setOptions(this.options, true);
	        if (this.labelModule.baseSize !== undefined) {
	          this.baseFontSize = this.labelModule.baseSize;
	        }
	      }
	    }, {
	      key: 'updateShape',
	      value: function updateShape(currentShape) {
	        if (currentShape === this.options.shape && this.shape) {
	          this.shape.setOptions(this.options, this.imageObj);
	        } else {
	          // choose draw method depending on the shape
	          switch (this.options.shape) {
	            case 'box':
	              this.shape = new _Box2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'circle':
	              this.shape = new _Circle2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'circularImage':
	              this.shape = new _CircularImage2.default(this.options, this.body, this.labelModule, this.imageObj);
	              break;
	            case 'database':
	              this.shape = new _Database2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'diamond':
	              this.shape = new _Diamond2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'dot':
	              this.shape = new _Dot2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'ellipse':
	              this.shape = new _Ellipse2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'icon':
	              this.shape = new _Icon2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'image':
	              this.shape = new _Image2.default(this.options, this.body, this.labelModule, this.imageObj);
	              break;
	            case 'square':
	              this.shape = new _Square2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'star':
	              this.shape = new _Star2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'text':
	              this.shape = new _Text2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'triangle':
	              this.shape = new _Triangle2.default(this.options, this.body, this.labelModule);
	              break;
	            case 'triangleDown':
	              this.shape = new _TriangleDown2.default(this.options, this.body, this.labelModule);
	              break;
	            default:
	              this.shape = new _Ellipse2.default(this.options, this.body, this.labelModule);
	              break;
	          }
	        }
	        this._reset();
	      }

	      /**
	       * select this node
	       */

	    }, {
	      key: 'select',
	      value: function select() {
	        this.selected = true;
	        this._reset();
	      }

	      /**
	       * unselect this node
	       */

	    }, {
	      key: 'unselect',
	      value: function unselect() {
	        this.selected = false;
	        this._reset();
	      }

	      /**
	       * Reset the calculated size of the node, forces it to recalculate its size
	       * @private
	       */

	    }, {
	      key: '_reset',
	      value: function _reset() {
	        this.shape.width = undefined;
	        this.shape.height = undefined;
	      }

	      /**
	       * get the title of this node.
	       * @return {string} title    The title of the node, or undefined when no title
	       *                           has been set.
	       */

	    }, {
	      key: 'getTitle',
	      value: function getTitle() {
	        return this.options.title;
	      }

	      /**
	       * Calculate the distance to the border of the Node
	       * @param {CanvasRenderingContext2D}   ctx
	       * @param {Number} angle        Angle in radians
	       * @returns {number} distance   Distance to the border in pixels
	       */

	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this.shape.distanceToBorder(ctx, angle);
	      }

	      /**
	       * Check if this node has a fixed x and y position
	       * @return {boolean}      true if fixed, false if not
	       */

	    }, {
	      key: 'isFixed',
	      value: function isFixed() {
	        return this.options.fixed.x && this.options.fixed.y;
	      }

	      /**
	       * check if this node is selecte
	       * @return {boolean} selected   True if node is selected, else false
	       */

	    }, {
	      key: 'isSelected',
	      value: function isSelected() {
	        return this.selected;
	      }

	      /**
	       * Retrieve the value of the node. Can be undefined
	       * @return {Number} value
	       */

	    }, {
	      key: 'getValue',
	      value: function getValue() {
	        return this.options.value;
	      }

	      /**
	       * Adjust the value range of the node. The node will adjust it's size
	       * based on its value.
	       * @param {Number} min
	       * @param {Number} max
	       */

	    }, {
	      key: 'setValueRange',
	      value: function setValueRange(min, max, total) {
	        if (this.options.value !== undefined) {
	          var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);
	          var sizeDiff = this.options.scaling.max - this.options.scaling.min;
	          if (this.options.scaling.label.enabled === true) {
	            var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
	            this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
	          }
	          this.options.size = this.options.scaling.min + scale * sizeDiff;
	        } else {
	          this.options.size = this.baseSize;
	          this.options.font.size = this.baseFontSize;
	        }

	        this.updateLabelModule();
	      }

	      /**
	       * Draw this node in the given canvas
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	       * @param {CanvasRenderingContext2D}   ctx
	       */

	    }, {
	      key: 'draw',
	      value: function draw(ctx) {
	        this.shape.draw(ctx, this.x, this.y, this.selected, this.hover);
	      }

	      /**
	       * Update the bounding box of the shape
	       */

	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(ctx) {
	        this.shape.updateBoundingBox(this.x, this.y, ctx);
	      }

	      /**
	       * Recalculate the size of this node in the given canvas
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	       * @param {CanvasRenderingContext2D}   ctx
	       */

	    }, {
	      key: 'resize',
	      value: function resize(ctx) {
	        this.shape.resize(ctx, this.selected);
	      }

	      /**
	       * Check if this object is overlapping with the provided object
	       * @param {Object} obj   an object with parameters left, top, right, bottom
	       * @return {boolean}     True if location is located on node
	       */

	    }, {
	      key: 'isOverlappingWith',
	      value: function isOverlappingWith(obj) {
	        return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;
	      }

	      /**
	       * Check if this object is overlapping with the provided object
	       * @param {Object} obj   an object with parameters left, top, right, bottom
	       * @return {boolean}     True if location is located on node
	       */

	    }, {
	      key: 'isBoundingBoxOverlappingWith',
	      value: function isBoundingBoxOverlappingWith(obj) {
	        return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;
	      }
	    }], [{
	      key: 'parseOptions',
	      value: function parseOptions(parentOptions, newOptions) {
	        var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	        var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	        var fields = ['color', 'font', 'fixed', 'shadow'];
	        util.selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);

	        // merge the shadow options into the parent.
	        util.mergeOptions(parentOptions, newOptions, 'shadow', allowDeletion, globalOptions);

	        // individual shape newOptions
	        if (newOptions.color !== undefined && newOptions.color !== null) {
	          var parsedColor = util.parseColor(newOptions.color);
	          util.fillIfDefined(parentOptions.color, parsedColor);
	        } else if (allowDeletion === true && newOptions.color === null) {
	          parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options
	        }

	        // handle the fixed options
	        if (newOptions.fixed !== undefined && newOptions.fixed !== null) {
	          if (typeof newOptions.fixed === 'boolean') {
	            parentOptions.fixed.x = newOptions.fixed;
	            parentOptions.fixed.y = newOptions.fixed;
	          } else {
	            if (newOptions.fixed.x !== undefined && typeof newOptions.fixed.x === 'boolean') {
	              parentOptions.fixed.x = newOptions.fixed.x;
	            }
	            if (newOptions.fixed.y !== undefined && typeof newOptions.fixed.y === 'boolean') {
	              parentOptions.fixed.y = newOptions.fixed.y;
	            }
	          }
	        }

	        // handle the font options
	        if (newOptions.font !== undefined && newOptions.font !== null) {
	          _Label2.default.parseOptions(parentOptions.font, newOptions);
	        } else if (allowDeletion === true && newOptions.font === null) {
	          parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options
	        }

	        // handle the scaling options, specifically the label part
	        if (newOptions.scaling !== undefined) {
	          util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', allowDeletion, globalOptions.scaling);
	        }
	      }
	    }]);

	    return Node;
	  }();

	  exports.default = Node;

	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var Label = function () {
	    function Label(body, options) {
	      var edgelabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	      _classCallCheck(this, Label);

	      this.body = body;

	      this.pointToSelf = false;
	      this.baseSize = undefined;
	      this.fontOptions = {};
	      this.setOptions(options);
	      this.size = { top: 0, left: 0, width: 0, height: 0, yLine: 0 }; // could be cached
	      this.isEdgeLabel = edgelabel;
	    }

	    _createClass(Label, [{
	      key: 'setOptions',
	      value: function setOptions(options) {
	        var allowDeletion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        this.nodeOptions = options;

	        // We want to keep the font options seperated from the node options.
	        // The node options have to mirror the globals when they are not overruled.
	        this.fontOptions = util.deepExtend({}, options.font, true);

	        if (options.label !== undefined) {
	          this.labelDirty = true;
	        }

	        if (options.font !== undefined) {
	          Label.parseOptions(this.fontOptions, options, allowDeletion);
	          if (typeof options.font === 'string') {
	            this.baseSize = this.fontOptions.size;
	          } else if (_typeof(options.font) === 'object') {
	            if (options.font.size !== undefined) {
	              this.baseSize = options.font.size;
	            }
	          }
	        }
	      }
	    }, {
	      key: 'draw',


	      /**
	       * Main function. This is called from anything that wants to draw a label.
	       * @param ctx
	       * @param x
	       * @param y
	       * @param selected
	       * @param baseline
	       */
	      value: function draw(ctx, x, y, selected) {
	        var baseline = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'middle';

	        // if no label, return
	        if (this.nodeOptions.label === undefined) return;

	        // check if we have to render the label
	        var viewFontSize = this.fontOptions.size * this.body.view.scale;
	        if (this.nodeOptions.label && viewFontSize < this.nodeOptions.scaling.label.drawThreshold - 1) return;

	        // update the size cache if required
	        this.calculateLabelSize(ctx, selected, x, y, baseline);

	        // create the fontfill background
	        this._drawBackground(ctx);
	        // draw text
	        this._drawText(ctx, selected, x, y, baseline);
	      }

	      /**
	       * Draws the label background
	       * @param {CanvasRenderingContext2D} ctx
	       * @private
	       */

	    }, {
	      key: '_drawBackground',
	      value: function _drawBackground(ctx) {
	        if (this.fontOptions.background !== undefined && this.fontOptions.background !== "none") {
	          ctx.fillStyle = this.fontOptions.background;

	          var lineMargin = 2;

	          if (this.isEdgeLabel) {
	            switch (this.fontOptions.align) {
	              case 'middle':
	                ctx.fillRect(-this.size.width * 0.5, -this.size.height * 0.5, this.size.width, this.size.height);
	                break;
	              case 'top':
	                ctx.fillRect(-this.size.width * 0.5, -(this.size.height + lineMargin), this.size.width, this.size.height);
	                break;
	              case 'bottom':
	                ctx.fillRect(-this.size.width * 0.5, lineMargin, this.size.width, this.size.height);
	                break;
	              default:
	                ctx.fillRect(this.size.left, this.size.top - 0.5 * lineMargin, this.size.width, this.size.height);
	                break;
	            }
	          } else {
	            ctx.fillRect(this.size.left, this.size.top - 0.5 * lineMargin, this.size.width, this.size.height);
	          }
	        }
	      }

	      /**
	       *
	       * @param ctx
	       * @param x
	       * @param baseline
	       * @private
	       */

	    }, {
	      key: '_drawText',
	      value: function _drawText(ctx, selected, x, y) {
	        var baseline = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'middle';

	        var fontSize = this.fontOptions.size;
	        var viewFontSize = fontSize * this.body.view.scale;
	        // this ensures that there will not be HUGE letters on screen by setting an upper limit on the visible text size (regardless of zoomLevel)
	        if (viewFontSize >= this.nodeOptions.scaling.label.maxVisible) {
	          fontSize = Number(this.nodeOptions.scaling.label.maxVisible) / this.body.view.scale;
	        }

	        var yLine = this.size.yLine;

	        var _getColor2 = this._getColor(viewFontSize),
	            _getColor3 = _slicedToArray(_getColor2, 2),
	            fontColor = _getColor3[0],
	            strokeColor = _getColor3[1];

	        // configure context for drawing the text
	        var _setAlignment2 = this._setAlignment(ctx, x, yLine, baseline);

	        var _setAlignment3 = _slicedToArray(_setAlignment2, 2);

	        x = _setAlignment3[0];
	        yLine = _setAlignment3[1];
	        ctx.font = (selected && this.nodeOptions.labelHighlightBold ? 'bold ' : '') + fontSize + "px " + this.fontOptions.face;
	        ctx.fillStyle = fontColor;
	        // When the textAlign property is 'left', make label left-justified
	        if (!this.isEdgeLabel && this.fontOptions.align === 'left') {
	          ctx.textAlign = this.fontOptions.align;
	          x = x - 0.5 * this.size.width; // Shift label 1/2-distance to the left
	        } else {
	          ctx.textAlign = 'center';
	        }

	        // set the strokeWidth
	        if (this.fontOptions.strokeWidth > 0) {
	          ctx.lineWidth = this.fontOptions.strokeWidth;
	          ctx.strokeStyle = strokeColor;
	          ctx.lineJoin = 'round';
	        }

	        // draw the text
	        for (var i = 0; i < this.lineCount; i++) {
	          if (this.fontOptions.strokeWidth > 0) {
	            ctx.strokeText(this.lines[i], x, yLine);
	          }
	          ctx.fillText(this.lines[i], x, yLine);
	          yLine += fontSize;
	        }
	      }
	    }, {
	      key: '_setAlignment',
	      value: function _setAlignment(ctx, x, yLine, baseline) {
	        // check for label alignment (for edges)
	        // TODO: make alignment for nodes
	        if (this.isEdgeLabel && this.fontOptions.align !== 'horizontal' && this.pointToSelf === false) {
	          x = 0;
	          yLine = 0;

	          var lineMargin = 2;
	          if (this.fontOptions.align === 'top') {
	            ctx.textBaseline = 'alphabetic';
	            yLine -= 2 * lineMargin; // distance from edge, required because we use alphabetic. Alphabetic has less difference between browsers
	          } else if (this.fontOptions.align === 'bottom') {
	            ctx.textBaseline = 'hanging';
	            yLine += 2 * lineMargin; // distance from edge, required because we use hanging. Hanging has less difference between browsers
	          } else {
	            ctx.textBaseline = 'middle';
	          }
	        } else {
	          ctx.textBaseline = baseline;
	        }

	        return [x, yLine];
	      }

	      /**
	       * fade in when relative scale is between threshold and threshold - 1.
	       * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.
	       *
	       * @param viewFontSize
	       * @returns {*[]}
	       * @private
	       */

	    }, {
	      key: '_getColor',
	      value: function _getColor(viewFontSize) {
	        var fontColor = this.fontOptions.color || '#000000';
	        var strokeColor = this.fontOptions.strokeColor || '#ffffff';
	        if (viewFontSize <= this.nodeOptions.scaling.label.drawThreshold) {
	          var opacity = Math.max(0, Math.min(1, 1 - (this.nodeOptions.scaling.label.drawThreshold - viewFontSize)));
	          fontColor = util.overrideOpacity(fontColor, opacity);
	          strokeColor = util.overrideOpacity(strokeColor, opacity);
	        }
	        return [fontColor, strokeColor];
	      }

	      /**
	       *
	       * @param ctx
	       * @param selected
	       * @returns {{width: number, height: number}}
	       */

	    }, {
	      key: 'getTextSize',
	      value: function getTextSize(ctx) {
	        var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        var size = {
	          width: this._processLabel(ctx, selected),
	          height: this.fontOptions.size * this.lineCount,
	          lineCount: this.lineCount
	        };
	        return size;
	      }

	      /**
	       *
	       * @param ctx
	       * @param selected
	       * @param x
	       * @param y
	       * @param baseline
	       */

	    }, {
	      key: 'calculateLabelSize',
	      value: function calculateLabelSize(ctx, selected) {
	        var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
	        var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	        var baseline = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'middle';

	        if (this.labelDirty === true) {
	          this.size.width = this._processLabel(ctx, selected);
	        }
	        this.size.height = this.fontOptions.size * this.lineCount;
	        this.size.left = x - this.size.width * 0.5;
	        this.size.top = y - this.size.height * 0.5;
	        this.size.yLine = y + (1 - this.lineCount) * 0.5 * this.fontOptions.size;
	        if (baseline === "hanging") {
	          this.size.top += 0.5 * this.fontOptions.size;
	          this.size.top += 4; // distance from node, required because we use hanging. Hanging has less difference between browsers
	          this.size.yLine += 4; // distance from node
	        }

	        this.labelDirty = false;
	      }

	      /**
	       * This calculates the width as well as explodes the label string and calculates the amount of lines.
	       * @param ctx
	       * @param selected
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_processLabel',
	      value: function _processLabel(ctx, selected) {
	        var width = 0;
	        var lines = [''];
	        var lineCount = 0;
	        if (this.nodeOptions.label !== undefined) {
	          lines = String(this.nodeOptions.label).split('\n');
	          lineCount = lines.length;
	          ctx.font = (selected && this.nodeOptions.labelHighlightBold ? 'bold ' : '') + this.fontOptions.size + "px " + this.fontOptions.face;
	          width = ctx.measureText(lines[0]).width;
	          for (var i = 1; i < lineCount; i++) {
	            var lineWidth = ctx.measureText(lines[i]).width;
	            width = lineWidth > width ? lineWidth : width;
	          }
	        }
	        this.lines = lines;
	        this.lineCount = lineCount;

	        return width;
	      }
	    }], [{
	      key: 'parseOptions',
	      value: function parseOptions(parentOptions, newOptions) {
	        var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	        if (typeof newOptions.font === 'string') {
	          var newOptionsArray = newOptions.font.split(" ");
	          parentOptions.size = newOptionsArray[0].replace("px", '');
	          parentOptions.face = newOptionsArray[1];
	          parentOptions.color = newOptionsArray[2];
	        } else if (_typeof(newOptions.font) === 'object') {
	          util.fillIfDefined(parentOptions, newOptions.font, allowDeletion);
	        }
	        parentOptions.size = Number(parentOptions.size);
	      }
	    }]);

	    return Label;
	  }();

	  exports.default = Label;

	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NodeBase2 = __webpack_require__(70);

	  var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Box = function (_NodeBase) {
	    _inherits(Box, _NodeBase);

	    function Box(options, body, labelModule) {
	      _classCallCheck(this, Box);

	      return _possibleConstructorReturn(this, (Box.__proto__ || Object.getPrototypeOf(Box)).call(this, options, body, labelModule));
	    }

	    _createClass(Box, [{
	      key: 'resize',
	      value: function resize(ctx, selected) {
	        if (this.width === undefined) {
	          var margin = 5;
	          var textSize = this.labelModule.getTextSize(ctx, selected);
	          this.width = textSize.width + 2 * margin;
	          this.height = textSize.height + 2 * margin;
	          this.radius = 0.5 * this.width;
	        }
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this.resize(ctx, selected);
	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        var borderWidth = this.options.borderWidth;
	        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;

	        ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;
	        ctx.lineWidth = selected ? selectionLineWidth : borderWidth;
	        ctx.lineWidth /= this.body.view.scale;
	        ctx.lineWidth = Math.min(this.width, ctx.lineWidth);

	        ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;

	        var borderRadius = this.options.shapeProperties.borderRadius; // only effective for box
	        ctx.roundRect(this.left, this.top, this.width, this.height, borderRadius);

	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        // draw the background
	        ctx.fill();
	        // disable shadows for other elements.
	        this.disableShadow(ctx);

	        //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	        ctx.save();
	        // if borders are zero width, they will be drawn with width 1 by default. This prevents that
	        if (borderWidth > 0) {
	          this.enableBorderDashes(ctx);
	          //draw the border
	          ctx.stroke();
	          //disable dashed border for other elements
	          this.disableBorderDashes(ctx);
	        }
	        ctx.restore();

	        this.updateBoundingBox(x, y, ctx, selected);
	        this.labelModule.draw(ctx, x, y, selected);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y, ctx, selected) {
	        this.resize(ctx, selected);
	        this.left = x - this.width * 0.5;
	        this.top = y - this.height * 0.5;

	        var borderRadius = this.options.shapeProperties.borderRadius; // only effective for box
	        this.boundingBox.left = this.left - borderRadius;
	        this.boundingBox.top = this.top - borderRadius;
	        this.boundingBox.bottom = this.top + this.height + borderRadius;
	        this.boundingBox.right = this.left + this.width + borderRadius;
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        this.resize(ctx);
	        var borderWidth = this.options.borderWidth;

	        return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
	      }
	    }]);

	    return Box;
	  }(_NodeBase3.default);

	  exports.default = Box;

	/***/ },
	/* 70 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var NodeBase = function () {
	    function NodeBase(options, body, labelModule) {
	      _classCallCheck(this, NodeBase);

	      this.body = body;
	      this.labelModule = labelModule;
	      this.setOptions(options);
	      this.top = undefined;
	      this.left = undefined;
	      this.height = undefined;
	      this.width = undefined;
	      this.radius = undefined;
	      this.boundingBox = { top: 0, left: 0, right: 0, bottom: 0 };
	    }

	    _createClass(NodeBase, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        this.options = options;
	      }
	    }, {
	      key: "_distanceToBorder",
	      value: function _distanceToBorder(ctx, angle) {
	        var borderWidth = this.options.borderWidth;
	        this.resize(ctx);
	        return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
	      }
	    }, {
	      key: "enableShadow",
	      value: function enableShadow(ctx) {
	        if (this.options.shadow.enabled === true) {
	          ctx.shadowColor = this.options.shadow.color;
	          ctx.shadowBlur = this.options.shadow.size;
	          ctx.shadowOffsetX = this.options.shadow.x;
	          ctx.shadowOffsetY = this.options.shadow.y;
	        }
	      }
	    }, {
	      key: "disableShadow",
	      value: function disableShadow(ctx) {
	        if (this.options.shadow.enabled === true) {
	          ctx.shadowColor = 'rgba(0,0,0,0)';
	          ctx.shadowBlur = 0;
	          ctx.shadowOffsetX = 0;
	          ctx.shadowOffsetY = 0;
	        }
	      }
	    }, {
	      key: "enableBorderDashes",
	      value: function enableBorderDashes(ctx) {
	        if (this.options.shapeProperties.borderDashes !== false) {
	          if (ctx.setLineDash !== undefined) {
	            var dashes = this.options.shapeProperties.borderDashes;
	            if (dashes === true) {
	              dashes = [5, 15];
	            }
	            ctx.setLineDash(dashes);
	          } else {
	            console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
	            this.options.shapeProperties.borderDashes = false;
	          }
	        }
	      }
	    }, {
	      key: "disableBorderDashes",
	      value: function disableBorderDashes(ctx) {
	        if (this.options.shapeProperties.borderDashes !== false) {
	          if (ctx.setLineDash !== undefined) {
	            ctx.setLineDash([0]);
	          } else {
	            console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
	            this.options.shapeProperties.borderDashes = false;
	          }
	        }
	      }
	    }]);

	    return NodeBase;
	  }();

	  exports.default = NodeBase;

	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _CircleImageBase2 = __webpack_require__(72);

	  var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Circle = function (_CircleImageBase) {
	    _inherits(Circle, _CircleImageBase);

	    function Circle(options, body, labelModule) {
	      _classCallCheck(this, Circle);

	      return _possibleConstructorReturn(this, (Circle.__proto__ || Object.getPrototypeOf(Circle)).call(this, options, body, labelModule));
	    }

	    _createClass(Circle, [{
	      key: 'resize',
	      value: function resize(ctx, selected) {
	        if (this.width === undefined) {
	          var margin = 5;
	          var textSize = this.labelModule.getTextSize(ctx, selected);
	          var diameter = Math.max(textSize.width, textSize.height) + 2 * margin;
	          this.options.size = diameter / 2;

	          this.width = diameter;
	          this.height = diameter;
	          this.radius = 0.5 * this.width;
	        }
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this.resize(ctx, selected);
	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        this._drawRawCircle(ctx, x, y, selected, hover, this.options.size);

	        this.boundingBox.top = y - this.options.size;
	        this.boundingBox.left = x - this.options.size;
	        this.boundingBox.right = x + this.options.size;
	        this.boundingBox.bottom = y + this.options.size;

	        this.updateBoundingBox(x, y);
	        this.labelModule.draw(ctx, x, y, selected);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y) {
	        this.boundingBox.top = y - this.options.size;
	        this.boundingBox.left = x - this.options.size;
	        this.boundingBox.right = x + this.options.size;
	        this.boundingBox.bottom = y + this.options.size;
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        this.resize(ctx);
	        return this.width * 0.5;
	      }
	    }]);

	    return Circle;
	  }(_CircleImageBase3.default);

	  exports.default = Circle;

	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NodeBase2 = __webpack_require__(70);

	  var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var CircleImageBase = function (_NodeBase) {
	    _inherits(CircleImageBase, _NodeBase);

	    function CircleImageBase(options, body, labelModule) {
	      _classCallCheck(this, CircleImageBase);

	      var _this = _possibleConstructorReturn(this, (CircleImageBase.__proto__ || Object.getPrototypeOf(CircleImageBase)).call(this, options, body, labelModule));

	      _this.labelOffset = 0;
	      _this.imageLoaded = false;
	      return _this;
	    }

	    _createClass(CircleImageBase, [{
	      key: 'setOptions',
	      value: function setOptions(options, imageObj) {
	        this.options = options;
	        if (imageObj) {
	          this.imageObj = imageObj;
	        }
	      }

	      /**
	       * This function resizes the image by the options size when the image has not yet loaded. If the image has loaded, we
	       * force the update of the size again.
	       *
	       * @private
	       */

	    }, {
	      key: '_resizeImage',
	      value: function _resizeImage() {
	        var force = false;
	        if (!this.imageObj.width || !this.imageObj.height) {
	          // undefined or 0
	          this.imageLoaded = false;
	        } else if (this.imageLoaded === false) {
	          this.imageLoaded = true;
	          force = true;
	        }

	        if (!this.width || !this.height || force === true) {
	          // undefined or 0
	          var width, height, ratio;
	          if (this.imageObj.width && this.imageObj.height) {
	            // not undefined or 0
	            width = 0;
	            height = 0;
	          }
	          if (this.options.shapeProperties.useImageSize === false) {
	            if (this.imageObj.width > this.imageObj.height) {
	              ratio = this.imageObj.width / this.imageObj.height;
	              width = this.options.size * 2 * ratio || this.imageObj.width;
	              height = this.options.size * 2 || this.imageObj.height;
	            } else {
	              if (this.imageObj.width && this.imageObj.height) {
	                // not undefined or 0
	                ratio = this.imageObj.height / this.imageObj.width;
	              } else {
	                ratio = 1;
	              }
	              width = this.options.size * 2;
	              height = this.options.size * 2 * ratio;
	            }
	          } else {
	            // when not using the size property, we use the image size
	            width = this.imageObj.width;
	            height = this.imageObj.height;
	          }
	          this.width = width;
	          this.height = height;
	          this.radius = 0.5 * this.width;
	        }
	      }
	    }, {
	      key: '_drawRawCircle',
	      value: function _drawRawCircle(ctx, x, y, selected, hover, size) {
	        var neutralborderWidth = this.options.borderWidth;
	        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
	        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
	        ctx.lineWidth = Math.min(this.width, borderWidth);

	        ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;
	        ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;
	        ctx.circle(x, y, size);

	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        // draw the background
	        ctx.fill();
	        // disable shadows for other elements.
	        this.disableShadow(ctx);

	        //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	        ctx.save();
	        // if borders are zero width, they will be drawn with width 1 by default. This prevents that
	        if (borderWidth > 0) {
	          this.enableBorderDashes(ctx);
	          //draw the border
	          ctx.stroke();
	          //disable dashed border for other elements
	          this.disableBorderDashes(ctx);
	        }
	        ctx.restore();
	      }
	    }, {
	      key: '_drawImageAtPosition',
	      value: function _drawImageAtPosition(ctx) {
	        if (this.imageObj.width != 0) {
	          // draw the image
	          ctx.globalAlpha = 1.0;

	          // draw shadow if enabled
	          this.enableShadow(ctx);

	          var factor = this.imageObj.width / this.width / this.body.view.scale;
	          if (factor > 2 && this.options.shapeProperties.interpolation === true) {
	            var w = this.imageObj.width;
	            var h = this.imageObj.height;
	            var can2 = document.createElement('canvas');
	            can2.width = w;
	            can2.height = w;
	            var ctx2 = can2.getContext('2d');

	            factor *= 0.5;
	            w *= 0.5;
	            h *= 0.5;
	            ctx2.drawImage(this.imageObj, 0, 0, w, h);

	            var distance = 0;
	            var iterations = 1;
	            while (factor > 2 && iterations < 4) {
	              ctx2.drawImage(can2, distance, 0, w, h, distance + w, 0, w / 2, h / 2);
	              distance += w;
	              factor *= 0.5;
	              w *= 0.5;
	              h *= 0.5;
	              iterations += 1;
	            }
	            ctx.drawImage(can2, distance, 0, w, h, this.left, this.top, this.width, this.height);
	          } else {
	            // draw image
	            ctx.drawImage(this.imageObj, this.left, this.top, this.width, this.height);
	          }

	          // disable shadows for other elements.
	          this.disableShadow(ctx);
	        }
	      }
	    }, {
	      key: '_drawImageLabel',
	      value: function _drawImageLabel(ctx, x, y, selected) {
	        var yLabel;
	        var offset = 0;

	        if (this.height !== undefined) {
	          offset = this.height * 0.5;
	          var labelDimensions = this.labelModule.getTextSize(ctx);
	          if (labelDimensions.lineCount >= 1) {
	            offset += labelDimensions.height / 2;
	          }
	        }

	        yLabel = y + offset;

	        if (this.options.label) {
	          this.labelOffset = offset;
	        }
	        this.labelModule.draw(ctx, x, yLabel, selected, 'hanging');
	      }
	    }]);

	    return CircleImageBase;
	  }(_NodeBase3.default);

	  exports.default = CircleImageBase;

	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _CircleImageBase2 = __webpack_require__(72);

	  var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var CircularImage = function (_CircleImageBase) {
	    _inherits(CircularImage, _CircleImageBase);

	    function CircularImage(options, body, labelModule, imageObj) {
	      _classCallCheck(this, CircularImage);

	      var _this = _possibleConstructorReturn(this, (CircularImage.__proto__ || Object.getPrototypeOf(CircularImage)).call(this, options, body, labelModule));

	      _this.imageObj = imageObj;
	      _this._swapToImageResizeWhenImageLoaded = true;
	      return _this;
	    }

	    _createClass(CircularImage, [{
	      key: 'resize',
	      value: function resize() {
	        if (this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined) {
	          if (!this.width) {
	            var diameter = this.options.size * 2;
	            this.width = diameter;
	            this.height = diameter;
	            this._swapToImageResizeWhenImageLoaded = true;
	            this.radius = 0.5 * this.width;
	          }
	        } else {
	          if (this._swapToImageResizeWhenImageLoaded) {
	            this.width = undefined;
	            this.height = undefined;
	            this._swapToImageResizeWhenImageLoaded = false;
	          }
	          this._resizeImage();
	        }
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this.resize();

	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        var size = Math.min(0.5 * this.height, 0.5 * this.width);

	        // draw the background circle. IMPORTANT: the stroke in this method is used by the clip method below.
	        this._drawRawCircle(ctx, x, y, selected, hover, size);

	        // now we draw in the circle, we save so we can revert the clip operation after drawing.
	        ctx.save();
	        // clip is used to use the stroke in drawRawCircle as an area that we can draw in.
	        ctx.clip();
	        // draw the image
	        this._drawImageAtPosition(ctx);
	        // restore so we can again draw on the full canvas
	        ctx.restore();

	        this._drawImageLabel(ctx, x, y, selected);

	        this.updateBoundingBox(x, y);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y) {
	        this.boundingBox.top = y - this.options.size;
	        this.boundingBox.left = x - this.options.size;
	        this.boundingBox.right = x + this.options.size;
	        this.boundingBox.bottom = y + this.options.size;
	        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
	        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
	        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        this.resize(ctx);
	        return this.width * 0.5;
	      }
	    }]);

	    return CircularImage;
	  }(_CircleImageBase3.default);

	  exports.default = CircularImage;

	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NodeBase2 = __webpack_require__(70);

	  var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Database = function (_NodeBase) {
	    _inherits(Database, _NodeBase);

	    function Database(options, body, labelModule) {
	      _classCallCheck(this, Database);

	      return _possibleConstructorReturn(this, (Database.__proto__ || Object.getPrototypeOf(Database)).call(this, options, body, labelModule));
	    }

	    _createClass(Database, [{
	      key: 'resize',
	      value: function resize(ctx, selected) {
	        if (this.width === undefined) {
	          var margin = 5;
	          var textSize = this.labelModule.getTextSize(ctx, selected);
	          var size = textSize.width + 2 * margin;
	          this.width = size;
	          this.height = size;
	          this.radius = 0.5 * this.width;
	        }
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this.resize(ctx, selected);
	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        var neutralborderWidth = this.options.borderWidth;
	        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
	        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
	        ctx.lineWidth = Math.min(this.width, borderWidth);

	        ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;

	        ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;
	        ctx.database(x - this.width / 2, y - this.height * 0.5, this.width, this.height);

	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        // draw the background
	        ctx.fill();
	        // disable shadows for other elements.
	        this.disableShadow(ctx);

	        //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	        ctx.save();
	        // if borders are zero width, they will be drawn with width 1 by default. This prevents that
	        if (borderWidth > 0) {
	          this.enableBorderDashes(ctx);
	          //draw the border
	          ctx.stroke();
	          //disable dashed border for other elements
	          this.disableBorderDashes(ctx);
	        }
	        ctx.restore();

	        this.updateBoundingBox(x, y, ctx, selected);
	        this.labelModule.draw(ctx, x, y, selected);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y, ctx, selected) {
	        this.resize(ctx, selected);

	        this.left = x - this.width * 0.5;
	        this.top = y - this.height * 0.5;

	        this.boundingBox.left = this.left;
	        this.boundingBox.top = this.top;
	        this.boundingBox.bottom = this.top + this.height;
	        this.boundingBox.right = this.left + this.width;
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return Database;
	  }(_NodeBase3.default);

	  exports.default = Database;

	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _ShapeBase2 = __webpack_require__(76);

	  var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Diamond = function (_ShapeBase) {
	    _inherits(Diamond, _ShapeBase);

	    function Diamond(options, body, labelModule) {
	      _classCallCheck(this, Diamond);

	      return _possibleConstructorReturn(this, (Diamond.__proto__ || Object.getPrototypeOf(Diamond)).call(this, options, body, labelModule));
	    }

	    _createClass(Diamond, [{
	      key: 'resize',
	      value: function resize(ctx) {
	        this._resizeShape();
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this._drawShape(ctx, 'diamond', 4, x, y, selected, hover);
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return Diamond;
	  }(_ShapeBase3.default);

	  exports.default = Diamond;

	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NodeBase2 = __webpack_require__(70);

	  var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var ShapeBase = function (_NodeBase) {
	    _inherits(ShapeBase, _NodeBase);

	    function ShapeBase(options, body, labelModule) {
	      _classCallCheck(this, ShapeBase);

	      return _possibleConstructorReturn(this, (ShapeBase.__proto__ || Object.getPrototypeOf(ShapeBase)).call(this, options, body, labelModule));
	    }

	    _createClass(ShapeBase, [{
	      key: '_resizeShape',
	      value: function _resizeShape() {
	        if (this.width === undefined) {
	          var size = 2 * this.options.size;
	          this.width = size;
	          this.height = size;
	          this.radius = 0.5 * this.width;
	        }
	      }
	    }, {
	      key: '_drawShape',
	      value: function _drawShape(ctx, shape, sizeMultiplier, x, y, selected, hover) {
	        this._resizeShape();

	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        var neutralborderWidth = this.options.borderWidth;
	        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
	        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
	        ctx.lineWidth = Math.min(this.width, borderWidth);

	        ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;
	        ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;
	        ctx[shape](x, y, this.options.size);

	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        // draw the background
	        ctx.fill();
	        // disable shadows for other elements.
	        this.disableShadow(ctx);

	        //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	        ctx.save();
	        // if borders are zero width, they will be drawn with width 1 by default. This prevents that
	        if (borderWidth > 0) {
	          this.enableBorderDashes(ctx);
	          //draw the border
	          ctx.stroke();
	          //disable dashed border for other elements
	          this.disableBorderDashes(ctx);
	        }
	        ctx.restore();

	        if (this.options.label !== undefined) {
	          var yLabel = y + 0.5 * this.height + 3; // the + 3 is to offset it a bit below the node.
	          this.labelModule.draw(ctx, x, yLabel, selected, 'hanging');
	        }

	        this.updateBoundingBox(x, y);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y) {
	        this.boundingBox.top = y - this.options.size;
	        this.boundingBox.left = x - this.options.size;
	        this.boundingBox.right = x + this.options.size;
	        this.boundingBox.bottom = y + this.options.size;

	        if (this.options.label !== undefined && this.labelModule.size.width > 0) {
	          this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
	          this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
	          this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + 3);
	        }
	      }
	    }]);

	    return ShapeBase;
	  }(_NodeBase3.default);

	  exports.default = ShapeBase;

	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _ShapeBase2 = __webpack_require__(76);

	  var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Dot = function (_ShapeBase) {
	    _inherits(Dot, _ShapeBase);

	    function Dot(options, body, labelModule) {
	      _classCallCheck(this, Dot);

	      return _possibleConstructorReturn(this, (Dot.__proto__ || Object.getPrototypeOf(Dot)).call(this, options, body, labelModule));
	    }

	    _createClass(Dot, [{
	      key: 'resize',
	      value: function resize(ctx) {
	        this._resizeShape();
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this._drawShape(ctx, 'circle', 2, x, y, selected, hover);
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        this.resize(ctx);
	        return this.options.size;
	      }
	    }]);

	    return Dot;
	  }(_ShapeBase3.default);

	  exports.default = Dot;

	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NodeBase2 = __webpack_require__(70);

	  var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Ellipse = function (_NodeBase) {
	    _inherits(Ellipse, _NodeBase);

	    function Ellipse(options, body, labelModule) {
	      _classCallCheck(this, Ellipse);

	      return _possibleConstructorReturn(this, (Ellipse.__proto__ || Object.getPrototypeOf(Ellipse)).call(this, options, body, labelModule));
	    }

	    _createClass(Ellipse, [{
	      key: 'resize',
	      value: function resize(ctx, selected) {
	        if (this.width === undefined) {
	          var textSize = this.labelModule.getTextSize(ctx, selected);

	          this.height = textSize.height * 2;
	          this.width = textSize.width + this.height;
	          this.radius = 0.5 * this.width;
	        }
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this.resize(ctx, selected);
	        this.left = x - this.width * 0.5;
	        this.top = y - this.height * 0.5;

	        var neutralborderWidth = this.options.borderWidth;
	        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
	        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
	        ctx.lineWidth = Math.min(this.width, borderWidth);

	        ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;

	        ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;
	        ctx.ellipse(this.left, this.top, this.width, this.height);

	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        // draw the background
	        ctx.fill();
	        // disable shadows for other elements.
	        this.disableShadow(ctx);

	        //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	        ctx.save();

	        // if borders are zero width, they will be drawn with width 1 by default. This prevents that
	        if (borderWidth > 0) {
	          this.enableBorderDashes(ctx);
	          //draw the border
	          ctx.stroke();
	          //disable dashed border for other elements
	          this.disableBorderDashes(ctx);
	        }

	        ctx.restore();

	        this.updateBoundingBox(x, y, ctx, selected);
	        this.labelModule.draw(ctx, x, y, selected);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y, ctx, selected) {
	        this.resize(ctx, selected); // just in case

	        this.left = x - this.width * 0.5;
	        this.top = y - this.height * 0.5;

	        this.boundingBox.left = this.left;
	        this.boundingBox.top = this.top;
	        this.boundingBox.bottom = this.top + this.height;
	        this.boundingBox.right = this.left + this.width;
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        this.resize(ctx);
	        var a = this.width * 0.5;
	        var b = this.height * 0.5;
	        var w = Math.sin(angle) * a;
	        var h = Math.cos(angle) * b;
	        return a * b / Math.sqrt(w * w + h * h);
	      }
	    }]);

	    return Ellipse;
	  }(_NodeBase3.default);

	  exports.default = Ellipse;

	/***/ },
	/* 79 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NodeBase2 = __webpack_require__(70);

	  var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Icon = function (_NodeBase) {
	    _inherits(Icon, _NodeBase);

	    function Icon(options, body, labelModule) {
	      _classCallCheck(this, Icon);

	      return _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).call(this, options, body, labelModule));
	    }

	    _createClass(Icon, [{
	      key: 'resize',
	      value: function resize(ctx) {
	        if (this.width === undefined) {
	          var margin = 5;
	          var iconSize = {
	            width: Number(this.options.icon.size),
	            height: Number(this.options.icon.size)
	          };
	          this.width = iconSize.width + 2 * margin;
	          this.height = iconSize.height + 2 * margin;
	          this.radius = 0.5 * this.width;
	        }
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this.resize(ctx);
	        this.options.icon.size = this.options.icon.size || 50;

	        this.left = x - this.width * 0.5;
	        this.top = y - this.height * 0.5;
	        this._icon(ctx, x, y, selected);

	        if (this.options.label !== undefined) {
	          var iconTextSpacing = 5;
	          this.labelModule.draw(ctx, x, y + this.height * 0.5 + iconTextSpacing, selected);
	        }

	        this.updateBoundingBox(x, y);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y) {
	        this.boundingBox.top = y - this.options.icon.size * 0.5;
	        this.boundingBox.left = x - this.options.icon.size * 0.5;
	        this.boundingBox.right = x + this.options.icon.size * 0.5;
	        this.boundingBox.bottom = y + this.options.icon.size * 0.5;

	        if (this.options.label !== undefined && this.labelModule.size.width > 0) {
	          var iconTextSpacing = 5;
	          this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
	          this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
	          this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);
	        }
	      }
	    }, {
	      key: '_icon',
	      value: function _icon(ctx, x, y, selected) {
	        var iconSize = Number(this.options.icon.size);

	        if (this.options.icon.code !== undefined) {
	          ctx.font = (selected ? "bold " : "") + iconSize + "px " + this.options.icon.face;

	          // draw icon
	          ctx.fillStyle = this.options.icon.color || "black";
	          ctx.textAlign = "center";
	          ctx.textBaseline = "middle";

	          // draw shadow if enabled
	          this.enableShadow(ctx);
	          ctx.fillText(this.options.icon.code, x, y);

	          // disable shadows for other elements.
	          this.disableShadow(ctx);
	        } else {
	          console.error('When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.');
	        }
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return Icon;
	  }(_NodeBase3.default);

	  exports.default = Icon;

	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _CircleImageBase2 = __webpack_require__(72);

	  var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Image = function (_CircleImageBase) {
	    _inherits(Image, _CircleImageBase);

	    function Image(options, body, labelModule, imageObj) {
	      _classCallCheck(this, Image);

	      var _this = _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).call(this, options, body, labelModule));

	      _this.imageObj = imageObj;
	      return _this;
	    }

	    _createClass(Image, [{
	      key: 'resize',
	      value: function resize() {
	        this._resizeImage();
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this.resize();
	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        if (this.options.shapeProperties.useBorderWithImage === true) {
	          var neutralborderWidth = this.options.borderWidth;
	          var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
	          var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
	          ctx.lineWidth = Math.min(this.width, borderWidth);

	          ctx.beginPath();

	          // setup the line properties.
	          ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;

	          // set a fillstyle
	          ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;

	          // draw a rectangle to form the border around. This rectangle is filled so the opacity of a picture (in future vis releases?) can be used to tint the image
	          ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);
	          ctx.fill();

	          //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	          ctx.save();
	          // if borders are zero width, they will be drawn with width 1 by default. This prevents that
	          if (borderWidth > 0) {
	            this.enableBorderDashes(ctx);
	            //draw the border
	            ctx.stroke();
	            //disable dashed border for other elements
	            this.disableBorderDashes(ctx);
	          }
	          ctx.restore();

	          ctx.closePath();
	        }

	        this._drawImageAtPosition(ctx);

	        this._drawImageLabel(ctx, x, y, selected || hover);

	        this.updateBoundingBox(x, y);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y) {
	        this.resize();
	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        this.boundingBox.top = this.top;
	        this.boundingBox.left = this.left;
	        this.boundingBox.right = this.left + this.width;
	        this.boundingBox.bottom = this.top + this.height;

	        if (this.options.label !== undefined && this.labelModule.size.width > 0) {
	          this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
	          this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
	          this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
	        }
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return Image;
	  }(_CircleImageBase3.default);

	  exports.default = Image;

	/***/ },
	/* 81 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _ShapeBase2 = __webpack_require__(76);

	  var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Square = function (_ShapeBase) {
	    _inherits(Square, _ShapeBase);

	    function Square(options, body, labelModule) {
	      _classCallCheck(this, Square);

	      return _possibleConstructorReturn(this, (Square.__proto__ || Object.getPrototypeOf(Square)).call(this, options, body, labelModule));
	    }

	    _createClass(Square, [{
	      key: 'resize',
	      value: function resize() {
	        this._resizeShape();
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this._drawShape(ctx, 'square', 2, x, y, selected, hover);
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return Square;
	  }(_ShapeBase3.default);

	  exports.default = Square;

	/***/ },
	/* 82 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _ShapeBase2 = __webpack_require__(76);

	  var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Star = function (_ShapeBase) {
	    _inherits(Star, _ShapeBase);

	    function Star(options, body, labelModule) {
	      _classCallCheck(this, Star);

	      return _possibleConstructorReturn(this, (Star.__proto__ || Object.getPrototypeOf(Star)).call(this, options, body, labelModule));
	    }

	    _createClass(Star, [{
	      key: 'resize',
	      value: function resize(ctx) {
	        this._resizeShape();
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this._drawShape(ctx, 'star', 4, x, y, selected, hover);
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return Star;
	  }(_ShapeBase3.default);

	  exports.default = Star;

	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NodeBase2 = __webpack_require__(70);

	  var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Text = function (_NodeBase) {
	    _inherits(Text, _NodeBase);

	    function Text(options, body, labelModule) {
	      _classCallCheck(this, Text);

	      return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this, options, body, labelModule));
	    }

	    _createClass(Text, [{
	      key: 'resize',
	      value: function resize(ctx, selected) {
	        if (this.width === undefined) {
	          var margin = 5;
	          var textSize = this.labelModule.getTextSize(ctx, selected);
	          this.width = textSize.width + 2 * margin;
	          this.height = textSize.height + 2 * margin;
	          this.radius = 0.5 * this.width;
	        }
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this.resize(ctx, selected || hover);
	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        this.labelModule.draw(ctx, x, y, selected || hover);

	        // disable shadows for other elements.
	        this.disableShadow(ctx);

	        this.updateBoundingBox(x, y, ctx, selected);
	      }
	    }, {
	      key: 'updateBoundingBox',
	      value: function updateBoundingBox(x, y, ctx, selected) {
	        this.resize(ctx, selected);

	        this.left = x - this.width / 2;
	        this.top = y - this.height / 2;

	        this.boundingBox.top = this.top;
	        this.boundingBox.left = this.left;
	        this.boundingBox.right = this.left + this.width;
	        this.boundingBox.bottom = this.top + this.height;
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return Text;
	  }(_NodeBase3.default);

	  exports.default = Text;

	/***/ },
	/* 84 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _ShapeBase2 = __webpack_require__(76);

	  var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var Triangle = function (_ShapeBase) {
	    _inherits(Triangle, _ShapeBase);

	    function Triangle(options, body, labelModule) {
	      _classCallCheck(this, Triangle);

	      return _possibleConstructorReturn(this, (Triangle.__proto__ || Object.getPrototypeOf(Triangle)).call(this, options, body, labelModule));
	    }

	    _createClass(Triangle, [{
	      key: 'resize',
	      value: function resize(ctx) {
	        this._resizeShape();
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this._drawShape(ctx, 'triangle', 3, x, y, selected, hover);
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return Triangle;
	  }(_ShapeBase3.default);

	  exports.default = Triangle;

	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _ShapeBase2 = __webpack_require__(76);

	  var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var TriangleDown = function (_ShapeBase) {
	    _inherits(TriangleDown, _ShapeBase);

	    function TriangleDown(options, body, labelModule) {
	      _classCallCheck(this, TriangleDown);

	      return _possibleConstructorReturn(this, (TriangleDown.__proto__ || Object.getPrototypeOf(TriangleDown)).call(this, options, body, labelModule));
	    }

	    _createClass(TriangleDown, [{
	      key: 'resize',
	      value: function resize(ctx) {
	        this._resizeShape();
	      }
	    }, {
	      key: 'draw',
	      value: function draw(ctx, x, y, selected, hover) {
	        this._drawShape(ctx, 'triangleDown', 3, x, y, selected, hover);
	      }
	    }, {
	      key: 'distanceToBorder',
	      value: function distanceToBorder(ctx, angle) {
	        return this._distanceToBorder(ctx, angle);
	      }
	    }]);

	    return TriangleDown;
	  }(_ShapeBase3.default);

	  exports.default = TriangleDown;

	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _Edge = __webpack_require__(87);

	  var _Edge2 = _interopRequireDefault(_Edge);

	  var _Label = __webpack_require__(68);

	  var _Label2 = _interopRequireDefault(_Label);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);
	  var DataSet = __webpack_require__(9);
	  var DataView = __webpack_require__(11);

	  var EdgesHandler = function () {
	    function EdgesHandler(body, images, groups) {
	      var _this = this;

	      _classCallCheck(this, EdgesHandler);

	      this.body = body;
	      this.images = images;
	      this.groups = groups;

	      // create the edge API in the body container
	      this.body.functions.createEdge = this.create.bind(this);

	      this.edgesListeners = {
	        add: function add(event, params) {
	          _this.add(params.items);
	        },
	        update: function update(event, params) {
	          _this.update(params.items);
	        },
	        remove: function remove(event, params) {
	          _this.remove(params.items);
	        }
	      };

	      this.options = {};
	      this.defaultOptions = {
	        arrows: {
	          to: { enabled: false, scaleFactor: 1, type: 'arrow' }, // boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}
	          middle: { enabled: false, scaleFactor: 1, type: 'arrow' },
	          from: { enabled: false, scaleFactor: 1, type: 'arrow' }
	        },
	        arrowStrikethrough: true,
	        color: {
	          color: '#848484',
	          highlight: '#848484',
	          hover: '#848484',
	          inherit: 'from',
	          opacity: 1.0
	        },
	        dashes: false,
	        font: {
	          color: '#343434',
	          size: 14, // px
	          face: 'arial',
	          background: 'none',
	          strokeWidth: 2, // px
	          strokeColor: '#ffffff',
	          align: 'horizontal'
	        },
	        hidden: false,
	        hoverWidth: 1.5,
	        label: undefined,
	        labelHighlightBold: true,
	        length: undefined,
	        physics: true,
	        scaling: {
	          min: 1,
	          max: 15,
	          label: {
	            enabled: true,
	            min: 14,
	            max: 30,
	            maxVisible: 30,
	            drawThreshold: 5
	          },
	          customScalingFunction: function customScalingFunction(min, max, total, value) {
	            if (max === min) {
	              return 0.5;
	            } else {
	              var scale = 1 / (max - min);
	              return Math.max(0, (value - min) * scale);
	            }
	          }
	        },
	        selectionWidth: 1.5,
	        selfReferenceSize: 20,
	        shadow: {
	          enabled: false,
	          color: 'rgba(0,0,0,0.5)',
	          size: 10,
	          x: 5,
	          y: 5
	        },
	        smooth: {
	          enabled: true,
	          type: "dynamic",
	          forceDirection: 'none',
	          roundness: 0.5
	        },
	        title: undefined,
	        width: 1,
	        value: undefined
	      };

	      util.extend(this.options, this.defaultOptions);

	      this.bindEventListeners();
	    }

	    _createClass(EdgesHandler, [{
	      key: 'bindEventListeners',
	      value: function bindEventListeners() {
	        var _this2 = this;

	        // this allows external modules to force all dynamic curves to turn static.
	        this.body.emitter.on("_forceDisableDynamicCurves", function (type) {
	          if (type === 'dynamic') {
	            type = 'continuous';
	          }
	          var emitChange = false;
	          for (var edgeId in _this2.body.edges) {
	            if (_this2.body.edges.hasOwnProperty(edgeId)) {
	              var edge = _this2.body.edges[edgeId];
	              var edgeData = _this2.body.data.edges._data[edgeId];

	              // only forcibly remove the smooth curve if the data has been set of the edge has the smooth curves defined.
	              // this is because a change in the global would not affect these curves.
	              if (edgeData !== undefined) {
	                var edgeOptions = edgeData.smooth;
	                if (edgeOptions !== undefined) {
	                  if (edgeOptions.enabled === true && edgeOptions.type === 'dynamic') {
	                    if (type === undefined) {
	                      edge.setOptions({ smooth: false });
	                    } else {
	                      edge.setOptions({ smooth: { type: type } });
	                    }
	                    emitChange = true;
	                  }
	                }
	              }
	            }
	          }
	          if (emitChange === true) {
	            _this2.body.emitter.emit("_dataChanged");
	          }
	        });

	        // this is called when options of EXISTING nodes or edges have changed.
	        this.body.emitter.on("_dataUpdated", function () {
	          _this2.reconnectEdges();
	          _this2.markAllEdgesAsDirty();
	        });

	        // refresh the edges. Used when reverting from hierarchical layout
	        this.body.emitter.on("refreshEdges", this.refresh.bind(this));
	        this.body.emitter.on("refresh", this.refresh.bind(this));
	        this.body.emitter.on("destroy", function () {
	          util.forEach(_this2.edgesListeners, function (callback, event) {
	            if (_this2.body.data.edges) _this2.body.data.edges.off(event, callback);
	          });
	          delete _this2.body.functions.createEdge;
	          delete _this2.edgesListeners.add;
	          delete _this2.edgesListeners.update;
	          delete _this2.edgesListeners.remove;
	          delete _this2.edgesListeners;
	        });
	      }
	    }, {
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (options !== undefined) {
	          // use the parser from the Edge class to fill in all shorthand notations
	          _Edge2.default.parseOptions(this.options, options);

	          // handle multiple input cases for color
	          if (options.color !== undefined) {
	            this.markAllEdgesAsDirty();
	          }

	          // update smooth settings in all edges
	          var dataChanged = false;
	          if (options.smooth !== undefined) {
	            for (var edgeId in this.body.edges) {
	              if (this.body.edges.hasOwnProperty(edgeId)) {
	                dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;
	              }
	            }
	          }

	          // update fonts in all edges
	          if (options.font !== undefined) {
	            // use the parser from the Label class to fill in all shorthand notations
	            _Label2.default.parseOptions(this.options.font, options);
	            for (var _edgeId in this.body.edges) {
	              if (this.body.edges.hasOwnProperty(_edgeId)) {
	                this.body.edges[_edgeId].updateLabelModule();
	              }
	            }
	          }

	          // update the state of the variables if needed
	          if (options.hidden !== undefined || options.physics !== undefined || dataChanged === true) {
	            this.body.emitter.emit('_dataChanged');
	          }
	        }
	      }

	      /**
	       * Load edges by reading the data table
	       * @param {Array | DataSet | DataView} edges    The data containing the edges.
	       * @private
	       * @private
	       */

	    }, {
	      key: 'setData',
	      value: function setData(edges) {
	        var _this3 = this;

	        var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        var oldEdgesData = this.body.data.edges;

	        if (edges instanceof DataSet || edges instanceof DataView) {
	          this.body.data.edges = edges;
	        } else if (Array.isArray(edges)) {
	          this.body.data.edges = new DataSet();
	          this.body.data.edges.add(edges);
	        } else if (!edges) {
	          this.body.data.edges = new DataSet();
	        } else {
	          throw new TypeError('Array or DataSet expected');
	        }

	        // TODO: is this null or undefined or false?
	        if (oldEdgesData) {
	          // unsubscribe from old dataset
	          util.forEach(this.edgesListeners, function (callback, event) {
	            oldEdgesData.off(event, callback);
	          });
	        }

	        // remove drawn edges
	        this.body.edges = {};

	        // TODO: is this null or undefined or false?
	        if (this.body.data.edges) {
	          // subscribe to new dataset
	          util.forEach(this.edgesListeners, function (callback, event) {
	            _this3.body.data.edges.on(event, callback);
	          });

	          // draw all new nodes
	          var ids = this.body.data.edges.getIds();
	          this.add(ids, true);
	        }

	        if (doNotEmit === false) {
	          this.body.emitter.emit("_dataChanged");
	        }
	      }

	      /**
	       * Add edges
	       * @param {Number[] | String[]} ids
	       * @private
	       */

	    }, {
	      key: 'add',
	      value: function add(ids) {
	        var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        var edges = this.body.edges;
	        var edgesData = this.body.data.edges;

	        for (var i = 0; i < ids.length; i++) {
	          var id = ids[i];

	          var oldEdge = edges[id];
	          if (oldEdge) {
	            oldEdge.disconnect();
	          }

	          var data = edgesData.get(id, { "showInternalIds": true });
	          edges[id] = this.create(data);
	        }

	        if (doNotEmit === false) {
	          this.body.emitter.emit("_dataChanged");
	        }
	      }

	      /**
	       * Update existing edges, or create them when not yet existing
	       * @param {Number[] | String[]} ids
	       * @private
	       */

	    }, {
	      key: 'update',
	      value: function update(ids) {
	        var edges = this.body.edges;
	        var edgesData = this.body.data.edges;
	        var dataChanged = false;
	        for (var i = 0; i < ids.length; i++) {
	          var id = ids[i];
	          var data = edgesData.get(id);
	          var edge = edges[id];
	          if (edge !== undefined) {
	            // update edge
	            edge.disconnect();
	            dataChanged = edge.setOptions(data) || dataChanged; // if a support node is added, data can be changed.
	            edge.connect();
	          } else {
	            // create edge
	            this.body.edges[id] = this.create(data);
	            dataChanged = true;
	          }
	        }

	        if (dataChanged === true) {
	          this.body.emitter.emit("_dataChanged");
	        } else {
	          this.body.emitter.emit("_dataUpdated");
	        }
	      }

	      /**
	       * Remove existing edges. Non existing ids will be ignored
	       * @param {Number[] | String[]} ids
	       * @private
	       */

	    }, {
	      key: 'remove',
	      value: function remove(ids) {
	        var edges = this.body.edges;
	        for (var i = 0; i < ids.length; i++) {
	          var id = ids[i];
	          var edge = edges[id];
	          if (edge !== undefined) {
	            edge.cleanup();
	            edge.disconnect();
	            delete edges[id];
	          }
	        }

	        this.body.emitter.emit("_dataChanged");
	      }
	    }, {
	      key: 'refresh',
	      value: function refresh() {
	        var edges = this.body.edges;
	        for (var edgeId in edges) {
	          var edge = undefined;
	          if (edges.hasOwnProperty(edgeId)) {
	            edge = edges[edgeId];
	          }
	          var data = this.body.data.edges._data[edgeId];
	          if (edge !== undefined && data !== undefined) {
	            edge.setOptions(data);
	          }
	        }
	      }
	    }, {
	      key: 'create',
	      value: function create(properties) {
	        return new _Edge2.default(properties, this.body, this.options);
	      }
	    }, {
	      key: 'markAllEdgesAsDirty',
	      value: function markAllEdgesAsDirty() {
	        for (var edgeId in this.body.edges) {
	          this.body.edges[edgeId].edgeType.colorDirty = true;
	        }
	      }

	      /**
	       * Reconnect all edges
	       * @private
	       */

	    }, {
	      key: 'reconnectEdges',
	      value: function reconnectEdges() {
	        var id;
	        var nodes = this.body.nodes;
	        var edges = this.body.edges;

	        for (id in nodes) {
	          if (nodes.hasOwnProperty(id)) {
	            nodes[id].edges = [];
	          }
	        }

	        for (id in edges) {
	          if (edges.hasOwnProperty(id)) {
	            var edge = edges[id];
	            edge.from = null;
	            edge.to = null;
	            edge.connect();
	          }
	        }
	      }
	    }, {
	      key: 'getConnectedNodes',
	      value: function getConnectedNodes(edgeId) {
	        var nodeList = [];
	        if (this.body.edges[edgeId] !== undefined) {
	          var edge = this.body.edges[edgeId];
	          if (edge.fromId) {
	            nodeList.push(edge.fromId);
	          }
	          if (edge.toId) {
	            nodeList.push(edge.toId);
	          }
	        }
	        return nodeList;
	      }
	    }]);

	    return EdgesHandler;
	  }();

	  exports.default = EdgesHandler;

	/***/ },
	/* 87 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _Label = __webpack_require__(68);

	  var _Label2 = _interopRequireDefault(_Label);

	  var _CubicBezierEdge = __webpack_require__(88);

	  var _CubicBezierEdge2 = _interopRequireDefault(_CubicBezierEdge);

	  var _BezierEdgeDynamic = __webpack_require__(92);

	  var _BezierEdgeDynamic2 = _interopRequireDefault(_BezierEdgeDynamic);

	  var _BezierEdgeStatic = __webpack_require__(93);

	  var _BezierEdgeStatic2 = _interopRequireDefault(_BezierEdgeStatic);

	  var _StraightEdge = __webpack_require__(94);

	  var _StraightEdge2 = _interopRequireDefault(_StraightEdge);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  /**
	   * @class Edge
	   *
	   * A edge connects two nodes
	   * @param {Object} properties     Object with options. Must contain
	   *                                At least options from and to.
	   *                                Available options: from (number),
	   *                                to (number), label (string, color (string),
	   *                                width (number), style (string),
	   *                                length (number), title (string)
	   * @param {Network} network       A Network object, used to find and edge to
	   *                                nodes.
	   * @param {Object} constants      An object with default values for
	   *                                example for the color
	   */
	  var Edge = function () {
	    function Edge(options, body, globalOptions) {
	      _classCallCheck(this, Edge);

	      if (body === undefined) {
	        throw "No body provided";
	      }
	      this.options = util.bridgeObject(globalOptions);
	      this.globalOptions = globalOptions;
	      this.body = body;

	      // initialize variables
	      this.id = undefined;
	      this.fromId = undefined;
	      this.toId = undefined;
	      this.selected = false;
	      this.hover = false;
	      this.labelDirty = true;
	      this.colorDirty = true;

	      this.baseWidth = this.options.width;
	      this.baseFontSize = this.options.font.size;

	      this.from = undefined; // a node
	      this.to = undefined; // a node

	      this.edgeType = undefined;

	      this.connected = false;

	      this.labelModule = new _Label2.default(this.body, this.options, true /* It's an edge label */);

	      this.setOptions(options);
	    }

	    /**
	     * Set or overwrite options for the edge
	     * @param {Object} options  an object with options
	     * @param doNotEmit
	     */


	    _createClass(Edge, [{
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (!options) {
	          return;
	        }
	        this.colorDirty = true;

	        Edge.parseOptions(this.options, options, true, this.globalOptions);

	        if (options.id !== undefined) {
	          this.id = options.id;
	        }
	        if (options.from !== undefined) {
	          this.fromId = options.from;
	        }
	        if (options.to !== undefined) {
	          this.toId = options.to;
	        }
	        if (options.title !== undefined) {
	          this.title = options.title;
	        }
	        if (options.value !== undefined) {
	          options.value = parseFloat(options.value);
	        }

	        // update label Module
	        this.updateLabelModule();

	        var dataChanged = this.updateEdgeType();

	        // if anything has been updates, reset the selection width and the hover width
	        this._setInteractionWidths();

	        // A node is connected when it has a from and to node that both exist in the network.body.nodes.
	        this.connect();

	        if (options.hidden !== undefined || options.physics !== undefined) {
	          dataChanged = true;
	        }

	        return dataChanged;
	      }
	    }, {
	      key: 'updateLabelModule',


	      /**
	       * update the options in the label module
	       */
	      value: function updateLabelModule() {
	        this.labelModule.setOptions(this.options, true);
	        if (this.labelModule.baseSize !== undefined) {
	          this.baseFontSize = this.labelModule.baseSize;
	        }
	      }

	      /**
	       * update the edge type, set the options
	       * @returns {boolean}
	       */

	    }, {
	      key: 'updateEdgeType',
	      value: function updateEdgeType() {
	        var dataChanged = false;
	        var changeInType = true;
	        var smooth = this.options.smooth;
	        if (this.edgeType !== undefined) {
	          if (this.edgeType instanceof _BezierEdgeDynamic2.default && smooth.enabled === true && smooth.type === 'dynamic') {
	            changeInType = false;
	          }
	          if (this.edgeType instanceof _CubicBezierEdge2.default && smooth.enabled === true && smooth.type === 'cubicBezier') {
	            changeInType = false;
	          }
	          if (this.edgeType instanceof _BezierEdgeStatic2.default && smooth.enabled === true && smooth.type !== 'dynamic' && smooth.type !== 'cubicBezier') {
	            changeInType = false;
	          }
	          if (this.edgeType instanceof _StraightEdge2.default && smooth.enabled === false) {
	            changeInType = false;
	          }

	          if (changeInType === true) {
	            dataChanged = this.cleanup();
	          }
	        }

	        if (changeInType === true) {
	          if (this.options.smooth.enabled === true) {
	            if (this.options.smooth.type === 'dynamic') {
	              dataChanged = true;
	              this.edgeType = new _BezierEdgeDynamic2.default(this.options, this.body, this.labelModule);
	            } else if (this.options.smooth.type === 'cubicBezier') {
	              this.edgeType = new _CubicBezierEdge2.default(this.options, this.body, this.labelModule);
	            } else {
	              this.edgeType = new _BezierEdgeStatic2.default(this.options, this.body, this.labelModule);
	            }
	          } else {
	            this.edgeType = new _StraightEdge2.default(this.options, this.body, this.labelModule);
	          }
	        } else {
	          // if nothing changes, we just set the options.
	          this.edgeType.setOptions(this.options);
	        }

	        return dataChanged;
	      }

	      /**
	       * Connect an edge to its nodes
	       */

	    }, {
	      key: 'connect',
	      value: function connect() {
	        this.disconnect();

	        this.from = this.body.nodes[this.fromId] || undefined;
	        this.to = this.body.nodes[this.toId] || undefined;
	        this.connected = this.from !== undefined && this.to !== undefined;

	        if (this.connected === true) {
	          this.from.attachEdge(this);
	          this.to.attachEdge(this);
	        } else {
	          if (this.from) {
	            this.from.detachEdge(this);
	          }
	          if (this.to) {
	            this.to.detachEdge(this);
	          }
	        }

	        this.edgeType.connect();
	      }

	      /**
	       * Disconnect an edge from its nodes
	       */

	    }, {
	      key: 'disconnect',
	      value: function disconnect() {
	        if (this.from) {
	          this.from.detachEdge(this);
	          this.from = undefined;
	        }
	        if (this.to) {
	          this.to.detachEdge(this);
	          this.to = undefined;
	        }

	        this.connected = false;
	      }

	      /**
	       * get the title of this edge.
	       * @return {string} title    The title of the edge, or undefined when no title
	       *                           has been set.
	       */

	    }, {
	      key: 'getTitle',
	      value: function getTitle() {
	        return this.title;
	      }

	      /**
	       * check if this node is selecte
	       * @return {boolean} selected   True if node is selected, else false
	       */

	    }, {
	      key: 'isSelected',
	      value: function isSelected() {
	        return this.selected;
	      }

	      /**
	       * Retrieve the value of the edge. Can be undefined
	       * @return {Number} value
	       */

	    }, {
	      key: 'getValue',
	      value: function getValue() {
	        return this.options.value;
	      }

	      /**
	       * Adjust the value range of the edge. The edge will adjust it's width
	       * based on its value.
	       * @param {Number} min
	       * @param {Number} max
	       * @param total
	       */

	    }, {
	      key: 'setValueRange',
	      value: function setValueRange(min, max, total) {
	        if (this.options.value !== undefined) {
	          var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);
	          var widthDiff = this.options.scaling.max - this.options.scaling.min;
	          if (this.options.scaling.label.enabled === true) {
	            var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
	            this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
	          }
	          this.options.width = this.options.scaling.min + scale * widthDiff;
	        } else {
	          this.options.width = this.baseWidth;
	          this.options.font.size = this.baseFontSize;
	        }

	        this._setInteractionWidths();
	        this.updateLabelModule();
	      }
	    }, {
	      key: '_setInteractionWidths',
	      value: function _setInteractionWidths() {
	        if (typeof this.options.hoverWidth === 'function') {
	          this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);
	        } else {
	          this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;
	        }

	        if (typeof this.options.selectionWidth === 'function') {
	          this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);
	        } else {
	          this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
	        }
	      }

	      /**
	       * Redraw a edge
	       * Draw this edge in the given canvas
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	       * @param {CanvasRenderingContext2D}   ctx
	       */

	    }, {
	      key: 'draw',
	      value: function draw(ctx) {
	        // get the via node from the edge type
	        var viaNode = this.edgeType.getViaNode();
	        var arrowData = {};

	        // restore edge targets to defaults
	        this.edgeType.fromPoint = this.edgeType.from;
	        this.edgeType.toPoint = this.edgeType.to;

	        // from and to arrows give a different end point for edges. we set them here
	        if (this.options.arrows.from.enabled === true) {
	          arrowData.from = this.edgeType.getArrowData(ctx, 'from', viaNode, this.selected, this.hover);
	          if (this.options.arrowStrikethrough === false) this.edgeType.fromPoint = arrowData.from.core;
	        }
	        if (this.options.arrows.to.enabled === true) {
	          arrowData.to = this.edgeType.getArrowData(ctx, 'to', viaNode, this.selected, this.hover);
	          if (this.options.arrowStrikethrough === false) this.edgeType.toPoint = arrowData.to.core;
	        }

	        // the middle arrow depends on the line, which can depend on the to and from arrows so we do this one lastly.
	        if (this.options.arrows.middle.enabled === true) {
	          arrowData.middle = this.edgeType.getArrowData(ctx, 'middle', viaNode, this.selected, this.hover);
	        }

	        // draw everything
	        this.edgeType.drawLine(ctx, this.selected, this.hover, viaNode);
	        this.drawArrows(ctx, arrowData);
	        this.drawLabel(ctx, viaNode);
	      }
	    }, {
	      key: 'drawArrows',
	      value: function drawArrows(ctx, arrowData) {
	        if (this.options.arrows.from.enabled === true) {
	          this.edgeType.drawArrowHead(ctx, this.selected, this.hover, arrowData.from);
	        }
	        if (this.options.arrows.middle.enabled === true) {
	          this.edgeType.drawArrowHead(ctx, this.selected, this.hover, arrowData.middle);
	        }
	        if (this.options.arrows.to.enabled === true) {
	          this.edgeType.drawArrowHead(ctx, this.selected, this.hover, arrowData.to);
	        }
	      }
	    }, {
	      key: 'drawLabel',
	      value: function drawLabel(ctx, viaNode) {
	        if (this.options.label !== undefined) {
	          // set style
	          var node1 = this.from;
	          var node2 = this.to;
	          var selected = this.from.selected || this.to.selected || this.selected;
	          if (node1.id != node2.id) {
	            this.labelModule.pointToSelf = false;
	            var point = this.edgeType.getPoint(0.5, viaNode);
	            ctx.save();

	            // if the label has to be rotated:
	            if (this.options.font.align !== "horizontal") {
	              this.labelModule.calculateLabelSize(ctx, selected, point.x, point.y);
	              ctx.translate(point.x, this.labelModule.size.yLine);
	              this._rotateForLabelAlignment(ctx);
	            }

	            // draw the label
	            this.labelModule.draw(ctx, point.x, point.y, selected);
	            ctx.restore();
	          } else {
	            // Ignore the orientations.
	            this.labelModule.pointToSelf = true;
	            var x, y;
	            var radius = this.options.selfReferenceSize;
	            if (node1.shape.width > node1.shape.height) {
	              x = node1.x + node1.shape.width * 0.5;
	              y = node1.y - radius;
	            } else {
	              x = node1.x + radius;
	              y = node1.y - node1.shape.height * 0.5;
	            }
	            point = this._pointOnCircle(x, y, radius, 0.125);
	            this.labelModule.draw(ctx, point.x, point.y, selected);
	          }
	        }
	      }

	      /**
	       * Check if this object is overlapping with the provided object
	       * @param {Object} obj   an object with parameters left, top
	       * @return {boolean}     True if location is located on the edge
	       */

	    }, {
	      key: 'isOverlappingWith',
	      value: function isOverlappingWith(obj) {
	        if (this.connected) {
	          var distMax = 10;
	          var xFrom = this.from.x;
	          var yFrom = this.from.y;
	          var xTo = this.to.x;
	          var yTo = this.to.y;
	          var xObj = obj.left;
	          var yObj = obj.top;

	          var dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);

	          return dist < distMax;
	        } else {
	          return false;
	        }
	      }

	      /**
	       * Rotates the canvas so the text is most readable
	       * @param {CanvasRenderingContext2D} ctx
	       * @private
	       */

	    }, {
	      key: '_rotateForLabelAlignment',
	      value: function _rotateForLabelAlignment(ctx) {
	        var dy = this.from.y - this.to.y;
	        var dx = this.from.x - this.to.x;
	        var angleInDegrees = Math.atan2(dy, dx);

	        // rotate so label it is readable
	        if (angleInDegrees < -1 && dx < 0 || angleInDegrees > 0 && dx < 0) {
	          angleInDegrees = angleInDegrees + Math.PI;
	        }

	        ctx.rotate(angleInDegrees);
	      }

	      /**
	       * Get a point on a circle
	       * @param {Number} x
	       * @param {Number} y
	       * @param {Number} radius
	       * @param {Number} percentage. Value between 0 (line start) and 1 (line end)
	       * @return {Object} point
	       * @private
	       */

	    }, {
	      key: '_pointOnCircle',
	      value: function _pointOnCircle(x, y, radius, percentage) {
	        var angle = percentage * 2 * Math.PI;
	        return {
	          x: x + radius * Math.cos(angle),
	          y: y - radius * Math.sin(angle)
	        };
	      }
	    }, {
	      key: 'select',
	      value: function select() {
	        this.selected = true;
	      }
	    }, {
	      key: 'unselect',
	      value: function unselect() {
	        this.selected = false;
	      }

	      /**
	       * cleans all required things on delete
	       * @returns {*}
	       */

	    }, {
	      key: 'cleanup',
	      value: function cleanup() {
	        return this.edgeType.cleanup();
	      }
	    }], [{
	      key: 'parseOptions',
	      value: function parseOptions(parentOptions, newOptions) {
	        var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	        var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	        var fields = ['arrowStrikethrough', 'id', 'from', 'hidden', 'hoverWidth', 'label', 'labelHighlightBold', 'length', 'line', 'opacity', 'physics', 'scaling', 'selectionWidth', 'selfReferenceSize', 'to', 'title', 'value', 'width'];

	        // only deep extend the items in the field array. These do not have shorthand.
	        util.selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);

	        util.mergeOptions(parentOptions, newOptions, 'smooth', allowDeletion, globalOptions);
	        util.mergeOptions(parentOptions, newOptions, 'shadow', allowDeletion, globalOptions);

	        if (newOptions.dashes !== undefined && newOptions.dashes !== null) {
	          parentOptions.dashes = newOptions.dashes;
	        } else if (allowDeletion === true && newOptions.dashes === null) {
	          parentOptions.dashes = Object.create(globalOptions.dashes); // this sets the pointer of the option back to the global option.
	        }

	        // set the scaling newOptions
	        if (newOptions.scaling !== undefined && newOptions.scaling !== null) {
	          if (newOptions.scaling.min !== undefined) {
	            parentOptions.scaling.min = newOptions.scaling.min;
	          }
	          if (newOptions.scaling.max !== undefined) {
	            parentOptions.scaling.max = newOptions.scaling.max;
	          }
	          util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', allowDeletion, globalOptions.scaling);
	        } else if (allowDeletion === true && newOptions.scaling === null) {
	          parentOptions.scaling = Object.create(globalOptions.scaling); // this sets the pointer of the option back to the global option.
	        }

	        // handle multiple input cases for arrows
	        if (newOptions.arrows !== undefined && newOptions.arrows !== null) {
	          if (typeof newOptions.arrows === 'string') {
	            var arrows = newOptions.arrows.toLowerCase();
	            parentOptions.arrows.to.enabled = arrows.indexOf("to") != -1;
	            parentOptions.arrows.middle.enabled = arrows.indexOf("middle") != -1;
	            parentOptions.arrows.from.enabled = arrows.indexOf("from") != -1;
	          } else if (_typeof(newOptions.arrows) === 'object') {
	            util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'to', allowDeletion, globalOptions.arrows);
	            util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'middle', allowDeletion, globalOptions.arrows);
	            util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'from', allowDeletion, globalOptions.arrows);
	          } else {
	            throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + JSON.stringify(newOptions.arrows));
	          }
	        } else if (allowDeletion === true && newOptions.arrows === null) {
	          parentOptions.arrows = Object.create(globalOptions.arrows); // this sets the pointer of the option back to the global option.
	        }

	        // handle multiple input cases for color
	        if (newOptions.color !== undefined && newOptions.color !== null) {
	          // make a copy of the parent object in case this is referring to the global one (due to object create once, then update)
	          parentOptions.color = util.deepExtend({}, parentOptions.color, true);
	          if (util.isString(newOptions.color)) {
	            parentOptions.color.color = newOptions.color;
	            parentOptions.color.highlight = newOptions.color;
	            parentOptions.color.hover = newOptions.color;
	            parentOptions.color.inherit = false;
	          } else {
	            var colorsDefined = false;
	            if (newOptions.color.color !== undefined) {
	              parentOptions.color.color = newOptions.color.color;colorsDefined = true;
	            }
	            if (newOptions.color.highlight !== undefined) {
	              parentOptions.color.highlight = newOptions.color.highlight;colorsDefined = true;
	            }
	            if (newOptions.color.hover !== undefined) {
	              parentOptions.color.hover = newOptions.color.hover;colorsDefined = true;
	            }
	            if (newOptions.color.inherit !== undefined) {
	              parentOptions.color.inherit = newOptions.color.inherit;
	            }
	            if (newOptions.color.opacity !== undefined) {
	              parentOptions.color.opacity = Math.min(1, Math.max(0, newOptions.color.opacity));
	            }

	            if (newOptions.color.inherit === undefined && colorsDefined === true) {
	              parentOptions.color.inherit = false;
	            }
	          }
	        } else if (allowDeletion === true && newOptions.color === null) {
	          parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options
	        }

	        // handle the font settings
	        if (newOptions.font !== undefined && newOptions.font !== null) {
	          _Label2.default.parseOptions(parentOptions.font, newOptions);
	        } else if (allowDeletion === true && newOptions.font === null) {
	          parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options
	        }
	      }
	    }]);

	    return Edge;
	  }();

	  exports.default = Edge;

	/***/ },
	/* 88 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _CubicBezierEdgeBase2 = __webpack_require__(89);

	  var _CubicBezierEdgeBase3 = _interopRequireDefault(_CubicBezierEdgeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var CubicBezierEdge = function (_CubicBezierEdgeBase) {
	    _inherits(CubicBezierEdge, _CubicBezierEdgeBase);

	    function CubicBezierEdge(options, body, labelModule) {
	      _classCallCheck(this, CubicBezierEdge);

	      return _possibleConstructorReturn(this, (CubicBezierEdge.__proto__ || Object.getPrototypeOf(CubicBezierEdge)).call(this, options, body, labelModule));
	    }

	    /**
	     * Draw a line between two nodes
	     * @param {CanvasRenderingContext2D} ctx
	     * @private
	     */


	    _createClass(CubicBezierEdge, [{
	      key: '_line',
	      value: function _line(ctx, viaNodes) {
	        // get the coordinates of the support points.
	        var via1 = viaNodes[0];
	        var via2 = viaNodes[1];

	        // start drawing the line.
	        ctx.beginPath();
	        ctx.moveTo(this.fromPoint.x, this.fromPoint.y);

	        // fallback to normal straight edges
	        if (viaNodes === undefined || via1.x === undefined) {
	          ctx.lineTo(this.toPoint.x, this.toPoint.y);
	        } else {
	          ctx.bezierCurveTo(via1.x, via1.y, via2.x, via2.y, this.toPoint.x, this.toPoint.y);
	        }
	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        ctx.stroke();
	        this.disableShadow(ctx);
	      }
	    }, {
	      key: '_getViaCoordinates',
	      value: function _getViaCoordinates() {
	        var dx = this.from.x - this.to.x;
	        var dy = this.from.y - this.to.y;

	        var x1 = void 0,
	            y1 = void 0,
	            x2 = void 0,
	            y2 = void 0;
	        var roundness = this.options.smooth.roundness;

	        // horizontal if x > y or if direction is forced or if direction is horizontal
	        if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === 'horizontal') && this.options.smooth.forceDirection !== 'vertical') {
	          y1 = this.from.y;
	          y2 = this.to.y;
	          x1 = this.from.x - roundness * dx;
	          x2 = this.to.x + roundness * dx;
	        } else {
	          y1 = this.from.y - roundness * dy;
	          y2 = this.to.y + roundness * dy;
	          x1 = this.from.x;
	          x2 = this.to.x;
	        }

	        return [{ x: x1, y: y1 }, { x: x2, y: y2 }];
	      }
	    }, {
	      key: 'getViaNode',
	      value: function getViaNode() {
	        return this._getViaCoordinates();
	      }
	    }, {
	      key: '_findBorderPosition',
	      value: function _findBorderPosition(nearNode, ctx) {
	        return this._findBorderPositionBezier(nearNode, ctx);
	      }
	    }, {
	      key: '_getDistanceToEdge',
	      value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
	        var _ref = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates(),
	            _ref2 = _slicedToArray(_ref, 2),
	            via1 = _ref2[0],
	            via2 = _ref2[1];

	        // x3,y3 is the point
	        return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2);
	      }

	      /**
	       * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	       * @param percentage
	       * @param via
	       * @returns {{x: number, y: number}}
	       * @private
	       */

	    }, {
	      key: 'getPoint',
	      value: function getPoint(percentage) {
	        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates(),
	            _ref4 = _slicedToArray(_ref3, 2),
	            via1 = _ref4[0],
	            via2 = _ref4[1];

	        var t = percentage;
	        var vec = [];
	        vec[0] = Math.pow(1 - t, 3);
	        vec[1] = 3 * t * Math.pow(1 - t, 2);
	        vec[2] = 3 * Math.pow(t, 2) * (1 - t);
	        vec[3] = Math.pow(t, 3);
	        var x = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;
	        var y = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;

	        return { x: x, y: y };
	      }
	    }]);

	    return CubicBezierEdge;
	  }(_CubicBezierEdgeBase3.default);

	  exports.default = CubicBezierEdge;

	/***/ },
	/* 89 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _BezierEdgeBase2 = __webpack_require__(90);

	  var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var CubicBezierEdgeBase = function (_BezierEdgeBase) {
	    _inherits(CubicBezierEdgeBase, _BezierEdgeBase);

	    function CubicBezierEdgeBase(options, body, labelModule) {
	      _classCallCheck(this, CubicBezierEdgeBase);

	      return _possibleConstructorReturn(this, (CubicBezierEdgeBase.__proto__ || Object.getPrototypeOf(CubicBezierEdgeBase)).call(this, options, body, labelModule));
	    }

	    /**
	     * Calculate the distance between a point (x3,y3) and a line segment from
	     * (x1,y1) to (x2,y2).
	     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	     * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
	     * @param {number} x1 from x
	     * @param {number} y1 from y
	     * @param {number} x2 to x
	     * @param {number} y2 to y
	     * @param {number} x3 point to check x
	     * @param {number} y3 point to check y
	     * @private
	     */


	    _createClass(CubicBezierEdgeBase, [{
	      key: '_getDistanceToBezierEdge',
	      value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2) {
	        // x3,y3 is the point
	        var minDistance = 1e9;
	        var distance = void 0;
	        var i = void 0,
	            t = void 0,
	            x = void 0,
	            y = void 0;
	        var lastX = x1;
	        var lastY = y1;
	        var vec = [0, 0, 0, 0];
	        for (i = 1; i < 10; i++) {
	          t = 0.1 * i;
	          vec[0] = Math.pow(1 - t, 3);
	          vec[1] = 3 * t * Math.pow(1 - t, 2);
	          vec[2] = 3 * Math.pow(t, 2) * (1 - t);
	          vec[3] = Math.pow(t, 3);
	          x = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;
	          y = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;
	          if (i > 0) {
	            distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
	            minDistance = distance < minDistance ? distance : minDistance;
	          }
	          lastX = x;
	          lastY = y;
	        }

	        return minDistance;
	      }
	    }]);

	    return CubicBezierEdgeBase;
	  }(_BezierEdgeBase3.default);

	  exports.default = CubicBezierEdgeBase;

	/***/ },
	/* 90 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _EdgeBase2 = __webpack_require__(91);

	  var _EdgeBase3 = _interopRequireDefault(_EdgeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var BezierEdgeBase = function (_EdgeBase) {
	    _inherits(BezierEdgeBase, _EdgeBase);

	    function BezierEdgeBase(options, body, labelModule) {
	      _classCallCheck(this, BezierEdgeBase);

	      return _possibleConstructorReturn(this, (BezierEdgeBase.__proto__ || Object.getPrototypeOf(BezierEdgeBase)).call(this, options, body, labelModule));
	    }

	    /**
	     * This function uses binary search to look for the point where the bezier curve crosses the border of the node.
	     *
	     * @param nearNode
	     * @param ctx
	     * @param viaNode
	     * @param nearNode
	     * @param ctx
	     * @param viaNode
	     * @param nearNode
	     * @param ctx
	     * @param viaNode
	     */


	    _createClass(BezierEdgeBase, [{
	      key: '_findBorderPositionBezier',
	      value: function _findBorderPositionBezier(nearNode, ctx) {
	        var viaNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getViaCoordinates();

	        var maxIterations = 10;
	        var iteration = 0;
	        var low = 0;
	        var high = 1;
	        var pos, angle, distanceToBorder, distanceToPoint, difference;
	        var threshold = 0.2;
	        var node = this.to;
	        var from = false;
	        if (nearNode.id === this.from.id) {
	          node = this.from;
	          from = true;
	        }

	        while (low <= high && iteration < maxIterations) {
	          var middle = (low + high) * 0.5;

	          pos = this.getPoint(middle, viaNode);
	          angle = Math.atan2(node.y - pos.y, node.x - pos.x);
	          distanceToBorder = node.distanceToBorder(ctx, angle);
	          distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
	          difference = distanceToBorder - distanceToPoint;
	          if (Math.abs(difference) < threshold) {
	            break; // found
	          } else if (difference < 0) {
	            // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
	            if (from === false) {
	              low = middle;
	            } else {
	              high = middle;
	            }
	          } else {
	            if (from === false) {
	              high = middle;
	            } else {
	              low = middle;
	            }
	          }

	          iteration++;
	        }
	        pos.t = middle;

	        return pos;
	      }

	      /**
	       * Calculate the distance between a point (x3,y3) and a line segment from
	       * (x1,y1) to (x2,y2).
	       * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	       * @param {number} x1 from x
	       * @param {number} y1 from y
	       * @param {number} x2 to x
	       * @param {number} y2 to y
	       * @param {number} x3 point to check x
	       * @param {number} y3 point to check y
	       * @private
	       */

	    }, {
	      key: '_getDistanceToBezierEdge',
	      value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {
	        // x3,y3 is the point
	        var minDistance = 1e9;
	        var distance = void 0;
	        var i = void 0,
	            t = void 0,
	            x = void 0,
	            y = void 0;
	        var lastX = x1;
	        var lastY = y1;
	        for (i = 1; i < 10; i++) {
	          t = 0.1 * i;
	          x = Math.pow(1 - t, 2) * x1 + 2 * t * (1 - t) * via.x + Math.pow(t, 2) * x2;
	          y = Math.pow(1 - t, 2) * y1 + 2 * t * (1 - t) * via.y + Math.pow(t, 2) * y2;
	          if (i > 0) {
	            distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
	            minDistance = distance < minDistance ? distance : minDistance;
	          }
	          lastX = x;
	          lastY = y;
	        }

	        return minDistance;
	      }
	    }]);

	    return BezierEdgeBase;
	  }(_EdgeBase3.default);

	  exports.default = BezierEdgeBase;

	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var EdgeBase = function () {
	    function EdgeBase(options, body, labelModule) {
	      _classCallCheck(this, EdgeBase);

	      this.body = body;
	      this.labelModule = labelModule;
	      this.options = {};
	      this.setOptions(options);
	      this.colorDirty = true;
	      this.color = {};
	      this.selectionWidth = 2;
	      this.hoverWidth = 1.5;
	      this.fromPoint = this.from;
	      this.toPoint = this.to;
	    }

	    _createClass(EdgeBase, [{
	      key: 'connect',
	      value: function connect() {
	        this.from = this.body.nodes[this.options.from];
	        this.to = this.body.nodes[this.options.to];
	      }
	    }, {
	      key: 'cleanup',
	      value: function cleanup() {
	        return false;
	      }
	    }, {
	      key: 'setOptions',
	      value: function setOptions(options) {
	        this.options = options;
	        this.from = this.body.nodes[this.options.from];
	        this.to = this.body.nodes[this.options.to];
	        this.id = this.options.id;
	      }

	      /**
	       * Redraw a edge as a line
	       * Draw this edge in the given canvas
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	       * @param {CanvasRenderingContext2D}   ctx
	       * @private
	       */

	    }, {
	      key: 'drawLine',
	      value: function drawLine(ctx, selected, hover, viaNode) {
	        // set style
	        ctx.strokeStyle = this.getColor(ctx, selected, hover);
	        ctx.lineWidth = this.getLineWidth(selected, hover);

	        if (this.options.dashes !== false) {
	          this._drawDashedLine(ctx, viaNode);
	        } else {
	          this._drawLine(ctx, viaNode);
	        }
	      }
	    }, {
	      key: '_drawLine',
	      value: function _drawLine(ctx, viaNode, fromPoint, toPoint) {
	        if (this.from != this.to) {
	          // draw line
	          this._line(ctx, viaNode, fromPoint, toPoint);
	        } else {
	          var _getCircleData2 = this._getCircleData(ctx),
	              _getCircleData3 = _slicedToArray(_getCircleData2, 3),
	              x = _getCircleData3[0],
	              y = _getCircleData3[1],
	              radius = _getCircleData3[2];

	          this._circle(ctx, x, y, radius);
	        }
	      }
	    }, {
	      key: '_drawDashedLine',
	      value: function _drawDashedLine(ctx, viaNode, fromPoint, toPoint) {
	        ctx.lineCap = 'round';
	        var pattern = [5, 5];
	        if (Array.isArray(this.options.dashes) === true) {
	          pattern = this.options.dashes;
	        }

	        // only firefox and chrome support this method, else we use the legacy one.
	        if (ctx.setLineDash !== undefined) {
	          ctx.save();

	          // set dash settings for chrome or firefox
	          ctx.setLineDash(pattern);
	          ctx.lineDashOffset = 0;

	          // draw the line
	          if (this.from != this.to) {
	            // draw line
	            this._line(ctx, viaNode);
	          } else {
	            var _getCircleData4 = this._getCircleData(ctx),
	                _getCircleData5 = _slicedToArray(_getCircleData4, 3),
	                x = _getCircleData5[0],
	                y = _getCircleData5[1],
	                radius = _getCircleData5[2];

	            this._circle(ctx, x, y, radius);
	          }

	          // restore the dash settings.
	          ctx.setLineDash([0]);
	          ctx.lineDashOffset = 0;
	          ctx.restore();
	        } else {
	          // unsupporting smooth lines
	          if (this.from != this.to) {
	            // draw line
	            ctx.dashedLine(this.from.x, this.from.y, this.to.x, this.to.y, pattern);
	          } else {
	            var _getCircleData6 = this._getCircleData(ctx),
	                _getCircleData7 = _slicedToArray(_getCircleData6, 3),
	                _x = _getCircleData7[0],
	                _y = _getCircleData7[1],
	                _radius = _getCircleData7[2];

	            this._circle(ctx, _x, _y, _radius);
	          }
	          // draw shadow if enabled
	          this.enableShadow(ctx);

	          ctx.stroke();

	          // disable shadows for other elements.
	          this.disableShadow(ctx);
	        }
	      }
	    }, {
	      key: 'findBorderPosition',
	      value: function findBorderPosition(nearNode, ctx, options) {
	        if (this.from != this.to) {
	          return this._findBorderPosition(nearNode, ctx, options);
	        } else {
	          return this._findBorderPositionCircle(nearNode, ctx, options);
	        }
	      }
	    }, {
	      key: 'findBorderPositions',
	      value: function findBorderPositions(ctx) {
	        var from = {};
	        var to = {};
	        if (this.from != this.to) {
	          from = this._findBorderPosition(this.from, ctx);
	          to = this._findBorderPosition(this.to, ctx);
	        } else {
	          var _getCircleData8 = this._getCircleData(ctx),
	              _getCircleData9 = _slicedToArray(_getCircleData8, 3),
	              x = _getCircleData9[0],
	              y = _getCircleData9[1],
	              radius = _getCircleData9[2];

	          from = this._findBorderPositionCircle(this.from, ctx, { x: x, y: y, low: 0.25, high: 0.6, direction: -1 });
	          to = this._findBorderPositionCircle(this.from, ctx, { x: x, y: y, low: 0.6, high: 0.8, direction: 1 });
	        }
	        return { from: from, to: to };
	      }
	    }, {
	      key: '_getCircleData',
	      value: function _getCircleData(ctx) {
	        var x = void 0,
	            y = void 0;
	        var node = this.from;
	        var radius = this.options.selfReferenceSize;

	        if (ctx !== undefined) {
	          if (node.shape.width === undefined) {
	            node.shape.resize(ctx);
	          }
	        }

	        // get circle coordinates
	        if (node.shape.width > node.shape.height) {
	          x = node.x + node.shape.width * 0.5;
	          y = node.y - radius;
	        } else {
	          x = node.x + radius;
	          y = node.y - node.shape.height * 0.5;
	        }
	        return [x, y, radius];
	      }

	      /**
	       * Get a point on a circle
	       * @param {Number} x
	       * @param {Number} y
	       * @param {Number} radius
	       * @param {Number} percentage. Value between 0 (line start) and 1 (line end)
	       * @return {Object} point
	       * @private
	       */

	    }, {
	      key: '_pointOnCircle',
	      value: function _pointOnCircle(x, y, radius, percentage) {
	        var angle = percentage * 2 * Math.PI;
	        return {
	          x: x + radius * Math.cos(angle),
	          y: y - radius * Math.sin(angle)
	        };
	      }

	      /**
	       * This function uses binary search to look for the point where the circle crosses the border of the node.
	       * @param node
	       * @param ctx
	       * @param options
	       * @returns {*}
	       * @private
	       */

	    }, {
	      key: '_findBorderPositionCircle',
	      value: function _findBorderPositionCircle(node, ctx, options) {
	        var x = options.x;
	        var y = options.y;
	        var low = options.low;
	        var high = options.high;
	        var direction = options.direction;

	        var maxIterations = 10;
	        var iteration = 0;
	        var radius = this.options.selfReferenceSize;
	        var pos = void 0,
	            angle = void 0,
	            distanceToBorder = void 0,
	            distanceToPoint = void 0,
	            difference = void 0;
	        var threshold = 0.05;
	        var middle = (low + high) * 0.5;

	        while (low <= high && iteration < maxIterations) {
	          middle = (low + high) * 0.5;

	          pos = this._pointOnCircle(x, y, radius, middle);
	          angle = Math.atan2(node.y - pos.y, node.x - pos.x);
	          distanceToBorder = node.distanceToBorder(ctx, angle);
	          distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
	          difference = distanceToBorder - distanceToPoint;
	          if (Math.abs(difference) < threshold) {
	            break; // found
	          } else if (difference > 0) {
	            // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
	            if (direction > 0) {
	              low = middle;
	            } else {
	              high = middle;
	            }
	          } else {
	            if (direction > 0) {
	              high = middle;
	            } else {
	              low = middle;
	            }
	          }
	          iteration++;
	        }
	        pos.t = middle;

	        return pos;
	      }

	      /**
	       * Get the line width of the edge. Depends on width and whether one of the
	       * connected nodes is selected.
	       * @return {Number} width
	       * @private
	       */

	    }, {
	      key: 'getLineWidth',
	      value: function getLineWidth(selected, hover) {
	        if (selected === true) {
	          return Math.max(this.selectionWidth, 0.3 / this.body.view.scale);
	        } else {
	          if (hover === true) {
	            return Math.max(this.hoverWidth, 0.3 / this.body.view.scale);
	          } else {
	            return Math.max(this.options.width, 0.3 / this.body.view.scale);
	          }
	        }
	      }
	    }, {
	      key: 'getColor',
	      value: function getColor(ctx, selected, hover) {
	        var colorOptions = this.options.color;
	        if (colorOptions.inherit !== false) {
	          // when this is a loop edge, just use the 'from' method
	          if (colorOptions.inherit === 'both' && this.from.id !== this.to.id) {
	            var grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);
	            var fromColor = void 0,
	                toColor = void 0;
	            fromColor = this.from.options.color.highlight.border;
	            toColor = this.to.options.color.highlight.border;

	            if (this.from.selected === false && this.to.selected === false) {
	              fromColor = util.overrideOpacity(this.from.options.color.border, this.options.color.opacity);
	              toColor = util.overrideOpacity(this.to.options.color.border, this.options.color.opacity);
	            } else if (this.from.selected === true && this.to.selected === false) {
	              toColor = this.to.options.color.border;
	            } else if (this.from.selected === false && this.to.selected === true) {
	              fromColor = this.from.options.color.border;
	            }
	            grd.addColorStop(0, fromColor);
	            grd.addColorStop(1, toColor);

	            // -------------------- this returns -------------------- //
	            return grd;
	          }

	          if (this.colorDirty === true) {
	            if (colorOptions.inherit === "to") {
	              this.color.highlight = this.to.options.color.highlight.border;
	              this.color.hover = this.to.options.color.hover.border;
	              this.color.color = util.overrideOpacity(this.to.options.color.border, colorOptions.opacity);
	            } else {
	              // (this.options.color.inherit.source === "from") {
	              this.color.highlight = this.from.options.color.highlight.border;
	              this.color.hover = this.from.options.color.hover.border;
	              this.color.color = util.overrideOpacity(this.from.options.color.border, colorOptions.opacity);
	            }
	          }
	        } else if (this.colorDirty === true) {
	          this.color.highlight = colorOptions.highlight;
	          this.color.hover = colorOptions.hover;
	          this.color.color = util.overrideOpacity(colorOptions.color, colorOptions.opacity);
	        }

	        // if color inherit is on and gradients are used, the function has already returned by now.
	        this.colorDirty = false;

	        if (selected === true) {
	          return this.color.highlight;
	        } else if (hover === true) {
	          return this.color.hover;
	        } else {
	          return this.color.color;
	        }
	      }

	      /**
	       * Draw a line from a node to itself, a circle
	       * @param {CanvasRenderingContext2D} ctx
	       * @param {Number} x
	       * @param {Number} y
	       * @param {Number} radius
	       * @private
	       */

	    }, {
	      key: '_circle',
	      value: function _circle(ctx, x, y, radius) {
	        // draw shadow if enabled
	        this.enableShadow(ctx);

	        // draw a circle
	        ctx.beginPath();
	        ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
	        ctx.stroke();

	        // disable shadows for other elements.
	        this.disableShadow(ctx);
	      }

	      /**
	       * Calculate the distance between a point (x3,y3) and a line segment from
	       * (x1,y1) to (x2,y2).
	       * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	       * @param {number} x1
	       * @param {number} y1
	       * @param {number} x2
	       * @param {number} y2
	       * @param {number} x3
	       * @param {number} y3
	       * @private
	       */

	    }, {
	      key: 'getDistanceToEdge',
	      value: function getDistanceToEdge(x1, y1, x2, y2, x3, y3, via) {
	        // x3,y3 is the point
	        var returnValue = 0;
	        if (this.from != this.to) {
	          returnValue = this._getDistanceToEdge(x1, y1, x2, y2, x3, y3, via);
	        } else {
	          var _getCircleData10 = this._getCircleData(),
	              _getCircleData11 = _slicedToArray(_getCircleData10, 3),
	              x = _getCircleData11[0],
	              y = _getCircleData11[1],
	              radius = _getCircleData11[2];

	          var dx = x - x3;
	          var dy = y - y3;
	          returnValue = Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);
	        }

	        if (this.labelModule.size.left < x3 && this.labelModule.size.left + this.labelModule.size.width > x3 && this.labelModule.size.top < y3 && this.labelModule.size.top + this.labelModule.size.height > y3) {
	          return 0;
	        } else {
	          return returnValue;
	        }
	      }
	    }, {
	      key: '_getDistanceToLine',
	      value: function _getDistanceToLine(x1, y1, x2, y2, x3, y3) {
	        var px = x2 - x1;
	        var py = y2 - y1;
	        var something = px * px + py * py;
	        var u = ((x3 - x1) * px + (y3 - y1) * py) / something;

	        if (u > 1) {
	          u = 1;
	        } else if (u < 0) {
	          u = 0;
	        }

	        var x = x1 + u * px;
	        var y = y1 + u * py;
	        var dx = x - x3;
	        var dy = y - y3;

	        //# Note: If the actual distance does not matter,
	        //# if you only want to compare what this function
	        //# returns to other results of this function, you
	        //# can just return the squared distance instead
	        //# (i.e. remove the sqrt) to gain a little performance

	        return Math.sqrt(dx * dx + dy * dy);
	      }

	      /**
	       *
	       * @param ctx
	       * @param position
	       * @param viaNode
	       */

	    }, {
	      key: 'getArrowData',
	      value: function getArrowData(ctx, position, viaNode, selected, hover) {
	        // set lets
	        var angle = void 0;
	        var arrowPoint = void 0;
	        var node1 = void 0;
	        var node2 = void 0;
	        var guideOffset = void 0;
	        var scaleFactor = void 0;
	        var type = void 0;
	        var lineWidth = this.getLineWidth(selected, hover);

	        if (position === 'from') {
	          node1 = this.from;
	          node2 = this.to;
	          guideOffset = 0.1;
	          scaleFactor = this.options.arrows.from.scaleFactor;
	          type = this.options.arrows.from.type;
	        } else if (position === 'to') {
	          node1 = this.to;
	          node2 = this.from;
	          guideOffset = -0.1;
	          scaleFactor = this.options.arrows.to.scaleFactor;
	          type = this.options.arrows.to.type;
	        } else {
	          node1 = this.to;
	          node2 = this.from;
	          scaleFactor = this.options.arrows.middle.scaleFactor;
	          type = this.options.arrows.middle.type;
	        }

	        // if not connected to itself
	        if (node1 != node2) {
	          if (position !== 'middle') {
	            // draw arrow head
	            if (this.options.smooth.enabled === true) {
	              arrowPoint = this.findBorderPosition(node1, ctx, { via: viaNode });
	              var guidePos = this.getPoint(Math.max(0.0, Math.min(1.0, arrowPoint.t + guideOffset)), viaNode);
	              angle = Math.atan2(arrowPoint.y - guidePos.y, arrowPoint.x - guidePos.x);
	            } else {
	              angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
	              arrowPoint = this.findBorderPosition(node1, ctx);
	            }
	          } else {
	            angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
	            arrowPoint = this.getPoint(0.5, viaNode); // this is 0.6 to account for the size of the arrow.
	          }
	        } else {
	          // draw circle
	          var _getCircleData12 = this._getCircleData(ctx),
	              _getCircleData13 = _slicedToArray(_getCircleData12, 3),
	              x = _getCircleData13[0],
	              y = _getCircleData13[1],
	              radius = _getCircleData13[2];

	          if (position === 'from') {
	            arrowPoint = this.findBorderPosition(this.from, ctx, { x: x, y: y, low: 0.25, high: 0.6, direction: -1 });
	            angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
	          } else if (position === 'to') {
	            arrowPoint = this.findBorderPosition(this.from, ctx, { x: x, y: y, low: 0.6, high: 1.0, direction: 1 });
	            angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;
	          } else {
	            arrowPoint = this._pointOnCircle(x, y, radius, 0.175);
	            angle = 3.9269908169872414; // === 0.175 * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
	          }
	        }

	        var length = 15 * scaleFactor + 3 * lineWidth; // 3* lineWidth is the width of the edge.

	        var xi = arrowPoint.x - length * 0.9 * Math.cos(angle);
	        var yi = arrowPoint.y - length * 0.9 * Math.sin(angle);
	        var arrowCore = { x: xi, y: yi };

	        return { point: arrowPoint, core: arrowCore, angle: angle, length: length, type: type };
	      }

	      /**
	       *
	       * @param ctx
	       * @param selected
	       * @param hover
	       * @param arrowData
	       */

	    }, {
	      key: 'drawArrowHead',
	      value: function drawArrowHead(ctx, selected, hover, arrowData) {
	        // set style
	        ctx.strokeStyle = this.getColor(ctx, selected, hover);
	        ctx.fillStyle = ctx.strokeStyle;
	        ctx.lineWidth = this.getLineWidth(selected, hover);

	        if (arrowData.type && arrowData.type.toLowerCase() === 'circle') {
	          // draw circle at the end of the line
	          ctx.circleEndpoint(arrowData.point.x, arrowData.point.y, arrowData.angle, arrowData.length);
	        } else {
	          // draw arrow at the end of the line
	          ctx.arrowEndpoint(arrowData.point.x, arrowData.point.y, arrowData.angle, arrowData.length);
	        }

	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        ctx.fill();
	        // disable shadows for other elements.
	        this.disableShadow(ctx);
	      }
	    }, {
	      key: 'enableShadow',
	      value: function enableShadow(ctx) {
	        if (this.options.shadow.enabled === true) {
	          ctx.shadowColor = this.options.shadow.color;
	          ctx.shadowBlur = this.options.shadow.size;
	          ctx.shadowOffsetX = this.options.shadow.x;
	          ctx.shadowOffsetY = this.options.shadow.y;
	        }
	      }
	    }, {
	      key: 'disableShadow',
	      value: function disableShadow(ctx) {
	        if (this.options.shadow.enabled === true) {
	          ctx.shadowColor = 'rgba(0,0,0,0)';
	          ctx.shadowBlur = 0;
	          ctx.shadowOffsetX = 0;
	          ctx.shadowOffsetY = 0;
	        }
	      }
	    }]);

	    return EdgeBase;
	  }();

	  exports.default = EdgeBase;

	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _BezierEdgeBase2 = __webpack_require__(90);

	  var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var BezierEdgeDynamic = function (_BezierEdgeBase) {
	    _inherits(BezierEdgeDynamic, _BezierEdgeBase);

	    function BezierEdgeDynamic(options, body, labelModule) {
	      _classCallCheck(this, BezierEdgeDynamic);

	      // --> this calls the setOptions below
	      var _this = _possibleConstructorReturn(this, (BezierEdgeDynamic.__proto__ || Object.getPrototypeOf(BezierEdgeDynamic)).call(this, options, body, labelModule));
	      //this.via = undefined; // Here for completeness but not allowed to defined before super() is invoked.


	      _this._boundFunction = function () {
	        _this.positionBezierNode();
	      };
	      _this.body.emitter.on("_repositionBezierNodes", _this._boundFunction);
	      return _this;
	    }

	    _createClass(BezierEdgeDynamic, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        // check if the physics has changed.
	        var physicsChange = false;
	        if (this.options.physics !== options.physics) {
	          physicsChange = true;
	        }

	        // set the options and the to and from nodes
	        this.options = options;
	        this.id = this.options.id;
	        this.from = this.body.nodes[this.options.from];
	        this.to = this.body.nodes[this.options.to];

	        // setup the support node and connect
	        this.setupSupportNode();
	        this.connect();

	        // when we change the physics state of the edge, we reposition the support node.
	        if (physicsChange === true) {
	          this.via.setOptions({ physics: this.options.physics });
	          this.positionBezierNode();
	        }
	      }
	    }, {
	      key: "connect",
	      value: function connect() {
	        this.from = this.body.nodes[this.options.from];
	        this.to = this.body.nodes[this.options.to];
	        if (this.from === undefined || this.to === undefined || this.options.physics === false) {
	          this.via.setOptions({ physics: false });
	        } else {
	          // fix weird behaviour where a self referencing node has physics enabled
	          if (this.from.id === this.to.id) {
	            this.via.setOptions({ physics: false });
	          } else {
	            this.via.setOptions({ physics: true });
	          }
	        }
	      }

	      /**
	       * remove the support nodes
	       * @returns {boolean}
	       */

	    }, {
	      key: "cleanup",
	      value: function cleanup() {
	        this.body.emitter.off("_repositionBezierNodes", this._boundFunction);
	        if (this.via !== undefined) {
	          delete this.body.nodes[this.via.id];
	          this.via = undefined;
	          return true;
	        }
	        return false;
	      }

	      /**
	       * Bezier curves require an anchor point to calculate the smooth flow. These points are nodes. These nodes are invisible but
	       * are used for the force calculation.
	       *
	       * The changed data is not called, if needed, it is returned by the main edge constructor.
	       * @private
	       */

	    }, {
	      key: "setupSupportNode",
	      value: function setupSupportNode() {
	        if (this.via === undefined) {
	          var nodeId = "edgeId:" + this.id;
	          var node = this.body.functions.createNode({
	            id: nodeId,
	            shape: 'circle',
	            physics: true,
	            hidden: true
	          });
	          this.body.nodes[nodeId] = node;
	          this.via = node;
	          this.via.parentEdgeId = this.id;
	          this.positionBezierNode();
	        }
	      }
	    }, {
	      key: "positionBezierNode",
	      value: function positionBezierNode() {
	        if (this.via !== undefined && this.from !== undefined && this.to !== undefined) {
	          this.via.x = 0.5 * (this.from.x + this.to.x);
	          this.via.y = 0.5 * (this.from.y + this.to.y);
	        } else if (this.via !== undefined) {
	          this.via.x = 0;
	          this.via.y = 0;
	        }
	      }

	      /**
	       * Draw a line between two nodes
	       * @param {CanvasRenderingContext2D} ctx
	       * @private
	       */

	    }, {
	      key: "_line",
	      value: function _line(ctx, viaNode) {
	        // draw a straight line
	        ctx.beginPath();
	        ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
	        // fallback to normal straight edges
	        if (viaNode.x === undefined) {
	          ctx.lineTo(this.toPoint.x, this.toPoint.y);
	        } else {
	          ctx.quadraticCurveTo(viaNode.x, viaNode.y, this.toPoint.x, this.toPoint.y);
	        }
	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        ctx.stroke();
	        this.disableShadow(ctx);
	      }
	    }, {
	      key: "getViaNode",
	      value: function getViaNode() {
	        return this.via;
	      }

	      /**
	       * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	       * @param percentage
	       * @param viaNode
	       * @returns {{x: number, y: number}}
	       * @private
	       */

	    }, {
	      key: "getPoint",
	      value: function getPoint(percentage) {
	        var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.via;

	        var t = percentage;
	        var x = void 0,
	            y = void 0;
	        if (this.from === this.to) {
	          var _getCircleData = this._getCircleData(this.from),
	              _getCircleData2 = _slicedToArray(_getCircleData, 3),
	              cx = _getCircleData2[0],
	              cy = _getCircleData2[1],
	              cr = _getCircleData2[2];

	          var a = 2 * Math.PI * (1 - t);
	          x = cx + cr * Math.sin(a);
	          y = cy + cr - cr * (1 - Math.cos(a));
	        } else {
	          x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
	          y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;
	        }

	        return { x: x, y: y };
	      }
	    }, {
	      key: "_findBorderPosition",
	      value: function _findBorderPosition(nearNode, ctx) {
	        return this._findBorderPositionBezier(nearNode, ctx, this.via);
	      }
	    }, {
	      key: "_getDistanceToEdge",
	      value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
	        // x3,y3 is the point
	        return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);
	      }
	    }]);

	    return BezierEdgeDynamic;
	  }(_BezierEdgeBase3.default);

	  exports.default = BezierEdgeDynamic;

	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _BezierEdgeBase2 = __webpack_require__(90);

	  var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var BezierEdgeStatic = function (_BezierEdgeBase) {
	    _inherits(BezierEdgeStatic, _BezierEdgeBase);

	    function BezierEdgeStatic(options, body, labelModule) {
	      _classCallCheck(this, BezierEdgeStatic);

	      return _possibleConstructorReturn(this, (BezierEdgeStatic.__proto__ || Object.getPrototypeOf(BezierEdgeStatic)).call(this, options, body, labelModule));
	    }

	    /**
	     * Draw a line between two nodes
	     * @param {CanvasRenderingContext2D} ctx
	     * @private
	     */


	    _createClass(BezierEdgeStatic, [{
	      key: '_line',
	      value: function _line(ctx, viaNode) {
	        // draw a straight line
	        ctx.beginPath();
	        ctx.moveTo(this.fromPoint.x, this.fromPoint.y);

	        // fallback to normal straight edges
	        if (viaNode.x === undefined) {
	          ctx.lineTo(this.toPoint.x, this.toPoint.y);
	        } else {
	          ctx.quadraticCurveTo(viaNode.x, viaNode.y, this.toPoint.x, this.toPoint.y);
	        }
	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        ctx.stroke();
	        this.disableShadow(ctx);
	      }
	    }, {
	      key: 'getViaNode',
	      value: function getViaNode() {
	        return this._getViaCoordinates();
	      }

	      /**
	       * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.
	       * @returns {{x: undefined, y: undefined}}
	       * @private
	       */

	    }, {
	      key: '_getViaCoordinates',
	      value: function _getViaCoordinates() {
	        var xVia = undefined;
	        var yVia = undefined;
	        var factor = this.options.smooth.roundness;
	        var type = this.options.smooth.type;
	        var dx = Math.abs(this.from.x - this.to.x);
	        var dy = Math.abs(this.from.y - this.to.y);
	        if (type === 'discrete' || type === 'diagonalCross') {
	          if (Math.abs(this.from.x - this.to.x) <= Math.abs(this.from.y - this.to.y)) {
	            if (this.from.y >= this.to.y) {
	              if (this.from.x <= this.to.x) {
	                xVia = this.from.x + factor * dy;
	                yVia = this.from.y - factor * dy;
	              } else if (this.from.x > this.to.x) {
	                xVia = this.from.x - factor * dy;
	                yVia = this.from.y - factor * dy;
	              }
	            } else if (this.from.y < this.to.y) {
	              if (this.from.x <= this.to.x) {
	                xVia = this.from.x + factor * dy;
	                yVia = this.from.y + factor * dy;
	              } else if (this.from.x > this.to.x) {
	                xVia = this.from.x - factor * dy;
	                yVia = this.from.y + factor * dy;
	              }
	            }
	            if (type === "discrete") {
	              xVia = dx < factor * dy ? this.from.x : xVia;
	            }
	          } else if (Math.abs(this.from.x - this.to.x) > Math.abs(this.from.y - this.to.y)) {
	            if (this.from.y >= this.to.y) {
	              if (this.from.x <= this.to.x) {
	                xVia = this.from.x + factor * dx;
	                yVia = this.from.y - factor * dx;
	              } else if (this.from.x > this.to.x) {
	                xVia = this.from.x - factor * dx;
	                yVia = this.from.y - factor * dx;
	              }
	            } else if (this.from.y < this.to.y) {
	              if (this.from.x <= this.to.x) {
	                xVia = this.from.x + factor * dx;
	                yVia = this.from.y + factor * dx;
	              } else if (this.from.x > this.to.x) {
	                xVia = this.from.x - factor * dx;
	                yVia = this.from.y + factor * dx;
	              }
	            }
	            if (type === "discrete") {
	              yVia = dy < factor * dx ? this.from.y : yVia;
	            }
	          }
	        } else if (type === "straightCross") {
	          if (Math.abs(this.from.x - this.to.x) <= Math.abs(this.from.y - this.to.y)) {
	            // up - down
	            xVia = this.from.x;
	            if (this.from.y < this.to.y) {
	              yVia = this.to.y - (1 - factor) * dy;
	            } else {
	              yVia = this.to.y + (1 - factor) * dy;
	            }
	          } else if (Math.abs(this.from.x - this.to.x) > Math.abs(this.from.y - this.to.y)) {
	            // left - right
	            if (this.from.x < this.to.x) {
	              xVia = this.to.x - (1 - factor) * dx;
	            } else {
	              xVia = this.to.x + (1 - factor) * dx;
	            }
	            yVia = this.from.y;
	          }
	        } else if (type === 'horizontal') {
	          if (this.from.x < this.to.x) {
	            xVia = this.to.x - (1 - factor) * dx;
	          } else {
	            xVia = this.to.x + (1 - factor) * dx;
	          }
	          yVia = this.from.y;
	        } else if (type === 'vertical') {
	          xVia = this.from.x;
	          if (this.from.y < this.to.y) {
	            yVia = this.to.y - (1 - factor) * dy;
	          } else {
	            yVia = this.to.y + (1 - factor) * dy;
	          }
	        } else if (type === 'curvedCW') {
	          dx = this.to.x - this.from.x;
	          dy = this.from.y - this.to.y;
	          var radius = Math.sqrt(dx * dx + dy * dy);
	          var pi = Math.PI;

	          var originalAngle = Math.atan2(dy, dx);
	          var myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);

	          xVia = this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle);
	          yVia = this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle);
	        } else if (type === 'curvedCCW') {
	          dx = this.to.x - this.from.x;
	          dy = this.from.y - this.to.y;
	          var _radius = Math.sqrt(dx * dx + dy * dy);
	          var _pi = Math.PI;

	          var _originalAngle = Math.atan2(dy, dx);
	          var _myAngle = (_originalAngle + (-factor * 0.5 + 0.5) * _pi) % (2 * _pi);

	          xVia = this.from.x + (factor * 0.5 + 0.5) * _radius * Math.sin(_myAngle);
	          yVia = this.from.y + (factor * 0.5 + 0.5) * _radius * Math.cos(_myAngle);
	        } else {
	          // continuous
	          if (Math.abs(this.from.x - this.to.x) <= Math.abs(this.from.y - this.to.y)) {
	            if (this.from.y >= this.to.y) {
	              if (this.from.x <= this.to.x) {
	                xVia = this.from.x + factor * dy;
	                yVia = this.from.y - factor * dy;
	                xVia = this.to.x < xVia ? this.to.x : xVia;
	              } else if (this.from.x > this.to.x) {
	                xVia = this.from.x - factor * dy;
	                yVia = this.from.y - factor * dy;
	                xVia = this.to.x > xVia ? this.to.x : xVia;
	              }
	            } else if (this.from.y < this.to.y) {
	              if (this.from.x <= this.to.x) {
	                xVia = this.from.x + factor * dy;
	                yVia = this.from.y + factor * dy;
	                xVia = this.to.x < xVia ? this.to.x : xVia;
	              } else if (this.from.x > this.to.x) {
	                xVia = this.from.x - factor * dy;
	                yVia = this.from.y + factor * dy;
	                xVia = this.to.x > xVia ? this.to.x : xVia;
	              }
	            }
	          } else if (Math.abs(this.from.x - this.to.x) > Math.abs(this.from.y - this.to.y)) {
	            if (this.from.y >= this.to.y) {
	              if (this.from.x <= this.to.x) {
	                xVia = this.from.x + factor * dx;
	                yVia = this.from.y - factor * dx;
	                yVia = this.to.y > yVia ? this.to.y : yVia;
	              } else if (this.from.x > this.to.x) {
	                xVia = this.from.x - factor * dx;
	                yVia = this.from.y - factor * dx;
	                yVia = this.to.y > yVia ? this.to.y : yVia;
	              }
	            } else if (this.from.y < this.to.y) {
	              if (this.from.x <= this.to.x) {
	                xVia = this.from.x + factor * dx;
	                yVia = this.from.y + factor * dx;
	                yVia = this.to.y < yVia ? this.to.y : yVia;
	              } else if (this.from.x > this.to.x) {
	                xVia = this.from.x - factor * dx;
	                yVia = this.from.y + factor * dx;
	                yVia = this.to.y < yVia ? this.to.y : yVia;
	              }
	            }
	          }
	        }
	        return { x: xVia, y: yVia };
	      }
	    }, {
	      key: '_findBorderPosition',
	      value: function _findBorderPosition(nearNode, ctx) {
	        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	        return this._findBorderPositionBezier(nearNode, ctx, options.via);
	      }
	    }, {
	      key: '_getDistanceToEdge',
	      value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
	        var viaNode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates();
	        // x3,y3 is the point
	        return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);
	      }

	      /**
	       * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	       * @param percentage
	       * @param viaNode
	       * @returns {{x: number, y: number}}
	       * @private
	       */

	    }, {
	      key: 'getPoint',
	      value: function getPoint(percentage) {
	        var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates();

	        var t = percentage;
	        var x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
	        var y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;

	        return { x: x, y: y };
	      }
	    }]);

	    return BezierEdgeStatic;
	  }(_BezierEdgeBase3.default);

	  exports.default = BezierEdgeStatic;

	/***/ },
	/* 94 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _EdgeBase2 = __webpack_require__(91);

	  var _EdgeBase3 = _interopRequireDefault(_EdgeBase2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var StraightEdge = function (_EdgeBase) {
	    _inherits(StraightEdge, _EdgeBase);

	    function StraightEdge(options, body, labelModule) {
	      _classCallCheck(this, StraightEdge);

	      return _possibleConstructorReturn(this, (StraightEdge.__proto__ || Object.getPrototypeOf(StraightEdge)).call(this, options, body, labelModule));
	    }

	    /**
	     * Draw a line between two nodes
	     * @param {CanvasRenderingContext2D} ctx
	     * @private
	     */


	    _createClass(StraightEdge, [{
	      key: '_line',
	      value: function _line(ctx) {
	        // draw a straight line
	        ctx.beginPath();
	        ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
	        ctx.lineTo(this.toPoint.x, this.toPoint.y);
	        // draw shadow if enabled
	        this.enableShadow(ctx);
	        ctx.stroke();
	        this.disableShadow(ctx);
	      }
	    }, {
	      key: 'getViaNode',
	      value: function getViaNode() {
	        return undefined;
	      }

	      /**
	       * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	       * @param percentage
	       * @param via
	       * @returns {{x: number, y: number}}
	       * @private
	       */

	    }, {
	      key: 'getPoint',
	      value: function getPoint(percentage) {
	        return {
	          x: (1 - percentage) * this.fromPoint.x + percentage * this.toPoint.x,
	          y: (1 - percentage) * this.fromPoint.y + percentage * this.toPoint.y
	        };
	      }
	    }, {
	      key: '_findBorderPosition',
	      value: function _findBorderPosition(nearNode, ctx) {
	        var node1 = this.to;
	        var node2 = this.from;
	        if (nearNode.id === this.from.id) {
	          node1 = this.from;
	          node2 = this.to;
	        }

	        var angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
	        var dx = node1.x - node2.x;
	        var dy = node1.y - node2.y;
	        var edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);
	        var toBorderDist = nearNode.distanceToBorder(ctx, angle);
	        var toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;

	        var borderPos = {};
	        borderPos.x = (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x;
	        borderPos.y = (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y;

	        return borderPos;
	      }
	    }, {
	      key: '_getDistanceToEdge',
	      value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
	        // x3,y3 is the point
	        return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);
	      }
	    }]);

	    return StraightEdge;
	  }(_EdgeBase3.default);

	  exports.default = StraightEdge;

	/***/ },
	/* 95 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _BarnesHutSolver = __webpack_require__(96);

	  var _BarnesHutSolver2 = _interopRequireDefault(_BarnesHutSolver);

	  var _RepulsionSolver = __webpack_require__(97);

	  var _RepulsionSolver2 = _interopRequireDefault(_RepulsionSolver);

	  var _HierarchicalRepulsionSolver = __webpack_require__(98);

	  var _HierarchicalRepulsionSolver2 = _interopRequireDefault(_HierarchicalRepulsionSolver);

	  var _SpringSolver = __webpack_require__(99);

	  var _SpringSolver2 = _interopRequireDefault(_SpringSolver);

	  var _HierarchicalSpringSolver = __webpack_require__(100);

	  var _HierarchicalSpringSolver2 = _interopRequireDefault(_HierarchicalSpringSolver);

	  var _CentralGravitySolver = __webpack_require__(101);

	  var _CentralGravitySolver2 = _interopRequireDefault(_CentralGravitySolver);

	  var _FA2BasedRepulsionSolver = __webpack_require__(102);

	  var _FA2BasedRepulsionSolver2 = _interopRequireDefault(_FA2BasedRepulsionSolver);

	  var _FA2BasedCentralGravitySolver = __webpack_require__(103);

	  var _FA2BasedCentralGravitySolver2 = _interopRequireDefault(_FA2BasedCentralGravitySolver);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var PhysicsEngine = function () {
	    function PhysicsEngine(body) {
	      _classCallCheck(this, PhysicsEngine);

	      this.body = body;
	      this.physicsBody = { physicsNodeIndices: [], physicsEdgeIndices: [], forces: {}, velocities: {} };

	      this.physicsEnabled = true;
	      this.simulationInterval = 1000 / 60;
	      this.requiresTimeout = true;
	      this.previousStates = {};
	      this.referenceState = {};
	      this.freezeCache = {};
	      this.renderTimer = undefined;

	      // parameters for the adaptive timestep
	      this.adaptiveTimestep = false;
	      this.adaptiveTimestepEnabled = false;
	      this.adaptiveCounter = 0;
	      this.adaptiveInterval = 3;

	      this.stabilized = false;
	      this.startedStabilization = false;
	      this.stabilizationIterations = 0;
	      this.ready = false; // will be set to true if the stabilize

	      // default options
	      this.options = {};
	      this.defaultOptions = {
	        enabled: true,
	        barnesHut: {
	          theta: 0.5,
	          gravitationalConstant: -2000,
	          centralGravity: 0.3,
	          springLength: 95,
	          springConstant: 0.04,
	          damping: 0.09,
	          avoidOverlap: 0
	        },
	        forceAtlas2Based: {
	          theta: 0.5,
	          gravitationalConstant: -50,
	          centralGravity: 0.01,
	          springConstant: 0.08,
	          springLength: 100,
	          damping: 0.4,
	          avoidOverlap: 0
	        },
	        repulsion: {
	          centralGravity: 0.2,
	          springLength: 200,
	          springConstant: 0.05,
	          nodeDistance: 100,
	          damping: 0.09,
	          avoidOverlap: 0
	        },
	        hierarchicalRepulsion: {
	          centralGravity: 0.0,
	          springLength: 100,
	          springConstant: 0.01,
	          nodeDistance: 120,
	          damping: 0.09
	        },
	        maxVelocity: 50,
	        minVelocity: 0.75, // px/s
	        solver: 'barnesHut',
	        stabilization: {
	          enabled: true,
	          iterations: 1000, // maximum number of iteration to stabilize
	          updateInterval: 50,
	          onlyDynamicEdges: false,
	          fit: true
	        },
	        timestep: 0.5,
	        adaptiveTimestep: true
	      };
	      util.extend(this.options, this.defaultOptions);
	      this.timestep = 0.5;
	      this.layoutFailed = false;

	      this.bindEventListeners();
	    }

	    _createClass(PhysicsEngine, [{
	      key: 'bindEventListeners',
	      value: function bindEventListeners() {
	        var _this = this;

	        this.body.emitter.on('initPhysics', function () {
	          _this.initPhysics();
	        });
	        this.body.emitter.on('_layoutFailed', function () {
	          _this.layoutFailed = true;
	        });
	        this.body.emitter.on('resetPhysics', function () {
	          _this.stopSimulation();_this.ready = false;
	        });
	        this.body.emitter.on('disablePhysics', function () {
	          _this.physicsEnabled = false;_this.stopSimulation();
	        });
	        this.body.emitter.on('restorePhysics', function () {
	          _this.setOptions(_this.options);
	          if (_this.ready === true) {
	            _this.startSimulation();
	          }
	        });
	        this.body.emitter.on('startSimulation', function () {
	          if (_this.ready === true) {
	            _this.startSimulation();
	          }
	        });
	        this.body.emitter.on('stopSimulation', function () {
	          _this.stopSimulation();
	        });
	        this.body.emitter.on('destroy', function () {
	          _this.stopSimulation(false);
	          _this.body.emitter.off();
	        });
	        // this event will trigger a rebuilding of the cache everything. Used when nodes or edges have been added or removed.
	        this.body.emitter.on("_dataChanged", function () {
	          // update shortcut lists
	          _this.updatePhysicsData();
	        });

	        // debug: show forces
	        // this.body.emitter.on("afterDrawing", (ctx) => {this._drawForces(ctx);});
	      }

	      /**
	       * set the physics options
	       * @param options
	       */

	    }, {
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (options !== undefined) {
	          if (options === false) {
	            this.options.enabled = false;
	            this.physicsEnabled = false;
	            this.stopSimulation();
	          } else {
	            this.physicsEnabled = true;
	            util.selectiveNotDeepExtend(['stabilization'], this.options, options);
	            util.mergeOptions(this.options, options, 'stabilization');

	            if (options.enabled === undefined) {
	              this.options.enabled = true;
	            }

	            if (this.options.enabled === false) {
	              this.physicsEnabled = false;
	              this.stopSimulation();
	            }

	            // set the timestep
	            this.timestep = this.options.timestep;
	          }
	        }
	        this.init();
	      }

	      /**
	       * configure the engine.
	       */

	    }, {
	      key: 'init',
	      value: function init() {
	        var options;
	        if (this.options.solver === 'forceAtlas2Based') {
	          options = this.options.forceAtlas2Based;
	          this.nodesSolver = new _FA2BasedRepulsionSolver2.default(this.body, this.physicsBody, options);
	          this.edgesSolver = new _SpringSolver2.default(this.body, this.physicsBody, options);
	          this.gravitySolver = new _FA2BasedCentralGravitySolver2.default(this.body, this.physicsBody, options);
	        } else if (this.options.solver === 'repulsion') {
	          options = this.options.repulsion;
	          this.nodesSolver = new _RepulsionSolver2.default(this.body, this.physicsBody, options);
	          this.edgesSolver = new _SpringSolver2.default(this.body, this.physicsBody, options);
	          this.gravitySolver = new _CentralGravitySolver2.default(this.body, this.physicsBody, options);
	        } else if (this.options.solver === 'hierarchicalRepulsion') {
	          options = this.options.hierarchicalRepulsion;
	          this.nodesSolver = new _HierarchicalRepulsionSolver2.default(this.body, this.physicsBody, options);
	          this.edgesSolver = new _HierarchicalSpringSolver2.default(this.body, this.physicsBody, options);
	          this.gravitySolver = new _CentralGravitySolver2.default(this.body, this.physicsBody, options);
	        } else {
	          // barnesHut
	          options = this.options.barnesHut;
	          this.nodesSolver = new _BarnesHutSolver2.default(this.body, this.physicsBody, options);
	          this.edgesSolver = new _SpringSolver2.default(this.body, this.physicsBody, options);
	          this.gravitySolver = new _CentralGravitySolver2.default(this.body, this.physicsBody, options);
	        }

	        this.modelOptions = options;
	      }

	      /**
	       * initialize the engine
	       */

	    }, {
	      key: 'initPhysics',
	      value: function initPhysics() {
	        if (this.physicsEnabled === true && this.options.enabled === true) {
	          if (this.options.stabilization.enabled === true) {
	            this.stabilize();
	          } else {
	            this.stabilized = false;
	            this.ready = true;
	            this.body.emitter.emit('fit', {}, this.layoutFailed); // if the layout failed, we use the approximation for the zoom
	            this.startSimulation();
	          }
	        } else {
	          this.ready = true;
	          this.body.emitter.emit('fit');
	        }
	      }

	      /**
	       * Start the simulation
	       */

	    }, {
	      key: 'startSimulation',
	      value: function startSimulation() {
	        if (this.physicsEnabled === true && this.options.enabled === true) {
	          this.stabilized = false;

	          // when visible, adaptivity is disabled.
	          this.adaptiveTimestep = false;

	          // this sets the width of all nodes initially which could be required for the avoidOverlap
	          this.body.emitter.emit("_resizeNodes");
	          if (this.viewFunction === undefined) {
	            this.viewFunction = this.simulationStep.bind(this);
	            this.body.emitter.on('initRedraw', this.viewFunction);
	            this.body.emitter.emit('_startRendering');
	          }
	        } else {
	          this.body.emitter.emit('_redraw');
	        }
	      }

	      /**
	       * Stop the simulation, force stabilization.
	       */

	    }, {
	      key: 'stopSimulation',
	      value: function stopSimulation() {
	        var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	        this.stabilized = true;
	        if (emit === true) {
	          this._emitStabilized();
	        }
	        if (this.viewFunction !== undefined) {
	          this.body.emitter.off('initRedraw', this.viewFunction);
	          this.viewFunction = undefined;
	          if (emit === true) {
	            this.body.emitter.emit('_stopRendering');
	          }
	        }
	      }

	      /**
	       * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.
	       *
	       */

	    }, {
	      key: 'simulationStep',
	      value: function simulationStep() {
	        // check if the physics have settled
	        var startTime = Date.now();
	        this.physicsTick();
	        var physicsTime = Date.now() - startTime;

	        // run double speed if it is a little graph
	        if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {
	          this.physicsTick();

	          // this makes sure there is no jitter. The decision is taken once to run it at double speed.
	          this.runDoubleSpeed = true;
	        }

	        if (this.stabilized === true) {
	          this.stopSimulation();
	        }
	      }

	      /**
	       * trigger the stabilized event.
	       * @private
	       */

	    }, {
	      key: '_emitStabilized',
	      value: function _emitStabilized() {
	        var _this2 = this;

	        var amountOfIterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.stabilizationIterations;

	        if (this.stabilizationIterations > 1 || this.startedStabilization === true) {
	          setTimeout(function () {
	            _this2.body.emitter.emit('stabilized', { iterations: amountOfIterations });
	            _this2.startedStabilization = false;
	            _this2.stabilizationIterations = 0;
	          }, 0);
	        }
	      }

	      /**
	       * A single simulation step (or 'tick') in the physics simulation
	       *
	       * @private
	       */

	    }, {
	      key: 'physicsTick',
	      value: function physicsTick() {
	        // this is here to ensure that there is no start event when the network is already stable.
	        if (this.startedStabilization === false) {
	          this.body.emitter.emit('startStabilizing');
	          this.startedStabilization = true;
	        }

	        if (this.stabilized === false) {
	          // adaptivity means the timestep adapts to the situation, only applicable for stabilization
	          if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {
	            // this is the factor for increasing the timestep on success.
	            var factor = 1.2;

	            // we assume the adaptive interval is
	            if (this.adaptiveCounter % this.adaptiveInterval === 0) {
	              // we leave the timestep stable for "interval" iterations.
	              // first the big step and revert. Revert saves the reference state.
	              this.timestep = 2 * this.timestep;
	              this.calculateForces();
	              this.moveNodes();
	              this.revert();

	              // now the normal step. Since this is the last step, it is the more stable one and we will take this.
	              this.timestep = 0.5 * this.timestep;

	              // since it's half the step, we do it twice.
	              this.calculateForces();
	              this.moveNodes();
	              this.calculateForces();
	              this.moveNodes();

	              // we compare the two steps. if it is acceptable we double the step.
	              if (this._evaluateStepQuality() === true) {
	                this.timestep = factor * this.timestep;
	              } else {
	                // if not, we decrease the step to a minimum of the options timestep.
	                // if the decreased timestep is smaller than the options step, we do not reset the counter
	                // we assume that the options timestep is stable enough.
	                if (this.timestep / factor < this.options.timestep) {
	                  this.timestep = this.options.timestep;
	                } else {
	                  // if the timestep was larger than 2 times the option one we check the adaptivity again to ensure
	                  // that large instabilities do not form.
	                  this.adaptiveCounter = -1; // check again next iteration
	                  this.timestep = Math.max(this.options.timestep, this.timestep / factor);
	                }
	              }
	            } else {
	              // normal step, keeping timestep constant
	              this.calculateForces();
	              this.moveNodes();
	            }

	            // increment the counter
	            this.adaptiveCounter += 1;
	          } else {
	            // case for the static timestep, we reset it to the one in options and take a normal step.
	            this.timestep = this.options.timestep;
	            this.calculateForces();
	            this.moveNodes();
	          }

	          // determine if the network has stabilzied
	          if (this.stabilized === true) {
	            this.revert();
	          }

	          this.stabilizationIterations++;
	        }
	      }

	      /**
	       * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.
	       *
	       * @private
	       */

	    }, {
	      key: 'updatePhysicsData',
	      value: function updatePhysicsData() {
	        this.physicsBody.forces = {};
	        this.physicsBody.physicsNodeIndices = [];
	        this.physicsBody.physicsEdgeIndices = [];
	        var nodes = this.body.nodes;
	        var edges = this.body.edges;

	        // get node indices for physics
	        for (var nodeId in nodes) {
	          if (nodes.hasOwnProperty(nodeId)) {
	            if (nodes[nodeId].options.physics === true) {
	              this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);
	            }
	          }
	        }

	        // get edge indices for physics
	        for (var edgeId in edges) {
	          if (edges.hasOwnProperty(edgeId)) {
	            if (edges[edgeId].options.physics === true) {
	              this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);
	            }
	          }
	        }

	        // get the velocity and the forces vector
	        for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
	          var _nodeId = this.physicsBody.physicsNodeIndices[i];
	          this.physicsBody.forces[_nodeId] = { x: 0, y: 0 };

	          // forces can be reset because they are recalculated. Velocities have to persist.
	          if (this.physicsBody.velocities[_nodeId] === undefined) {
	            this.physicsBody.velocities[_nodeId] = { x: 0, y: 0 };
	          }
	        }

	        // clean deleted nodes from the velocity vector
	        for (var _nodeId2 in this.physicsBody.velocities) {
	          if (nodes[_nodeId2] === undefined) {
	            delete this.physicsBody.velocities[_nodeId2];
	          }
	        }
	      }

	      /**
	       * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.
	       */

	    }, {
	      key: 'revert',
	      value: function revert() {
	        var nodeIds = Object.keys(this.previousStates);
	        var nodes = this.body.nodes;
	        var velocities = this.physicsBody.velocities;
	        this.referenceState = {};

	        for (var i = 0; i < nodeIds.length; i++) {
	          var nodeId = nodeIds[i];
	          if (nodes[nodeId] !== undefined) {
	            if (nodes[nodeId].options.physics === true) {
	              this.referenceState[nodeId] = {
	                positions: { x: nodes[nodeId].x, y: nodes[nodeId].y }
	              };
	              velocities[nodeId].x = this.previousStates[nodeId].vx;
	              velocities[nodeId].y = this.previousStates[nodeId].vy;
	              nodes[nodeId].x = this.previousStates[nodeId].x;
	              nodes[nodeId].y = this.previousStates[nodeId].y;
	            }
	          } else {
	            delete this.previousStates[nodeId];
	          }
	        }
	      }

	      /**
	       * This compares the reference state to the current state
	       */

	    }, {
	      key: '_evaluateStepQuality',
	      value: function _evaluateStepQuality() {
	        var dx = void 0,
	            dy = void 0,
	            dpos = void 0;
	        var nodes = this.body.nodes;
	        var reference = this.referenceState;
	        var posThreshold = 0.3;

	        for (var nodeId in this.referenceState) {
	          if (this.referenceState.hasOwnProperty(nodeId) && nodes[nodeId] !== undefined) {
	            dx = nodes[nodeId].x - reference[nodeId].positions.x;
	            dy = nodes[nodeId].y - reference[nodeId].positions.y;

	            dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));

	            if (dpos > posThreshold) {
	              return false;
	            }
	          }
	        }
	        return true;
	      }

	      /**
	       * move the nodes one timestep and check if they are stabilized
	       * @returns {boolean}
	       */

	    }, {
	      key: 'moveNodes',
	      value: function moveNodes() {
	        var nodeIndices = this.physicsBody.physicsNodeIndices;
	        var maxVelocity = this.options.maxVelocity ? this.options.maxVelocity : 1e9;
	        var maxNodeVelocity = 0;
	        var averageNodeVelocity = 0;

	        // the velocity threshold (energy in the system) for the adaptivity toggle
	        var velocityAdaptiveThreshold = 5;

	        for (var i = 0; i < nodeIndices.length; i++) {
	          var nodeId = nodeIndices[i];
	          var nodeVelocity = this._performStep(nodeId, maxVelocity);
	          // stabilized is true if stabilized is true and velocity is smaller than vmin --> all nodes must be stabilized
	          maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);
	          averageNodeVelocity += nodeVelocity;
	        }

	        // evaluating the stabilized and adaptiveTimestepEnabled conditions
	        this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;
	        this.stabilized = maxNodeVelocity < this.options.minVelocity;
	      }

	      /**
	       * Perform the actual step
	       *
	       * @param nodeId
	       * @param maxVelocity
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_performStep',
	      value: function _performStep(nodeId, maxVelocity) {
	        var node = this.body.nodes[nodeId];
	        var timestep = this.timestep;
	        var forces = this.physicsBody.forces;
	        var velocities = this.physicsBody.velocities;

	        // store the state so we can revert
	        this.previousStates[nodeId] = { x: node.x, y: node.y, vx: velocities[nodeId].x, vy: velocities[nodeId].y };

	        if (node.options.fixed.x === false) {
	          var dx = this.modelOptions.damping * velocities[nodeId].x; // damping force
	          var ax = (forces[nodeId].x - dx) / node.options.mass; // acceleration
	          velocities[nodeId].x += ax * timestep; // velocity
	          velocities[nodeId].x = Math.abs(velocities[nodeId].x) > maxVelocity ? velocities[nodeId].x > 0 ? maxVelocity : -maxVelocity : velocities[nodeId].x;
	          node.x += velocities[nodeId].x * timestep; // position
	        } else {
	          forces[nodeId].x = 0;
	          velocities[nodeId].x = 0;
	        }

	        if (node.options.fixed.y === false) {
	          var dy = this.modelOptions.damping * velocities[nodeId].y; // damping force
	          var ay = (forces[nodeId].y - dy) / node.options.mass; // acceleration
	          velocities[nodeId].y += ay * timestep; // velocity
	          velocities[nodeId].y = Math.abs(velocities[nodeId].y) > maxVelocity ? velocities[nodeId].y > 0 ? maxVelocity : -maxVelocity : velocities[nodeId].y;
	          node.y += velocities[nodeId].y * timestep; // position
	        } else {
	          forces[nodeId].y = 0;
	          velocities[nodeId].y = 0;
	        }

	        var totalVelocity = Math.sqrt(Math.pow(velocities[nodeId].x, 2) + Math.pow(velocities[nodeId].y, 2));
	        return totalVelocity;
	      }

	      /**
	       * calculate the forces for one physics iteration.
	       */

	    }, {
	      key: 'calculateForces',
	      value: function calculateForces() {
	        this.gravitySolver.solve();
	        this.nodesSolver.solve();
	        this.edgesSolver.solve();
	      }

	      /**
	       * When initializing and stabilizing, we can freeze nodes with a predefined position. This greatly speeds up stabilization
	       * because only the supportnodes for the smoothCurves have to settle.
	       *
	       * @private
	       */

	    }, {
	      key: '_freezeNodes',
	      value: function _freezeNodes() {
	        var nodes = this.body.nodes;
	        for (var id in nodes) {
	          if (nodes.hasOwnProperty(id)) {
	            if (nodes[id].x && nodes[id].y) {
	              this.freezeCache[id] = { x: nodes[id].options.fixed.x, y: nodes[id].options.fixed.y };
	              nodes[id].options.fixed.x = true;
	              nodes[id].options.fixed.y = true;
	            }
	          }
	        }
	      }

	      /**
	       * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.
	       *
	       * @private
	       */

	    }, {
	      key: '_restoreFrozenNodes',
	      value: function _restoreFrozenNodes() {
	        var nodes = this.body.nodes;
	        for (var id in nodes) {
	          if (nodes.hasOwnProperty(id)) {
	            if (this.freezeCache[id] !== undefined) {
	              nodes[id].options.fixed.x = this.freezeCache[id].x;
	              nodes[id].options.fixed.y = this.freezeCache[id].y;
	            }
	          }
	        }
	        this.freezeCache = {};
	      }

	      /**
	       * Find a stable position for all nodes
	       */

	    }, {
	      key: 'stabilize',
	      value: function stabilize() {
	        var _this3 = this;

	        var iterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.stabilization.iterations;

	        if (typeof iterations !== 'number') {
	          console.log('The stabilize method needs a numeric amount of iterations. Switching to default: ', this.options.stabilization.iterations);
	          iterations = this.options.stabilization.iterations;
	        }

	        if (this.physicsBody.physicsNodeIndices.length === 0) {
	          this.ready = true;
	          return;
	        }

	        // enable adaptive timesteps
	        this.adaptiveTimestep = true && this.options.adaptiveTimestep;

	        // this sets the width of all nodes initially which could be required for the avoidOverlap
	        this.body.emitter.emit("_resizeNodes");

	        // stop the render loop
	        this.stopSimulation();

	        // set stabilze to false
	        this.stabilized = false;

	        // block redraw requests
	        this.body.emitter.emit('_blockRedraw');
	        this.targetIterations = iterations;

	        // start the stabilization
	        if (this.options.stabilization.onlyDynamicEdges === true) {
	          this._freezeNodes();
	        }
	        this.stabilizationIterations = 0;

	        setTimeout(function () {
	          return _this3._stabilizationBatch();
	        }, 0);
	      }

	      /**
	       * One batch of stabilization
	       * @private
	       */

	    }, {
	      key: '_stabilizationBatch',
	      value: function _stabilizationBatch() {
	        // this is here to ensure that there is at least one start event.
	        if (this.startedStabilization === false) {
	          this.body.emitter.emit('startStabilizing');
	          this.startedStabilization = true;
	        }

	        var count = 0;
	        while (this.stabilized === false && count < this.options.stabilization.updateInterval && this.stabilizationIterations < this.targetIterations) {
	          this.physicsTick();
	          count++;
	        }

	        if (this.stabilized === false && this.stabilizationIterations < this.targetIterations) {
	          this.body.emitter.emit('stabilizationProgress', { iterations: this.stabilizationIterations, total: this.targetIterations });
	          setTimeout(this._stabilizationBatch.bind(this), 0);
	        } else {
	          this._finalizeStabilization();
	        }
	      }

	      /**
	       * Wrap up the stabilization, fit and emit the events.
	       * @private
	       */

	    }, {
	      key: '_finalizeStabilization',
	      value: function _finalizeStabilization() {
	        this.body.emitter.emit('_allowRedraw');
	        if (this.options.stabilization.fit === true) {
	          this.body.emitter.emit('fit');
	        }

	        if (this.options.stabilization.onlyDynamicEdges === true) {
	          this._restoreFrozenNodes();
	        }

	        this.body.emitter.emit('stabilizationIterationsDone');
	        this.body.emitter.emit('_requestRedraw');

	        if (this.stabilized === true) {
	          this._emitStabilized();
	        } else {
	          this.startSimulation();
	        }

	        this.ready = true;
	      }
	    }, {
	      key: '_drawForces',
	      value: function _drawForces(ctx) {
	        for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
	          var node = this.body.nodes[this.physicsBody.physicsNodeIndices[i]];
	          var force = this.physicsBody.forces[this.physicsBody.physicsNodeIndices[i]];
	          var factor = 20;
	          var colorFactor = 0.03;
	          var forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));

	          var size = Math.min(Math.max(5, forceSize), 15);
	          var arrowSize = 3 * size;

	          var color = util.HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);

	          ctx.lineWidth = size;
	          ctx.strokeStyle = color;
	          ctx.beginPath();
	          ctx.moveTo(node.x, node.y);
	          ctx.lineTo(node.x + factor * force.x, node.y + factor * force.y);
	          ctx.stroke();

	          var angle = Math.atan2(force.y, force.x);
	          ctx.fillStyle = color;
	          ctx.arrowEndpoint(node.x + factor * force.x + Math.cos(angle) * arrowSize, node.y + factor * force.y + Math.sin(angle) * arrowSize, angle, arrowSize);
	          ctx.fill();
	        }
	      }
	    }]);

	    return PhysicsEngine;
	  }();

	  exports.default = PhysicsEngine;

	/***/ },
	/* 96 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var BarnesHutSolver = function () {
	    function BarnesHutSolver(body, physicsBody, options) {
	      _classCallCheck(this, BarnesHutSolver);

	      this.body = body;
	      this.physicsBody = physicsBody;
	      this.barnesHutTree;
	      this.setOptions(options);
	      this.randomSeed = 5;

	      // debug: show grid
	      //this.body.emitter.on("afterDrawing", (ctx) => {this._debug(ctx,'#ff0000')})
	    }

	    _createClass(BarnesHutSolver, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        this.options = options;
	        this.thetaInversed = 1 / this.options.theta;
	        this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap)); // if 1 then min distance = 0.5, if 0.5 then min distance = 0.5 + 0.5*node.shape.radius
	      }
	    }, {
	      key: "seededRandom",
	      value: function seededRandom() {
	        var x = Math.sin(this.randomSeed++) * 10000;
	        return x - Math.floor(x);
	      }

	      /**
	       * This function calculates the forces the nodes apply on each other based on a gravitational model.
	       * The Barnes Hut method is used to speed up this N-body simulation.
	       *
	       * @private
	       */

	    }, {
	      key: "solve",
	      value: function solve() {
	        if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {
	          var node = void 0;
	          var nodes = this.body.nodes;
	          var nodeIndices = this.physicsBody.physicsNodeIndices;
	          var nodeCount = nodeIndices.length;

	          // create the tree
	          var barnesHutTree = this._formBarnesHutTree(nodes, nodeIndices);

	          // for debugging
	          this.barnesHutTree = barnesHutTree;

	          // place the nodes one by one recursively
	          for (var i = 0; i < nodeCount; i++) {
	            node = nodes[nodeIndices[i]];
	            if (node.options.mass > 0) {
	              // starting with root is irrelevant, it never passes the BarnesHutSolver condition
	              this._getForceContribution(barnesHutTree.root.children.NW, node);
	              this._getForceContribution(barnesHutTree.root.children.NE, node);
	              this._getForceContribution(barnesHutTree.root.children.SW, node);
	              this._getForceContribution(barnesHutTree.root.children.SE, node);
	            }
	          }
	        }
	      }

	      /**
	       * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.
	       * If a region contains a single node, we check if it is not itself, then we apply the force.
	       *
	       * @param parentBranch
	       * @param node
	       * @private
	       */

	    }, {
	      key: "_getForceContribution",
	      value: function _getForceContribution(parentBranch, node) {
	        // we get no force contribution from an empty region
	        if (parentBranch.childrenCount > 0) {
	          var dx = void 0,
	              dy = void 0,
	              distance = void 0;

	          // get the distance from the center of mass to the node.
	          dx = parentBranch.centerOfMass.x - node.x;
	          dy = parentBranch.centerOfMass.y - node.y;
	          distance = Math.sqrt(dx * dx + dy * dy);

	          // BarnesHutSolver condition
	          // original condition : s/d < theta = passed  ===  d/s > 1/theta = passed
	          // calcSize = 1/s --> d * 1/s > 1/theta = passed
	          if (distance * parentBranch.calcSize > this.thetaInversed) {
	            this._calculateForces(distance, dx, dy, node, parentBranch);
	          } else {
	            // Did not pass the condition, go into children if available
	            if (parentBranch.childrenCount === 4) {
	              this._getForceContribution(parentBranch.children.NW, node);
	              this._getForceContribution(parentBranch.children.NE, node);
	              this._getForceContribution(parentBranch.children.SW, node);
	              this._getForceContribution(parentBranch.children.SE, node);
	            } else {
	              // parentBranch must have only one node, if it was empty we wouldnt be here
	              if (parentBranch.children.data.id != node.id) {
	                // if it is not self
	                this._calculateForces(distance, dx, dy, node, parentBranch);
	              }
	            }
	          }
	        }
	      }

	      /**
	       * Calculate the forces based on the distance.
	       *
	       * @param distance
	       * @param dx
	       * @param dy
	       * @param node
	       * @param parentBranch
	       * @private
	       */

	    }, {
	      key: "_calculateForces",
	      value: function _calculateForces(distance, dx, dy, node, parentBranch) {
	        if (distance === 0) {
	          distance = 0.1;
	          dx = distance;
	        }

	        if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
	          distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
	        }

	        // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
	        // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
	        var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass / Math.pow(distance, 3);
	        var fx = dx * gravityForce;
	        var fy = dy * gravityForce;

	        this.physicsBody.forces[node.id].x += fx;
	        this.physicsBody.forces[node.id].y += fy;
	      }

	      /**
	       * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.
	       *
	       * @param nodes
	       * @param nodeIndices
	       * @private
	       */

	    }, {
	      key: "_formBarnesHutTree",
	      value: function _formBarnesHutTree(nodes, nodeIndices) {
	        var node = void 0;
	        var nodeCount = nodeIndices.length;

	        var minX = nodes[nodeIndices[0]].x;
	        var minY = nodes[nodeIndices[0]].y;
	        var maxX = nodes[nodeIndices[0]].x;
	        var maxY = nodes[nodeIndices[0]].y;

	        // get the range of the nodes
	        for (var i = 1; i < nodeCount; i++) {
	          var x = nodes[nodeIndices[i]].x;
	          var y = nodes[nodeIndices[i]].y;
	          if (nodes[nodeIndices[i]].options.mass > 0) {
	            if (x < minX) {
	              minX = x;
	            }
	            if (x > maxX) {
	              maxX = x;
	            }
	            if (y < minY) {
	              minY = y;
	            }
	            if (y > maxY) {
	              maxY = y;
	            }
	          }
	        }
	        // make the range a square
	        var sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY); // difference between X and Y
	        if (sizeDiff > 0) {
	          minY -= 0.5 * sizeDiff;
	          maxY += 0.5 * sizeDiff;
	        } // xSize > ySize
	        else {
	            minX += 0.5 * sizeDiff;
	            maxX -= 0.5 * sizeDiff;
	          } // xSize < ySize


	        var minimumTreeSize = 1e-5;
	        var rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));
	        var halfRootSize = 0.5 * rootSize;
	        var centerX = 0.5 * (minX + maxX),
	            centerY = 0.5 * (minY + maxY);

	        // construct the barnesHutTree
	        var barnesHutTree = {
	          root: {
	            centerOfMass: { x: 0, y: 0 },
	            mass: 0,
	            range: {
	              minX: centerX - halfRootSize, maxX: centerX + halfRootSize,
	              minY: centerY - halfRootSize, maxY: centerY + halfRootSize
	            },
	            size: rootSize,
	            calcSize: 1 / rootSize,
	            children: { data: null },
	            maxWidth: 0,
	            level: 0,
	            childrenCount: 4
	          }
	        };
	        this._splitBranch(barnesHutTree.root);

	        // place the nodes one by one recursively
	        for (var _i = 0; _i < nodeCount; _i++) {
	          node = nodes[nodeIndices[_i]];
	          if (node.options.mass > 0) {
	            this._placeInTree(barnesHutTree.root, node);
	          }
	        }

	        // make global
	        return barnesHutTree;
	      }

	      /**
	       * this updates the mass of a branch. this is increased by adding a node.
	       *
	       * @param parentBranch
	       * @param node
	       * @private
	       */

	    }, {
	      key: "_updateBranchMass",
	      value: function _updateBranchMass(parentBranch, node) {
	        var totalMass = parentBranch.mass + node.options.mass;
	        var totalMassInv = 1 / totalMass;

	        parentBranch.centerOfMass.x = parentBranch.centerOfMass.x * parentBranch.mass + node.x * node.options.mass;
	        parentBranch.centerOfMass.x *= totalMassInv;

	        parentBranch.centerOfMass.y = parentBranch.centerOfMass.y * parentBranch.mass + node.y * node.options.mass;
	        parentBranch.centerOfMass.y *= totalMassInv;

	        parentBranch.mass = totalMass;
	        var biggestSize = Math.max(Math.max(node.height, node.radius), node.width);
	        parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;
	      }

	      /**
	       * determine in which branch the node will be placed.
	       *
	       * @param parentBranch
	       * @param node
	       * @param skipMassUpdate
	       * @private
	       */

	    }, {
	      key: "_placeInTree",
	      value: function _placeInTree(parentBranch, node, skipMassUpdate) {
	        if (skipMassUpdate != true || skipMassUpdate === undefined) {
	          // update the mass of the branch.
	          this._updateBranchMass(parentBranch, node);
	        }

	        if (parentBranch.children.NW.range.maxX > node.x) {
	          // in NW or SW
	          if (parentBranch.children.NW.range.maxY > node.y) {
	            // in NW
	            this._placeInRegion(parentBranch, node, "NW");
	          } else {
	            // in SW
	            this._placeInRegion(parentBranch, node, "SW");
	          }
	        } else {
	          // in NE or SE
	          if (parentBranch.children.NW.range.maxY > node.y) {
	            // in NE
	            this._placeInRegion(parentBranch, node, "NE");
	          } else {
	            // in SE
	            this._placeInRegion(parentBranch, node, "SE");
	          }
	        }
	      }

	      /**
	       * actually place the node in a region (or branch)
	       *
	       * @param parentBranch
	       * @param node
	       * @param region
	       * @private
	       */

	    }, {
	      key: "_placeInRegion",
	      value: function _placeInRegion(parentBranch, node, region) {
	        switch (parentBranch.children[region].childrenCount) {
	          case 0:
	            // place node here
	            parentBranch.children[region].children.data = node;
	            parentBranch.children[region].childrenCount = 1;
	            this._updateBranchMass(parentBranch.children[region], node);
	            break;
	          case 1:
	            // convert into children
	            // if there are two nodes exactly overlapping (on init, on opening of cluster etc.)
	            // we move one node a little bit and we do not put it in the tree.
	            if (parentBranch.children[region].children.data.x === node.x && parentBranch.children[region].children.data.y === node.y) {
	              node.x += this.seededRandom();
	              node.y += this.seededRandom();
	            } else {
	              this._splitBranch(parentBranch.children[region]);
	              this._placeInTree(parentBranch.children[region], node);
	            }
	            break;
	          case 4:
	            // place in branch
	            this._placeInTree(parentBranch.children[region], node);
	            break;
	        }
	      }

	      /**
	       * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch
	       * after the split is complete.
	       *
	       * @param parentBranch
	       * @private
	       */

	    }, {
	      key: "_splitBranch",
	      value: function _splitBranch(parentBranch) {
	        // if the branch is shaded with a node, replace the node in the new subset.
	        var containedNode = null;
	        if (parentBranch.childrenCount === 1) {
	          containedNode = parentBranch.children.data;
	          parentBranch.mass = 0;
	          parentBranch.centerOfMass.x = 0;
	          parentBranch.centerOfMass.y = 0;
	        }
	        parentBranch.childrenCount = 4;
	        parentBranch.children.data = null;
	        this._insertRegion(parentBranch, "NW");
	        this._insertRegion(parentBranch, "NE");
	        this._insertRegion(parentBranch, "SW");
	        this._insertRegion(parentBranch, "SE");

	        if (containedNode != null) {
	          this._placeInTree(parentBranch, containedNode);
	        }
	      }

	      /**
	       * This function subdivides the region into four new segments.
	       * Specifically, this inserts a single new segment.
	       * It fills the children section of the parentBranch
	       *
	       * @param parentBranch
	       * @param region
	       * @param parentRange
	       * @private
	       */

	    }, {
	      key: "_insertRegion",
	      value: function _insertRegion(parentBranch, region) {
	        var minX = void 0,
	            maxX = void 0,
	            minY = void 0,
	            maxY = void 0;
	        var childSize = 0.5 * parentBranch.size;
	        switch (region) {
	          case "NW":
	            minX = parentBranch.range.minX;
	            maxX = parentBranch.range.minX + childSize;
	            minY = parentBranch.range.minY;
	            maxY = parentBranch.range.minY + childSize;
	            break;
	          case "NE":
	            minX = parentBranch.range.minX + childSize;
	            maxX = parentBranch.range.maxX;
	            minY = parentBranch.range.minY;
	            maxY = parentBranch.range.minY + childSize;
	            break;
	          case "SW":
	            minX = parentBranch.range.minX;
	            maxX = parentBranch.range.minX + childSize;
	            minY = parentBranch.range.minY + childSize;
	            maxY = parentBranch.range.maxY;
	            break;
	          case "SE":
	            minX = parentBranch.range.minX + childSize;
	            maxX = parentBranch.range.maxX;
	            minY = parentBranch.range.minY + childSize;
	            maxY = parentBranch.range.maxY;
	            break;
	        }

	        parentBranch.children[region] = {
	          centerOfMass: { x: 0, y: 0 },
	          mass: 0,
	          range: { minX: minX, maxX: maxX, minY: minY, maxY: maxY },
	          size: 0.5 * parentBranch.size,
	          calcSize: 2 * parentBranch.calcSize,
	          children: { data: null },
	          maxWidth: 0,
	          level: parentBranch.level + 1,
	          childrenCount: 0
	        };
	      }

	      //---------------------------  DEBUGGING BELOW  ---------------------------//


	      /**
	       * This function is for debugging purposed, it draws the tree.
	       *
	       * @param ctx
	       * @param color
	       * @private
	       */

	    }, {
	      key: "_debug",
	      value: function _debug(ctx, color) {
	        if (this.barnesHutTree !== undefined) {

	          ctx.lineWidth = 1;

	          this._drawBranch(this.barnesHutTree.root, ctx, color);
	        }
	      }

	      /**
	       * This function is for debugging purposes. It draws the branches recursively.
	       *
	       * @param branch
	       * @param ctx
	       * @param color
	       * @private
	       */

	    }, {
	      key: "_drawBranch",
	      value: function _drawBranch(branch, ctx, color) {
	        if (color === undefined) {
	          color = "#FF0000";
	        }

	        if (branch.childrenCount === 4) {
	          this._drawBranch(branch.children.NW, ctx);
	          this._drawBranch(branch.children.NE, ctx);
	          this._drawBranch(branch.children.SE, ctx);
	          this._drawBranch(branch.children.SW, ctx);
	        }
	        ctx.strokeStyle = color;
	        ctx.beginPath();
	        ctx.moveTo(branch.range.minX, branch.range.minY);
	        ctx.lineTo(branch.range.maxX, branch.range.minY);
	        ctx.stroke();

	        ctx.beginPath();
	        ctx.moveTo(branch.range.maxX, branch.range.minY);
	        ctx.lineTo(branch.range.maxX, branch.range.maxY);
	        ctx.stroke();

	        ctx.beginPath();
	        ctx.moveTo(branch.range.maxX, branch.range.maxY);
	        ctx.lineTo(branch.range.minX, branch.range.maxY);
	        ctx.stroke();

	        ctx.beginPath();
	        ctx.moveTo(branch.range.minX, branch.range.maxY);
	        ctx.lineTo(branch.range.minX, branch.range.minY);
	        ctx.stroke();

	        /*
	         if (branch.mass > 0) {
	         ctx.circle(branch.centerOfMass.x, branch.centerOfMass.y, 3*branch.mass);
	         ctx.stroke();
	         }
	         */
	      }
	    }]);

	    return BarnesHutSolver;
	  }();

	  exports.default = BarnesHutSolver;

	/***/ },
	/* 97 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var RepulsionSolver = function () {
	    function RepulsionSolver(body, physicsBody, options) {
	      _classCallCheck(this, RepulsionSolver);

	      this.body = body;
	      this.physicsBody = physicsBody;
	      this.setOptions(options);
	    }

	    _createClass(RepulsionSolver, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        this.options = options;
	      }
	      /**
	       * Calculate the forces the nodes apply on each other based on a repulsion field.
	       * This field is linearly approximated.
	       *
	       * @private
	       */

	    }, {
	      key: "solve",
	      value: function solve() {
	        var dx, dy, distance, fx, fy, repulsingForce, node1, node2;

	        var nodes = this.body.nodes;
	        var nodeIndices = this.physicsBody.physicsNodeIndices;
	        var forces = this.physicsBody.forces;

	        // repulsing forces between nodes
	        var nodeDistance = this.options.nodeDistance;

	        // approximation constants
	        var a = -2 / 3 / nodeDistance;
	        var b = 4 / 3;

	        // we loop from i over all but the last entree in the array
	        // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
	        for (var i = 0; i < nodeIndices.length - 1; i++) {
	          node1 = nodes[nodeIndices[i]];
	          for (var j = i + 1; j < nodeIndices.length; j++) {
	            node2 = nodes[nodeIndices[j]];

	            dx = node2.x - node1.x;
	            dy = node2.y - node1.y;
	            distance = Math.sqrt(dx * dx + dy * dy);

	            // same condition as BarnesHutSolver, making sure nodes are never 100% overlapping.
	            if (distance === 0) {
	              distance = 0.1 * Math.random();
	              dx = distance;
	            }

	            if (distance < 2 * nodeDistance) {
	              if (distance < 0.5 * nodeDistance) {
	                repulsingForce = 1.0;
	              } else {
	                repulsingForce = a * distance + b; // linear approx of  1 / (1 + Math.exp((distance / nodeDistance - 1) * steepness))
	              }
	              repulsingForce = repulsingForce / distance;

	              fx = dx * repulsingForce;
	              fy = dy * repulsingForce;

	              forces[node1.id].x -= fx;
	              forces[node1.id].y -= fy;
	              forces[node2.id].x += fx;
	              forces[node2.id].y += fy;
	            }
	          }
	        }
	      }
	    }]);

	    return RepulsionSolver;
	  }();

	  exports.default = RepulsionSolver;

	/***/ },
	/* 98 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var HierarchicalRepulsionSolver = function () {
	    function HierarchicalRepulsionSolver(body, physicsBody, options) {
	      _classCallCheck(this, HierarchicalRepulsionSolver);

	      this.body = body;
	      this.physicsBody = physicsBody;
	      this.setOptions(options);
	    }

	    _createClass(HierarchicalRepulsionSolver, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        this.options = options;
	      }

	      /**
	       * Calculate the forces the nodes apply on each other based on a repulsion field.
	       * This field is linearly approximated.
	       *
	       * @private
	       */

	    }, {
	      key: "solve",
	      value: function solve() {
	        var dx, dy, distance, fx, fy, repulsingForce, node1, node2, i, j;

	        var nodes = this.body.nodes;
	        var nodeIndices = this.physicsBody.physicsNodeIndices;
	        var forces = this.physicsBody.forces;

	        // repulsing forces between nodes
	        var nodeDistance = this.options.nodeDistance;

	        // we loop from i over all but the last entree in the array
	        // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
	        for (i = 0; i < nodeIndices.length - 1; i++) {
	          node1 = nodes[nodeIndices[i]];
	          for (j = i + 1; j < nodeIndices.length; j++) {
	            node2 = nodes[nodeIndices[j]];

	            // nodes only affect nodes on their level
	            if (node1.level === node2.level) {
	              dx = node2.x - node1.x;
	              dy = node2.y - node1.y;
	              distance = Math.sqrt(dx * dx + dy * dy);

	              var steepness = 0.05;
	              if (distance < nodeDistance) {
	                repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * nodeDistance, 2);
	              } else {
	                repulsingForce = 0;
	              }
	              // normalize force with
	              if (distance === 0) {
	                distance = 0.01;
	              } else {
	                repulsingForce = repulsingForce / distance;
	              }
	              fx = dx * repulsingForce;
	              fy = dy * repulsingForce;

	              forces[node1.id].x -= fx;
	              forces[node1.id].y -= fy;
	              forces[node2.id].x += fx;
	              forces[node2.id].y += fy;
	            }
	          }
	        }
	      }
	    }]);

	    return HierarchicalRepulsionSolver;
	  }();

	  exports.default = HierarchicalRepulsionSolver;

	/***/ },
	/* 99 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var SpringSolver = function () {
	    function SpringSolver(body, physicsBody, options) {
	      _classCallCheck(this, SpringSolver);

	      this.body = body;
	      this.physicsBody = physicsBody;
	      this.setOptions(options);
	    }

	    _createClass(SpringSolver, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        this.options = options;
	      }

	      /**
	       * This function calculates the springforces on the nodes, accounting for the support nodes.
	       *
	       * @private
	       */

	    }, {
	      key: "solve",
	      value: function solve() {
	        var edgeLength = void 0,
	            edge = void 0;
	        var edgeIndices = this.physicsBody.physicsEdgeIndices;
	        var edges = this.body.edges;
	        var node1 = void 0,
	            node2 = void 0,
	            node3 = void 0;

	        // forces caused by the edges, modelled as springs
	        for (var i = 0; i < edgeIndices.length; i++) {
	          edge = edges[edgeIndices[i]];
	          if (edge.connected === true && edge.toId !== edge.fromId) {
	            // only calculate forces if nodes are in the same sector
	            if (this.body.nodes[edge.toId] !== undefined && this.body.nodes[edge.fromId] !== undefined) {
	              if (edge.edgeType.via !== undefined) {
	                edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;
	                node1 = edge.to;
	                node2 = edge.edgeType.via;
	                node3 = edge.from;

	                this._calculateSpringForce(node1, node2, 0.5 * edgeLength);
	                this._calculateSpringForce(node2, node3, 0.5 * edgeLength);
	              } else {
	                // the * 1.5 is here so the edge looks as large as a smooth edge. It does not initially because the smooth edges use
	                // the support nodes which exert a repulsive force on the to and from nodes, making the edge appear larger.
	                edgeLength = edge.options.length === undefined ? this.options.springLength * 1.5 : edge.options.length;
	                this._calculateSpringForce(edge.from, edge.to, edgeLength);
	              }
	            }
	          }
	        }
	      }

	      /**
	       * This is the code actually performing the calculation for the function above.
	       *
	       * @param node1
	       * @param node2
	       * @param edgeLength
	       * @private
	       */

	    }, {
	      key: "_calculateSpringForce",
	      value: function _calculateSpringForce(node1, node2, edgeLength) {
	        var dx = node1.x - node2.x;
	        var dy = node1.y - node2.y;
	        var distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);

	        // the 1/distance is so the fx and fy can be calculated without sine or cosine.
	        var springForce = this.options.springConstant * (edgeLength - distance) / distance;

	        var fx = dx * springForce;
	        var fy = dy * springForce;

	        // handle the case where one node is not part of the physcis
	        if (this.physicsBody.forces[node1.id] !== undefined) {
	          this.physicsBody.forces[node1.id].x += fx;
	          this.physicsBody.forces[node1.id].y += fy;
	        }

	        if (this.physicsBody.forces[node2.id] !== undefined) {
	          this.physicsBody.forces[node2.id].x -= fx;
	          this.physicsBody.forces[node2.id].y -= fy;
	        }
	      }
	    }]);

	    return SpringSolver;
	  }();

	  exports.default = SpringSolver;

	/***/ },
	/* 100 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var HierarchicalSpringSolver = function () {
	    function HierarchicalSpringSolver(body, physicsBody, options) {
	      _classCallCheck(this, HierarchicalSpringSolver);

	      this.body = body;
	      this.physicsBody = physicsBody;
	      this.setOptions(options);
	    }

	    _createClass(HierarchicalSpringSolver, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        this.options = options;
	      }

	      /**
	       * This function calculates the springforces on the nodes, accounting for the support nodes.
	       *
	       * @private
	       */

	    }, {
	      key: "solve",
	      value: function solve() {
	        var edgeLength, edge;
	        var dx, dy, fx, fy, springForce, distance;
	        var edges = this.body.edges;
	        var factor = 0.5;

	        var edgeIndices = this.physicsBody.physicsEdgeIndices;
	        var nodeIndices = this.physicsBody.physicsNodeIndices;
	        var forces = this.physicsBody.forces;

	        // initialize the spring force counters
	        for (var i = 0; i < nodeIndices.length; i++) {
	          var nodeId = nodeIndices[i];
	          forces[nodeId].springFx = 0;
	          forces[nodeId].springFy = 0;
	        }

	        // forces caused by the edges, modelled as springs
	        for (var _i = 0; _i < edgeIndices.length; _i++) {
	          edge = edges[edgeIndices[_i]];
	          if (edge.connected === true) {
	            edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;

	            dx = edge.from.x - edge.to.x;
	            dy = edge.from.y - edge.to.y;
	            distance = Math.sqrt(dx * dx + dy * dy);
	            distance = distance === 0 ? 0.01 : distance;

	            // the 1/distance is so the fx and fy can be calculated without sine or cosine.
	            springForce = this.options.springConstant * (edgeLength - distance) / distance;

	            fx = dx * springForce;
	            fy = dy * springForce;

	            if (edge.to.level != edge.from.level) {
	              if (forces[edge.toId] !== undefined) {
	                forces[edge.toId].springFx -= fx;
	                forces[edge.toId].springFy -= fy;
	              }
	              if (forces[edge.fromId] !== undefined) {
	                forces[edge.fromId].springFx += fx;
	                forces[edge.fromId].springFy += fy;
	              }
	            } else {
	              if (forces[edge.toId] !== undefined) {
	                forces[edge.toId].x -= factor * fx;
	                forces[edge.toId].y -= factor * fy;
	              }
	              if (forces[edge.fromId] !== undefined) {
	                forces[edge.fromId].x += factor * fx;
	                forces[edge.fromId].y += factor * fy;
	              }
	            }
	          }
	        }

	        // normalize spring forces
	        var springForce = 1;
	        var springFx, springFy;
	        for (var _i2 = 0; _i2 < nodeIndices.length; _i2++) {
	          var _nodeId = nodeIndices[_i2];
	          springFx = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFx));
	          springFy = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFy));

	          forces[_nodeId].x += springFx;
	          forces[_nodeId].y += springFy;
	        }

	        // retain energy balance
	        var totalFx = 0;
	        var totalFy = 0;
	        for (var _i3 = 0; _i3 < nodeIndices.length; _i3++) {
	          var _nodeId2 = nodeIndices[_i3];
	          totalFx += forces[_nodeId2].x;
	          totalFy += forces[_nodeId2].y;
	        }
	        var correctionFx = totalFx / nodeIndices.length;
	        var correctionFy = totalFy / nodeIndices.length;

	        for (var _i4 = 0; _i4 < nodeIndices.length; _i4++) {
	          var _nodeId3 = nodeIndices[_i4];
	          forces[_nodeId3].x -= correctionFx;
	          forces[_nodeId3].y -= correctionFy;
	        }
	      }
	    }]);

	    return HierarchicalSpringSolver;
	  }();

	  exports.default = HierarchicalSpringSolver;

	/***/ },
	/* 101 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var CentralGravitySolver = function () {
	    function CentralGravitySolver(body, physicsBody, options) {
	      _classCallCheck(this, CentralGravitySolver);

	      this.body = body;
	      this.physicsBody = physicsBody;
	      this.setOptions(options);
	    }

	    _createClass(CentralGravitySolver, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        this.options = options;
	      }
	    }, {
	      key: "solve",
	      value: function solve() {
	        var dx = void 0,
	            dy = void 0,
	            distance = void 0,
	            node = void 0;
	        var nodes = this.body.nodes;
	        var nodeIndices = this.physicsBody.physicsNodeIndices;
	        var forces = this.physicsBody.forces;

	        for (var i = 0; i < nodeIndices.length; i++) {
	          var nodeId = nodeIndices[i];
	          node = nodes[nodeId];
	          dx = -node.x;
	          dy = -node.y;
	          distance = Math.sqrt(dx * dx + dy * dy);

	          this._calculateForces(distance, dx, dy, forces, node);
	        }
	      }

	      /**
	       * Calculate the forces based on the distance.
	       * @private
	       */

	    }, {
	      key: "_calculateForces",
	      value: function _calculateForces(distance, dx, dy, forces, node) {
	        var gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;
	        forces[node.id].x = dx * gravityForce;
	        forces[node.id].y = dy * gravityForce;
	      }
	    }]);

	    return CentralGravitySolver;
	  }();

	  exports.default = CentralGravitySolver;

	/***/ },
	/* 102 */
	/***/ function(module, exports, __webpack_require__) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _BarnesHutSolver2 = __webpack_require__(96);

	  var _BarnesHutSolver3 = _interopRequireDefault(_BarnesHutSolver2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var ForceAtlas2BasedRepulsionSolver = function (_BarnesHutSolver) {
	    _inherits(ForceAtlas2BasedRepulsionSolver, _BarnesHutSolver);

	    function ForceAtlas2BasedRepulsionSolver(body, physicsBody, options) {
	      _classCallCheck(this, ForceAtlas2BasedRepulsionSolver);

	      return _possibleConstructorReturn(this, (ForceAtlas2BasedRepulsionSolver.__proto__ || Object.getPrototypeOf(ForceAtlas2BasedRepulsionSolver)).call(this, body, physicsBody, options));
	    }

	    /**
	     * Calculate the forces based on the distance.
	     *
	     * @param distance
	     * @param dx
	     * @param dy
	     * @param node
	     * @param parentBranch
	     * @private
	     */


	    _createClass(ForceAtlas2BasedRepulsionSolver, [{
	      key: "_calculateForces",
	      value: function _calculateForces(distance, dx, dy, node, parentBranch) {
	        if (distance === 0) {
	          distance = 0.1 * Math.random();
	          dx = distance;
	        }

	        if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
	          distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
	        }

	        var degree = node.edges.length + 1;
	        // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
	        // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
	        var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass * degree / Math.pow(distance, 2);
	        var fx = dx * gravityForce;
	        var fy = dy * gravityForce;

	        this.physicsBody.forces[node.id].x += fx;
	        this.physicsBody.forces[node.id].y += fy;
	      }
	    }]);

	    return ForceAtlas2BasedRepulsionSolver;
	  }(_BarnesHutSolver3.default);

	  exports.default = ForceAtlas2BasedRepulsionSolver;

	/***/ },
	/* 103 */
	/***/ function(module, exports, __webpack_require__) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _CentralGravitySolver2 = __webpack_require__(101);

	  var _CentralGravitySolver3 = _interopRequireDefault(_CentralGravitySolver2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  var ForceAtlas2BasedCentralGravitySolver = function (_CentralGravitySolver) {
	    _inherits(ForceAtlas2BasedCentralGravitySolver, _CentralGravitySolver);

	    function ForceAtlas2BasedCentralGravitySolver(body, physicsBody, options) {
	      _classCallCheck(this, ForceAtlas2BasedCentralGravitySolver);

	      return _possibleConstructorReturn(this, (ForceAtlas2BasedCentralGravitySolver.__proto__ || Object.getPrototypeOf(ForceAtlas2BasedCentralGravitySolver)).call(this, body, physicsBody, options));
	    }

	    /**
	     * Calculate the forces based on the distance.
	     * @private
	     */


	    _createClass(ForceAtlas2BasedCentralGravitySolver, [{
	      key: "_calculateForces",
	      value: function _calculateForces(distance, dx, dy, forces, node) {
	        if (distance > 0) {
	          var degree = node.edges.length + 1;
	          var gravityForce = this.options.centralGravity * degree * node.options.mass;
	          forces[node.id].x = dx * gravityForce;
	          forces[node.id].y = dy * gravityForce;
	        }
	      }
	    }]);

	    return ForceAtlas2BasedCentralGravitySolver;
	  }(_CentralGravitySolver3.default);

	  exports.default = ForceAtlas2BasedCentralGravitySolver;

	/***/ },
	/* 104 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NetworkUtil = __webpack_require__(105);

	  var _NetworkUtil2 = _interopRequireDefault(_NetworkUtil);

	  var _Cluster = __webpack_require__(106);

	  var _Cluster2 = _interopRequireDefault(_Cluster);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var ClusterEngine = function () {
	    function ClusterEngine(body) {
	      var _this = this;

	      _classCallCheck(this, ClusterEngine);

	      this.body = body;
	      this.clusteredNodes = {};
	      this.clusteredEdges = {};

	      this.options = {};
	      this.defaultOptions = {};
	      util.extend(this.options, this.defaultOptions);

	      this.body.emitter.on('_resetData', function () {
	        _this.clusteredNodes = {};_this.clusteredEdges = {};
	      });
	    }

	    /**
	    *
	    * @param hubsize
	    * @param options
	    */


	    _createClass(ClusterEngine, [{
	      key: 'clusterByHubsize',
	      value: function clusterByHubsize(hubsize, options) {
	        if (hubsize === undefined) {
	          hubsize = this._getHubSize();
	        } else if ((typeof hubsize === 'undefined' ? 'undefined' : _typeof(hubsize)) === "object") {
	          options = this._checkOptions(hubsize);
	          hubsize = this._getHubSize();
	        }

	        var nodesToCluster = [];
	        for (var i = 0; i < this.body.nodeIndices.length; i++) {
	          var node = this.body.nodes[this.body.nodeIndices[i]];
	          if (node.edges.length >= hubsize) {
	            nodesToCluster.push(node.id);
	          }
	        }

	        for (var _i = 0; _i < nodesToCluster.length; _i++) {
	          this.clusterByConnection(nodesToCluster[_i], options, true);
	        }

	        this.body.emitter.emit('_dataChanged');
	      }

	      /**
	      * loop over all nodes, check if they adhere to the condition and cluster if needed.
	      * @param options
	      * @param refreshData
	      */

	    }, {
	      key: 'cluster',
	      value: function cluster() {
	        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        if (options.joinCondition === undefined) {
	          throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
	        }

	        // check if the options object is fine, append if needed
	        options = this._checkOptions(options);

	        var childNodesObj = {};
	        var childEdgesObj = {};

	        // collect the nodes that will be in the cluster
	        for (var i = 0; i < this.body.nodeIndices.length; i++) {
	          var nodeId = this.body.nodeIndices[i];
	          var node = this.body.nodes[nodeId];
	          var clonedOptions = _NetworkUtil2.default.cloneOptions(node);
	          if (options.joinCondition(clonedOptions) === true) {
	            childNodesObj[nodeId] = this.body.nodes[nodeId];

	            // collect the nodes that will be in the cluster
	            for (var _i2 = 0; _i2 < node.edges.length; _i2++) {
	              var edge = node.edges[_i2];
	              if (this.clusteredEdges[edge.id] === undefined) {
	                childEdgesObj[edge.id] = edge;
	              }
	            }
	          }
	        }

	        this._cluster(childNodesObj, childEdgesObj, options, refreshData);
	      }

	      /**
	       * Cluster all nodes in the network that have only X edges
	       * @param edgeCount
	       * @param options
	       * @param refreshData
	       */

	    }, {
	      key: 'clusterByEdgeCount',
	      value: function clusterByEdgeCount(edgeCount, options) {
	        var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	        options = this._checkOptions(options);
	        var clusters = [];
	        var usedNodes = {};
	        var edge = void 0,
	            edges = void 0,
	            node = void 0,
	            nodeId = void 0,
	            relevantEdgeCount = void 0;
	        // collect the nodes that will be in the cluster
	        for (var i = 0; i < this.body.nodeIndices.length; i++) {
	          var childNodesObj = {};
	          var childEdgesObj = {};
	          nodeId = this.body.nodeIndices[i];

	          // if this node is already used in another cluster this session, we do not have to re-evaluate it.
	          if (usedNodes[nodeId] === undefined) {
	            relevantEdgeCount = 0;
	            node = this.body.nodes[nodeId];
	            edges = [];
	            for (var j = 0; j < node.edges.length; j++) {
	              edge = node.edges[j];
	              if (this.clusteredEdges[edge.id] === undefined) {
	                if (edge.toId !== edge.fromId) {
	                  relevantEdgeCount++;
	                }
	                edges.push(edge);
	              }
	            }

	            // this node qualifies, we collect its neighbours to start the clustering process.
	            if (relevantEdgeCount === edgeCount) {
	              var gatheringSuccessful = true;
	              for (var _j = 0; _j < edges.length; _j++) {
	                edge = edges[_j];
	                var childNodeId = this._getConnectedId(edge, nodeId);
	                // add the nodes to the list by the join condition.
	                if (options.joinCondition === undefined) {
	                  childEdgesObj[edge.id] = edge;
	                  childNodesObj[nodeId] = this.body.nodes[nodeId];
	                  childNodesObj[childNodeId] = this.body.nodes[childNodeId];
	                  usedNodes[nodeId] = true;
	                } else {
	                  var clonedOptions = _NetworkUtil2.default.cloneOptions(this.body.nodes[nodeId]);
	                  if (options.joinCondition(clonedOptions) === true) {
	                    childEdgesObj[edge.id] = edge;
	                    childNodesObj[nodeId] = this.body.nodes[nodeId];
	                    usedNodes[nodeId] = true;
	                  } else {
	                    // this node does not qualify after all.
	                    gatheringSuccessful = false;
	                    break;
	                  }
	                }
	              }

	              // add to the cluster queue
	              if (Object.keys(childNodesObj).length > 0 && Object.keys(childEdgesObj).length > 0 && gatheringSuccessful === true) {
	                clusters.push({ nodes: childNodesObj, edges: childEdgesObj });
	              }
	            }
	          }
	        }

	        for (var _i3 = 0; _i3 < clusters.length; _i3++) {
	          this._cluster(clusters[_i3].nodes, clusters[_i3].edges, options, false);
	        }

	        if (refreshData === true) {
	          this.body.emitter.emit('_dataChanged');
	        }
	      }

	      /**
	      * Cluster all nodes in the network that have only 1 edge
	      * @param options
	      * @param refreshData
	      */

	    }, {
	      key: 'clusterOutliers',
	      value: function clusterOutliers(options) {
	        var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        this.clusterByEdgeCount(1, options, refreshData);
	      }

	      /**
	       * Cluster all nodes in the network that have only 2 edge
	       * @param options
	       * @param refreshData
	       */

	    }, {
	      key: 'clusterBridges',
	      value: function clusterBridges(options) {
	        var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        this.clusterByEdgeCount(2, options, refreshData);
	      }

	      /**
	      * suck all connected nodes of a node into the node.
	      * @param nodeId
	      * @param options
	      * @param refreshData
	      */

	    }, {
	      key: 'clusterByConnection',
	      value: function clusterByConnection(nodeId, options) {
	        var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	        // kill conditions
	        if (nodeId === undefined) {
	          throw new Error("No nodeId supplied to clusterByConnection!");
	        }
	        if (this.body.nodes[nodeId] === undefined) {
	          throw new Error("The nodeId given to clusterByConnection does not exist!");
	        }

	        var node = this.body.nodes[nodeId];
	        options = this._checkOptions(options, node);
	        if (options.clusterNodeProperties.x === undefined) {
	          options.clusterNodeProperties.x = node.x;
	        }
	        if (options.clusterNodeProperties.y === undefined) {
	          options.clusterNodeProperties.y = node.y;
	        }
	        if (options.clusterNodeProperties.fixed === undefined) {
	          options.clusterNodeProperties.fixed = {};
	          options.clusterNodeProperties.fixed.x = node.options.fixed.x;
	          options.clusterNodeProperties.fixed.y = node.options.fixed.y;
	        }

	        var childNodesObj = {};
	        var childEdgesObj = {};
	        var parentNodeId = node.id;
	        var parentClonedOptions = _NetworkUtil2.default.cloneOptions(node);
	        childNodesObj[parentNodeId] = node;

	        // collect the nodes that will be in the cluster
	        for (var i = 0; i < node.edges.length; i++) {
	          var edge = node.edges[i];
	          if (this.clusteredEdges[edge.id] === undefined) {
	            var childNodeId = this._getConnectedId(edge, parentNodeId);

	            // if the child node is not in a cluster
	            if (this.clusteredNodes[childNodeId] === undefined) {
	              if (childNodeId !== parentNodeId) {
	                if (options.joinCondition === undefined) {
	                  childEdgesObj[edge.id] = edge;
	                  childNodesObj[childNodeId] = this.body.nodes[childNodeId];
	                } else {
	                  // clone the options and insert some additional parameters that could be interesting.
	                  var childClonedOptions = _NetworkUtil2.default.cloneOptions(this.body.nodes[childNodeId]);
	                  if (options.joinCondition(parentClonedOptions, childClonedOptions) === true) {
	                    childEdgesObj[edge.id] = edge;
	                    childNodesObj[childNodeId] = this.body.nodes[childNodeId];
	                  }
	                }
	              } else {
	                // swallow the edge if it is self-referencing.
	                childEdgesObj[edge.id] = edge;
	              }
	            }
	          }
	        }
	        var childNodeIDs = Object.keys(childNodesObj).map(function (childNode) {
	          return childNodesObj[childNode].id;
	        });

	        for (childNode in childNodesObj) {
	          var childNode = childNodesObj[childNode];
	          for (var y = 0; y < childNode.edges.length; y++) {
	            var childEdge = childNode.edges[y];
	            if (childNodeIDs.indexOf(this._getConnectedId(childEdge, childNode.id)) > -1) {
	              childEdgesObj[childEdge.id] = childEdge;
	            }
	          }
	        }
	        this._cluster(childNodesObj, childEdgesObj, options, refreshData);
	      }

	      /**
	      * This function creates the edges that will be attached to the cluster
	      * It looks for edges that are connected to the nodes from the "outside' of the cluster.
	      *
	      * @param childNodesObj
	      * @param childEdgesObj
	      * @param clusterNodeProperties
	      * @param clusterEdgeProperties
	      * @private
	      */

	    }, {
	      key: '_createClusterEdges',
	      value: function _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {
	        var edge = void 0,
	            childNodeId = void 0,
	            childNode = void 0,
	            toId = void 0,
	            fromId = void 0,
	            otherNodeId = void 0;

	        // loop over all child nodes and their edges to find edges going out of the cluster
	        // these edges will be replaced by clusterEdges.
	        var childKeys = Object.keys(childNodesObj);
	        var createEdges = [];
	        for (var i = 0; i < childKeys.length; i++) {
	          childNodeId = childKeys[i];
	          childNode = childNodesObj[childNodeId];

	          // construct new edges from the cluster to others
	          for (var j = 0; j < childNode.edges.length; j++) {
	            edge = childNode.edges[j];
	            // we only handle edges that are visible to the system, not the disabled ones from the clustering process.
	            if (this.clusteredEdges[edge.id] === undefined) {
	              // self-referencing edges will be added to the "hidden" list
	              if (edge.toId == edge.fromId) {
	                childEdgesObj[edge.id] = edge;
	              } else {
	                // set up the from and to.
	                if (edge.toId == childNodeId) {
	                  // this is a double equals because ints and strings can be interchanged here.
	                  toId = clusterNodeProperties.id;
	                  fromId = edge.fromId;
	                  otherNodeId = fromId;
	                } else {
	                  toId = edge.toId;
	                  fromId = clusterNodeProperties.id;
	                  otherNodeId = toId;
	                }
	              }

	              // Only edges from the cluster outwards are being replaced.
	              if (childNodesObj[otherNodeId] === undefined) {
	                createEdges.push({ edge: edge, fromId: fromId, toId: toId });
	              }
	            }
	          }
	        }

	        // here we actually create the replacement edges. We could not do this in the loop above as the creation process
	        // would add an edge to the edges array we are iterating over.
	        for (var _j2 = 0; _j2 < createEdges.length; _j2++) {
	          var _edge = createEdges[_j2].edge;
	          // copy the options of the edge we will replace
	          var clonedOptions = _NetworkUtil2.default.cloneOptions(_edge, 'edge');
	          // make sure the properties of clusterEdges are superimposed on it
	          util.deepExtend(clonedOptions, clusterEdgeProperties);

	          // set up the edge
	          clonedOptions.from = createEdges[_j2].fromId;
	          clonedOptions.to = createEdges[_j2].toId;
	          clonedOptions.id = 'clusterEdge:' + util.randomUUID();
	          //clonedOptions.id = '(cf: ' + createEdges[j].fromId + " to: " + createEdges[j].toId + ")" + Math.random();

	          // create the edge and give a reference to the one it replaced.
	          var newEdge = this.body.functions.createEdge(clonedOptions);
	          newEdge.clusteringEdgeReplacingId = _edge.id;

	          // also reference the new edge in the old edge
	          this.body.edges[_edge.id].edgeReplacedById = newEdge.id;

	          // connect the edge.
	          this.body.edges[newEdge.id] = newEdge;
	          newEdge.connect();

	          // hide the replaced edge
	          this._backupEdgeOptions(_edge);
	          _edge.setOptions({ physics: false, hidden: true });
	        }
	      }

	      /**
	      * This function checks the options that can be supplied to the different cluster functions
	      * for certain fields and inserts defaults if needed
	      * @param options
	      * @returns {*}
	      * @private
	      */

	    }, {
	      key: '_checkOptions',
	      value: function _checkOptions() {
	        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        if (options.clusterEdgeProperties === undefined) {
	          options.clusterEdgeProperties = {};
	        }
	        if (options.clusterNodeProperties === undefined) {
	          options.clusterNodeProperties = {};
	        }

	        return options;
	      }

	      /**
	      *
	      * @param {Object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node
	      * @param {Object}    childEdgesObj         | object with edge objects, id as keys
	      * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}
	      * @param {Boolean}   refreshData | when true, do not wrap up
	      * @private
	      */

	    }, {
	      key: '_cluster',
	      value: function _cluster(childNodesObj, childEdgesObj, options) {
	        var refreshData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

	        // kill condition: no nodes don't bother
	        if (Object.keys(childNodesObj).length == 0) {
	          return;
	        }

	        // allow clusters of 1 if options allow
	        if (Object.keys(childNodesObj).length == 1 && options.clusterNodeProperties.allowSingleNodeCluster != true) {
	          return;
	        }

	        // check if this cluster call is not trying to cluster anything that is in another cluster.
	        for (var nodeId in childNodesObj) {
	          if (childNodesObj.hasOwnProperty(nodeId)) {
	            if (this.clusteredNodes[nodeId] !== undefined) {
	              return;
	            }
	          }
	        }

	        var clusterNodeProperties = util.deepExtend({}, options.clusterNodeProperties);

	        // construct the clusterNodeProperties
	        if (options.processProperties !== undefined) {
	          // get the childNode options
	          var childNodesOptions = [];
	          for (var _nodeId in childNodesObj) {
	            if (childNodesObj.hasOwnProperty(_nodeId)) {
	              var clonedOptions = _NetworkUtil2.default.cloneOptions(childNodesObj[_nodeId]);
	              childNodesOptions.push(clonedOptions);
	            }
	          }

	          // get cluster properties based on childNodes
	          var childEdgesOptions = [];
	          for (var edgeId in childEdgesObj) {
	            if (childEdgesObj.hasOwnProperty(edgeId)) {
	              // these cluster edges will be removed on creation of the cluster.
	              if (edgeId.substr(0, 12) !== "clusterEdge:") {
	                var _clonedOptions = _NetworkUtil2.default.cloneOptions(childEdgesObj[edgeId], 'edge');
	                childEdgesOptions.push(_clonedOptions);
	              }
	            }
	          }

	          clusterNodeProperties = options.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);
	          if (!clusterNodeProperties) {
	            throw new Error("The processProperties function does not return properties!");
	          }
	        }

	        // check if we have an unique id;
	        if (clusterNodeProperties.id === undefined) {
	          clusterNodeProperties.id = 'cluster:' + util.randomUUID();
	        }
	        var clusterId = clusterNodeProperties.id;

	        if (clusterNodeProperties.label === undefined) {
	          clusterNodeProperties.label = 'cluster';
	        }

	        // give the clusterNode a position if it does not have one.
	        var pos = undefined;
	        if (clusterNodeProperties.x === undefined) {
	          pos = this._getClusterPosition(childNodesObj);
	          clusterNodeProperties.x = pos.x;
	        }
	        if (clusterNodeProperties.y === undefined) {
	          if (pos === undefined) {
	            pos = this._getClusterPosition(childNodesObj);
	          }
	          clusterNodeProperties.y = pos.y;
	        }

	        // force the ID to remain the same
	        clusterNodeProperties.id = clusterId;

	        // create the clusterNode
	        var clusterNode = this.body.functions.createNode(clusterNodeProperties, _Cluster2.default);
	        clusterNode.isCluster = true;
	        clusterNode.containedNodes = childNodesObj;
	        clusterNode.containedEdges = childEdgesObj;
	        // cache a copy from the cluster edge properties if we have to reconnect others later on
	        clusterNode.clusterEdgeProperties = options.clusterEdgeProperties;

	        // finally put the cluster node into global
	        this.body.nodes[clusterNodeProperties.id] = clusterNode;

	        // create the new edges that will connect to the cluster, all self-referencing edges will be added to childEdgesObject here.
	        this._createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options.clusterEdgeProperties);

	        // disable the childEdges
	        for (var _edgeId in childEdgesObj) {
	          if (childEdgesObj.hasOwnProperty(_edgeId)) {
	            if (this.body.edges[_edgeId] !== undefined) {
	              var edge = this.body.edges[_edgeId];
	              // cache the options before changing
	              this._backupEdgeOptions(edge);
	              // disable physics and hide the edge
	              edge.setOptions({ physics: false, hidden: true });
	            }
	          }
	        }

	        // disable the childNodes
	        for (var _nodeId2 in childNodesObj) {
	          if (childNodesObj.hasOwnProperty(_nodeId2)) {
	            this.clusteredNodes[_nodeId2] = { clusterId: clusterNodeProperties.id, node: this.body.nodes[_nodeId2] };
	            this.body.nodes[_nodeId2].setOptions({ hidden: true, physics: false });
	          }
	        }

	        // set ID to undefined so no duplicates arise
	        clusterNodeProperties.id = undefined;

	        // wrap up
	        if (refreshData === true) {
	          this.body.emitter.emit('_dataChanged');
	        }
	      }
	    }, {
	      key: '_backupEdgeOptions',
	      value: function _backupEdgeOptions(edge) {
	        if (this.clusteredEdges[edge.id] === undefined) {
	          this.clusteredEdges[edge.id] = { physics: edge.options.physics, hidden: edge.options.hidden };
	        }
	      }
	    }, {
	      key: '_restoreEdge',
	      value: function _restoreEdge(edge) {
	        var originalOptions = this.clusteredEdges[edge.id];
	        if (originalOptions !== undefined) {
	          edge.setOptions({ physics: originalOptions.physics, hidden: originalOptions.hidden });
	          delete this.clusteredEdges[edge.id];
	        }
	      }

	      /**
	      * Check if a node is a cluster.
	      * @param nodeId
	      * @returns {*}
	      */

	    }, {
	      key: 'isCluster',
	      value: function isCluster(nodeId) {
	        if (this.body.nodes[nodeId] !== undefined) {
	          return this.body.nodes[nodeId].isCluster === true;
	        } else {
	          console.log("Node does not exist.");
	          return false;
	        }
	      }

	      /**
	      * get the position of the cluster node based on what's inside
	      * @param {object} childNodesObj    | object with node objects, id as keys
	      * @returns {{x: number, y: number}}
	      * @private
	      */

	    }, {
	      key: '_getClusterPosition',
	      value: function _getClusterPosition(childNodesObj) {
	        var childKeys = Object.keys(childNodesObj);
	        var minX = childNodesObj[childKeys[0]].x;
	        var maxX = childNodesObj[childKeys[0]].x;
	        var minY = childNodesObj[childKeys[0]].y;
	        var maxY = childNodesObj[childKeys[0]].y;
	        var node = void 0;
	        for (var i = 1; i < childKeys.length; i++) {
	          node = childNodesObj[childKeys[i]];
	          minX = node.x < minX ? node.x : minX;
	          maxX = node.x > maxX ? node.x : maxX;
	          minY = node.y < minY ? node.y : minY;
	          maxY = node.y > maxY ? node.y : maxY;
	        }

	        return { x: 0.5 * (minX + maxX), y: 0.5 * (minY + maxY) };
	      }

	      /**
	      * Open a cluster by calling this function.
	      * @param {String}  clusterNodeId | the ID of the cluster node
	      * @param {Boolean} refreshData | wrap up afterwards if not true
	      */

	    }, {
	      key: 'openCluster',
	      value: function openCluster(clusterNodeId, options) {
	        var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	        // kill conditions
	        if (clusterNodeId === undefined) {
	          throw new Error("No clusterNodeId supplied to openCluster.");
	        }
	        if (this.body.nodes[clusterNodeId] === undefined) {
	          throw new Error("The clusterNodeId supplied to openCluster does not exist.");
	        }
	        if (this.body.nodes[clusterNodeId].containedNodes === undefined) {
	          console.log("The node:" + clusterNodeId + " is not a cluster.");
	          return;
	        }
	        var clusterNode = this.body.nodes[clusterNodeId];
	        var containedNodes = clusterNode.containedNodes;
	        var containedEdges = clusterNode.containedEdges;

	        // allow the user to position the nodes after release.
	        if (options !== undefined && options.releaseFunction !== undefined && typeof options.releaseFunction === 'function') {
	          var positions = {};
	          var clusterPosition = { x: clusterNode.x, y: clusterNode.y };
	          for (var nodeId in containedNodes) {
	            if (containedNodes.hasOwnProperty(nodeId)) {
	              var containedNode = this.body.nodes[nodeId];
	              positions[nodeId] = { x: containedNode.x, y: containedNode.y };
	            }
	          }
	          var newPositions = options.releaseFunction(clusterPosition, positions);

	          for (var _nodeId3 in containedNodes) {
	            if (containedNodes.hasOwnProperty(_nodeId3)) {
	              var _containedNode = this.body.nodes[_nodeId3];
	              if (newPositions[_nodeId3] !== undefined) {
	                _containedNode.x = newPositions[_nodeId3].x === undefined ? clusterNode.x : newPositions[_nodeId3].x;
	                _containedNode.y = newPositions[_nodeId3].y === undefined ? clusterNode.y : newPositions[_nodeId3].y;
	              }
	            }
	          }
	        } else {
	          // copy the position from the cluster
	          for (var _nodeId4 in containedNodes) {
	            if (containedNodes.hasOwnProperty(_nodeId4)) {
	              var _containedNode2 = this.body.nodes[_nodeId4];
	              _containedNode2 = containedNodes[_nodeId4];
	              // inherit position
	              if (_containedNode2.options.fixed.x === false) {
	                _containedNode2.x = clusterNode.x;
	              }
	              if (_containedNode2.options.fixed.y === false) {
	                _containedNode2.y = clusterNode.y;
	              }
	            }
	          }
	        }

	        // release nodes
	        for (var _nodeId5 in containedNodes) {
	          if (containedNodes.hasOwnProperty(_nodeId5)) {
	            var _containedNode3 = this.body.nodes[_nodeId5];

	            // inherit speed
	            _containedNode3.vx = clusterNode.vx;
	            _containedNode3.vy = clusterNode.vy;

	            // we use these methods to avoid re-instantiating the shape, which happens with setOptions.
	            _containedNode3.setOptions({ hidden: false, physics: true });

	            delete this.clusteredNodes[_nodeId5];
	          }
	        }

	        // copy the clusterNode edges because we cannot iterate over an object that we add or remove from.
	        var edgesToBeDeleted = [];
	        for (var i = 0; i < clusterNode.edges.length; i++) {
	          edgesToBeDeleted.push(clusterNode.edges[i]);
	        }

	        // actually handling the deleting.
	        for (var _i4 = 0; _i4 < edgesToBeDeleted.length; _i4++) {
	          var edge = edgesToBeDeleted[_i4];

	          var otherNodeId = this._getConnectedId(edge, clusterNodeId);
	          // if the other node is in another cluster, we transfer ownership of this edge to the other cluster
	          if (this.clusteredNodes[otherNodeId] !== undefined) {
	            // transfer ownership:
	            var otherCluster = this.body.nodes[this.clusteredNodes[otherNodeId].clusterId];
	            var transferEdge = this.body.edges[edge.clusteringEdgeReplacingId];
	            if (transferEdge !== undefined) {
	              otherCluster.containedEdges[transferEdge.id] = transferEdge;

	              // delete local reference
	              delete containedEdges[transferEdge.id];

	              // create new cluster edge from the otherCluster:
	              // get to and from
	              var fromId = transferEdge.fromId;
	              var toId = transferEdge.toId;
	              if (transferEdge.toId == otherNodeId) {
	                toId = this.clusteredNodes[otherNodeId].clusterId;
	              } else {
	                fromId = this.clusteredNodes[otherNodeId].clusterId;
	              }

	              // clone the options and apply the cluster options to them
	              var clonedOptions = _NetworkUtil2.default.cloneOptions(transferEdge, 'edge');
	              util.deepExtend(clonedOptions, otherCluster.clusterEdgeProperties);

	              // apply the edge specific options to it.
	              var id = 'clusterEdge:' + util.randomUUID();
	              util.deepExtend(clonedOptions, { from: fromId, to: toId, hidden: false, physics: true, id: id });

	              // create it
	              var newEdge = this.body.functions.createEdge(clonedOptions);
	              newEdge.clusteringEdgeReplacingId = transferEdge.id;
	              this.body.edges[id] = newEdge;
	              this.body.edges[id].connect();
	            }
	          } else {
	            var replacedEdge = this.body.edges[edge.clusteringEdgeReplacingId];
	            if (replacedEdge !== undefined) {
	              this._restoreEdge(replacedEdge);
	            }
	          }
	          edge.cleanup();
	          // this removes the edge from node.edges, which is why edgeIds is formed
	          edge.disconnect();
	          delete this.body.edges[edge.id];
	        }

	        // handle the releasing of the edges
	        for (var edgeId in containedEdges) {
	          if (containedEdges.hasOwnProperty(edgeId)) {
	            this._restoreEdge(containedEdges[edgeId]);
	          }
	        }

	        // remove clusterNode
	        delete this.body.nodes[clusterNodeId];

	        if (refreshData === true) {
	          this.body.emitter.emit('_dataChanged');
	        }
	      }
	    }, {
	      key: 'getNodesInCluster',
	      value: function getNodesInCluster(clusterId) {
	        var nodesArray = [];
	        if (this.isCluster(clusterId) === true) {
	          var containedNodes = this.body.nodes[clusterId].containedNodes;
	          for (var nodeId in containedNodes) {
	            if (containedNodes.hasOwnProperty(nodeId)) {
	              nodesArray.push(this.body.nodes[nodeId].id);
	            }
	          }
	        }

	        return nodesArray;
	      }

	      /**
	      * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node
	      * @param nodeId
	      * @returns {Array}
	      */

	    }, {
	      key: 'findNode',
	      value: function findNode(nodeId) {
	        var stack = [];
	        var max = 100;
	        var counter = 0;

	        while (this.clusteredNodes[nodeId] !== undefined && counter < max) {
	          stack.push(this.body.nodes[nodeId].id);
	          nodeId = this.clusteredNodes[nodeId].clusterId;
	          counter++;
	        }
	        stack.push(this.body.nodes[nodeId].id);
	        stack.reverse();

	        return stack;
	      }

	      /**
	      * Using a clustered nodeId, update with the new options
	      * @param clusteredNodeId
	      * @param {object} newOptions
	      */

	    }, {
	      key: 'updateClusteredNode',
	      value: function updateClusteredNode(clusteredNodeId, newOptions) {
	        if (clusteredNodeId === undefined) {
	          throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
	        }
	        if (newOptions === undefined) {
	          throw new Error("No newOptions supplied to updateClusteredNode.");
	        }
	        if (this.body.nodes[clusteredNodeId] === undefined) {
	          throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
	        }

	        this.body.nodes[clusteredNodeId].setOptions(newOptions);
	        this.body.emitter.emit('_dataChanged');
	      }

	      /**
	      * Using a base edgeId, update all related clustered edges with the new options
	      * @param startEdgeId
	      * @param {object} newOptions
	      */

	    }, {
	      key: 'updateEdge',
	      value: function updateEdge(startEdgeId, newOptions) {
	        if (startEdgeId === undefined) {
	          throw new Error("No startEdgeId supplied to updateEdge.");
	        }
	        if (newOptions === undefined) {
	          throw new Error("No newOptions supplied to updateEdge.");
	        }
	        if (this.body.edges[startEdgeId] === undefined) {
	          throw new Error("The startEdgeId supplied to updateEdge does not exist.");
	        }

	        var allEdgeIds = this.getClusteredEdges(startEdgeId);
	        for (var i = 0; i < allEdgeIds.length; i++) {
	          var edge = this.body.edges[allEdgeIds[i]];
	          edge.setOptions(newOptions);
	        }
	        this.body.emitter.emit('_dataChanged');
	      }

	      /**
	      * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)
	      * @param edgeId
	      * @returns {Array}
	      */

	    }, {
	      key: 'getClusteredEdges',
	      value: function getClusteredEdges(edgeId) {
	        var stack = [];
	        var max = 100;
	        var counter = 0;

	        while (edgeId !== undefined && this.body.edges[edgeId] !== undefined && counter < max) {
	          stack.push(this.body.edges[edgeId].id);
	          edgeId = this.body.edges[edgeId].edgeReplacedById;
	          counter++;
	        }
	        stack.reverse();
	        return stack;
	      }

	      /**
	      * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge
	      * @param clusteredEdgeId
	      * @returns baseEdgeId
	      */

	    }, {
	      key: 'getBaseEdge',
	      value: function getBaseEdge(clusteredEdgeId) {
	        var baseEdgeId = clusteredEdgeId;
	        var max = 100;
	        var counter = 0;

	        while (clusteredEdgeId !== undefined && this.body.edges[clusteredEdgeId] !== undefined && counter < max) {
	          clusteredEdgeId = this.body.edges[clusteredEdgeId].clusteringEdgeReplacingId;
	          counter++;
	          if (clusteredEdgeId !== undefined) {
	            baseEdgeId = clusteredEdgeId;
	          }
	        }
	        return baseEdgeId;
	      }

	      /**
	      * Get the Id the node is connected to
	      * @param edge
	      * @param nodeId
	      * @returns {*}
	      * @private
	      */

	    }, {
	      key: '_getConnectedId',
	      value: function _getConnectedId(edge, nodeId) {
	        if (edge.toId != nodeId) {
	          return edge.toId;
	        } else if (edge.fromId != nodeId) {
	          return edge.fromId;
	        } else {
	          return edge.fromId;
	        }
	      }

	      /**
	      * We determine how many connections denote an important hub.
	      * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)
	      *
	      * @private
	      */

	    }, {
	      key: '_getHubSize',
	      value: function _getHubSize() {
	        var average = 0;
	        var averageSquared = 0;
	        var hubCounter = 0;
	        var largestHub = 0;

	        for (var i = 0; i < this.body.nodeIndices.length; i++) {
	          var node = this.body.nodes[this.body.nodeIndices[i]];
	          if (node.edges.length > largestHub) {
	            largestHub = node.edges.length;
	          }
	          average += node.edges.length;
	          averageSquared += Math.pow(node.edges.length, 2);
	          hubCounter += 1;
	        }
	        average = average / hubCounter;
	        averageSquared = averageSquared / hubCounter;

	        var variance = averageSquared - Math.pow(average, 2);
	        var standardDeviation = Math.sqrt(variance);

	        var hubThreshold = Math.floor(average + 2 * standardDeviation);

	        // always have at least one to cluster
	        if (hubThreshold > largestHub) {
	          hubThreshold = largestHub;
	        }

	        return hubThreshold;
	      }
	    }]);

	    return ClusterEngine;
	  }();

	  exports.default = ClusterEngine;

	/***/ },
	/* 105 */
	/***/ function(module, exports, __webpack_require__) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var NetworkUtil = function () {
	    function NetworkUtil() {
	      _classCallCheck(this, NetworkUtil);
	    }

	    /**
	     * Find the center position of the network considering the bounding boxes
	     */


	    _createClass(NetworkUtil, null, [{
	      key: "getRange",
	      value: function getRange(allNodes) {
	        var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	        var minY = 1e9,
	            maxY = -1e9,
	            minX = 1e9,
	            maxX = -1e9,
	            node;
	        if (specificNodes.length > 0) {
	          for (var i = 0; i < specificNodes.length; i++) {
	            node = allNodes[specificNodes[i]];
	            if (minX > node.shape.boundingBox.left) {
	              minX = node.shape.boundingBox.left;
	            }
	            if (maxX < node.shape.boundingBox.right) {
	              maxX = node.shape.boundingBox.right;
	            }
	            if (minY > node.shape.boundingBox.top) {
	              minY = node.shape.boundingBox.top;
	            } // top is negative, bottom is positive
	            if (maxY < node.shape.boundingBox.bottom) {
	              maxY = node.shape.boundingBox.bottom;
	            } // top is negative, bottom is positive
	          }
	        }

	        if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
	          minY = 0, maxY = 0, minX = 0, maxX = 0;
	        }
	        return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };
	      }

	      /**
	       * Find the center position of the network
	       */

	    }, {
	      key: "getRangeCore",
	      value: function getRangeCore(allNodes) {
	        var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	        var minY = 1e9,
	            maxY = -1e9,
	            minX = 1e9,
	            maxX = -1e9,
	            node;
	        if (specificNodes.length > 0) {
	          for (var i = 0; i < specificNodes.length; i++) {
	            node = allNodes[specificNodes[i]];
	            if (minX > node.x) {
	              minX = node.x;
	            }
	            if (maxX < node.x) {
	              maxX = node.x;
	            }
	            if (minY > node.y) {
	              minY = node.y;
	            } // top is negative, bottom is positive
	            if (maxY < node.y) {
	              maxY = node.y;
	            } // top is negative, bottom is positive
	          }
	        }

	        if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
	          minY = 0, maxY = 0, minX = 0, maxX = 0;
	        }
	        return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };
	      }

	      /**
	       * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};
	       * @returns {{x: number, y: number}}
	       */

	    }, {
	      key: "findCenter",
	      value: function findCenter(range) {
	        return { x: 0.5 * (range.maxX + range.minX),
	          y: 0.5 * (range.maxY + range.minY) };
	      }

	      /**
	       * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.
	       * @param item
	       * @param type
	       * @returns {{}}
	       */

	    }, {
	      key: "cloneOptions",
	      value: function cloneOptions(item, type) {
	        var clonedOptions = {};
	        if (type === undefined || type === 'node') {
	          util.deepExtend(clonedOptions, item.options, true);
	          clonedOptions.x = item.x;
	          clonedOptions.y = item.y;
	          clonedOptions.amountOfConnections = item.edges.length;
	        } else {
	          util.deepExtend(clonedOptions, item.options, true);
	        }
	        return clonedOptions;
	      }
	    }]);

	    return NetworkUtil;
	  }();

	  exports.default = NetworkUtil;

	/***/ },
	/* 106 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _Node2 = __webpack_require__(67);

	  var _Node3 = _interopRequireDefault(_Node2);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	  /**
	   *
	   */
	  var Cluster = function (_Node) {
	    _inherits(Cluster, _Node);

	    function Cluster(options, body, imagelist, grouplist, globalOptions) {
	      _classCallCheck(this, Cluster);

	      var _this = _possibleConstructorReturn(this, (Cluster.__proto__ || Object.getPrototypeOf(Cluster)).call(this, options, body, imagelist, grouplist, globalOptions));

	      _this.isCluster = true;
	      _this.containedNodes = {};
	      _this.containedEdges = {};
	      return _this;
	    }

	    return Cluster;
	  }(_Node3.default);

	  exports.default = Cluster;

	/***/ },
	/* 107 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  if (typeof window !== 'undefined') {
	    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	  }

	  var util = __webpack_require__(1);

	  var CanvasRenderer = function () {
	    function CanvasRenderer(body, canvas) {
	      _classCallCheck(this, CanvasRenderer);

	      this.body = body;
	      this.canvas = canvas;

	      this.redrawRequested = false;
	      this.renderTimer = undefined;
	      this.requiresTimeout = true;
	      this.renderingActive = false;
	      this.renderRequests = 0;
	      this.pixelRatio = undefined;
	      this.allowRedraw = true;

	      this.dragging = false;
	      this.options = {};
	      this.defaultOptions = {
	        hideEdgesOnDrag: false,
	        hideNodesOnDrag: false
	      };
	      util.extend(this.options, this.defaultOptions);

	      this._determineBrowserMethod();
	      this.bindEventListeners();
	    }

	    _createClass(CanvasRenderer, [{
	      key: 'bindEventListeners',
	      value: function bindEventListeners() {
	        var _this = this;

	        this.body.emitter.on("dragStart", function () {
	          _this.dragging = true;
	        });
	        this.body.emitter.on("dragEnd", function () {
	          return _this.dragging = false;
	        });
	        this.body.emitter.on("_resizeNodes", function () {
	          return _this._resizeNodes();
	        });
	        this.body.emitter.on("_redraw", function () {
	          if (_this.renderingActive === false) {
	            _this._redraw();
	          }
	        });
	        this.body.emitter.on("_blockRedraw", function () {
	          _this.allowRedraw = false;
	        });
	        this.body.emitter.on("_allowRedraw", function () {
	          _this.allowRedraw = true;_this.redrawRequested = false;
	        });
	        this.body.emitter.on("_requestRedraw", this._requestRedraw.bind(this));
	        this.body.emitter.on("_startRendering", function () {
	          _this.renderRequests += 1;
	          _this.renderingActive = true;
	          _this._startRendering();
	        });
	        this.body.emitter.on("_stopRendering", function () {
	          _this.renderRequests -= 1;
	          _this.renderingActive = _this.renderRequests > 0;
	          _this.renderTimer = undefined;
	        });
	        this.body.emitter.on('destroy', function () {
	          _this.renderRequests = 0;
	          _this.allowRedraw = false;
	          _this.renderingActive = false;
	          if (_this.requiresTimeout === true) {
	            clearTimeout(_this.renderTimer);
	          } else {
	            cancelAnimationFrame(_this.renderTimer);
	          }
	          _this.body.emitter.off();
	        });
	      }
	    }, {
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (options !== undefined) {
	          var fields = ['hideEdgesOnDrag', 'hideNodesOnDrag'];
	          util.selectiveDeepExtend(fields, this.options, options);
	        }
	      }
	    }, {
	      key: '_startRendering',
	      value: function _startRendering() {
	        if (this.renderingActive === true) {
	          if (this.renderTimer === undefined) {
	            if (this.requiresTimeout === true) {
	              this.renderTimer = window.setTimeout(this._renderStep.bind(this), this.simulationInterval); // wait this.renderTimeStep milliseconds and perform the animation step function
	            } else {
	              this.renderTimer = window.requestAnimationFrame(this._renderStep.bind(this)); // wait this.renderTimeStep milliseconds and perform the animation step function
	            }
	          }
	        }
	      }
	    }, {
	      key: '_renderStep',
	      value: function _renderStep() {
	        if (this.renderingActive === true) {
	          // reset the renderTimer so a new scheduled animation step can be set
	          this.renderTimer = undefined;

	          if (this.requiresTimeout === true) {
	            // this schedules a new simulation step
	            this._startRendering();
	          }

	          this._redraw();

	          if (this.requiresTimeout === false) {
	            // this schedules a new simulation step
	            this._startRendering();
	          }
	        }
	      }

	      /**
	       * Redraw the network with the current data
	       * chart will be resized too.
	       */

	    }, {
	      key: 'redraw',
	      value: function redraw() {
	        this.body.emitter.emit('setSize');
	        this._redraw();
	      }

	      /**
	       * Redraw the network with the current data
	       * @param hidden | used to get the first estimate of the node sizes. only the nodes are drawn after which they are quickly drawn over.
	       * @private
	       */

	    }, {
	      key: '_requestRedraw',
	      value: function _requestRedraw() {
	        var _this2 = this;

	        if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {
	          this.redrawRequested = true;
	          if (this.requiresTimeout === true) {
	            window.setTimeout(function () {
	              _this2._redraw(false);
	            }, 0);
	          } else {
	            window.requestAnimationFrame(function () {
	              _this2._redraw(false);
	            });
	          }
	        }
	      }
	    }, {
	      key: '_redraw',
	      value: function _redraw() {
	        var hidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	        if (this.allowRedraw === true) {
	          this.body.emitter.emit("initRedraw");

	          this.redrawRequested = false;
	          var ctx = this.canvas.frame.canvas.getContext('2d');

	          // when the container div was hidden, this fixes it back up!
	          if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {
	            this.canvas.setSize();
	          }

	          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);

	          ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

	          // clear the canvas
	          var w = this.canvas.frame.canvas.clientWidth;
	          var h = this.canvas.frame.canvas.clientHeight;
	          ctx.clearRect(0, 0, w, h);

	          // if the div is hidden, we stop the redraw here for performance.
	          if (this.canvas.frame.clientWidth === 0) {
	            return;
	          }

	          // set scaling and translation
	          ctx.save();
	          ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
	          ctx.scale(this.body.view.scale, this.body.view.scale);

	          ctx.beginPath();
	          this.body.emitter.emit("beforeDrawing", ctx);
	          ctx.closePath();

	          if (hidden === false) {
	            if (this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) {
	              this._drawEdges(ctx);
	            }
	          }

	          if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {
	            this._drawNodes(ctx, hidden);
	          }

	          ctx.beginPath();
	          this.body.emitter.emit("afterDrawing", ctx);
	          ctx.closePath();

	          // restore original scaling and translation
	          ctx.restore();
	          if (hidden === true) {
	            ctx.clearRect(0, 0, w, h);
	          }
	        }
	      }

	      /**
	       * Redraw all nodes
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
	       * @param {CanvasRenderingContext2D}   ctx
	       * @param {Boolean} [alwaysShow]
	       * @private
	       */

	    }, {
	      key: '_resizeNodes',
	      value: function _resizeNodes() {
	        var ctx = this.canvas.frame.canvas.getContext('2d');
	        if (this.pixelRatio === undefined) {
	          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
	        }
	        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
	        ctx.save();
	        ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
	        ctx.scale(this.body.view.scale, this.body.view.scale);

	        var nodes = this.body.nodes;
	        var node = void 0;

	        // resize all nodes
	        for (var nodeId in nodes) {
	          if (nodes.hasOwnProperty(nodeId)) {
	            node = nodes[nodeId];
	            node.resize(ctx);
	            node.updateBoundingBox(ctx, node.selected);
	          }
	        }

	        // restore original scaling and translation
	        ctx.restore();
	      }

	      /**
	       * Redraw all nodes
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
	       * @param {CanvasRenderingContext2D}   ctx
	       * @param {Boolean} [alwaysShow]
	       * @private
	       */

	    }, {
	      key: '_drawNodes',
	      value: function _drawNodes(ctx) {
	        var alwaysShow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        var nodes = this.body.nodes;
	        var nodeIndices = this.body.nodeIndices;
	        var node = void 0;
	        var selected = [];
	        var margin = 20;
	        var topLeft = this.canvas.DOMtoCanvas({ x: -margin, y: -margin });
	        var bottomRight = this.canvas.DOMtoCanvas({
	          x: this.canvas.frame.canvas.clientWidth + margin,
	          y: this.canvas.frame.canvas.clientHeight + margin
	        });
	        var viewableArea = { top: topLeft.y, left: topLeft.x, bottom: bottomRight.y, right: bottomRight.x };

	        // draw unselected nodes;
	        for (var i = 0; i < nodeIndices.length; i++) {
	          node = nodes[nodeIndices[i]];
	          // set selected nodes aside
	          if (node.isSelected()) {
	            selected.push(nodeIndices[i]);
	          } else {
	            if (alwaysShow === true) {
	              node.draw(ctx);
	            } else if (node.isBoundingBoxOverlappingWith(viewableArea) === true) {
	              node.draw(ctx);
	            } else {
	              node.updateBoundingBox(ctx, node.selected);
	            }
	          }
	        }

	        // draw the selected nodes on top
	        for (var _i = 0; _i < selected.length; _i++) {
	          node = nodes[selected[_i]];
	          node.draw(ctx);
	        }
	      }

	      /**
	       * Redraw all edges
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
	       * @param {CanvasRenderingContext2D}   ctx
	       * @private
	       */

	    }, {
	      key: '_drawEdges',
	      value: function _drawEdges(ctx) {
	        var edges = this.body.edges;
	        var edgeIndices = this.body.edgeIndices;
	        var edge = void 0;

	        for (var i = 0; i < edgeIndices.length; i++) {
	          edge = edges[edgeIndices[i]];
	          if (edge.connected === true) {
	            edge.draw(ctx);
	          }
	        }
	      }

	      /**
	       * Determine if the browser requires a setTimeout or a requestAnimationFrame. This was required because
	       * some implementations (safari and IE9) did not support requestAnimationFrame
	       * @private
	       */

	    }, {
	      key: '_determineBrowserMethod',
	      value: function _determineBrowserMethod() {
	        if (typeof window !== 'undefined') {
	          var browserType = navigator.userAgent.toLowerCase();
	          this.requiresTimeout = false;
	          if (browserType.indexOf('msie 9.0') != -1) {
	            // IE 9
	            this.requiresTimeout = true;
	          } else if (browserType.indexOf('safari') != -1) {
	            // safari
	            if (browserType.indexOf('chrome') <= -1) {
	              this.requiresTimeout = true;
	            }
	          }
	        } else {
	          this.requiresTimeout = true;
	        }
	      }
	    }]);

	    return CanvasRenderer;
	  }();

	  exports.default = CanvasRenderer;

	/***/ },
	/* 108 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var Hammer = __webpack_require__(22);
	  var hammerUtil = __webpack_require__(30);

	  var util = __webpack_require__(1);

	  /**
	   * Create the main frame for the Network.
	   * This function is executed once when a Network object is created. The frame
	   * contains a canvas, and this canvas contains all objects like the axis and
	   * nodes.
	   * @private
	   */

	  var Canvas = function () {
	    function Canvas(body) {
	      _classCallCheck(this, Canvas);

	      this.body = body;
	      this.pixelRatio = 1;
	      this.resizeTimer = undefined;
	      this.resizeFunction = this._onResize.bind(this);
	      this.cameraState = {};
	      this.initialized = false;
	      this.canvasViewCenter = {};

	      this.options = {};
	      this.defaultOptions = {
	        autoResize: true,
	        height: '100%',
	        width: '100%'
	      };
	      util.extend(this.options, this.defaultOptions);

	      this.bindEventListeners();
	    }

	    _createClass(Canvas, [{
	      key: 'bindEventListeners',
	      value: function bindEventListeners() {
	        var _this = this;

	        // bind the events
	        this.body.emitter.once("resize", function (obj) {
	          if (obj.width !== 0) {
	            _this.body.view.translation.x = obj.width * 0.5;
	          }
	          if (obj.height !== 0) {
	            _this.body.view.translation.y = obj.height * 0.5;
	          }
	        });
	        this.body.emitter.on("setSize", this.setSize.bind(this));
	        this.body.emitter.on("destroy", function () {
	          _this.hammerFrame.destroy();
	          _this.hammer.destroy();
	          _this._cleanUp();
	        });
	      }
	    }, {
	      key: 'setOptions',
	      value: function setOptions(options) {
	        var _this2 = this;

	        if (options !== undefined) {
	          var fields = ['width', 'height', 'autoResize'];
	          util.selectiveDeepExtend(fields, this.options, options);
	        }

	        if (this.options.autoResize === true) {
	          // automatically adapt to a changing size of the browser.
	          this._cleanUp();
	          this.resizeTimer = setInterval(function () {
	            var changed = _this2.setSize();
	            if (changed === true) {
	              _this2.body.emitter.emit("_requestRedraw");
	            }
	          }, 1000);
	          this.resizeFunction = this._onResize.bind(this);
	          util.addEventListener(window, 'resize', this.resizeFunction);
	        }
	      }
	    }, {
	      key: '_cleanUp',
	      value: function _cleanUp() {
	        // automatically adapt to a changing size of the browser.
	        if (this.resizeTimer !== undefined) {
	          clearInterval(this.resizeTimer);
	        }
	        util.removeEventListener(window, 'resize', this.resizeFunction);
	        this.resizeFunction = undefined;
	      }
	    }, {
	      key: '_onResize',
	      value: function _onResize() {
	        this.setSize();
	        this.body.emitter.emit("_redraw");
	      }

	      /**
	       * Get and store the cameraState
	       * @private
	       */

	    }, {
	      key: '_getCameraState',
	      value: function _getCameraState() {
	        var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pixelRatio;

	        if (this.initialized === true) {
	          this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;
	          this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;
	          this.cameraState.scale = this.body.view.scale;
	          this.cameraState.position = this.DOMtoCanvas({
	            x: 0.5 * this.frame.canvas.width / pixelRatio,
	            y: 0.5 * this.frame.canvas.height / pixelRatio
	          });
	        }
	      }

	      /**
	       * Set the cameraState
	       * @private
	       */

	    }, {
	      key: '_setCameraState',
	      value: function _setCameraState() {
	        if (this.cameraState.scale !== undefined && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0) {

	          var widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;
	          var heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;
	          var newScale = this.cameraState.scale;

	          if (widthRatio != 1 && heightRatio != 1) {
	            newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);
	          } else if (widthRatio != 1) {
	            newScale = this.cameraState.scale * widthRatio;
	          } else if (heightRatio != 1) {
	            newScale = this.cameraState.scale * heightRatio;
	          }

	          this.body.view.scale = newScale;
	          // this comes from the view module.
	          var currentViewCenter = this.DOMtoCanvas({
	            x: 0.5 * this.frame.canvas.clientWidth,
	            y: 0.5 * this.frame.canvas.clientHeight
	          });

	          var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
	            x: currentViewCenter.x - this.cameraState.position.x,
	            y: currentViewCenter.y - this.cameraState.position.y
	          };
	          this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;
	          this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;
	        }
	      }
	    }, {
	      key: '_prepareValue',
	      value: function _prepareValue(value) {
	        if (typeof value === 'number') {
	          return value + 'px';
	        } else if (typeof value === 'string') {
	          if (value.indexOf('%') !== -1 || value.indexOf('px') !== -1) {
	            return value;
	          } else if (value.indexOf('%') === -1) {
	            return value + 'px';
	          }
	        }
	        throw new Error('Could not use the value supplied for width or height:' + value);
	      }

	      /**
	       * Create the HTML
	       */

	    }, {
	      key: '_create',
	      value: function _create() {
	        // remove all elements from the container element.
	        while (this.body.container.hasChildNodes()) {
	          this.body.container.removeChild(this.body.container.firstChild);
	        }

	        this.frame = document.createElement('div');
	        this.frame.className = 'vis-network';
	        this.frame.style.position = 'relative';
	        this.frame.style.overflow = 'hidden';
	        this.frame.tabIndex = 900; // tab index is required for keycharm to bind keystrokes to the div instead of the window

	        //////////////////////////////////////////////////////////////////

	        this.frame.canvas = document.createElement("canvas");
	        this.frame.canvas.style.position = 'relative';
	        this.frame.appendChild(this.frame.canvas);

	        if (!this.frame.canvas.getContext) {
	          var noCanvas = document.createElement('DIV');
	          noCanvas.style.color = 'red';
	          noCanvas.style.fontWeight = 'bold';
	          noCanvas.style.padding = '10px';
	          noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
	          this.frame.canvas.appendChild(noCanvas);
	        } else {
	          var ctx = this.frame.canvas.getContext("2d");
	          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);

	          this.frame.canvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
	        }

	        // add the frame to the container element
	        this.body.container.appendChild(this.frame);

	        this.body.view.scale = 1;
	        this.body.view.translation = { x: 0.5 * this.frame.canvas.clientWidth, y: 0.5 * this.frame.canvas.clientHeight };

	        this._bindHammer();
	      }

	      /**
	       * This function binds hammer, it can be repeated over and over due to the uniqueness check.
	       * @private
	       */

	    }, {
	      key: '_bindHammer',
	      value: function _bindHammer() {
	        var _this3 = this;

	        if (this.hammer !== undefined) {
	          this.hammer.destroy();
	        }
	        this.drag = {};
	        this.pinch = {};

	        // init hammer
	        this.hammer = new Hammer(this.frame.canvas);
	        this.hammer.get('pinch').set({ enable: true });
	        // enable to get better response, todo: test on mobile.
	        this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_ALL });

	        hammerUtil.onTouch(this.hammer, function (event) {
	          _this3.body.eventListeners.onTouch(event);
	        });
	        this.hammer.on('tap', function (event) {
	          _this3.body.eventListeners.onTap(event);
	        });
	        this.hammer.on('doubletap', function (event) {
	          _this3.body.eventListeners.onDoubleTap(event);
	        });
	        this.hammer.on('press', function (event) {
	          _this3.body.eventListeners.onHold(event);
	        });
	        this.hammer.on('panstart', function (event) {
	          _this3.body.eventListeners.onDragStart(event);
	        });
	        this.hammer.on('panmove', function (event) {
	          _this3.body.eventListeners.onDrag(event);
	        });
	        this.hammer.on('panend', function (event) {
	          _this3.body.eventListeners.onDragEnd(event);
	        });
	        this.hammer.on('pinch', function (event) {
	          _this3.body.eventListeners.onPinch(event);
	        });

	        // TODO: neatly cleanup these handlers when re-creating the Canvas, IF these are done with hammer, event.stopPropagation will not work?
	        this.frame.canvas.addEventListener('mousewheel', function (event) {
	          _this3.body.eventListeners.onMouseWheel(event);
	        });
	        this.frame.canvas.addEventListener('DOMMouseScroll', function (event) {
	          _this3.body.eventListeners.onMouseWheel(event);
	        });

	        this.frame.canvas.addEventListener('mousemove', function (event) {
	          _this3.body.eventListeners.onMouseMove(event);
	        });
	        this.frame.canvas.addEventListener('contextmenu', function (event) {
	          _this3.body.eventListeners.onContext(event);
	        });

	        this.hammerFrame = new Hammer(this.frame);
	        hammerUtil.onRelease(this.hammerFrame, function (event) {
	          _this3.body.eventListeners.onRelease(event);
	        });
	      }

	      /**
	       * Set a new size for the network
	       * @param {string} width   Width in pixels or percentage (for example '800px'
	       *                         or '50%')
	       * @param {string} height  Height in pixels or percentage  (for example '400px'
	       *                         or '30%')
	       */

	    }, {
	      key: 'setSize',
	      value: function setSize() {
	        var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.width;
	        var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.height;

	        width = this._prepareValue(width);
	        height = this._prepareValue(height);

	        var emitEvent = false;
	        var oldWidth = this.frame.canvas.width;
	        var oldHeight = this.frame.canvas.height;

	        // update the pixel ratio
	        var ctx = this.frame.canvas.getContext("2d");
	        var previousRatio = this.pixelRatio; // we cache this because the camera state storage needs the old value
	        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);

	        if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {
	          this._getCameraState(previousRatio);

	          this.frame.style.width = width;
	          this.frame.style.height = height;

	          this.frame.canvas.style.width = '100%';
	          this.frame.canvas.style.height = '100%';

	          this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
	          this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);

	          this.options.width = width;
	          this.options.height = height;

	          this.canvasViewCenter = {
	            x: 0.5 * this.frame.clientWidth,
	            y: 0.5 * this.frame.clientHeight
	          };

	          emitEvent = true;
	        } else {
	          // this would adapt the width of the canvas to the width from 100% if and only if
	          // there is a change.

	          // store the camera if there is a change in size.
	          if (this.frame.canvas.width != Math.round(this.frame.canvas.clientWidth * this.pixelRatio) || this.frame.canvas.height != Math.round(this.frame.canvas.clientHeight * this.pixelRatio)) {
	            this._getCameraState(previousRatio);
	          }

	          if (this.frame.canvas.width != Math.round(this.frame.canvas.clientWidth * this.pixelRatio)) {
	            this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
	            emitEvent = true;
	          }
	          if (this.frame.canvas.height != Math.round(this.frame.canvas.clientHeight * this.pixelRatio)) {
	            this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
	            emitEvent = true;
	          }
	        }

	        if (emitEvent === true) {
	          this.body.emitter.emit('resize', {
	            width: Math.round(this.frame.canvas.width / this.pixelRatio),
	            height: Math.round(this.frame.canvas.height / this.pixelRatio),
	            oldWidth: Math.round(oldWidth / this.pixelRatio),
	            oldHeight: Math.round(oldHeight / this.pixelRatio)
	          });

	          // restore the camera on change.
	          this._setCameraState();
	        }

	        // set initialized so the get and set camera will work from now on.
	        this.initialized = true;
	        return emitEvent;
	      }
	    }, {
	      key: '_XconvertDOMtoCanvas',


	      /**
	       * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to
	       * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
	       * @param {number} x
	       * @returns {number}
	       * @private
	       */
	      value: function _XconvertDOMtoCanvas(x) {
	        return (x - this.body.view.translation.x) / this.body.view.scale;
	      }

	      /**
	       * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
	       * the X coordinate in DOM-space (coordinate point in browser relative to the container div)
	       * @param {number} x
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_XconvertCanvasToDOM',
	      value: function _XconvertCanvasToDOM(x) {
	        return x * this.body.view.scale + this.body.view.translation.x;
	      }

	      /**
	       * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to
	       * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
	       * @param {number} y
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_YconvertDOMtoCanvas',
	      value: function _YconvertDOMtoCanvas(y) {
	        return (y - this.body.view.translation.y) / this.body.view.scale;
	      }

	      /**
	       * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
	       * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)
	       * @param {number} y
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_YconvertCanvasToDOM',
	      value: function _YconvertCanvasToDOM(y) {
	        return y * this.body.view.scale + this.body.view.translation.y;
	      }

	      /**
	       *
	       * @param {object} pos   = {x: number, y: number}
	       * @returns {{x: number, y: number}}
	       * @constructor
	       */

	    }, {
	      key: 'canvasToDOM',
	      value: function canvasToDOM(pos) {
	        return { x: this._XconvertCanvasToDOM(pos.x), y: this._YconvertCanvasToDOM(pos.y) };
	      }

	      /**
	       *
	       * @param {object} pos   = {x: number, y: number}
	       * @returns {{x: number, y: number}}
	       * @constructor
	       */

	    }, {
	      key: 'DOMtoCanvas',
	      value: function DOMtoCanvas(pos) {
	        return { x: this._XconvertDOMtoCanvas(pos.x), y: this._YconvertDOMtoCanvas(pos.y) };
	      }
	    }]);

	    return Canvas;
	  }();

	  exports.default = Canvas;

	/***/ },
	/* 109 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NetworkUtil = __webpack_require__(105);

	  var _NetworkUtil2 = _interopRequireDefault(_NetworkUtil);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var View = function () {
	    function View(body, canvas) {
	      var _this = this;

	      _classCallCheck(this, View);

	      this.body = body;
	      this.canvas = canvas;

	      this.animationSpeed = 1 / this.renderRefreshRate;
	      this.animationEasingFunction = "easeInOutQuint";
	      this.easingTime = 0;
	      this.sourceScale = 0;
	      this.targetScale = 0;
	      this.sourceTranslation = 0;
	      this.targetTranslation = 0;
	      this.lockedOnNodeId = undefined;
	      this.lockedOnNodeOffset = undefined;
	      this.touchTime = 0;

	      this.viewFunction = undefined;

	      this.body.emitter.on("fit", this.fit.bind(this));
	      this.body.emitter.on("animationFinished", function () {
	        _this.body.emitter.emit("_stopRendering");
	      });
	      this.body.emitter.on("unlockNode", this.releaseNode.bind(this));
	    }

	    _createClass(View, [{
	      key: 'setOptions',
	      value: function setOptions() {
	        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        this.options = options;
	      }

	      /**
	       * This function zooms out to fit all data on screen based on amount of nodes
	       * @param {Object} Options
	       * @param {Boolean} [initialZoom]  | zoom based on fitted formula or range, true = fitted, default = false;
	       */

	    }, {
	      key: 'fit',
	      value: function fit() {
	        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { nodes: [] };
	        var initialZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        var range = void 0;
	        var zoomLevel = void 0;
	        if (options.nodes === undefined || options.nodes.length === 0) {
	          options.nodes = this.body.nodeIndices;
	        }

	        if (initialZoom === true) {
	          // check if more than half of the nodes have a predefined position. If so, we use the range, not the approximation.
	          var positionDefined = 0;
	          for (var nodeId in this.body.nodes) {
	            if (this.body.nodes.hasOwnProperty(nodeId)) {
	              var node = this.body.nodes[nodeId];
	              if (node.predefinedPosition === true) {
	                positionDefined += 1;
	              }
	            }
	          }
	          if (positionDefined > 0.5 * this.body.nodeIndices.length) {
	            this.fit(options, false);
	            return;
	          }

	          range = _NetworkUtil2.default.getRange(this.body.nodes, options.nodes);

	          var numberOfNodes = this.body.nodeIndices.length;
	          zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822; // this is obtained from fitting a dataset from 5 points with scale levels that looked good.

	          // correct for larger canvasses.
	          var factor = Math.min(this.canvas.frame.canvas.clientWidth / 600, this.canvas.frame.canvas.clientHeight / 600);
	          zoomLevel *= factor;
	        } else {
	          this.body.emitter.emit("_resizeNodes");
	          range = _NetworkUtil2.default.getRange(this.body.nodes, options.nodes);

	          var xDistance = Math.abs(range.maxX - range.minX) * 1.1;
	          var yDistance = Math.abs(range.maxY - range.minY) * 1.1;

	          var xZoomLevel = this.canvas.frame.canvas.clientWidth / xDistance;
	          var yZoomLevel = this.canvas.frame.canvas.clientHeight / yDistance;

	          zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;
	        }

	        if (zoomLevel > 1.0) {
	          zoomLevel = 1.0;
	        } else if (zoomLevel === 0) {
	          zoomLevel = 1.0;
	        }

	        var center = _NetworkUtil2.default.findCenter(range);
	        var animationOptions = { position: center, scale: zoomLevel, animation: options.animation };
	        this.moveTo(animationOptions);
	      }

	      // animation

	      /**
	       * Center a node in view.
	       *
	       * @param {Number} nodeId
	       * @param {Number} [options]
	       */

	    }, {
	      key: 'focus',
	      value: function focus(nodeId) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	        if (this.body.nodes[nodeId] !== undefined) {
	          var nodePosition = { x: this.body.nodes[nodeId].x, y: this.body.nodes[nodeId].y };
	          options.position = nodePosition;
	          options.lockedOnNode = nodeId;

	          this.moveTo(options);
	        } else {
	          console.log("Node: " + nodeId + " cannot be found.");
	        }
	      }

	      /**
	       *
	       * @param {Object} options  |  options.offset   = {x:Number, y:Number}   // offset from the center in DOM pixels
	       *                          |  options.scale    = Number                 // scale to move to
	       *                          |  options.position = {x:Number, y:Number}   // position to move to
	       *                          |  options.animation = {duration:Number, easingFunction:String} || Boolean   // position to move to
	       */

	    }, {
	      key: 'moveTo',
	      value: function moveTo(options) {
	        if (options === undefined) {
	          options = {};
	          return;
	        }
	        if (options.offset === undefined) {
	          options.offset = { x: 0, y: 0 };
	        }
	        if (options.offset.x === undefined) {
	          options.offset.x = 0;
	        }
	        if (options.offset.y === undefined) {
	          options.offset.y = 0;
	        }
	        if (options.scale === undefined) {
	          options.scale = this.body.view.scale;
	        }
	        if (options.position === undefined) {
	          options.position = this.getViewPosition();
	        }
	        if (options.animation === undefined) {
	          options.animation = { duration: 0 };
	        }
	        if (options.animation === false) {
	          options.animation = { duration: 0 };
	        }
	        if (options.animation === true) {
	          options.animation = {};
	        }
	        if (options.animation.duration === undefined) {
	          options.animation.duration = 1000;
	        } // default duration
	        if (options.animation.easingFunction === undefined) {
	          options.animation.easingFunction = "easeInOutQuad";
	        } // default easing function

	        this.animateView(options);
	      }

	      /**
	       *
	       * @param {Object} options  |  options.offset   = {x:Number, y:Number}   // offset from the center in DOM pixels
	       *                          |  options.time     = Number                 // animation time in milliseconds
	       *                          |  options.scale    = Number                 // scale to animate to
	       *                          |  options.position = {x:Number, y:Number}   // position to animate to
	       *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,
	       *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,
	       *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,
	       *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint
	       */

	    }, {
	      key: 'animateView',
	      value: function animateView(options) {
	        if (options === undefined) {
	          return;
	        }
	        this.animationEasingFunction = options.animation.easingFunction;
	        // release if something focussed on the node
	        this.releaseNode();
	        if (options.locked === true) {
	          this.lockedOnNodeId = options.lockedOnNode;
	          this.lockedOnNodeOffset = options.offset;
	        }

	        // forcefully complete the old animation if it was still running
	        if (this.easingTime != 0) {
	          this._transitionRedraw(true); // by setting easingtime to 1, we finish the animation.
	        }

	        this.sourceScale = this.body.view.scale;
	        this.sourceTranslation = this.body.view.translation;
	        this.targetScale = options.scale;

	        // set the scale so the viewCenter is based on the correct zoom level. This is overridden in the transitionRedraw
	        // but at least then we'll have the target transition
	        this.body.view.scale = this.targetScale;
	        var viewCenter = this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });

	        var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
	          x: viewCenter.x - options.position.x,
	          y: viewCenter.y - options.position.y
	        };
	        this.targetTranslation = {
	          x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options.offset.x,
	          y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options.offset.y
	        };

	        // if the time is set to 0, don't do an animation
	        if (options.animation.duration === 0) {
	          if (this.lockedOnNodeId != undefined) {
	            this.viewFunction = this._lockedRedraw.bind(this);
	            this.body.emitter.on("initRedraw", this.viewFunction);
	          } else {
	            this.body.view.scale = this.targetScale;
	            this.body.view.translation = this.targetTranslation;
	            this.body.emitter.emit("_requestRedraw");
	          }
	        } else {
	          this.animationSpeed = 1 / (60 * options.animation.duration * 0.001) || 1 / 60; // 60 for 60 seconds, 0.001 for milli's
	          this.animationEasingFunction = options.animation.easingFunction;

	          this.viewFunction = this._transitionRedraw.bind(this);
	          this.body.emitter.on("initRedraw", this.viewFunction);
	          this.body.emitter.emit("_startRendering");
	        }
	      }

	      /**
	       * used to animate smoothly by hijacking the redraw function.
	       * @private
	       */

	    }, {
	      key: '_lockedRedraw',
	      value: function _lockedRedraw() {
	        var nodePosition = { x: this.body.nodes[this.lockedOnNodeId].x, y: this.body.nodes[this.lockedOnNodeId].y };
	        var viewCenter = this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });
	        var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
	          x: viewCenter.x - nodePosition.x,
	          y: viewCenter.y - nodePosition.y
	        };
	        var sourceTranslation = this.body.view.translation;
	        var targetTranslation = {
	          x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,
	          y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y
	        };

	        this.body.view.translation = targetTranslation;
	      }
	    }, {
	      key: 'releaseNode',
	      value: function releaseNode() {
	        if (this.lockedOnNodeId !== undefined && this.viewFunction !== undefined) {
	          this.body.emitter.off("initRedraw", this.viewFunction);
	          this.lockedOnNodeId = undefined;
	          this.lockedOnNodeOffset = undefined;
	        }
	      }

	      /**
	       *
	       * @param easingTime
	       * @private
	       */

	    }, {
	      key: '_transitionRedraw',
	      value: function _transitionRedraw() {
	        var finished = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	        this.easingTime += this.animationSpeed;
	        this.easingTime = finished === true ? 1.0 : this.easingTime;

	        var progress = util.easingFunctions[this.animationEasingFunction](this.easingTime);

	        this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;
	        this.body.view.translation = {
	          x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,
	          y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress
	        };

	        // cleanup
	        if (this.easingTime >= 1.0) {
	          this.body.emitter.off("initRedraw", this.viewFunction);
	          this.easingTime = 0;
	          if (this.lockedOnNodeId != undefined) {
	            this.viewFunction = this._lockedRedraw.bind(this);
	            this.body.emitter.on("initRedraw", this.viewFunction);
	          }
	          this.body.emitter.emit("animationFinished");
	        }
	      }
	    }, {
	      key: 'getScale',
	      value: function getScale() {
	        return this.body.view.scale;
	      }
	    }, {
	      key: 'getViewPosition',
	      value: function getViewPosition() {
	        return this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });
	      }
	    }]);

	    return View;
	  }();

	  exports.default = View;

	/***/ },
	/* 110 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NavigationHandler = __webpack_require__(111);

	  var _NavigationHandler2 = _interopRequireDefault(_NavigationHandler);

	  var _Popup = __webpack_require__(112);

	  var _Popup2 = _interopRequireDefault(_Popup);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var InteractionHandler = function () {
	    function InteractionHandler(body, canvas, selectionHandler) {
	      _classCallCheck(this, InteractionHandler);

	      this.body = body;
	      this.canvas = canvas;
	      this.selectionHandler = selectionHandler;
	      this.navigationHandler = new _NavigationHandler2.default(body, canvas);

	      // bind the events from hammer to functions in this object
	      this.body.eventListeners.onTap = this.onTap.bind(this);
	      this.body.eventListeners.onTouch = this.onTouch.bind(this);
	      this.body.eventListeners.onDoubleTap = this.onDoubleTap.bind(this);
	      this.body.eventListeners.onHold = this.onHold.bind(this);
	      this.body.eventListeners.onDragStart = this.onDragStart.bind(this);
	      this.body.eventListeners.onDrag = this.onDrag.bind(this);
	      this.body.eventListeners.onDragEnd = this.onDragEnd.bind(this);
	      this.body.eventListeners.onMouseWheel = this.onMouseWheel.bind(this);
	      this.body.eventListeners.onPinch = this.onPinch.bind(this);
	      this.body.eventListeners.onMouseMove = this.onMouseMove.bind(this);
	      this.body.eventListeners.onRelease = this.onRelease.bind(this);
	      this.body.eventListeners.onContext = this.onContext.bind(this);

	      this.touchTime = 0;
	      this.drag = {};
	      this.pinch = {};
	      this.popup = undefined;
	      this.popupObj = undefined;
	      this.popupTimer = undefined;

	      this.body.functions.getPointer = this.getPointer.bind(this);

	      this.options = {};
	      this.defaultOptions = {
	        dragNodes: true,
	        dragView: true,
	        hover: false,
	        keyboard: {
	          enabled: false,
	          speed: { x: 10, y: 10, zoom: 0.02 },
	          bindToWindow: true
	        },
	        navigationButtons: false,
	        tooltipDelay: 300,
	        zoomView: true
	      };
	      util.extend(this.options, this.defaultOptions);

	      this.bindEventListeners();
	    }

	    _createClass(InteractionHandler, [{
	      key: 'bindEventListeners',
	      value: function bindEventListeners() {
	        var _this = this;

	        this.body.emitter.on('destroy', function () {
	          clearTimeout(_this.popupTimer);
	          delete _this.body.functions.getPointer;
	        });
	      }
	    }, {
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (options !== undefined) {
	          // extend all but the values in fields
	          var fields = ['hideEdgesOnDrag', 'hideNodesOnDrag', 'keyboard', 'multiselect', 'selectable', 'selectConnectedEdges'];
	          util.selectiveNotDeepExtend(fields, this.options, options);

	          // merge the keyboard options in.
	          util.mergeOptions(this.options, options, 'keyboard');

	          if (options.tooltip) {
	            util.extend(this.options.tooltip, options.tooltip);
	            if (options.tooltip.color) {
	              this.options.tooltip.color = util.parseColor(options.tooltip.color);
	            }
	          }
	        }

	        this.navigationHandler.setOptions(this.options);
	      }

	      /**
	       * Get the pointer location from a touch location
	       * @param {{x: Number, y: Number}} touch
	       * @return {{x: Number, y: Number}} pointer
	       * @private
	       */

	    }, {
	      key: 'getPointer',
	      value: function getPointer(touch) {
	        return {
	          x: touch.x - util.getAbsoluteLeft(this.canvas.frame.canvas),
	          y: touch.y - util.getAbsoluteTop(this.canvas.frame.canvas)
	        };
	      }

	      /**
	       * On start of a touch gesture, store the pointer
	       * @param event
	       * @private
	       */

	    }, {
	      key: 'onTouch',
	      value: function onTouch(event) {
	        if (new Date().valueOf() - this.touchTime > 50) {
	          this.drag.pointer = this.getPointer(event.center);
	          this.drag.pinched = false;
	          this.pinch.scale = this.body.view.scale;
	          // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
	          this.touchTime = new Date().valueOf();
	        }
	      }

	      /**
	       * handle tap/click event: select/unselect a node
	       * @private
	       */

	    }, {
	      key: 'onTap',
	      value: function onTap(event) {
	        var pointer = this.getPointer(event.center);
	        var multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);

	        this.checkSelectionChanges(pointer, event, multiselect);
	        this.selectionHandler._generateClickEvent('click', event, pointer);
	      }

	      /**
	       * handle doubletap event
	       * @private
	       */

	    }, {
	      key: 'onDoubleTap',
	      value: function onDoubleTap(event) {
	        var pointer = this.getPointer(event.center);
	        this.selectionHandler._generateClickEvent('doubleClick', event, pointer);
	      }

	      /**
	       * handle long tap event: multi select nodes
	       * @private
	       */

	    }, {
	      key: 'onHold',
	      value: function onHold(event) {
	        var pointer = this.getPointer(event.center);
	        var multiselect = this.selectionHandler.options.multiselect;

	        this.checkSelectionChanges(pointer, event, multiselect);

	        this.selectionHandler._generateClickEvent('click', event, pointer);
	        this.selectionHandler._generateClickEvent('hold', event, pointer);
	      }

	      /**
	       * handle the release of the screen
	       *
	       * @private
	       */

	    }, {
	      key: 'onRelease',
	      value: function onRelease(event) {
	        if (new Date().valueOf() - this.touchTime > 10) {
	          var pointer = this.getPointer(event.center);
	          this.selectionHandler._generateClickEvent('release', event, pointer);
	          // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
	          this.touchTime = new Date().valueOf();
	        }
	      }
	    }, {
	      key: 'onContext',
	      value: function onContext(event) {
	        var pointer = this.getPointer({ x: event.clientX, y: event.clientY });
	        this.selectionHandler._generateClickEvent('oncontext', event, pointer);
	      }

	      /**
	       *
	       * @param pointer
	       * @param add
	       */

	    }, {
	      key: 'checkSelectionChanges',
	      value: function checkSelectionChanges(pointer, event) {
	        var add = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	        var previouslySelectedEdgeCount = this.selectionHandler._getSelectedEdgeCount();
	        var previouslySelectedNodeCount = this.selectionHandler._getSelectedNodeCount();
	        var previousSelection = this.selectionHandler.getSelection();
	        var selected = void 0;
	        if (add === true) {
	          selected = this.selectionHandler.selectAdditionalOnPoint(pointer);
	        } else {
	          selected = this.selectionHandler.selectOnPoint(pointer);
	        }
	        var selectedEdgesCount = this.selectionHandler._getSelectedEdgeCount();
	        var selectedNodesCount = this.selectionHandler._getSelectedNodeCount();
	        var currentSelection = this.selectionHandler.getSelection();

	        var _determineIfDifferent2 = this._determineIfDifferent(previousSelection, currentSelection),
	            nodesChanged = _determineIfDifferent2.nodesChanged,
	            edgesChanged = _determineIfDifferent2.edgesChanged;

	        var nodeSelected = false;

	        if (selectedNodesCount - previouslySelectedNodeCount > 0) {
	          // node was selected
	          this.selectionHandler._generateClickEvent('selectNode', event, pointer);
	          selected = true;
	          nodeSelected = true;
	        } else if (nodesChanged === true && selectedNodesCount > 0) {
	          this.selectionHandler._generateClickEvent('deselectNode', event, pointer, previousSelection);
	          this.selectionHandler._generateClickEvent('selectNode', event, pointer);
	          nodeSelected = true;
	          selected = true;
	        } else if (selectedNodesCount - previouslySelectedNodeCount < 0) {
	          // node was deselected
	          this.selectionHandler._generateClickEvent('deselectNode', event, pointer, previousSelection);
	          selected = true;
	        }

	        // handle the selected edges
	        if (selectedEdgesCount - previouslySelectedEdgeCount > 0 && nodeSelected === false) {
	          // edge was selected
	          this.selectionHandler._generateClickEvent('selectEdge', event, pointer);
	          selected = true;
	        } else if (selectedEdgesCount > 0 && edgesChanged === true) {
	          this.selectionHandler._generateClickEvent('deselectEdge', event, pointer, previousSelection);
	          this.selectionHandler._generateClickEvent('selectEdge', event, pointer);
	          selected = true;
	        } else if (selectedEdgesCount - previouslySelectedEdgeCount < 0) {
	          // edge was deselected
	          this.selectionHandler._generateClickEvent('deselectEdge', event, pointer, previousSelection);
	          selected = true;
	        }

	        // fire the select event if anything has been selected or deselected
	        if (selected === true) {
	          // select or unselect
	          this.selectionHandler._generateClickEvent('select', event, pointer);
	        }
	      }

	      /**
	       * This function checks if the nodes and edges previously selected have changed.
	       * @param previousSelection
	       * @param currentSelection
	       * @returns {{nodesChanged: boolean, edgesChanged: boolean}}
	       * @private
	       */

	    }, {
	      key: '_determineIfDifferent',
	      value: function _determineIfDifferent(previousSelection, currentSelection) {
	        var nodesChanged = false;
	        var edgesChanged = false;

	        for (var i = 0; i < previousSelection.nodes.length; i++) {
	          if (currentSelection.nodes.indexOf(previousSelection.nodes[i]) === -1) {
	            nodesChanged = true;
	          }
	        }
	        for (var _i = 0; _i < currentSelection.nodes.length; _i++) {
	          if (previousSelection.nodes.indexOf(previousSelection.nodes[_i]) === -1) {
	            nodesChanged = true;
	          }
	        }
	        for (var _i2 = 0; _i2 < previousSelection.edges.length; _i2++) {
	          if (currentSelection.edges.indexOf(previousSelection.edges[_i2]) === -1) {
	            edgesChanged = true;
	          }
	        }
	        for (var _i3 = 0; _i3 < currentSelection.edges.length; _i3++) {
	          if (previousSelection.edges.indexOf(previousSelection.edges[_i3]) === -1) {
	            edgesChanged = true;
	          }
	        }

	        return { nodesChanged: nodesChanged, edgesChanged: edgesChanged };
	      }

	      /**
	       * This function is called by onDragStart.
	       * It is separated out because we can then overload it for the datamanipulation system.
	       *
	       * @private
	       */

	    }, {
	      key: 'onDragStart',
	      value: function onDragStart(event) {
	        //in case the touch event was triggered on an external div, do the initial touch now.
	        if (this.drag.pointer === undefined) {
	          this.onTouch(event);
	        }

	        // note: drag.pointer is set in onTouch to get the initial touch location
	        var node = this.selectionHandler.getNodeAt(this.drag.pointer);

	        this.drag.dragging = true;
	        this.drag.selection = [];
	        this.drag.translation = util.extend({}, this.body.view.translation); // copy the object
	        this.drag.nodeId = undefined;

	        if (node !== undefined && this.options.dragNodes === true) {
	          this.drag.nodeId = node.id;
	          // select the clicked node if not yet selected
	          if (node.isSelected() === false) {
	            this.selectionHandler.unselectAll();
	            this.selectionHandler.selectObject(node);
	          }

	          // after select to contain the node
	          this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer);

	          var selection = this.selectionHandler.selectionObj.nodes;
	          // create an array with the selected nodes and their original location and status
	          for (var nodeId in selection) {
	            if (selection.hasOwnProperty(nodeId)) {
	              var object = selection[nodeId];
	              var s = {
	                id: object.id,
	                node: object,

	                // store original x, y, xFixed and yFixed, make the node temporarily Fixed
	                x: object.x,
	                y: object.y,
	                xFixed: object.options.fixed.x,
	                yFixed: object.options.fixed.y
	              };

	              object.options.fixed.x = true;
	              object.options.fixed.y = true;

	              this.drag.selection.push(s);
	            }
	          }
	        } else {
	          // fallback if no node is selected and thus the view is dragged.
	          this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer, undefined, true);
	        }
	      }

	      /**
	       * handle drag event
	       * @private
	       */

	    }, {
	      key: 'onDrag',
	      value: function onDrag(event) {
	        var _this2 = this;

	        if (this.drag.pinched === true) {
	          return;
	        }

	        // remove the focus on node if it is focussed on by the focusOnNode
	        this.body.emitter.emit('unlockNode');

	        var pointer = this.getPointer(event.center);

	        var selection = this.drag.selection;
	        if (selection && selection.length && this.options.dragNodes === true) {
	          (function () {
	            _this2.selectionHandler._generateClickEvent('dragging', event, pointer);

	            // calculate delta's and new location
	            var deltaX = pointer.x - _this2.drag.pointer.x;
	            var deltaY = pointer.y - _this2.drag.pointer.y;

	            // update position of all selected nodes
	            selection.forEach(function (selection) {
	              var node = selection.node;
	              // only move the node if it was not fixed initially
	              if (selection.xFixed === false) {
	                node.x = _this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection.x) + deltaX);
	              }
	              // only move the node if it was not fixed initially
	              if (selection.yFixed === false) {
	                node.y = _this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection.y) + deltaY);
	              }
	            });

	            // start the simulation of the physics
	            _this2.body.emitter.emit('startSimulation');
	          })();
	        } else {
	          // move the network
	          if (this.options.dragView === true) {
	            this.selectionHandler._generateClickEvent('dragging', event, pointer, undefined, true);

	            // if the drag was not started properly because the click started outside the network div, start it now.
	            if (this.drag.pointer === undefined) {
	              this.onDragStart(event);
	              return;
	            }
	            var diffX = pointer.x - this.drag.pointer.x;
	            var diffY = pointer.y - this.drag.pointer.y;

	            this.body.view.translation = { x: this.drag.translation.x + diffX, y: this.drag.translation.y + diffY };
	            this.body.emitter.emit('_redraw');
	          }
	        }
	      }

	      /**
	       * handle drag start event
	       * @private
	       */

	    }, {
	      key: 'onDragEnd',
	      value: function onDragEnd(event) {
	        this.drag.dragging = false;
	        var selection = this.drag.selection;
	        if (selection && selection.length) {
	          selection.forEach(function (s) {
	            // restore original xFixed and yFixed
	            s.node.options.fixed.x = s.xFixed;
	            s.node.options.fixed.y = s.yFixed;
	          });
	          this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center));
	          this.body.emitter.emit('startSimulation');
	        } else {
	          this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center), undefined, true);
	          this.body.emitter.emit('_requestRedraw');
	        }
	      }

	      /**
	       * Handle pinch event
	       * @param event
	       * @private
	       */

	    }, {
	      key: 'onPinch',
	      value: function onPinch(event) {
	        var pointer = this.getPointer(event.center);

	        this.drag.pinched = true;
	        if (this.pinch['scale'] === undefined) {
	          this.pinch.scale = 1;
	        }

	        // TODO: enabled moving while pinching?
	        var scale = this.pinch.scale * event.scale;
	        this.zoom(scale, pointer);
	      }

	      /**
	       * Zoom the network in or out
	       * @param {Number} scale a number around 1, and between 0.01 and 10
	       * @param {{x: Number, y: Number}} pointer    Position on screen
	       * @return {Number} appliedScale    scale is limited within the boundaries
	       * @private
	       */

	    }, {
	      key: 'zoom',
	      value: function zoom(scale, pointer) {
	        if (this.options.zoomView === true) {
	          var scaleOld = this.body.view.scale;
	          if (scale < 0.00001) {
	            scale = 0.00001;
	          }
	          if (scale > 10) {
	            scale = 10;
	          }

	          var preScaleDragPointer = undefined;
	          if (this.drag !== undefined) {
	            if (this.drag.dragging === true) {
	              preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);
	            }
	          }
	          // + this.canvas.frame.canvas.clientHeight / 2
	          var translation = this.body.view.translation;

	          var scaleFrac = scale / scaleOld;
	          var tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;
	          var ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;

	          this.body.view.scale = scale;
	          this.body.view.translation = { x: tx, y: ty };

	          if (preScaleDragPointer != undefined) {
	            var postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);
	            this.drag.pointer.x = postScaleDragPointer.x;
	            this.drag.pointer.y = postScaleDragPointer.y;
	          }

	          this.body.emitter.emit('_requestRedraw');

	          if (scaleOld < scale) {
	            this.body.emitter.emit('zoom', { direction: '+', scale: this.body.view.scale });
	          } else {
	            this.body.emitter.emit('zoom', { direction: '-', scale: this.body.view.scale });
	          }
	        }
	      }

	      /**
	       * Event handler for mouse wheel event, used to zoom the timeline
	       * See http://adomas.org/javascript-mouse-wheel/
	       *     https://github.com/EightMedia/hammer.js/issues/256
	       * @param {MouseEvent}  event
	       * @private
	       */

	    }, {
	      key: 'onMouseWheel',
	      value: function onMouseWheel(event) {
	        if (this.options.zoomView === true) {
	          // retrieve delta
	          var delta = 0;
	          if (event.wheelDelta) {
	            /* IE/Opera. */
	            delta = event.wheelDelta / 120;
	          } else if (event.detail) {
	            /* Mozilla case. */
	            // In Mozilla, sign of delta is different than in IE.
	            // Also, delta is multiple of 3.
	            delta = -event.detail / 3;
	          }

	          // If delta is nonzero, handle it.
	          // Basically, delta is now positive if wheel was scrolled up,
	          // and negative, if wheel was scrolled down.
	          if (delta !== 0) {

	            // calculate the new scale
	            var scale = this.body.view.scale;
	            var zoom = delta / 10;
	            if (delta < 0) {
	              zoom = zoom / (1 - zoom);
	            }
	            scale *= 1 + zoom;

	            // calculate the pointer location
	            var pointer = this.getPointer({ x: event.clientX, y: event.clientY });

	            // apply the new scale
	            this.zoom(scale, pointer);
	          }

	          // Prevent default actions caused by mouse wheel.
	          event.preventDefault();
	        }
	      }

	      /**
	       * Mouse move handler for checking whether the title moves over a node with a title.
	       * @param  {Event} event
	       * @private
	       */

	    }, {
	      key: 'onMouseMove',
	      value: function onMouseMove(event) {
	        var _this3 = this;

	        var pointer = this.getPointer({ x: event.clientX, y: event.clientY });
	        var popupVisible = false;

	        // check if the previously selected node is still selected
	        if (this.popup !== undefined) {
	          if (this.popup.hidden === false) {
	            this._checkHidePopup(pointer);
	          }

	          // if the popup was not hidden above
	          if (this.popup.hidden === false) {
	            popupVisible = true;
	            this.popup.setPosition(pointer.x + 3, pointer.y - 5);
	            this.popup.show();
	          }
	        }

	        // if we bind the keyboard to the div, we have to highlight it to use it. This highlights it on mouse over.
	        if (this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {
	          this.canvas.frame.focus();
	        }

	        // start a timeout that will check if the mouse is positioned above an element
	        if (popupVisible === false) {
	          if (this.popupTimer !== undefined) {
	            clearInterval(this.popupTimer); // stop any running calculationTimer
	            this.popupTimer = undefined;
	          }
	          if (!this.drag.dragging) {
	            this.popupTimer = setTimeout(function () {
	              return _this3._checkShowPopup(pointer);
	            }, this.options.tooltipDelay);
	          }
	        }

	        /**
	        * Adding hover highlights
	        */
	        if (this.options.hover === true) {
	          // adding hover highlights
	          var obj = this.selectionHandler.getNodeAt(pointer);
	          if (obj === undefined) {
	            obj = this.selectionHandler.getEdgeAt(pointer);
	          }
	          this.selectionHandler.hoverObject(obj);
	        }
	      }

	      /**
	       * Check if there is an element on the given position in the network
	       * (a node or edge). If so, and if this element has a title,
	       * show a popup window with its title.
	       *
	       * @param {{x:Number, y:Number}} pointer
	       * @private
	       */

	    }, {
	      key: '_checkShowPopup',
	      value: function _checkShowPopup(pointer) {
	        var x = this.canvas._XconvertDOMtoCanvas(pointer.x);
	        var y = this.canvas._YconvertDOMtoCanvas(pointer.y);
	        var pointerObj = {
	          left: x,
	          top: y,
	          right: x,
	          bottom: y
	        };

	        var previousPopupObjId = this.popupObj === undefined ? undefined : this.popupObj.id;
	        var nodeUnderCursor = false;
	        var popupType = 'node';

	        // check if a node is under the cursor.
	        if (this.popupObj === undefined) {
	          // search the nodes for overlap, select the top one in case of multiple nodes
	          var nodeIndices = this.body.nodeIndices;
	          var nodes = this.body.nodes;
	          var node = void 0;
	          var overlappingNodes = [];
	          for (var i = 0; i < nodeIndices.length; i++) {
	            node = nodes[nodeIndices[i]];
	            if (node.isOverlappingWith(pointerObj) === true) {
	              if (node.getTitle() !== undefined) {
	                overlappingNodes.push(nodeIndices[i]);
	              }
	            }
	          }

	          if (overlappingNodes.length > 0) {
	            // if there are overlapping nodes, select the last one, this is the one which is drawn on top of the others
	            this.popupObj = nodes[overlappingNodes[overlappingNodes.length - 1]];
	            // if you hover over a node, the title of the edge is not supposed to be shown.
	            nodeUnderCursor = true;
	          }
	        }

	        if (this.popupObj === undefined && nodeUnderCursor === false) {
	          // search the edges for overlap
	          var edgeIndices = this.body.edgeIndices;
	          var edges = this.body.edges;
	          var edge = void 0;
	          var overlappingEdges = [];
	          for (var _i4 = 0; _i4 < edgeIndices.length; _i4++) {
	            edge = edges[edgeIndices[_i4]];
	            if (edge.isOverlappingWith(pointerObj) === true) {
	              if (edge.connected === true && edge.getTitle() !== undefined) {
	                overlappingEdges.push(edgeIndices[_i4]);
	              }
	            }
	          }

	          if (overlappingEdges.length > 0) {
	            this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];
	            popupType = 'edge';
	          }
	        }

	        if (this.popupObj !== undefined) {
	          // show popup message window
	          if (this.popupObj.id !== previousPopupObjId) {
	            if (this.popup === undefined) {
	              this.popup = new _Popup2.default(this.canvas.frame);
	            }

	            this.popup.popupTargetType = popupType;
	            this.popup.popupTargetId = this.popupObj.id;

	            // adjust a small offset such that the mouse cursor is located in the
	            // bottom left location of the popup, and you can easily move over the
	            // popup area
	            this.popup.setPosition(pointer.x + 3, pointer.y - 5);
	            this.popup.setText(this.popupObj.getTitle());
	            this.popup.show();
	            this.body.emitter.emit('showPopup', this.popupObj.id);
	          }
	        } else {
	          if (this.popup !== undefined) {
	            this.popup.hide();
	            this.body.emitter.emit('hidePopup');
	          }
	        }
	      }

	      /**
	       * Check if the popup must be hidden, which is the case when the mouse is no
	       * longer hovering on the object
	       * @param {{x:Number, y:Number}} pointer
	       * @private
	       */

	    }, {
	      key: '_checkHidePopup',
	      value: function _checkHidePopup(pointer) {
	        var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);

	        var stillOnObj = false;
	        if (this.popup.popupTargetType === 'node') {
	          if (this.body.nodes[this.popup.popupTargetId] !== undefined) {
	            stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);

	            // if the mouse is still one the node, we have to check if it is not also on one that is drawn on top of it.
	            // we initially only check stillOnObj because this is much faster.
	            if (stillOnObj === true) {
	              var overNode = this.selectionHandler.getNodeAt(pointer);
	              stillOnObj = overNode.id === this.popup.popupTargetId;
	            }
	          }
	        } else {
	          if (this.selectionHandler.getNodeAt(pointer) === undefined) {
	            if (this.body.edges[this.popup.popupTargetId] !== undefined) {
	              stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);
	            }
	          }
	        }

	        if (stillOnObj === false) {
	          this.popupObj = undefined;
	          this.popup.hide();
	          this.body.emitter.emit('hidePopup');
	        }
	      }
	    }]);

	    return InteractionHandler;
	  }();

	  exports.default = InteractionHandler;

	/***/ },
	/* 111 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);
	  var Hammer = __webpack_require__(22);
	  var hammerUtil = __webpack_require__(30);
	  var keycharm = __webpack_require__(25);

	  var NavigationHandler = function () {
	    function NavigationHandler(body, canvas) {
	      var _this = this;

	      _classCallCheck(this, NavigationHandler);

	      this.body = body;
	      this.canvas = canvas;

	      this.iconsCreated = false;
	      this.navigationHammers = [];
	      this.boundFunctions = {};
	      this.touchTime = 0;
	      this.activated = false;

	      this.body.emitter.on("activate", function () {
	        _this.activated = true;_this.configureKeyboardBindings();
	      });
	      this.body.emitter.on("deactivate", function () {
	        _this.activated = false;_this.configureKeyboardBindings();
	      });
	      this.body.emitter.on("destroy", function () {
	        if (_this.keycharm !== undefined) {
	          _this.keycharm.destroy();
	        }
	      });

	      this.options = {};
	    }

	    _createClass(NavigationHandler, [{
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (options !== undefined) {
	          this.options = options;
	          this.create();
	        }
	      }
	    }, {
	      key: 'create',
	      value: function create() {
	        if (this.options.navigationButtons === true) {
	          if (this.iconsCreated === false) {
	            this.loadNavigationElements();
	          }
	        } else if (this.iconsCreated === true) {
	          this.cleanNavigation();
	        }

	        this.configureKeyboardBindings();
	      }
	    }, {
	      key: 'cleanNavigation',
	      value: function cleanNavigation() {
	        // clean hammer bindings
	        if (this.navigationHammers.length != 0) {
	          for (var i = 0; i < this.navigationHammers.length; i++) {
	            this.navigationHammers[i].destroy();
	          }
	          this.navigationHammers = [];
	        }

	        // clean up previous navigation items
	        if (this.navigationDOM && this.navigationDOM['wrapper'] && this.navigationDOM['wrapper'].parentNode) {
	          this.navigationDOM['wrapper'].parentNode.removeChild(this.navigationDOM['wrapper']);
	        }

	        this.iconsCreated = false;
	      }

	      /**
	       * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation
	       * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent
	       * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.
	       * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.
	       *
	       * @private
	       */

	    }, {
	      key: 'loadNavigationElements',
	      value: function loadNavigationElements() {
	        var _this2 = this;

	        this.cleanNavigation();

	        this.navigationDOM = {};
	        var navigationDivs = ['up', 'down', 'left', 'right', 'zoomIn', 'zoomOut', 'zoomExtends'];
	        var navigationDivActions = ['_moveUp', '_moveDown', '_moveLeft', '_moveRight', '_zoomIn', '_zoomOut', '_fit'];

	        this.navigationDOM['wrapper'] = document.createElement('div');
	        this.navigationDOM['wrapper'].className = 'vis-navigation';
	        this.canvas.frame.appendChild(this.navigationDOM['wrapper']);

	        for (var i = 0; i < navigationDivs.length; i++) {
	          this.navigationDOM[navigationDivs[i]] = document.createElement('div');
	          this.navigationDOM[navigationDivs[i]].className = 'vis-button vis-' + navigationDivs[i];
	          this.navigationDOM['wrapper'].appendChild(this.navigationDOM[navigationDivs[i]]);

	          var hammer = new Hammer(this.navigationDOM[navigationDivs[i]]);
	          if (navigationDivActions[i] === "_fit") {
	            hammerUtil.onTouch(hammer, this._fit.bind(this));
	          } else {
	            hammerUtil.onTouch(hammer, this.bindToRedraw.bind(this, navigationDivActions[i]));
	          }

	          this.navigationHammers.push(hammer);
	        }

	        // use a hammer for the release so we do not require the one used in the rest of the network
	        // the one the rest uses can be overloaded by the manipulation system.
	        var hammerFrame = new Hammer(this.canvas.frame);
	        hammerUtil.onRelease(hammerFrame, function () {
	          _this2._stopMovement();
	        });
	        this.navigationHammers.push(hammerFrame);

	        this.iconsCreated = true;
	      }
	    }, {
	      key: 'bindToRedraw',
	      value: function bindToRedraw(action) {
	        if (this.boundFunctions[action] === undefined) {
	          this.boundFunctions[action] = this[action].bind(this);
	          this.body.emitter.on("initRedraw", this.boundFunctions[action]);
	          this.body.emitter.emit("_startRendering");
	        }
	      }
	    }, {
	      key: 'unbindFromRedraw',
	      value: function unbindFromRedraw(action) {
	        if (this.boundFunctions[action] !== undefined) {
	          this.body.emitter.off("initRedraw", this.boundFunctions[action]);
	          this.body.emitter.emit("_stopRendering");
	          delete this.boundFunctions[action];
	        }
	      }

	      /**
	       * this stops all movement induced by the navigation buttons
	       *
	       * @private
	       */

	    }, {
	      key: '_fit',
	      value: function _fit() {
	        if (new Date().valueOf() - this.touchTime > 700) {
	          // TODO: fix ugly hack to avoid hammer's double fireing of event (because we use release?)
	          this.body.emitter.emit("fit", { duration: 700 });
	          this.touchTime = new Date().valueOf();
	        }
	      }

	      /**
	       * this stops all movement induced by the navigation buttons
	       *
	       * @private
	       */

	    }, {
	      key: '_stopMovement',
	      value: function _stopMovement() {
	        for (var boundAction in this.boundFunctions) {
	          if (this.boundFunctions.hasOwnProperty(boundAction)) {
	            this.body.emitter.off("initRedraw", this.boundFunctions[boundAction]);
	            this.body.emitter.emit("_stopRendering");
	          }
	        }
	        this.boundFunctions = {};
	      }
	    }, {
	      key: '_moveUp',
	      value: function _moveUp() {
	        this.body.view.translation.y += this.options.keyboard.speed.y;
	      }
	    }, {
	      key: '_moveDown',
	      value: function _moveDown() {
	        this.body.view.translation.y -= this.options.keyboard.speed.y;
	      }
	    }, {
	      key: '_moveLeft',
	      value: function _moveLeft() {
	        this.body.view.translation.x += this.options.keyboard.speed.x;
	      }
	    }, {
	      key: '_moveRight',
	      value: function _moveRight() {
	        this.body.view.translation.x -= this.options.keyboard.speed.x;
	      }
	    }, {
	      key: '_zoomIn',
	      value: function _zoomIn() {
	        var scaleOld = this.body.view.scale;
	        var scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);
	        var translation = this.body.view.translation;
	        var scaleFrac = scale / scaleOld;
	        var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
	        var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;

	        this.body.view.scale = scale;
	        this.body.view.translation = { x: tx, y: ty };
	        this.body.emitter.emit('zoom', { direction: '+', scale: this.body.view.scale });
	      }
	    }, {
	      key: '_zoomOut',
	      value: function _zoomOut() {
	        var scaleOld = this.body.view.scale;
	        var scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);
	        var translation = this.body.view.translation;
	        var scaleFrac = scale / scaleOld;
	        var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
	        var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;

	        this.body.view.scale = scale;
	        this.body.view.translation = { x: tx, y: ty };
	        this.body.emitter.emit('zoom', { direction: '-', scale: this.body.view.scale });
	      }

	      /**
	       * bind all keys using keycharm.
	       */

	    }, {
	      key: 'configureKeyboardBindings',
	      value: function configureKeyboardBindings() {
	        var _this3 = this;

	        if (this.keycharm !== undefined) {
	          this.keycharm.destroy();
	        }

	        if (this.options.keyboard.enabled === true) {
	          if (this.options.keyboard.bindToWindow === true) {
	            this.keycharm = keycharm({ container: window, preventDefault: true });
	          } else {
	            this.keycharm = keycharm({ container: this.canvas.frame, preventDefault: true });
	          }

	          this.keycharm.reset();

	          if (this.activated === true) {
	            this.keycharm.bind("up", function () {
	              _this3.bindToRedraw("_moveUp");
	            }, "keydown");
	            this.keycharm.bind("down", function () {
	              _this3.bindToRedraw("_moveDown");
	            }, "keydown");
	            this.keycharm.bind("left", function () {
	              _this3.bindToRedraw("_moveLeft");
	            }, "keydown");
	            this.keycharm.bind("right", function () {
	              _this3.bindToRedraw("_moveRight");
	            }, "keydown");
	            this.keycharm.bind("=", function () {
	              _this3.bindToRedraw("_zoomIn");
	            }, "keydown");
	            this.keycharm.bind("num+", function () {
	              _this3.bindToRedraw("_zoomIn");
	            }, "keydown");
	            this.keycharm.bind("num-", function () {
	              _this3.bindToRedraw("_zoomOut");
	            }, "keydown");
	            this.keycharm.bind("-", function () {
	              _this3.bindToRedraw("_zoomOut");
	            }, "keydown");
	            this.keycharm.bind("[", function () {
	              _this3.bindToRedraw("_zoomOut");
	            }, "keydown");
	            this.keycharm.bind("]", function () {
	              _this3.bindToRedraw("_zoomIn");
	            }, "keydown");
	            this.keycharm.bind("pageup", function () {
	              _this3.bindToRedraw("_zoomIn");
	            }, "keydown");
	            this.keycharm.bind("pagedown", function () {
	              _this3.bindToRedraw("_zoomOut");
	            }, "keydown");

	            this.keycharm.bind("up", function () {
	              _this3.unbindFromRedraw("_moveUp");
	            }, "keyup");
	            this.keycharm.bind("down", function () {
	              _this3.unbindFromRedraw("_moveDown");
	            }, "keyup");
	            this.keycharm.bind("left", function () {
	              _this3.unbindFromRedraw("_moveLeft");
	            }, "keyup");
	            this.keycharm.bind("right", function () {
	              _this3.unbindFromRedraw("_moveRight");
	            }, "keyup");
	            this.keycharm.bind("=", function () {
	              _this3.unbindFromRedraw("_zoomIn");
	            }, "keyup");
	            this.keycharm.bind("num+", function () {
	              _this3.unbindFromRedraw("_zoomIn");
	            }, "keyup");
	            this.keycharm.bind("num-", function () {
	              _this3.unbindFromRedraw("_zoomOut");
	            }, "keyup");
	            this.keycharm.bind("-", function () {
	              _this3.unbindFromRedraw("_zoomOut");
	            }, "keyup");
	            this.keycharm.bind("[", function () {
	              _this3.unbindFromRedraw("_zoomOut");
	            }, "keyup");
	            this.keycharm.bind("]", function () {
	              _this3.unbindFromRedraw("_zoomIn");
	            }, "keyup");
	            this.keycharm.bind("pageup", function () {
	              _this3.unbindFromRedraw("_zoomIn");
	            }, "keyup");
	            this.keycharm.bind("pagedown", function () {
	              _this3.unbindFromRedraw("_zoomOut");
	            }, "keyup");
	          }
	        }
	      }
	    }]);

	    return NavigationHandler;
	  }();

	  exports.default = NavigationHandler;

	/***/ },
	/* 112 */
	/***/ function(module, exports) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  /**
	   * Popup is a class to create a popup window with some text
	   * @param {Element}  container     The container object.
	   * @param {Number} [x]
	   * @param {Number} [y]
	   * @param {String} [text]
	   * @param {Object} [style]     An object containing borderColor,
	   *                             backgroundColor, etc.
	   */
	  var Popup = function () {
	    function Popup(container) {
	      _classCallCheck(this, Popup);

	      this.container = container;

	      this.x = 0;
	      this.y = 0;
	      this.padding = 5;
	      this.hidden = false;

	      // create the frame
	      this.frame = document.createElement('div');
	      this.frame.className = 'vis-network-tooltip';
	      this.container.appendChild(this.frame);
	    }

	    /**
	     * @param {number} x   Horizontal position of the popup window
	     * @param {number} y   Vertical position of the popup window
	     */


	    _createClass(Popup, [{
	      key: 'setPosition',
	      value: function setPosition(x, y) {
	        this.x = parseInt(x);
	        this.y = parseInt(y);
	      }

	      /**
	       * Set the content for the popup window. This can be HTML code or text.
	       * @param {string | Element} content
	       */

	    }, {
	      key: 'setText',
	      value: function setText(content) {
	        if (content instanceof Element) {
	          this.frame.innerHTML = '';
	          this.frame.appendChild(content);
	        } else {
	          this.frame.innerHTML = content; // string containing text or HTML
	        }
	      }

	      /**
	       * Show the popup window
	       * @param {boolean} [doShow]    Show or hide the window
	       */

	    }, {
	      key: 'show',
	      value: function show(doShow) {
	        if (doShow === undefined) {
	          doShow = true;
	        }

	        if (doShow === true) {
	          var height = this.frame.clientHeight;
	          var width = this.frame.clientWidth;
	          var maxHeight = this.frame.parentNode.clientHeight;
	          var maxWidth = this.frame.parentNode.clientWidth;

	          var top = this.y - height;
	          if (top + height + this.padding > maxHeight) {
	            top = maxHeight - height - this.padding;
	          }
	          if (top < this.padding) {
	            top = this.padding;
	          }

	          var left = this.x;
	          if (left + width + this.padding > maxWidth) {
	            left = maxWidth - width - this.padding;
	          }
	          if (left < this.padding) {
	            left = this.padding;
	          }

	          this.frame.style.left = left + "px";
	          this.frame.style.top = top + "px";
	          this.frame.style.visibility = "visible";
	          this.hidden = false;
	        } else {
	          this.hide();
	        }
	      }

	      /**
	       * Hide the popup window
	       */

	    }, {
	      key: 'hide',
	      value: function hide() {
	        this.hidden = true;
	        this.frame.style.visibility = "hidden";
	      }
	    }]);

	    return Popup;
	  }();

	  exports.default = Popup;

	/***/ },
	/* 113 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _Node = __webpack_require__(67);

	  var _Node2 = _interopRequireDefault(_Node);

	  var _Edge = __webpack_require__(87);

	  var _Edge2 = _interopRequireDefault(_Edge);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var SelectionHandler = function () {
	    function SelectionHandler(body, canvas) {
	      var _this = this;

	      _classCallCheck(this, SelectionHandler);

	      this.body = body;
	      this.canvas = canvas;
	      this.selectionObj = { nodes: [], edges: [] };
	      this.hoverObj = { nodes: {}, edges: {} };

	      this.options = {};
	      this.defaultOptions = {
	        multiselect: false,
	        selectable: true,
	        selectConnectedEdges: true,
	        hoverConnectedEdges: true
	      };
	      util.extend(this.options, this.defaultOptions);

	      this.body.emitter.on("_dataChanged", function () {
	        _this.updateSelection();
	      });
	    }

	    _createClass(SelectionHandler, [{
	      key: 'setOptions',
	      value: function setOptions(options) {
	        if (options !== undefined) {
	          var fields = ['multiselect', 'hoverConnectedEdges', 'selectable', 'selectConnectedEdges'];
	          util.selectiveDeepExtend(fields, this.options, options);
	        }
	      }

	      /**
	       * handles the selection part of the tap;
	       *
	       * @param {Object} pointer
	       * @private
	       */

	    }, {
	      key: 'selectOnPoint',
	      value: function selectOnPoint(pointer) {
	        var selected = false;
	        if (this.options.selectable === true) {
	          var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);

	          // unselect after getting the objects in order to restore width and height.
	          this.unselectAll();

	          if (obj !== undefined) {
	            selected = this.selectObject(obj);
	          }
	          this.body.emitter.emit("_requestRedraw");
	        }
	        return selected;
	      }
	    }, {
	      key: 'selectAdditionalOnPoint',
	      value: function selectAdditionalOnPoint(pointer) {
	        var selectionChanged = false;
	        if (this.options.selectable === true) {
	          var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);

	          if (obj !== undefined) {
	            selectionChanged = true;
	            if (obj.isSelected() === true) {
	              this.deselectObject(obj);
	            } else {
	              this.selectObject(obj);
	            }

	            this.body.emitter.emit("_requestRedraw");
	          }
	        }
	        return selectionChanged;
	      }
	    }, {
	      key: '_generateClickEvent',
	      value: function _generateClickEvent(eventType, event, pointer, oldSelection) {
	        var emptySelection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

	        var properties = void 0;
	        if (emptySelection === true) {
	          properties = { nodes: [], edges: [] };
	        } else {
	          properties = this.getSelection();
	        }
	        properties['pointer'] = {
	          DOM: { x: pointer.x, y: pointer.y },
	          canvas: this.canvas.DOMtoCanvas(pointer)
	        };
	        properties['event'] = event;

	        if (oldSelection !== undefined) {
	          properties['previousSelection'] = oldSelection;
	        }
	        this.body.emitter.emit(eventType, properties);
	      }
	    }, {
	      key: 'selectObject',
	      value: function selectObject(obj) {
	        var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.selectConnectedEdges;

	        if (obj !== undefined) {
	          if (obj instanceof _Node2.default) {
	            if (highlightEdges === true) {
	              this._selectConnectedEdges(obj);
	            }
	          }
	          obj.select();
	          this._addToSelection(obj);
	          return true;
	        }
	        return false;
	      }
	    }, {
	      key: 'deselectObject',
	      value: function deselectObject(obj) {
	        if (obj.isSelected() === true) {
	          obj.selected = false;
	          this._removeFromSelection(obj);
	        }
	      }

	      /**
	       * retrieve all nodes overlapping with given object
	       * @param {Object} object  An object with parameters left, top, right, bottom
	       * @return {Number[]}   An array with id's of the overlapping nodes
	       * @private
	       */

	    }, {
	      key: '_getAllNodesOverlappingWith',
	      value: function _getAllNodesOverlappingWith(object) {
	        var overlappingNodes = [];
	        var nodes = this.body.nodes;
	        for (var i = 0; i < this.body.nodeIndices.length; i++) {
	          var nodeId = this.body.nodeIndices[i];
	          if (nodes[nodeId].isOverlappingWith(object)) {
	            overlappingNodes.push(nodeId);
	          }
	        }
	        return overlappingNodes;
	      }

	      /**
	       * Return a position object in canvasspace from a single point in screenspace
	       *
	       * @param pointer
	       * @returns {{left: number, top: number, right: number, bottom: number}}
	       * @private
	       */

	    }, {
	      key: '_pointerToPositionObject',
	      value: function _pointerToPositionObject(pointer) {
	        var canvasPos = this.canvas.DOMtoCanvas(pointer);
	        return {
	          left: canvasPos.x - 1,
	          top: canvasPos.y + 1,
	          right: canvasPos.x + 1,
	          bottom: canvasPos.y - 1
	        };
	      }

	      /**
	       * Get the top node at the a specific point (like a click)
	       *
	       * @param {{x: Number, y: Number}} pointer
	       * @return {Node | undefined} node
	       */

	    }, {
	      key: 'getNodeAt',
	      value: function getNodeAt(pointer) {
	        var returnNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        // we first check if this is an navigation controls element
	        var positionObject = this._pointerToPositionObject(pointer);
	        var overlappingNodes = this._getAllNodesOverlappingWith(positionObject);
	        // if there are overlapping nodes, select the last one, this is the
	        // one which is drawn on top of the others
	        if (overlappingNodes.length > 0) {
	          if (returnNode === true) {
	            return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];
	          } else {
	            return overlappingNodes[overlappingNodes.length - 1];
	          }
	        } else {
	          return undefined;
	        }
	      }

	      /**
	       * retrieve all edges overlapping with given object, selector is around center
	       * @param {Object} object  An object with parameters left, top, right, bottom
	       * @return {Number[]}   An array with id's of the overlapping nodes
	       * @private
	       */

	    }, {
	      key: '_getEdgesOverlappingWith',
	      value: function _getEdgesOverlappingWith(object, overlappingEdges) {
	        var edges = this.body.edges;
	        for (var i = 0; i < this.body.edgeIndices.length; i++) {
	          var edgeId = this.body.edgeIndices[i];
	          if (edges[edgeId].isOverlappingWith(object)) {
	            overlappingEdges.push(edgeId);
	          }
	        }
	      }

	      /**
	       * retrieve all nodes overlapping with given object
	       * @param {Object} object  An object with parameters left, top, right, bottom
	       * @return {Number[]}   An array with id's of the overlapping nodes
	       * @private
	       */

	    }, {
	      key: '_getAllEdgesOverlappingWith',
	      value: function _getAllEdgesOverlappingWith(object) {
	        var overlappingEdges = [];
	        this._getEdgesOverlappingWith(object, overlappingEdges);
	        return overlappingEdges;
	      }

	      /**
	       * Place holder. To implement change the getNodeAt to a _getObjectAt. Have the _getObjectAt call
	       * getNodeAt and _getEdgesAt, then priortize the selection to user preferences.
	       *
	       * @param pointer
	       * @returns {undefined}
	       */

	    }, {
	      key: 'getEdgeAt',
	      value: function getEdgeAt(pointer) {
	        var returnEdge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        // Iterate over edges, pick closest within 10
	        var canvasPos = this.canvas.DOMtoCanvas(pointer);
	        var mindist = 10;
	        var overlappingEdge = null;
	        var edges = this.body.edges;
	        for (var i = 0; i < this.body.edgeIndices.length; i++) {
	          var edgeId = this.body.edgeIndices[i];
	          var edge = edges[edgeId];
	          if (edge.connected) {
	            var xFrom = edge.from.x;
	            var yFrom = edge.from.y;
	            var xTo = edge.to.x;
	            var yTo = edge.to.y;
	            var dist = edge.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);
	            if (dist < mindist) {
	              overlappingEdge = edgeId;
	              mindist = dist;
	            }
	          }
	        }
	        if (overlappingEdge) {
	          if (returnEdge === true) {
	            return this.body.edges[overlappingEdge];
	          } else {
	            return overlappingEdge;
	          }
	        } else {
	          return undefined;
	        }
	      }

	      /**
	       * Add object to the selection array.
	       *
	       * @param obj
	       * @private
	       */

	    }, {
	      key: '_addToSelection',
	      value: function _addToSelection(obj) {
	        if (obj instanceof _Node2.default) {
	          this.selectionObj.nodes[obj.id] = obj;
	        } else {
	          this.selectionObj.edges[obj.id] = obj;
	        }
	      }

	      /**
	       * Add object to the selection array.
	       *
	       * @param obj
	       * @private
	       */

	    }, {
	      key: '_addToHover',
	      value: function _addToHover(obj) {
	        if (obj instanceof _Node2.default) {
	          this.hoverObj.nodes[obj.id] = obj;
	        } else {
	          this.hoverObj.edges[obj.id] = obj;
	        }
	      }

	      /**
	       * Remove a single option from selection.
	       *
	       * @param {Object} obj
	       * @private
	       */

	    }, {
	      key: '_removeFromSelection',
	      value: function _removeFromSelection(obj) {
	        if (obj instanceof _Node2.default) {
	          delete this.selectionObj.nodes[obj.id];
	          this._unselectConnectedEdges(obj);
	        } else {
	          delete this.selectionObj.edges[obj.id];
	        }
	      }

	      /**
	       * Unselect all. The selectionObj is useful for this.
	       */

	    }, {
	      key: 'unselectAll',
	      value: function unselectAll() {
	        for (var nodeId in this.selectionObj.nodes) {
	          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	            this.selectionObj.nodes[nodeId].unselect();
	          }
	        }
	        for (var edgeId in this.selectionObj.edges) {
	          if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	            this.selectionObj.edges[edgeId].unselect();
	          }
	        }

	        this.selectionObj = { nodes: {}, edges: {} };
	      }

	      /**
	       * return the number of selected nodes
	       *
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_getSelectedNodeCount',
	      value: function _getSelectedNodeCount() {
	        var count = 0;
	        for (var nodeId in this.selectionObj.nodes) {
	          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	            count += 1;
	          }
	        }
	        return count;
	      }

	      /**
	       * return the selected node
	       *
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_getSelectedNode',
	      value: function _getSelectedNode() {
	        for (var nodeId in this.selectionObj.nodes) {
	          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	            return this.selectionObj.nodes[nodeId];
	          }
	        }
	        return undefined;
	      }

	      /**
	       * return the selected edge
	       *
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_getSelectedEdge',
	      value: function _getSelectedEdge() {
	        for (var edgeId in this.selectionObj.edges) {
	          if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	            return this.selectionObj.edges[edgeId];
	          }
	        }
	        return undefined;
	      }

	      /**
	       * return the number of selected edges
	       *
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_getSelectedEdgeCount',
	      value: function _getSelectedEdgeCount() {
	        var count = 0;
	        for (var edgeId in this.selectionObj.edges) {
	          if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	            count += 1;
	          }
	        }
	        return count;
	      }

	      /**
	       * return the number of selected objects.
	       *
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_getSelectedObjectCount',
	      value: function _getSelectedObjectCount() {
	        var count = 0;
	        for (var nodeId in this.selectionObj.nodes) {
	          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	            count += 1;
	          }
	        }
	        for (var edgeId in this.selectionObj.edges) {
	          if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	            count += 1;
	          }
	        }
	        return count;
	      }

	      /**
	       * Check if anything is selected
	       *
	       * @returns {boolean}
	       * @private
	       */

	    }, {
	      key: '_selectionIsEmpty',
	      value: function _selectionIsEmpty() {
	        for (var nodeId in this.selectionObj.nodes) {
	          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	            return false;
	          }
	        }
	        for (var edgeId in this.selectionObj.edges) {
	          if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	            return false;
	          }
	        }
	        return true;
	      }

	      /**
	       * check if one of the selected nodes is a cluster.
	       *
	       * @returns {boolean}
	       * @private
	       */

	    }, {
	      key: '_clusterInSelection',
	      value: function _clusterInSelection() {
	        for (var nodeId in this.selectionObj.nodes) {
	          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	            if (this.selectionObj.nodes[nodeId].clusterSize > 1) {
	              return true;
	            }
	          }
	        }
	        return false;
	      }

	      /**
	       * select the edges connected to the node that is being selected
	       *
	       * @param {Node} node
	       * @private
	       */

	    }, {
	      key: '_selectConnectedEdges',
	      value: function _selectConnectedEdges(node) {
	        for (var i = 0; i < node.edges.length; i++) {
	          var edge = node.edges[i];
	          edge.select();
	          this._addToSelection(edge);
	        }
	      }

	      /**
	       * select the edges connected to the node that is being selected
	       *
	       * @param {Node} node
	       * @private
	       */

	    }, {
	      key: '_hoverConnectedEdges',
	      value: function _hoverConnectedEdges(node) {
	        for (var i = 0; i < node.edges.length; i++) {
	          var edge = node.edges[i];
	          edge.hover = true;
	          this._addToHover(edge);
	        }
	      }

	      /**
	       * unselect the edges connected to the node that is being selected
	       *
	       * @param {Node} node
	       * @private
	       */

	    }, {
	      key: '_unselectConnectedEdges',
	      value: function _unselectConnectedEdges(node) {
	        for (var i = 0; i < node.edges.length; i++) {
	          var edge = node.edges[i];
	          edge.unselect();
	          this._removeFromSelection(edge);
	        }
	      }

	      /**
	       * This is called when someone clicks on a node. either select or deselect it.
	       * If there is an existing selection and we don't want to append to it, clear the existing selection
	       *
	       * @param {Node || Edge} object
	       * @private
	       */

	    }, {
	      key: 'blurObject',
	      value: function blurObject(object) {
	        if (object.hover === true) {
	          object.hover = false;
	          if (object instanceof _Node2.default) {
	            this.body.emitter.emit("blurNode", { node: object.id });
	          } else {
	            this.body.emitter.emit("blurEdge", { edge: object.id });
	          }
	        }
	      }

	      /**
	       * This is called when someone clicks on a node. either select or deselect it.
	       * If there is an existing selection and we don't want to append to it, clear the existing selection
	       *
	       * @param {Node || Edge} object
	       * @private
	       */

	    }, {
	      key: 'hoverObject',
	      value: function hoverObject(object) {
	        var hoverChanged = false;
	        // remove all node hover highlights
	        for (var nodeId in this.hoverObj.nodes) {
	          if (this.hoverObj.nodes.hasOwnProperty(nodeId)) {
	            if (object === undefined || object instanceof _Node2.default && object.id != nodeId || object instanceof _Edge2.default) {
	              this.blurObject(this.hoverObj.nodes[nodeId]);
	              delete this.hoverObj.nodes[nodeId];
	              hoverChanged = true;
	            }
	          }
	        }

	        // removing all edge hover highlights
	        for (var edgeId in this.hoverObj.edges) {
	          if (this.hoverObj.edges.hasOwnProperty(edgeId)) {
	            // if the hover has been changed here it means that the node has been hovered over or off
	            // we then do not use the blurObject method here.
	            if (hoverChanged === true) {
	              this.hoverObj.edges[edgeId].hover = false;
	              delete this.hoverObj.edges[edgeId];
	            }
	            // if the blur remains the same and the object is undefined (mouse off) or another
	            // edge has been hovered, we blur the edge
	            else if (object === undefined || object instanceof _Edge2.default) {
	                this.blurObject(this.hoverObj.edges[edgeId]);
	                delete this.hoverObj.edges[edgeId];
	                hoverChanged = true;
	              }
	          }
	        }

	        if (object !== undefined) {
	          if (object.hover === false) {
	            object.hover = true;
	            this._addToHover(object);
	            hoverChanged = true;
	            if (object instanceof _Node2.default) {
	              this.body.emitter.emit("hoverNode", { node: object.id });
	            } else {
	              this.body.emitter.emit("hoverEdge", { edge: object.id });
	            }
	          }
	          if (object instanceof _Node2.default && this.options.hoverConnectedEdges === true) {
	            this._hoverConnectedEdges(object);
	          }
	        }

	        if (hoverChanged === true) {
	          this.body.emitter.emit('_requestRedraw');
	        }
	      }

	      /**
	       *
	       * retrieve the currently selected objects
	       * @return {{nodes: Array.<String>, edges: Array.<String>}} selection
	       */

	    }, {
	      key: 'getSelection',
	      value: function getSelection() {
	        var nodeIds = this.getSelectedNodes();
	        var edgeIds = this.getSelectedEdges();
	        return { nodes: nodeIds, edges: edgeIds };
	      }

	      /**
	       *
	       * retrieve the currently selected nodes
	       * @return {String[]} selection    An array with the ids of the
	       *                                            selected nodes.
	       */

	    }, {
	      key: 'getSelectedNodes',
	      value: function getSelectedNodes() {
	        var idArray = [];
	        if (this.options.selectable === true) {
	          for (var nodeId in this.selectionObj.nodes) {
	            if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	              idArray.push(this.selectionObj.nodes[nodeId].id);
	            }
	          }
	        }
	        return idArray;
	      }

	      /**
	       *
	       * retrieve the currently selected edges
	       * @return {Array} selection    An array with the ids of the
	       *                                            selected nodes.
	       */

	    }, {
	      key: 'getSelectedEdges',
	      value: function getSelectedEdges() {
	        var idArray = [];
	        if (this.options.selectable === true) {
	          for (var edgeId in this.selectionObj.edges) {
	            if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	              idArray.push(this.selectionObj.edges[edgeId].id);
	            }
	          }
	        }
	        return idArray;
	      }

	      /**
	       * Updates the current selection
	       * @param {{nodes: Array.<String>, edges: Array.<String>}} Selection
	       * @param {Object} options                                 Options
	       */

	    }, {
	      key: 'setSelection',
	      value: function setSelection(selection) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	        var i = void 0,
	            id = void 0;

	        if (!selection || !selection.nodes && !selection.edges) throw 'Selection must be an object with nodes and/or edges properties';
	        // first unselect any selected node, if option is true or undefined
	        if (options.unselectAll || options.unselectAll === undefined) {
	          this.unselectAll();
	        }
	        if (selection.nodes) {
	          for (i = 0; i < selection.nodes.length; i++) {
	            id = selection.nodes[i];

	            var node = this.body.nodes[id];
	            if (!node) {
	              throw new RangeError('Node with id "' + id + '" not found');
	            }
	            // don't select edges with it
	            this.selectObject(node, options.highlightEdges);
	          }
	        }

	        if (selection.edges) {
	          for (i = 0; i < selection.edges.length; i++) {
	            id = selection.edges[i];

	            var edge = this.body.edges[id];
	            if (!edge) {
	              throw new RangeError('Edge with id "' + id + '" not found');
	            }
	            this.selectObject(edge);
	          }
	        }
	        this.body.emitter.emit('_requestRedraw');
	      }

	      /**
	       * select zero or more nodes with the option to highlight edges
	       * @param {Number[] | String[]} selection     An array with the ids of the
	       *                                            selected nodes.
	       * @param {boolean} [highlightEdges]
	       */

	    }, {
	      key: 'selectNodes',
	      value: function selectNodes(selection) {
	        var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';

	        this.setSelection({ nodes: selection }, { highlightEdges: highlightEdges });
	      }

	      /**
	       * select zero or more edges
	       * @param {Number[] | String[]} selection     An array with the ids of the
	       *                                            selected nodes.
	       */

	    }, {
	      key: 'selectEdges',
	      value: function selectEdges(selection) {
	        if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';

	        this.setSelection({ edges: selection });
	      }

	      /**
	       * Validate the selection: remove ids of nodes which no longer exist
	       * @private
	       */

	    }, {
	      key: 'updateSelection',
	      value: function updateSelection() {
	        for (var nodeId in this.selectionObj.nodes) {
	          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	            if (!this.body.nodes.hasOwnProperty(nodeId)) {
	              delete this.selectionObj.nodes[nodeId];
	            }
	          }
	        }
	        for (var edgeId in this.selectionObj.edges) {
	          if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	            if (!this.body.edges.hasOwnProperty(edgeId)) {
	              delete this.selectionObj.edges[edgeId];
	            }
	          }
	        }
	      }
	    }]);

	    return SelectionHandler;
	  }();

	  exports.default = SelectionHandler;

	/***/ },
	/* 114 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  var _NetworkUtil = __webpack_require__(105);

	  var _NetworkUtil2 = _interopRequireDefault(_NetworkUtil);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);

	  var LayoutEngine = function () {
	    function LayoutEngine(body) {
	      _classCallCheck(this, LayoutEngine);

	      this.body = body;

	      this.initialRandomSeed = Math.round(Math.random() * 1000000);
	      this.randomSeed = this.initialRandomSeed;
	      this.setPhysics = false;
	      this.options = {};
	      this.optionsBackup = { physics: {} };

	      this.defaultOptions = {
	        randomSeed: undefined,
	        improvedLayout: true,
	        hierarchical: {
	          enabled: false,
	          levelSeparation: 150,
	          nodeSpacing: 100,
	          treeSpacing: 200,
	          blockShifting: true,
	          edgeMinimization: true,
	          parentCentralization: true,
	          direction: 'UD', // UD, DU, LR, RL
	          sortMethod: 'hubsize' // hubsize, directed
	        }
	      };
	      util.extend(this.options, this.defaultOptions);
	      this.bindEventListeners();
	    }

	    _createClass(LayoutEngine, [{
	      key: 'bindEventListeners',
	      value: function bindEventListeners() {
	        var _this = this;

	        this.body.emitter.on('_dataChanged', function () {
	          _this.setupHierarchicalLayout();
	        });
	        this.body.emitter.on('_dataLoaded', function () {
	          _this.layoutNetwork();
	        });
	        this.body.emitter.on('_resetHierarchicalLayout', function () {
	          _this.setupHierarchicalLayout();
	        });
	      }
	    }, {
	      key: 'setOptions',
	      value: function setOptions(options, allOptions) {
	        if (options !== undefined) {
	          var prevHierarchicalState = this.options.hierarchical.enabled;
	          util.selectiveDeepExtend(["randomSeed", "improvedLayout"], this.options, options);
	          util.mergeOptions(this.options, options, 'hierarchical');
	          if (options.randomSeed !== undefined) {
	            this.initialRandomSeed = options.randomSeed;
	          }

	          if (this.options.hierarchical.enabled === true) {
	            if (prevHierarchicalState === true) {
	              // refresh the overridden options for nodes and edges.
	              this.body.emitter.emit('refresh', true);
	            }

	            // make sure the level separation is the right way up
	            if (this.options.hierarchical.direction === 'RL' || this.options.hierarchical.direction === 'DU') {
	              if (this.options.hierarchical.levelSeparation > 0) {
	                this.options.hierarchical.levelSeparation *= -1;
	              }
	            } else {
	              if (this.options.hierarchical.levelSeparation < 0) {
	                this.options.hierarchical.levelSeparation *= -1;
	              }
	            }

	            this.body.emitter.emit('_resetHierarchicalLayout');
	            // because the hierarchical system needs it's own physics and smooth curve settings, we adapt the other options if needed.
	            return this.adaptAllOptionsForHierarchicalLayout(allOptions);
	          } else {
	            if (prevHierarchicalState === true) {
	              // refresh the overridden options for nodes and edges.
	              this.body.emitter.emit('refresh');
	              return util.deepExtend(allOptions, this.optionsBackup);
	            }
	          }
	        }
	        return allOptions;
	      }
	    }, {
	      key: 'adaptAllOptionsForHierarchicalLayout',
	      value: function adaptAllOptionsForHierarchicalLayout(allOptions) {
	        if (this.options.hierarchical.enabled === true) {
	          // set the physics
	          if (allOptions.physics === undefined || allOptions.physics === true) {
	            allOptions.physics = {
	              enabled: this.optionsBackup.physics.enabled === undefined ? true : this.optionsBackup.physics.enabled,
	              solver: 'hierarchicalRepulsion'
	            };
	            this.optionsBackup.physics.enabled = this.optionsBackup.physics.enabled === undefined ? true : this.optionsBackup.physics.enabled;
	            this.optionsBackup.physics.solver = this.optionsBackup.physics.solver || 'barnesHut';
	          } else if (_typeof(allOptions.physics) === 'object') {
	            this.optionsBackup.physics.enabled = allOptions.physics.enabled === undefined ? true : allOptions.physics.enabled;
	            this.optionsBackup.physics.solver = allOptions.physics.solver || 'barnesHut';
	            allOptions.physics.solver = 'hierarchicalRepulsion';
	          } else if (allOptions.physics !== false) {
	            this.optionsBackup.physics.solver = 'barnesHut';
	            allOptions.physics = { solver: 'hierarchicalRepulsion' };
	          }

	          // get the type of static smooth curve in case it is required
	          var type = 'horizontal';
	          if (this.options.hierarchical.direction === 'RL' || this.options.hierarchical.direction === 'LR') {
	            type = 'vertical';
	          }

	          // disable smooth curves if nothing is defined. If smooth curves have been turned on, turn them into static smooth curves.
	          if (allOptions.edges === undefined) {
	            this.optionsBackup.edges = { smooth: { enabled: true, type: 'dynamic' } };
	            allOptions.edges = { smooth: false };
	          } else if (allOptions.edges.smooth === undefined) {
	            this.optionsBackup.edges = { smooth: { enabled: true, type: 'dynamic' } };
	            allOptions.edges.smooth = false;
	          } else {
	            if (typeof allOptions.edges.smooth === 'boolean') {
	              this.optionsBackup.edges = { smooth: allOptions.edges.smooth };
	              allOptions.edges.smooth = { enabled: allOptions.edges.smooth, type: type };
	            } else {
	              // allow custom types except for dynamic
	              if (allOptions.edges.smooth.type !== undefined && allOptions.edges.smooth.type !== 'dynamic') {
	                type = allOptions.edges.smooth.type;
	              }

	              this.optionsBackup.edges = {
	                smooth: allOptions.edges.smooth.enabled === undefined ? true : allOptions.edges.smooth.enabled,
	                type: allOptions.edges.smooth.type === undefined ? 'dynamic' : allOptions.edges.smooth.type,
	                roundness: allOptions.edges.smooth.roundness === undefined ? 0.5 : allOptions.edges.smooth.roundness,
	                forceDirection: allOptions.edges.smooth.forceDirection === undefined ? false : allOptions.edges.smooth.forceDirection
	              };
	              allOptions.edges.smooth = {
	                enabled: allOptions.edges.smooth.enabled === undefined ? true : allOptions.edges.smooth.enabled,
	                type: type,
	                roundness: allOptions.edges.smooth.roundness === undefined ? 0.5 : allOptions.edges.smooth.roundness,
	                forceDirection: allOptions.edges.smooth.forceDirection === undefined ? false : allOptions.edges.smooth.forceDirection
	              };
	            }
	          }

	          // force all edges into static smooth curves. Only applies to edges that do not use the global options for smooth.
	          this.body.emitter.emit('_forceDisableDynamicCurves', type);
	        }

	        return allOptions;
	      }
	    }, {
	      key: 'seededRandom',
	      value: function seededRandom() {
	        var x = Math.sin(this.randomSeed++) * 10000;
	        return x - Math.floor(x);
	      }
	    }, {
	      key: 'positionInitially',
	      value: function positionInitially(nodesArray) {
	        if (this.options.hierarchical.enabled !== true) {
	          this.randomSeed = this.initialRandomSeed;
	          for (var i = 0; i < nodesArray.length; i++) {
	            var node = nodesArray[i];
	            var radius = 10 * 0.1 * nodesArray.length + 10;
	            var angle = 2 * Math.PI * this.seededRandom();
	            if (node.x === undefined) {
	              node.x = radius * Math.cos(angle);
	            }
	            if (node.y === undefined) {
	              node.y = radius * Math.sin(angle);
	            }
	          }
	        }
	      }

	      /**
	       * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we
	       * cluster them first to reduce the amount.
	       */

	    }, {
	      key: 'layoutNetwork',
	      value: function layoutNetwork() {
	        if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {
	          // first check if we should Kamada Kawai to layout. The threshold is if less than half of the visible
	          // nodes have predefined positions we use this.
	          var positionDefined = 0;
	          for (var i = 0; i < this.body.nodeIndices.length; i++) {
	            var node = this.body.nodes[this.body.nodeIndices[i]];
	            if (node.predefinedPosition === true) {
	              positionDefined += 1;
	            }
	          }

	          // if less than half of the nodes have a predefined position we continue
	          if (positionDefined < 0.5 * this.body.nodeIndices.length) {
	            var MAX_LEVELS = 10;
	            var level = 0;
	            var clusterThreshold = 100;
	            // if there are a lot of nodes, we cluster before we run the algorithm.
	            if (this.body.nodeIndices.length > clusterThreshold) {
	              var startLength = this.body.nodeIndices.length;
	              while (this.body.nodeIndices.length > clusterThreshold) {
	                //console.time("clustering")
	                level += 1;
	                var before = this.body.nodeIndices.length;
	                // if there are many nodes we do a hubsize cluster
	                if (level % 3 === 0) {
	                  this.body.modules.clustering.clusterBridges();
	                } else {
	                  this.body.modules.clustering.clusterOutliers();
	                }
	                var after = this.body.nodeIndices.length;
	                if (before == after && level % 3 !== 0 || level > MAX_LEVELS) {
	                  this._declusterAll();
	                  this.body.emitter.emit("_layoutFailed");
	                  console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
	                  return;
	                }
	                //console.timeEnd("clustering")
	                //console.log(level,after)
	              }
	              // increase the size of the edges
	              this.body.modules.kamadaKawai.setOptions({ springLength: Math.max(150, 2 * startLength) });
	            }

	            // position the system for these nodes and edges
	            this.body.modules.kamadaKawai.solve(this.body.nodeIndices, this.body.edgeIndices, true);

	            // shift to center point
	            this._shiftToCenter();

	            // perturb the nodes a little bit to force the physics to kick in
	            var offset = 70;
	            for (var _i = 0; _i < this.body.nodeIndices.length; _i++) {
	              // Only perturb the nodes that aren't fixed
	              if (this.body.nodes[this.body.nodeIndices[_i]].predefinedPosition === false) {
	                this.body.nodes[this.body.nodeIndices[_i]].x += (0.5 - this.seededRandom()) * offset;
	                this.body.nodes[this.body.nodeIndices[_i]].y += (0.5 - this.seededRandom()) * offset;
	              }
	            }

	            // uncluster all clusters
	            this._declusterAll();

	            // reposition all bezier nodes.
	            this.body.emitter.emit("_repositionBezierNodes");
	          }
	        }
	      }

	      /**
	       * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view
	       * @private
	       */

	    }, {
	      key: '_shiftToCenter',
	      value: function _shiftToCenter() {
	        var range = _NetworkUtil2.default.getRangeCore(this.body.nodes, this.body.nodeIndices);
	        var center = _NetworkUtil2.default.findCenter(range);
	        for (var i = 0; i < this.body.nodeIndices.length; i++) {
	          this.body.nodes[this.body.nodeIndices[i]].x -= center.x;
	          this.body.nodes[this.body.nodeIndices[i]].y -= center.y;
	        }
	      }
	    }, {
	      key: '_declusterAll',
	      value: function _declusterAll() {
	        var clustersPresent = true;
	        while (clustersPresent === true) {
	          clustersPresent = false;
	          for (var i = 0; i < this.body.nodeIndices.length; i++) {
	            if (this.body.nodes[this.body.nodeIndices[i]].isCluster === true) {
	              clustersPresent = true;
	              this.body.modules.clustering.openCluster(this.body.nodeIndices[i], {}, false);
	            }
	          }
	          if (clustersPresent === true) {
	            this.body.emitter.emit('_dataChanged');
	          }
	        }
	      }
	    }, {
	      key: 'getSeed',
	      value: function getSeed() {
	        return this.initialRandomSeed;
	      }

	      /**
	       * This is the main function to layout the nodes in a hierarchical way.
	       * It checks if the node details are supplied correctly
	       *
	       * @private
	       */

	    }, {
	      key: 'setupHierarchicalLayout',
	      value: function setupHierarchicalLayout() {
	        if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {
	          // get the size of the largest hubs and check if the user has defined a level for a node.
	          var node = void 0,
	              nodeId = void 0;
	          var definedLevel = false;
	          var definedPositions = true;
	          var undefinedLevel = false;
	          this.hierarchicalLevels = {};
	          this.lastNodeOnLevel = {};
	          this.hierarchicalChildrenReference = {};
	          this.hierarchicalParentReference = {};
	          this.hierarchicalTrees = {};
	          this.treeIndex = -1;

	          this.distributionOrdering = {};
	          this.distributionIndex = {};
	          this.distributionOrderingPresence = {};

	          for (nodeId in this.body.nodes) {
	            if (this.body.nodes.hasOwnProperty(nodeId)) {
	              node = this.body.nodes[nodeId];
	              if (node.options.x === undefined && node.options.y === undefined) {
	                definedPositions = false;
	              }
	              if (node.options.level !== undefined) {
	                definedLevel = true;
	                this.hierarchicalLevels[nodeId] = node.options.level;
	              } else {
	                undefinedLevel = true;
	              }
	            }
	          }

	          // if the user defined some levels but not all, alert and run without hierarchical layout
	          if (undefinedLevel === true && definedLevel === true) {
	            throw new Error('To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.');
	            return;
	          } else {
	            // define levels if undefined by the users. Based on hubsize.
	            if (undefinedLevel === true) {
	              if (this.options.hierarchical.sortMethod === 'hubsize') {
	                this._determineLevelsByHubsize();
	              } else if (this.options.hierarchical.sortMethod === 'directed') {
	                this._determineLevelsDirected();
	              } else if (this.options.hierarchical.sortMethod === 'custom') {
	                this._determineLevelsCustomCallback();
	              }
	            }

	            // fallback for cases where there are nodes but no edges
	            for (var _nodeId in this.body.nodes) {
	              if (this.body.nodes.hasOwnProperty(_nodeId)) {
	                if (this.hierarchicalLevels[_nodeId] === undefined) {
	                  this.hierarchicalLevels[_nodeId] = 0;
	                }
	              }
	            }
	            // check the distribution of the nodes per level.
	            var distribution = this._getDistribution();

	            // get the parent children relations.
	            this._generateMap();

	            // place the nodes on the canvas.
	            this._placeNodesByHierarchy(distribution);

	            // condense the whitespace.
	            this._condenseHierarchy();

	            // shift to center so gravity does not have to do much
	            this._shiftToCenter();
	          }
	        }
	      }

	      /**
	       * @private
	       */

	    }, {
	      key: '_condenseHierarchy',
	      value: function _condenseHierarchy() {
	        var _this2 = this;

	        // Global var in this scope to define when the movement has stopped.
	        var stillShifting = false;
	        var branches = {};
	        // first we have some methods to help shifting trees around.
	        // the main method to shift the trees
	        var shiftTrees = function shiftTrees() {
	          var treeSizes = getTreeSizes();
	          for (var i = 0; i < treeSizes.length - 1; i++) {
	            var diff = treeSizes[i].max - treeSizes[i + 1].min;
	            shiftTree(i + 1, diff + _this2.options.hierarchical.treeSpacing);
	          }
	        };

	        // shift a single tree by an offset
	        var shiftTree = function shiftTree(index, offset) {
	          for (var nodeId in _this2.hierarchicalTrees) {
	            if (_this2.hierarchicalTrees.hasOwnProperty(nodeId)) {
	              if (_this2.hierarchicalTrees[nodeId] === index) {
	                var node = _this2.body.nodes[nodeId];
	                var pos = _this2._getPositionForHierarchy(node);
	                _this2._setPositionForHierarchy(node, pos + offset, undefined, true);
	              }
	            }
	          }
	        };

	        // get the width of a tree
	        var getTreeSize = function getTreeSize(index) {
	          var min = 1e9;
	          var max = -1e9;
	          for (var nodeId in _this2.hierarchicalTrees) {
	            if (_this2.hierarchicalTrees.hasOwnProperty(nodeId)) {
	              if (_this2.hierarchicalTrees[nodeId] === index) {
	                var pos = _this2._getPositionForHierarchy(_this2.body.nodes[nodeId]);
	                min = Math.min(pos, min);
	                max = Math.max(pos, max);
	              }
	            }
	          }
	          return { min: min, max: max };
	        };

	        // get the width of all trees
	        var getTreeSizes = function getTreeSizes() {
	          var treeWidths = [];
	          for (var i = 0; i <= _this2.treeIndex; i++) {
	            treeWidths.push(getTreeSize(i));
	          }
	          return treeWidths;
	        };

	        // get a map of all nodes in this branch
	        var getBranchNodes = function getBranchNodes(source, map) {
	          map[source.id] = true;
	          if (_this2.hierarchicalChildrenReference[source.id]) {
	            var children = _this2.hierarchicalChildrenReference[source.id];
	            if (children.length > 0) {
	              for (var i = 0; i < children.length; i++) {
	                getBranchNodes(_this2.body.nodes[children[i]], map);
	              }
	            }
	          }
	        };

	        // get a min max width as well as the maximum movement space it has on either sides
	        // we use min max terminology because width and height can interchange depending on the direction of the layout
	        var getBranchBoundary = function getBranchBoundary(branchMap) {
	          var maxLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e9;

	          var minSpace = 1e9;
	          var maxSpace = 1e9;
	          var min = 1e9;
	          var max = -1e9;
	          for (var branchNode in branchMap) {
	            if (branchMap.hasOwnProperty(branchNode)) {
	              var node = _this2.body.nodes[branchNode];
	              var level = _this2.hierarchicalLevels[node.id];
	              var position = _this2._getPositionForHierarchy(node);

	              // get the space around the node.

	              var _getSpaceAroundNode2 = _this2._getSpaceAroundNode(node, branchMap),
	                  _getSpaceAroundNode3 = _slicedToArray(_getSpaceAroundNode2, 2),
	                  minSpaceNode = _getSpaceAroundNode3[0],
	                  maxSpaceNode = _getSpaceAroundNode3[1];

	              minSpace = Math.min(minSpaceNode, minSpace);
	              maxSpace = Math.min(maxSpaceNode, maxSpace);

	              // the width is only relevant for the levels two nodes have in common. This is why we filter on this.
	              if (level <= maxLevel) {
	                min = Math.min(position, min);
	                max = Math.max(position, max);
	              }
	            }
	          }

	          return [min, max, minSpace, maxSpace];
	        };

	        // get the maximum level of a branch.
	        var getMaxLevel = function getMaxLevel(nodeId) {
	          var level = _this2.hierarchicalLevels[nodeId];
	          if (_this2.hierarchicalChildrenReference[nodeId]) {
	            var children = _this2.hierarchicalChildrenReference[nodeId];
	            if (children.length > 0) {
	              for (var i = 0; i < children.length; i++) {
	                level = Math.max(level, getMaxLevel(children[i]));
	              }
	            }
	          }
	          return level;
	        };

	        // check what the maximum level is these nodes have in common.
	        var getCollisionLevel = function getCollisionLevel(node1, node2) {
	          var maxLevel1 = getMaxLevel(node1.id);
	          var maxLevel2 = getMaxLevel(node2.id);
	          return Math.min(maxLevel1, maxLevel2);
	        };

	        // check if two nodes have the same parent(s)
	        var hasSameParent = function hasSameParent(node1, node2) {
	          var parents1 = _this2.hierarchicalParentReference[node1.id];
	          var parents2 = _this2.hierarchicalParentReference[node2.id];
	          if (parents1 === undefined || parents2 === undefined) {
	            return false;
	          }

	          for (var i = 0; i < parents1.length; i++) {
	            for (var j = 0; j < parents2.length; j++) {
	              if (parents1[i] == parents2[j]) {
	                return true;
	              }
	            }
	          }
	          return false;
	        };

	        // condense elements. These can be nodes or branches depending on the callback.
	        var shiftElementsCloser = function shiftElementsCloser(callback, levels, centerParents) {
	          for (var i = 0; i < levels.length; i++) {
	            var level = levels[i];
	            var levelNodes = _this2.distributionOrdering[level];
	            if (levelNodes.length > 1) {
	              for (var j = 0; j < levelNodes.length - 1; j++) {
	                if (hasSameParent(levelNodes[j], levelNodes[j + 1]) === true) {
	                  if (_this2.hierarchicalTrees[levelNodes[j].id] === _this2.hierarchicalTrees[levelNodes[j + 1].id]) {
	                    callback(levelNodes[j], levelNodes[j + 1], centerParents);
	                  }
	                }
	              }
	            }
	          }
	        };

	        // callback for shifting branches
	        var branchShiftCallback = function branchShiftCallback(node1, node2) {
	          var centerParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	          //window.CALLBACKS.push(() => {
	          var pos1 = _this2._getPositionForHierarchy(node1);
	          var pos2 = _this2._getPositionForHierarchy(node2);
	          var diffAbs = Math.abs(pos2 - pos1);
	          //console.log("NOW CHEcKING:", node1.id, node2.id, diffAbs);
	          if (diffAbs > _this2.options.hierarchical.nodeSpacing) {
	            var branchNodes1 = {};branchNodes1[node1.id] = true;
	            var branchNodes2 = {};branchNodes2[node2.id] = true;

	            getBranchNodes(node1, branchNodes1);
	            getBranchNodes(node2, branchNodes2);

	            // check the largest distance between the branches
	            var maxLevel = getCollisionLevel(node1, node2);

	            var _getBranchBoundary = getBranchBoundary(branchNodes1, maxLevel),
	                _getBranchBoundary2 = _slicedToArray(_getBranchBoundary, 4),
	                min1 = _getBranchBoundary2[0],
	                max1 = _getBranchBoundary2[1],
	                minSpace1 = _getBranchBoundary2[2],
	                maxSpace1 = _getBranchBoundary2[3];

	            var _getBranchBoundary3 = getBranchBoundary(branchNodes2, maxLevel),
	                _getBranchBoundary4 = _slicedToArray(_getBranchBoundary3, 4),
	                min2 = _getBranchBoundary4[0],
	                max2 = _getBranchBoundary4[1],
	                minSpace2 = _getBranchBoundary4[2],
	                maxSpace2 = _getBranchBoundary4[3];

	            //console.log(node1.id, getBranchBoundary(branchNodes1, maxLevel), node2.id, getBranchBoundary(branchNodes2, maxLevel), maxLevel);


	            var diffBranch = Math.abs(max1 - min2);
	            if (diffBranch > _this2.options.hierarchical.nodeSpacing) {
	              var offset = max1 - min2 + _this2.options.hierarchical.nodeSpacing;
	              if (offset < -minSpace2 + _this2.options.hierarchical.nodeSpacing) {
	                offset = -minSpace2 + _this2.options.hierarchical.nodeSpacing;
	                //console.log("RESETTING OFFSET", max1 - min2 + this.options.hierarchical.nodeSpacing, -minSpace2, offset);
	              }
	              if (offset < 0) {
	                //console.log("SHIFTING", node2.id, offset);
	                _this2._shiftBlock(node2.id, offset);
	                stillShifting = true;

	                if (centerParent === true) _this2._centerParent(node2);
	              }
	            }
	          }
	          //this.body.emitter.emit("_redraw");})
	        };

	        var minimizeEdgeLength = function minimizeEdgeLength(iterations, node) {
	          //window.CALLBACKS.push(() => {
	          //  console.log("ts",node.id);
	          var nodeId = node.id;
	          var allEdges = node.edges;
	          var nodeLevel = _this2.hierarchicalLevels[node.id];

	          // gather constants
	          var C2 = _this2.options.hierarchical.levelSeparation * _this2.options.hierarchical.levelSeparation;
	          var referenceNodes = {};
	          var aboveEdges = [];
	          for (var i = 0; i < allEdges.length; i++) {
	            var edge = allEdges[i];
	            if (edge.toId != edge.fromId) {
	              var otherNode = edge.toId == nodeId ? edge.from : edge.to;
	              referenceNodes[allEdges[i].id] = otherNode;
	              if (_this2.hierarchicalLevels[otherNode.id] < nodeLevel) {
	                aboveEdges.push(edge);
	              }
	            }
	          }

	          // differentiated sum of lengths based on only moving one node over one axis
	          var getFx = function getFx(point, edges) {
	            var sum = 0;
	            for (var _i2 = 0; _i2 < edges.length; _i2++) {
	              if (referenceNodes[edges[_i2].id] !== undefined) {
	                var a = _this2._getPositionForHierarchy(referenceNodes[edges[_i2].id]) - point;
	                sum += a / Math.sqrt(a * a + C2);
	              }
	            }
	            return sum;
	          };

	          // doubly differentiated sum of lengths based on only moving one node over one axis
	          var getDFx = function getDFx(point, edges) {
	            var sum = 0;
	            for (var _i3 = 0; _i3 < edges.length; _i3++) {
	              if (referenceNodes[edges[_i3].id] !== undefined) {
	                var a = _this2._getPositionForHierarchy(referenceNodes[edges[_i3].id]) - point;
	                sum -= C2 * Math.pow(a * a + C2, -1.5);
	              }
	            }
	            return sum;
	          };

	          var getGuess = function getGuess(iterations, edges) {
	            var guess = _this2._getPositionForHierarchy(node);
	            // Newton's method for optimization
	            var guessMap = {};
	            for (var _i4 = 0; _i4 < iterations; _i4++) {
	              var fx = getFx(guess, edges);
	              var dfx = getDFx(guess, edges);

	              // we limit the movement to avoid instability.
	              var limit = 40;
	              var ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));
	              guess = guess - ratio;
	              // reduce duplicates
	              if (guessMap[guess] !== undefined) {
	                break;
	              }
	              guessMap[guess] = _i4;
	            }
	            return guess;
	          };

	          var moveBranch = function moveBranch(guess) {
	            // position node if there is space
	            var nodePosition = _this2._getPositionForHierarchy(node);

	            // check movable area of the branch
	            if (branches[node.id] === undefined) {
	              var branchNodes = {};
	              branchNodes[node.id] = true;
	              getBranchNodes(node, branchNodes);
	              branches[node.id] = branchNodes;
	            }

	            var _getBranchBoundary5 = getBranchBoundary(branches[node.id]),
	                _getBranchBoundary6 = _slicedToArray(_getBranchBoundary5, 4),
	                minBranch = _getBranchBoundary6[0],
	                maxBranch = _getBranchBoundary6[1],
	                minSpaceBranch = _getBranchBoundary6[2],
	                maxSpaceBranch = _getBranchBoundary6[3];

	            var diff = guess - nodePosition;

	            // check if we are allowed to move the node:
	            var branchOffset = 0;
	            if (diff > 0) {
	              branchOffset = Math.min(diff, maxSpaceBranch - _this2.options.hierarchical.nodeSpacing);
	            } else if (diff < 0) {
	              branchOffset = -Math.min(-diff, minSpaceBranch - _this2.options.hierarchical.nodeSpacing);
	            }

	            if (branchOffset != 0) {
	              //console.log("moving branch:",branchOffset, maxSpaceBranch, minSpaceBranch)
	              _this2._shiftBlock(node.id, branchOffset);
	              //this.body.emitter.emit("_redraw");
	              stillShifting = true;
	            }
	          };

	          var moveNode = function moveNode(guess) {
	            var nodePosition = _this2._getPositionForHierarchy(node);

	            // position node if there is space

	            var _getSpaceAroundNode4 = _this2._getSpaceAroundNode(node),
	                _getSpaceAroundNode5 = _slicedToArray(_getSpaceAroundNode4, 2),
	                minSpace = _getSpaceAroundNode5[0],
	                maxSpace = _getSpaceAroundNode5[1];

	            var diff = guess - nodePosition;
	            // check if we are allowed to move the node:
	            var newPosition = nodePosition;
	            if (diff > 0) {
	              newPosition = Math.min(nodePosition + (maxSpace - _this2.options.hierarchical.nodeSpacing), guess);
	            } else if (diff < 0) {
	              newPosition = Math.max(nodePosition - (minSpace - _this2.options.hierarchical.nodeSpacing), guess);
	            }

	            if (newPosition !== nodePosition) {
	              //console.log("moving Node:",diff, minSpace, maxSpace);
	              _this2._setPositionForHierarchy(node, newPosition, undefined, true);
	              //this.body.emitter.emit("_redraw");
	              stillShifting = true;
	            }
	          };

	          var guess = getGuess(iterations, aboveEdges);
	          moveBranch(guess);
	          guess = getGuess(iterations, allEdges);
	          moveNode(guess);
	          //})
	        };

	        // method to remove whitespace between branches. Because we do bottom up, we can center the parents.
	        var minimizeEdgeLengthBottomUp = function minimizeEdgeLengthBottomUp(iterations) {
	          var levels = Object.keys(_this2.distributionOrdering);
	          levels = levels.reverse();
	          for (var i = 0; i < iterations; i++) {
	            stillShifting = false;
	            for (var j = 0; j < levels.length; j++) {
	              var level = levels[j];
	              var levelNodes = _this2.distributionOrdering[level];
	              for (var k = 0; k < levelNodes.length; k++) {
	                minimizeEdgeLength(1000, levelNodes[k]);
	              }
	            }
	            if (stillShifting !== true) {
	              //console.log("FINISHED minimizeEdgeLengthBottomUp IN " + i);
	              break;
	            }
	          }
	        };

	        // method to remove whitespace between branches. Because we do bottom up, we can center the parents.
	        var shiftBranchesCloserBottomUp = function shiftBranchesCloserBottomUp(iterations) {
	          var levels = Object.keys(_this2.distributionOrdering);
	          levels = levels.reverse();
	          for (var i = 0; i < iterations; i++) {
	            stillShifting = false;
	            shiftElementsCloser(branchShiftCallback, levels, true);
	            if (stillShifting !== true) {
	              //console.log("FINISHED shiftBranchesCloserBottomUp IN " + (i+1));
	              break;
	            }
	          }
	        };

	        // center all parents
	        var centerAllParents = function centerAllParents() {
	          for (var nodeId in _this2.body.nodes) {
	            if (_this2.body.nodes.hasOwnProperty(nodeId)) _this2._centerParent(_this2.body.nodes[nodeId]);
	          }
	        };

	        // center all parents
	        var centerAllParentsBottomUp = function centerAllParentsBottomUp() {
	          var levels = Object.keys(_this2.distributionOrdering);
	          levels = levels.reverse();
	          for (var i = 0; i < levels.length; i++) {
	            var level = levels[i];
	            var levelNodes = _this2.distributionOrdering[level];
	            for (var j = 0; j < levelNodes.length; j++) {
	              _this2._centerParent(levelNodes[j]);
	            }
	          }
	        };

	        // the actual work is done here.
	        if (this.options.hierarchical.blockShifting === true) {
	          shiftBranchesCloserBottomUp(5);
	          centerAllParents();
	        }

	        // minimize edge length
	        if (this.options.hierarchical.edgeMinimization === true) {
	          minimizeEdgeLengthBottomUp(20);
	        }

	        if (this.options.hierarchical.parentCentralization === true) {
	          centerAllParentsBottomUp();
	        }

	        shiftTrees();
	      }

	      /**
	       * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.
	       * This is used to only get the distances to nodes outside of a branch.
	       * @param node
	       * @param map
	       * @returns {*[]}
	       * @private
	       */

	    }, {
	      key: '_getSpaceAroundNode',
	      value: function _getSpaceAroundNode(node, map) {
	        var useMap = true;
	        if (map === undefined) {
	          useMap = false;
	        }
	        var level = this.hierarchicalLevels[node.id];
	        if (level !== undefined) {
	          var index = this.distributionIndex[node.id];
	          var position = this._getPositionForHierarchy(node);
	          var minSpace = 1e9;
	          var maxSpace = 1e9;
	          if (index !== 0) {
	            var prevNode = this.distributionOrdering[level][index - 1];
	            if (useMap === true && map[prevNode.id] === undefined || useMap === false) {
	              var prevPos = this._getPositionForHierarchy(prevNode);
	              minSpace = position - prevPos;
	            }
	          }

	          if (index != this.distributionOrdering[level].length - 1) {
	            var nextNode = this.distributionOrdering[level][index + 1];
	            if (useMap === true && map[nextNode.id] === undefined || useMap === false) {
	              var nextPos = this._getPositionForHierarchy(nextNode);
	              maxSpace = Math.min(maxSpace, nextPos - position);
	            }
	          }

	          return [minSpace, maxSpace];
	        } else {
	          return [0, 0];
	        }
	      }

	      /**
	       * We use this method to center a parent node and check if it does not cross other nodes when it does.
	       * @param node
	       * @private
	       */

	    }, {
	      key: '_centerParent',
	      value: function _centerParent(node) {
	        if (this.hierarchicalParentReference[node.id]) {
	          var parents = this.hierarchicalParentReference[node.id];
	          for (var i = 0; i < parents.length; i++) {
	            var parentId = parents[i];
	            var parentNode = this.body.nodes[parentId];
	            if (this.hierarchicalChildrenReference[parentId]) {
	              // get the range of the children
	              var minPos = 1e9;
	              var maxPos = -1e9;
	              var children = this.hierarchicalChildrenReference[parentId];
	              if (children.length > 0) {
	                for (var _i5 = 0; _i5 < children.length; _i5++) {
	                  var childNode = this.body.nodes[children[_i5]];
	                  minPos = Math.min(minPos, this._getPositionForHierarchy(childNode));
	                  maxPos = Math.max(maxPos, this._getPositionForHierarchy(childNode));
	                }
	              }

	              var position = this._getPositionForHierarchy(parentNode);

	              var _getSpaceAroundNode6 = this._getSpaceAroundNode(parentNode),
	                  _getSpaceAroundNode7 = _slicedToArray(_getSpaceAroundNode6, 2),
	                  minSpace = _getSpaceAroundNode7[0],
	                  maxSpace = _getSpaceAroundNode7[1];

	              var newPosition = 0.5 * (minPos + maxPos);
	              var diff = position - newPosition;
	              if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {
	                this._setPositionForHierarchy(parentNode, newPosition, undefined, true);
	              }
	            }
	          }
	        }
	      }

	      /**
	       * This function places the nodes on the canvas based on the hierarchial distribution.
	       *
	       * @param {Object} distribution | obtained by the function this._getDistribution()
	       * @private
	       */

	    }, {
	      key: '_placeNodesByHierarchy',
	      value: function _placeNodesByHierarchy(distribution) {
	        this.positionedNodes = {};
	        // start placing all the level 0 nodes first. Then recursively position their branches.
	        for (var level in distribution) {
	          if (distribution.hasOwnProperty(level)) {
	            // sort nodes in level by position:
	            var nodeArray = Object.keys(distribution[level]);
	            nodeArray = this._indexArrayToNodes(nodeArray);
	            this._sortNodeArray(nodeArray);
	            var handledNodeCount = 0;

	            for (var i = 0; i < nodeArray.length; i++) {
	              var node = nodeArray[i];
	              if (this.positionedNodes[node.id] === undefined) {
	                var pos = this.options.hierarchical.nodeSpacing * handledNodeCount;
	                // we get the X or Y values we need and store them in pos and previousPos. The get and set make sure we get X or Y
	                if (handledNodeCount > 0) {
	                  pos = this._getPositionForHierarchy(nodeArray[i - 1]) + this.options.hierarchical.nodeSpacing;
	                }
	                this._setPositionForHierarchy(node, pos, level);
	                this._validataPositionAndContinue(node, level, pos);

	                handledNodeCount++;
	              }
	            }
	          }
	        }
	      }

	      /**
	       * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes
	       * on a X position that ensures there will be no overlap.
	       *
	       * @param parentId
	       * @param parentLevel
	       * @private
	       */

	    }, {
	      key: '_placeBranchNodes',
	      value: function _placeBranchNodes(parentId, parentLevel) {
	        // if this is not a parent, cancel the placing. This can happen with multiple parents to one child.
	        if (this.hierarchicalChildrenReference[parentId] === undefined) {
	          return;
	        }

	        // get a list of childNodes
	        var childNodes = [];
	        for (var i = 0; i < this.hierarchicalChildrenReference[parentId].length; i++) {
	          childNodes.push(this.body.nodes[this.hierarchicalChildrenReference[parentId][i]]);
	        }

	        // use the positions to order the nodes.
	        this._sortNodeArray(childNodes);

	        // position the childNodes
	        for (var _i6 = 0; _i6 < childNodes.length; _i6++) {
	          var childNode = childNodes[_i6];
	          var childNodeLevel = this.hierarchicalLevels[childNode.id];
	          // check if the child node is below the parent node and if it has already been positioned.
	          if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === undefined) {
	            // get the amount of space required for this node. If parent the width is based on the amount of children.
	            var pos = void 0;

	            // we get the X or Y values we need and store them in pos and previousPos. The get and set make sure we get X or Y
	            if (_i6 === 0) {
	              pos = this._getPositionForHierarchy(this.body.nodes[parentId]);
	            } else {
	              pos = this._getPositionForHierarchy(childNodes[_i6 - 1]) + this.options.hierarchical.nodeSpacing;
	            }
	            this._setPositionForHierarchy(childNode, pos, childNodeLevel);
	            this._validataPositionAndContinue(childNode, childNodeLevel, pos);
	          } else {
	            return;
	          }
	        }

	        // center the parent nodes.
	        var minPos = 1e9;
	        var maxPos = -1e9;
	        for (var _i7 = 0; _i7 < childNodes.length; _i7++) {
	          var childNodeId = childNodes[_i7].id;
	          minPos = Math.min(minPos, this._getPositionForHierarchy(this.body.nodes[childNodeId]));
	          maxPos = Math.max(maxPos, this._getPositionForHierarchy(this.body.nodes[childNodeId]));
	        }
	        this._setPositionForHierarchy(this.body.nodes[parentId], 0.5 * (minPos + maxPos), parentLevel);
	      }

	      /**
	       * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.
	       * Finally it will call _placeBranchNodes to place the branch nodes.
	       * @param node
	       * @param level
	       * @param pos
	       * @private
	       */

	    }, {
	      key: '_validataPositionAndContinue',
	      value: function _validataPositionAndContinue(node, level, pos) {
	        // if overlap has been detected, we shift the branch
	        if (this.lastNodeOnLevel[level] !== undefined) {
	          var previousPos = this._getPositionForHierarchy(this.body.nodes[this.lastNodeOnLevel[level]]);
	          if (pos - previousPos < this.options.hierarchical.nodeSpacing) {
	            var diff = previousPos + this.options.hierarchical.nodeSpacing - pos;
	            var sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node.id);
	            this._shiftBlock(sharedParent.withChild, diff);
	          }
	        }

	        // store change in position.
	        this.lastNodeOnLevel[level] = node.id;

	        this.positionedNodes[node.id] = true;

	        this._placeBranchNodes(node.id, level);
	      }

	      /**
	       * Receives an array with node indices and returns an array with the actual node references. Used for sorting based on
	       * node properties.
	       * @param idArray
	       */

	    }, {
	      key: '_indexArrayToNodes',
	      value: function _indexArrayToNodes(idArray) {
	        var array = [];
	        for (var i = 0; i < idArray.length; i++) {
	          array.push(this.body.nodes[idArray[i]]);
	        }
	        return array;
	      }

	      /**
	       * This function get the distribution of levels based on hubsize
	       *
	       * @returns {Object}
	       * @private
	       */

	    }, {
	      key: '_getDistribution',
	      value: function _getDistribution() {
	        var distribution = {};
	        var nodeId = void 0,
	            node = void 0;

	        // we fix Y because the hierarchy is vertical, we fix X so we do not give a node an x position for a second time.
	        // the fix of X is removed after the x value has been set.
	        for (nodeId in this.body.nodes) {
	          if (this.body.nodes.hasOwnProperty(nodeId)) {
	            node = this.body.nodes[nodeId];
	            var level = this.hierarchicalLevels[nodeId] === undefined ? 0 : this.hierarchicalLevels[nodeId];
	            if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
	              node.y = this.options.hierarchical.levelSeparation * level;
	              node.options.fixed.y = true;
	            } else {
	              node.x = this.options.hierarchical.levelSeparation * level;
	              node.options.fixed.x = true;
	            }
	            if (distribution[level] === undefined) {
	              distribution[level] = {};
	            }
	            distribution[level][nodeId] = node;
	          }
	        }
	        return distribution;
	      }

	      /**
	       * Get the hubsize from all remaining unlevelled nodes.
	       *
	       * @returns {number}
	       * @private
	       */

	    }, {
	      key: '_getHubSize',
	      value: function _getHubSize() {
	        var hubSize = 0;
	        for (var nodeId in this.body.nodes) {
	          if (this.body.nodes.hasOwnProperty(nodeId)) {
	            var node = this.body.nodes[nodeId];
	            if (this.hierarchicalLevels[nodeId] === undefined) {
	              hubSize = node.edges.length < hubSize ? hubSize : node.edges.length;
	            }
	          }
	        }
	        return hubSize;
	      }

	      /**
	       * this function allocates nodes in levels based on the recursive branching from the largest hubs.
	       *
	       * @param hubsize
	       * @private
	       */

	    }, {
	      key: '_determineLevelsByHubsize',
	      value: function _determineLevelsByHubsize() {
	        var _this3 = this;

	        var hubSize = 1;

	        var levelDownstream = function levelDownstream(nodeA, nodeB) {
	          if (_this3.hierarchicalLevels[nodeB.id] === undefined) {
	            // set initial level
	            if (_this3.hierarchicalLevels[nodeA.id] === undefined) {
	              _this3.hierarchicalLevels[nodeA.id] = 0;
	            }
	            // set level
	            _this3.hierarchicalLevels[nodeB.id] = _this3.hierarchicalLevels[nodeA.id] + 1;
	          }
	        };

	        while (hubSize > 0) {
	          // determine hubs
	          hubSize = this._getHubSize();
	          if (hubSize === 0) break;

	          for (var nodeId in this.body.nodes) {
	            if (this.body.nodes.hasOwnProperty(nodeId)) {
	              var node = this.body.nodes[nodeId];
	              if (node.edges.length === hubSize) {
	                this._crawlNetwork(levelDownstream, nodeId);
	              }
	            }
	          }
	        }
	      }

	      /**
	       * TODO: release feature
	       * @private
	       */

	    }, {
	      key: '_determineLevelsCustomCallback',
	      value: function _determineLevelsCustomCallback() {
	        var _this4 = this;

	        var minLevel = 100000;

	        // TODO: this should come from options.
	        var customCallback = function customCallback(nodeA, nodeB, edge) {};

	        var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {
	          var levelA = _this4.hierarchicalLevels[nodeA.id];
	          // set initial level
	          if (levelA === undefined) {
	            _this4.hierarchicalLevels[nodeA.id] = minLevel;
	          }

	          var diff = customCallback(_NetworkUtil2.default.cloneOptions(nodeA, 'node'), _NetworkUtil2.default.cloneOptions(nodeB, 'node'), _NetworkUtil2.default.cloneOptions(edge, 'edge'));

	          _this4.hierarchicalLevels[nodeB.id] = _this4.hierarchicalLevels[nodeA.id] + diff;
	        };

	        this._crawlNetwork(levelByDirection);
	        this._setMinLevelToZero();
	      }

	      /**
	       * this function allocates nodes in levels based on the direction of the edges
	       *
	       * @param hubsize
	       * @private
	       */

	    }, {
	      key: '_determineLevelsDirected',
	      value: function _determineLevelsDirected() {
	        var _this5 = this;

	        var minLevel = 10000;
	        var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {
	          var levelA = _this5.hierarchicalLevels[nodeA.id];
	          // set initial level
	          if (levelA === undefined) {
	            _this5.hierarchicalLevels[nodeA.id] = minLevel;
	          }
	          if (edge.toId == nodeB.id) {
	            _this5.hierarchicalLevels[nodeB.id] = _this5.hierarchicalLevels[nodeA.id] + 1;
	          } else {
	            _this5.hierarchicalLevels[nodeB.id] = _this5.hierarchicalLevels[nodeA.id] - 1;
	          }
	        };
	        this._crawlNetwork(levelByDirection);
	        this._setMinLevelToZero();
	      }

	      /**
	       * Small util method to set the minimum levels of the nodes to zero.
	       * @private
	       */

	    }, {
	      key: '_setMinLevelToZero',
	      value: function _setMinLevelToZero() {
	        var minLevel = 1e9;
	        // get the minimum level
	        for (var nodeId in this.body.nodes) {
	          if (this.body.nodes.hasOwnProperty(nodeId)) {
	            if (this.hierarchicalLevels[nodeId] !== undefined) {
	              minLevel = Math.min(this.hierarchicalLevels[nodeId], minLevel);
	            }
	          }
	        }

	        // subtract the minimum from the set so we have a range starting from 0
	        for (var _nodeId2 in this.body.nodes) {
	          if (this.body.nodes.hasOwnProperty(_nodeId2)) {
	            if (this.hierarchicalLevels[_nodeId2] !== undefined) {
	              this.hierarchicalLevels[_nodeId2] -= minLevel;
	            }
	          }
	        }
	      }

	      /**
	       * Update the bookkeeping of parent and child.
	       * @private
	       */

	    }, {
	      key: '_generateMap',
	      value: function _generateMap() {
	        var _this6 = this;

	        var fillInRelations = function fillInRelations(parentNode, childNode) {
	          if (_this6.hierarchicalLevels[childNode.id] > _this6.hierarchicalLevels[parentNode.id]) {
	            var parentNodeId = parentNode.id;
	            var childNodeId = childNode.id;
	            if (_this6.hierarchicalChildrenReference[parentNodeId] === undefined) {
	              _this6.hierarchicalChildrenReference[parentNodeId] = [];
	            }
	            _this6.hierarchicalChildrenReference[parentNodeId].push(childNodeId);
	            if (_this6.hierarchicalParentReference[childNodeId] === undefined) {
	              _this6.hierarchicalParentReference[childNodeId] = [];
	            }
	            _this6.hierarchicalParentReference[childNodeId].push(parentNodeId);
	          }
	        };

	        this._crawlNetwork(fillInRelations);
	      }

	      /**
	       * Crawl over the entire network and use a callback on each node couple that is connected to each other.
	       * @param callback          | will receive nodeA nodeB and the connecting edge. A and B are unique.
	       * @param startingNodeId
	       * @private
	       */

	    }, {
	      key: '_crawlNetwork',
	      value: function _crawlNetwork() {
	        var _this7 = this;

	        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
	        var startingNodeId = arguments[1];

	        var progress = {};
	        var treeIndex = 0;

	        var crawler = function crawler(node, tree) {
	          if (progress[node.id] === undefined) {

	            if (_this7.hierarchicalTrees[node.id] === undefined) {
	              _this7.hierarchicalTrees[node.id] = tree;
	              _this7.treeIndex = Math.max(tree, _this7.treeIndex);
	            }

	            progress[node.id] = true;
	            var childNode = void 0;
	            for (var i = 0; i < node.edges.length; i++) {
	              if (node.edges[i].connected === true) {
	                if (node.edges[i].toId === node.id) {
	                  childNode = node.edges[i].from;
	                } else {
	                  childNode = node.edges[i].to;
	                }

	                if (node.id !== childNode.id) {
	                  callback(node, childNode, node.edges[i]);
	                  crawler(childNode, tree);
	                }
	              }
	            }
	          }
	        };

	        // we can crawl from a specific node or over all nodes.
	        if (startingNodeId === undefined) {
	          for (var i = 0; i < this.body.nodeIndices.length; i++) {
	            var node = this.body.nodes[this.body.nodeIndices[i]];
	            if (progress[node.id] === undefined) {
	              crawler(node, treeIndex);
	              treeIndex += 1;
	            }
	          }
	        } else {
	          var _node = this.body.nodes[startingNodeId];
	          if (_node === undefined) {
	            console.error("Node not found:", startingNodeId);
	            return;
	          }
	          crawler(_node);
	        }
	      }

	      /**
	       * Shift a branch a certain distance
	       * @param parentId
	       * @param diff
	       * @private
	       */

	    }, {
	      key: '_shiftBlock',
	      value: function _shiftBlock(parentId, diff) {
	        if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
	          this.body.nodes[parentId].x += diff;
	        } else {
	          this.body.nodes[parentId].y += diff;
	        }
	        if (this.hierarchicalChildrenReference[parentId] !== undefined) {
	          for (var i = 0; i < this.hierarchicalChildrenReference[parentId].length; i++) {
	            this._shiftBlock(this.hierarchicalChildrenReference[parentId][i], diff);
	          }
	        }
	      }

	      /**
	       * Find a common parent between branches.
	       * @param childA
	       * @param childB
	       * @returns {{foundParent, withChild}}
	       * @private
	       */

	    }, {
	      key: '_findCommonParent',
	      value: function _findCommonParent(childA, childB) {
	        var _this8 = this;

	        var parents = {};
	        var iterateParents = function iterateParents(parents, child) {
	          if (_this8.hierarchicalParentReference[child] !== undefined) {
	            for (var i = 0; i < _this8.hierarchicalParentReference[child].length; i++) {
	              var parent = _this8.hierarchicalParentReference[child][i];
	              parents[parent] = true;
	              iterateParents(parents, parent);
	            }
	          }
	        };
	        var findParent = function findParent(parents, child) {
	          if (_this8.hierarchicalParentReference[child] !== undefined) {
	            for (var i = 0; i < _this8.hierarchicalParentReference[child].length; i++) {
	              var parent = _this8.hierarchicalParentReference[child][i];
	              if (parents[parent] !== undefined) {
	                return { foundParent: parent, withChild: child };
	              }
	              var branch = findParent(parents, parent);
	              if (branch.foundParent !== null) {
	                return branch;
	              }
	            }
	          }
	          return { foundParent: null, withChild: child };
	        };

	        iterateParents(parents, childA);
	        return findParent(parents, childB);
	      }

	      /**
	       * Abstract the getting of the position so we won't have to repeat the check for direction all the time
	       * @param node
	       * @param position
	       * @param level
	       * @private
	       */

	    }, {
	      key: '_setPositionForHierarchy',
	      value: function _setPositionForHierarchy(node, position, level) {
	        var doNotUpdate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	        //console.log('_setPositionForHierarchy',node.id, position)
	        if (doNotUpdate !== true) {
	          if (this.distributionOrdering[level] === undefined) {
	            this.distributionOrdering[level] = [];
	            this.distributionOrderingPresence[level] = {};
	          }

	          if (this.distributionOrderingPresence[level][node.id] === undefined) {
	            this.distributionOrdering[level].push(node);
	            this.distributionIndex[node.id] = this.distributionOrdering[level].length - 1;
	          }
	          this.distributionOrderingPresence[level][node.id] = true;
	        }

	        if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
	          node.x = position;
	        } else {
	          node.y = position;
	        }
	      }

	      /**
	       * Abstract the getting of the position of a node so we do not have to repeat the direction check all the time.
	       * @param node
	       * @returns {number|*}
	       * @private
	       */

	    }, {
	      key: '_getPositionForHierarchy',
	      value: function _getPositionForHierarchy(node) {
	        if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
	          return node.x;
	        } else {
	          return node.y;
	        }
	      }

	      /**
	       * Use the x or y value to sort the array, allowing users to specify order.
	       * @param nodeArray
	       * @private
	       */

	    }, {
	      key: '_sortNodeArray',
	      value: function _sortNodeArray(nodeArray) {
	        if (nodeArray.length > 1) {
	          if (this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU') {
	            nodeArray.sort(function (a, b) {
	              return a.x - b.x;
	            });
	          } else {
	            nodeArray.sort(function (a, b) {
	              return a.y - b.y;
	            });
	          }
	        }
	      }
	    }]);

	    return LayoutEngine;
	  }();

	  exports.default = LayoutEngine;

	/***/ },
	/* 115 */
	/***/ function(module, exports, __webpack_require__) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  var util = __webpack_require__(1);
	  var Hammer = __webpack_require__(22);
	  var hammerUtil = __webpack_require__(30);

	  /**
	   * clears the toolbar div element of children
	   *
	   * @private
	   */

	  var ManipulationSystem = function () {
	    function ManipulationSystem(body, canvas, selectionHandler) {
	      var _this = this;

	      _classCallCheck(this, ManipulationSystem);

	      this.body = body;
	      this.canvas = canvas;
	      this.selectionHandler = selectionHandler;

	      this.editMode = false;
	      this.manipulationDiv = undefined;
	      this.editModeDiv = undefined;
	      this.closeDiv = undefined;

	      this.manipulationHammers = [];
	      this.temporaryUIFunctions = {};
	      this.temporaryEventFunctions = [];

	      this.touchTime = 0;
	      this.temporaryIds = { nodes: [], edges: [] };
	      this.guiEnabled = false;
	      this.inMode = false;
	      this.selectedControlNode = undefined;

	      this.options = {};
	      this.defaultOptions = {
	        enabled: false,
	        initiallyActive: false,
	        addNode: true,
	        addEdge: true,
	        editNode: undefined,
	        editEdge: true,
	        deleteNode: true,
	        deleteEdge: true,
	        controlNodeStyle: {
	          shape: 'dot',
	          size: 6,
	          color: { background: '#ff0000', border: '#3c3c3c', highlight: { background: '#07f968', border: '#3c3c3c' } },
	          borderWidth: 2,
	          borderWidthSelected: 2
	        }
	      };
	      util.extend(this.options, this.defaultOptions);

	      this.body.emitter.on('destroy', function () {
	        _this._clean();
	      });
	      this.body.emitter.on('_dataChanged', this._restore.bind(this));
	      this.body.emitter.on('_resetData', this._restore.bind(this));
	    }

	    /**
	     * If something changes in the data during editing, switch back to the initial datamanipulation state and close all edit modes.
	     * @private
	     */


	    _createClass(ManipulationSystem, [{
	      key: '_restore',
	      value: function _restore() {
	        if (this.inMode !== false) {
	          if (this.options.initiallyActive === true) {
	            this.enableEditMode();
	          } else {
	            this.disableEditMode();
	          }
	        }
	      }

	      /**
	       * Set the Options
	       * @param options
	       */

	    }, {
	      key: 'setOptions',
	      value: function setOptions(options, allOptions, globalOptions) {
	        if (allOptions !== undefined) {
	          if (allOptions.locale !== undefined) {
	            this.options.locale = allOptions.locale;
	          } else {
	            this.options.locale = globalOptions.locale;
	          }
	          if (allOptions.locales !== undefined) {
	            this.options.locales = allOptions.locales;
	          } else {
	            this.options.locales = globalOptions.locales;
	          }
	        }

	        if (options !== undefined) {
	          if (typeof options === 'boolean') {
	            this.options.enabled = options;
	          } else {
	            this.options.enabled = true;
	            util.deepExtend(this.options, options);
	          }
	          if (this.options.initiallyActive === true) {
	            this.editMode = true;
	          }
	          this._setup();
	        }
	      }

	      /**
	       * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.
	       *
	       * @private
	       */

	    }, {
	      key: 'toggleEditMode',
	      value: function toggleEditMode() {
	        if (this.editMode === true) {
	          this.disableEditMode();
	        } else {
	          this.enableEditMode();
	        }
	      }
	    }, {
	      key: 'enableEditMode',
	      value: function enableEditMode() {
	        this.editMode = true;

	        this._clean();
	        if (this.guiEnabled === true) {
	          this.manipulationDiv.style.display = 'block';
	          this.closeDiv.style.display = 'block';
	          this.editModeDiv.style.display = 'none';
	          this.showManipulatorToolbar();
	        }
	      }
	    }, {
	      key: 'disableEditMode',
	      value: function disableEditMode() {
	        this.editMode = false;

	        this._clean();
	        if (this.guiEnabled === true) {
	          this.manipulationDiv.style.display = 'none';
	          this.closeDiv.style.display = 'none';
	          this.editModeDiv.style.display = 'block';
	          this._createEditButton();
	        }
	      }

	      /**
	       * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.
	       *
	       * @private
	       */

	    }, {
	      key: 'showManipulatorToolbar',
	      value: function showManipulatorToolbar() {
	        // restore the state of any bound functions or events, remove control nodes, restore physics
	        this._clean();

	        // reset global variables
	        this.manipulationDOM = {};

	        // if the gui is enabled, draw all elements.
	        if (this.guiEnabled === true) {
	          // a _restore will hide these menus
	          this.editMode = true;
	          this.manipulationDiv.style.display = 'block';
	          this.closeDiv.style.display = 'block';

	          var selectedNodeCount = this.selectionHandler._getSelectedNodeCount();
	          var selectedEdgeCount = this.selectionHandler._getSelectedEdgeCount();
	          var selectedTotalCount = selectedNodeCount + selectedEdgeCount;
	          var locale = this.options.locales[this.options.locale];
	          var needSeperator = false;

	          if (this.options.addNode !== false) {
	            this._createAddNodeButton(locale);
	            needSeperator = true;
	          }
	          if (this.options.addEdge !== false) {
	            if (needSeperator === true) {
	              this._createSeperator(1);
	            } else {
	              needSeperator = true;
	            }
	            this._createAddEdgeButton(locale);
	          }

	          if (selectedNodeCount === 1 && typeof this.options.editNode === 'function') {
	            if (needSeperator === true) {
	              this._createSeperator(2);
	            } else {
	              needSeperator = true;
	            }
	            this._createEditNodeButton(locale);
	          } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {
	            if (needSeperator === true) {
	              this._createSeperator(3);
	            } else {
	              needSeperator = true;
	            }
	            this._createEditEdgeButton(locale);
	          }

	          // remove buttons
	          if (selectedTotalCount !== 0) {
	            if (selectedNodeCount > 0 && this.options.deleteNode !== false) {
	              if (needSeperator === true) {
	                this._createSeperator(4);
	              }
	              this._createDeleteButton(locale);
	            } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {
	              if (needSeperator === true) {
	                this._createSeperator(4);
	              }
	              this._createDeleteButton(locale);
	            }
	          }

	          // bind the close button
	          this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));

	          // refresh this bar based on what has been selected
	          this._temporaryBindEvent('select', this.showManipulatorToolbar.bind(this));
	        }

	        // redraw to show any possible changes
	        this.body.emitter.emit('_redraw');
	      }

	      /**
	       * Create the toolbar for adding Nodes
	       */

	    }, {
	      key: 'addNodeMode',
	      value: function addNodeMode() {
	        // when using the gui, enable edit mode if it wasnt already.
	        if (this.editMode !== true) {
	          this.enableEditMode();
	        }

	        // restore the state of any bound functions or events, remove control nodes, restore physics
	        this._clean();

	        this.inMode = 'addNode';
	        if (this.guiEnabled === true) {
	          var locale = this.options.locales[this.options.locale];
	          this.manipulationDOM = {};
	          this._createBackButton(locale);
	          this._createSeperator();
	          this._createDescription(locale['addDescription'] || this.options.locales['en']['addDescription']);

	          // bind the close button
	          this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
	        }

	        this._temporaryBindEvent('click', this._performAddNode.bind(this));
	      }

	      /**
	       * call the bound function to handle the editing of the node. The node has to be selected.
	       */

	    }, {
	      key: 'editNode',
	      value: function editNode() {
	        var _this2 = this;

	        // when using the gui, enable edit mode if it wasnt already.
	        if (this.editMode !== true) {
	          this.enableEditMode();
	        }

	        // restore the state of any bound functions or events, remove control nodes, restore physics
	        this._clean();
	        var node = this.selectionHandler._getSelectedNode();
	        if (node !== undefined) {
	          this.inMode = 'editNode';
	          if (typeof this.options.editNode === 'function') {
	            if (node.isCluster !== true) {
	              var data = util.deepExtend({}, node.options, false);
	              data.x = node.x;
	              data.y = node.y;

	              if (this.options.editNode.length === 2) {
	                this.options.editNode(data, function (finalizedData) {
	                  if (finalizedData !== null && finalizedData !== undefined && _this2.inMode === 'editNode') {
	                    // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	                    _this2.body.data.nodes.getDataSet().update(finalizedData);
	                  }
	                  _this2.showManipulatorToolbar();
	                });
	              } else {
	                throw new Error('The function for edit does not support two arguments (data, callback)');
	              }
	            } else {
	              alert(this.options.locales[this.options.locale]['editClusterError'] || this.options.locales['en']['editClusterError']);
	            }
	          } else {
	            throw new Error('No function has been configured to handle the editing of nodes.');
	          }
	        } else {
	          this.showManipulatorToolbar();
	        }
	      }

	      /**
	       * create the toolbar to connect nodes
	       */

	    }, {
	      key: 'addEdgeMode',
	      value: function addEdgeMode() {
	        // when using the gui, enable edit mode if it wasnt already.
	        if (this.editMode !== true) {
	          this.enableEditMode();
	        }

	        // restore the state of any bound functions or events, remove control nodes, restore physics
	        this._clean();

	        this.inMode = 'addEdge';
	        if (this.guiEnabled === true) {
	          var locale = this.options.locales[this.options.locale];
	          this.manipulationDOM = {};
	          this._createBackButton(locale);
	          this._createSeperator();
	          this._createDescription(locale['edgeDescription'] || this.options.locales['en']['edgeDescription']);

	          // bind the close button
	          this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
	        }

	        // temporarily overload functions
	        this._temporaryBindUI('onTouch', this._handleConnect.bind(this));
	        this._temporaryBindUI('onDragEnd', this._finishConnect.bind(this));
	        this._temporaryBindUI('onDrag', this._dragControlNode.bind(this));
	        this._temporaryBindUI('onRelease', this._finishConnect.bind(this));

	        this._temporaryBindUI('onDragStart', function () {});
	        this._temporaryBindUI('onHold', function () {});
	      }

	      /**
	       * create the toolbar to edit edges
	       */

	    }, {
	      key: 'editEdgeMode',
	      value: function editEdgeMode() {
	        var _this3 = this;

	        // when using the gui, enable edit mode if it wasn't already.
	        if (this.editMode !== true) {
	          this.enableEditMode();
	        }

	        // restore the state of any bound functions or events, remove control nodes, restore physics
	        this._clean();

	        this.inMode = 'editEdge';
	        if (this.guiEnabled === true) {
	          var locale = this.options.locales[this.options.locale];
	          this.manipulationDOM = {};
	          this._createBackButton(locale);
	          this._createSeperator();
	          this._createDescription(locale['editEdgeDescription'] || this.options.locales['en']['editEdgeDescription']);

	          // bind the close button
	          this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
	        }

	        this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];
	        if (this.edgeBeingEditedId !== undefined) {
	          (function () {
	            var edge = _this3.body.edges[_this3.edgeBeingEditedId];

	            // create control nodes
	            var controlNodeFrom = _this3._getNewTargetNode(edge.from.x, edge.from.y);
	            var controlNodeTo = _this3._getNewTargetNode(edge.to.x, edge.to.y);

	            _this3.temporaryIds.nodes.push(controlNodeFrom.id);
	            _this3.temporaryIds.nodes.push(controlNodeTo.id);

	            _this3.body.nodes[controlNodeFrom.id] = controlNodeFrom;
	            _this3.body.nodeIndices.push(controlNodeFrom.id);
	            _this3.body.nodes[controlNodeTo.id] = controlNodeTo;
	            _this3.body.nodeIndices.push(controlNodeTo.id);

	            // temporarily overload UI functions, cleaned up automatically because of _temporaryBindUI
	            _this3._temporaryBindUI('onTouch', _this3._controlNodeTouch.bind(_this3)); // used to get the position
	            _this3._temporaryBindUI('onTap', function () {}); // disabled
	            _this3._temporaryBindUI('onHold', function () {}); // disabled
	            _this3._temporaryBindUI('onDragStart', _this3._controlNodeDragStart.bind(_this3)); // used to select control node
	            _this3._temporaryBindUI('onDrag', _this3._controlNodeDrag.bind(_this3)); // used to drag control node
	            _this3._temporaryBindUI('onDragEnd', _this3._controlNodeDragEnd.bind(_this3)); // used to connect or revert control nodes
	            _this3._temporaryBindUI('onMouseMove', function () {}); // disabled

	            // create function to position control nodes correctly on movement
	            // automatically cleaned up because we use the temporary bind
	            _this3._temporaryBindEvent('beforeDrawing', function (ctx) {
	              var positions = edge.edgeType.findBorderPositions(ctx);
	              if (controlNodeFrom.selected === false) {
	                controlNodeFrom.x = positions.from.x;
	                controlNodeFrom.y = positions.from.y;
	              }
	              if (controlNodeTo.selected === false) {
	                controlNodeTo.x = positions.to.x;
	                controlNodeTo.y = positions.to.y;
	              }
	            });

	            _this3.body.emitter.emit('_redraw');
	          })();
	        } else {
	          this.showManipulatorToolbar();
	        }
	      }

	      /**
	       * delete everything in the selection
	       */

	    }, {
	      key: 'deleteSelected',
	      value: function deleteSelected() {
	        var _this4 = this;

	        // when using the gui, enable edit mode if it wasnt already.
	        if (this.editMode !== true) {
	          this.enableEditMode();
	        }

	        // restore the state of any bound functions or events, remove control nodes, restore physics
	        this._clean();

	        this.inMode = 'delete';
	        var selectedNodes = this.selectionHandler.getSelectedNodes();
	        var selectedEdges = this.selectionHandler.getSelectedEdges();
	        var deleteFunction = undefined;
	        if (selectedNodes.length > 0) {
	          for (var i = 0; i < selectedNodes.length; i++) {
	            if (this.body.nodes[selectedNodes[i]].isCluster === true) {
	              alert(this.options.locales[this.options.locale]['deleteClusterError'] || this.options.locales['en']['deleteClusterError']);
	              return;
	            }
	          }

	          if (typeof this.options.deleteNode === 'function') {
	            deleteFunction = this.options.deleteNode;
	          }
	        } else if (selectedEdges.length > 0) {
	          if (typeof this.options.deleteEdge === 'function') {
	            deleteFunction = this.options.deleteEdge;
	          }
	        }

	        if (typeof deleteFunction === 'function') {
	          var data = { nodes: selectedNodes, edges: selectedEdges };
	          if (deleteFunction.length === 2) {
	            deleteFunction(data, function (finalizedData) {
	              if (finalizedData !== null && finalizedData !== undefined && _this4.inMode === 'delete') {
	                // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	                _this4.body.data.edges.getDataSet().remove(finalizedData.edges);
	                _this4.body.data.nodes.getDataSet().remove(finalizedData.nodes);
	                _this4.body.emitter.emit('startSimulation');
	                _this4.showManipulatorToolbar();
	              } else {
	                _this4.body.emitter.emit('startSimulation');
	                _this4.showManipulatorToolbar();
	              }
	            });
	          } else {
	            throw new Error('The function for delete does not support two arguments (data, callback)');
	          }
	        } else {
	          this.body.data.edges.getDataSet().remove(selectedEdges);
	          this.body.data.nodes.getDataSet().remove(selectedNodes);
	          this.body.emitter.emit('startSimulation');
	          this.showManipulatorToolbar();
	        }
	      }

	      //********************************************** PRIVATE ***************************************//

	      /**
	       * draw or remove the DOM
	       * @private
	       */

	    }, {
	      key: '_setup',
	      value: function _setup() {
	        if (this.options.enabled === true) {
	          // Enable the GUI
	          this.guiEnabled = true;

	          this._createWrappers();
	          if (this.editMode === false) {
	            this._createEditButton();
	          } else {
	            this.showManipulatorToolbar();
	          }
	        } else {
	          this._removeManipulationDOM();

	          // disable the gui
	          this.guiEnabled = false;
	        }
	      }

	      /**
	       * create the div overlays that contain the DOM
	       * @private
	       */

	    }, {
	      key: '_createWrappers',
	      value: function _createWrappers() {
	        // load the manipulator HTML elements. All styling done in css.
	        if (this.manipulationDiv === undefined) {
	          this.manipulationDiv = document.createElement('div');
	          this.manipulationDiv.className = 'vis-manipulation';
	          if (this.editMode === true) {
	            this.manipulationDiv.style.display = 'block';
	          } else {
	            this.manipulationDiv.style.display = 'none';
	          }
	          this.canvas.frame.appendChild(this.manipulationDiv);
	        }

	        // container for the edit button.
	        if (this.editModeDiv === undefined) {
	          this.editModeDiv = document.createElement('div');
	          this.editModeDiv.className = 'vis-edit-mode';
	          if (this.editMode === true) {
	            this.editModeDiv.style.display = 'none';
	          } else {
	            this.editModeDiv.style.display = 'block';
	          }
	          this.canvas.frame.appendChild(this.editModeDiv);
	        }

	        // container for the close div button
	        if (this.closeDiv === undefined) {
	          this.closeDiv = document.createElement('div');
	          this.closeDiv.className = 'vis-close';
	          this.closeDiv.style.display = this.manipulationDiv.style.display;
	          this.canvas.frame.appendChild(this.closeDiv);
	        }
	      }

	      /**
	       * generate a new target node. Used for creating new edges and editing edges
	       * @param x
	       * @param y
	       * @returns {*}
	       * @private
	       */

	    }, {
	      key: '_getNewTargetNode',
	      value: function _getNewTargetNode(x, y) {
	        var controlNodeStyle = util.deepExtend({}, this.options.controlNodeStyle);

	        controlNodeStyle.id = 'targetNode' + util.randomUUID();
	        controlNodeStyle.hidden = false;
	        controlNodeStyle.physics = false;
	        controlNodeStyle.x = x;
	        controlNodeStyle.y = y;

	        // we have to define the bounding box in order for the nodes to be drawn immediately
	        var node = this.body.functions.createNode(controlNodeStyle);
	        node.shape.boundingBox = { left: x, right: x, top: y, bottom: y };

	        return node;
	      }

	      /**
	       * Create the edit button
	       */

	    }, {
	      key: '_createEditButton',
	      value: function _createEditButton() {
	        // restore everything to it's original state (if applicable)
	        this._clean();

	        // reset the manipulationDOM
	        this.manipulationDOM = {};

	        // empty the editModeDiv
	        util.recursiveDOMDelete(this.editModeDiv);

	        // create the contents for the editMode button
	        var locale = this.options.locales[this.options.locale];
	        var button = this._createButton('editMode', 'vis-button vis-edit vis-edit-mode', locale['edit'] || this.options.locales['en']['edit']);
	        this.editModeDiv.appendChild(button);

	        // bind a hammer listener to the button, calling the function toggleEditMode.
	        this._bindHammerToDiv(button, this.toggleEditMode.bind(this));
	      }

	      /**
	       * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.
	       * @private
	       */

	    }, {
	      key: '_clean',
	      value: function _clean() {
	        // not in mode
	        this.inMode = false;

	        // _clean the divs
	        if (this.guiEnabled === true) {
	          util.recursiveDOMDelete(this.editModeDiv);
	          util.recursiveDOMDelete(this.manipulationDiv);

	          // removes all the bindings and overloads
	          this._cleanManipulatorHammers();
	        }

	        // remove temporary nodes and edges
	        this._cleanupTemporaryNodesAndEdges();

	        // restore overloaded UI functions
	        this._unbindTemporaryUIs();

	        // remove the temporaryEventFunctions
	        this._unbindTemporaryEvents();

	        // restore the physics if required
	        this.body.emitter.emit('restorePhysics');
	      }

	      /**
	       * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.
	       * @private
	       */

	    }, {
	      key: '_cleanManipulatorHammers',
	      value: function _cleanManipulatorHammers() {
	        // _clean hammer bindings
	        if (this.manipulationHammers.length != 0) {
	          for (var i = 0; i < this.manipulationHammers.length; i++) {
	            this.manipulationHammers[i].destroy();
	          }
	          this.manipulationHammers = [];
	        }
	      }

	      /**
	       * Remove all DOM elements created by this module.
	       * @private
	       */

	    }, {
	      key: '_removeManipulationDOM',
	      value: function _removeManipulationDOM() {
	        // removes all the bindings and overloads
	        this._clean();

	        // empty the manipulation divs
	        util.recursiveDOMDelete(this.manipulationDiv);
	        util.recursiveDOMDelete(this.editModeDiv);
	        util.recursiveDOMDelete(this.closeDiv);

	        // remove the manipulation divs
	        if (this.manipulationDiv) {
	          this.canvas.frame.removeChild(this.manipulationDiv);
	        }
	        if (this.editModeDiv) {
	          this.canvas.frame.removeChild(this.editModeDiv);
	        }
	        if (this.closeDiv) {
	          this.canvas.frame.removeChild(this.closeDiv);
	        }

	        // set the references to undefined
	        this.manipulationDiv = undefined;
	        this.editModeDiv = undefined;
	        this.closeDiv = undefined;
	      }

	      /**
	       * create a seperator line. the index is to differentiate in the manipulation dom
	       * @param index
	       * @private
	       */

	    }, {
	      key: '_createSeperator',
	      value: function _createSeperator() {
	        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	        this.manipulationDOM['seperatorLineDiv' + index] = document.createElement('div');
	        this.manipulationDOM['seperatorLineDiv' + index].className = 'vis-separator-line';
	        this.manipulationDiv.appendChild(this.manipulationDOM['seperatorLineDiv' + index]);
	      }

	      // ----------------------    DOM functions for buttons    --------------------------//

	    }, {
	      key: '_createAddNodeButton',
	      value: function _createAddNodeButton(locale) {
	        var button = this._createButton('addNode', 'vis-button vis-add', locale['addNode'] || this.options.locales['en']['addNode']);
	        this.manipulationDiv.appendChild(button);
	        this._bindHammerToDiv(button, this.addNodeMode.bind(this));
	      }
	    }, {
	      key: '_createAddEdgeButton',
	      value: function _createAddEdgeButton(locale) {
	        var button = this._createButton('addEdge', 'vis-button vis-connect', locale['addEdge'] || this.options.locales['en']['addEdge']);
	        this.manipulationDiv.appendChild(button);
	        this._bindHammerToDiv(button, this.addEdgeMode.bind(this));
	      }
	    }, {
	      key: '_createEditNodeButton',
	      value: function _createEditNodeButton(locale) {
	        var button = this._createButton('editNode', 'vis-button vis-edit', locale['editNode'] || this.options.locales['en']['editNode']);
	        this.manipulationDiv.appendChild(button);
	        this._bindHammerToDiv(button, this.editNode.bind(this));
	      }
	    }, {
	      key: '_createEditEdgeButton',
	      value: function _createEditEdgeButton(locale) {
	        var button = this._createButton('editEdge', 'vis-button vis-edit', locale['editEdge'] || this.options.locales['en']['editEdge']);
	        this.manipulationDiv.appendChild(button);
	        this._bindHammerToDiv(button, this.editEdgeMode.bind(this));
	      }
	    }, {
	      key: '_createDeleteButton',
	      value: function _createDeleteButton(locale) {
	        if (this.options.rtl) {
	          var deleteBtnClass = 'vis-button vis-delete-rtl';
	        } else {
	          var deleteBtnClass = 'vis-button vis-delete';
	        }
	        var button = this._createButton('delete', deleteBtnClass, locale['del'] || this.options.locales['en']['del']);
	        this.manipulationDiv.appendChild(button);
	        this._bindHammerToDiv(button, this.deleteSelected.bind(this));
	      }
	    }, {
	      key: '_createBackButton',
	      value: function _createBackButton(locale) {
	        var button = this._createButton('back', 'vis-button vis-back', locale['back'] || this.options.locales['en']['back']);
	        this.manipulationDiv.appendChild(button);
	        this._bindHammerToDiv(button, this.showManipulatorToolbar.bind(this));
	      }
	    }, {
	      key: '_createButton',
	      value: function _createButton(id, className, label) {
	        var labelClassName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'vis-label';


	        this.manipulationDOM[id + 'Div'] = document.createElement('div');
	        this.manipulationDOM[id + 'Div'].className = className;
	        this.manipulationDOM[id + 'Label'] = document.createElement('div');
	        this.manipulationDOM[id + 'Label'].className = labelClassName;
	        this.manipulationDOM[id + 'Label'].innerHTML = label;
	        this.manipulationDOM[id + 'Div'].appendChild(this.manipulationDOM[id + 'Label']);
	        return this.manipulationDOM[id + 'Div'];
	      }
	    }, {
	      key: '_createDescription',
	      value: function _createDescription(label) {
	        this.manipulationDiv.appendChild(this._createButton('description', 'vis-button vis-none', label));
	      }

	      // -------------------------- End of DOM functions for buttons ------------------------------//

	      /**
	       * this binds an event until cleanup by the clean functions.
	       * @param event
	       * @param newFunction
	       * @private
	       */

	    }, {
	      key: '_temporaryBindEvent',
	      value: function _temporaryBindEvent(event, newFunction) {
	        this.temporaryEventFunctions.push({ event: event, boundFunction: newFunction });
	        this.body.emitter.on(event, newFunction);
	      }

	      /**
	       * this overrides an UI function until cleanup by the clean function
	       * @param UIfunctionName
	       * @param newFunction
	       * @private
	       */

	    }, {
	      key: '_temporaryBindUI',
	      value: function _temporaryBindUI(UIfunctionName, newFunction) {
	        if (this.body.eventListeners[UIfunctionName] !== undefined) {
	          this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];
	          this.body.eventListeners[UIfunctionName] = newFunction;
	        } else {
	          throw new Error('This UI function does not exist. Typo? You tried: ' + UIfunctionName + ' possible are: ' + JSON.stringify(Object.keys(this.body.eventListeners)));
	        }
	      }

	      /**
	       * Restore the overridden UI functions to their original state.
	       *
	       * @private
	       */

	    }, {
	      key: '_unbindTemporaryUIs',
	      value: function _unbindTemporaryUIs() {
	        for (var functionName in this.temporaryUIFunctions) {
	          if (this.temporaryUIFunctions.hasOwnProperty(functionName)) {
	            this.body.eventListeners[functionName] = this.temporaryUIFunctions[functionName];
	            delete this.temporaryUIFunctions[functionName];
	          }
	        }
	        this.temporaryUIFunctions = {};
	      }

	      /**
	       * Unbind the events created by _temporaryBindEvent
	       * @private
	       */

	    }, {
	      key: '_unbindTemporaryEvents',
	      value: function _unbindTemporaryEvents() {
	        for (var i = 0; i < this.temporaryEventFunctions.length; i++) {
	          var eventName = this.temporaryEventFunctions[i].event;
	          var boundFunction = this.temporaryEventFunctions[i].boundFunction;
	          this.body.emitter.off(eventName, boundFunction);
	        }
	        this.temporaryEventFunctions = [];
	      }

	      /**
	       * Bind an hammer instance to a DOM element.
	       * @param domElement
	       * @param funct
	       */

	    }, {
	      key: '_bindHammerToDiv',
	      value: function _bindHammerToDiv(domElement, boundFunction) {
	        var hammer = new Hammer(domElement, {});
	        hammerUtil.onTouch(hammer, boundFunction);
	        this.manipulationHammers.push(hammer);
	      }

	      /**
	       * Neatly clean up temporary edges and nodes
	       * @private
	       */

	    }, {
	      key: '_cleanupTemporaryNodesAndEdges',
	      value: function _cleanupTemporaryNodesAndEdges() {
	        // _clean temporary edges
	        for (var i = 0; i < this.temporaryIds.edges.length; i++) {
	          this.body.edges[this.temporaryIds.edges[i]].disconnect();
	          delete this.body.edges[this.temporaryIds.edges[i]];
	          var indexTempEdge = this.body.edgeIndices.indexOf(this.temporaryIds.edges[i]);
	          if (indexTempEdge !== -1) {
	            this.body.edgeIndices.splice(indexTempEdge, 1);
	          }
	        }

	        // _clean temporary nodes
	        for (var _i = 0; _i < this.temporaryIds.nodes.length; _i++) {
	          delete this.body.nodes[this.temporaryIds.nodes[_i]];
	          var indexTempNode = this.body.nodeIndices.indexOf(this.temporaryIds.nodes[_i]);
	          if (indexTempNode !== -1) {
	            this.body.nodeIndices.splice(indexTempNode, 1);
	          }
	        }

	        this.temporaryIds = { nodes: [], edges: [] };
	      }

	      // ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//

	      /**
	       * the touch is used to get the position of the initial click
	       * @param event
	       * @private
	       */

	    }, {
	      key: '_controlNodeTouch',
	      value: function _controlNodeTouch(event) {
	        this.selectionHandler.unselectAll();
	        this.lastTouch = this.body.functions.getPointer(event.center);
	        this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object
	      }

	      /**
	       * the drag start is used to mark one of the control nodes as selected.
	       * @param event
	       * @private
	       */

	    }, {
	      key: '_controlNodeDragStart',
	      value: function _controlNodeDragStart(event) {
	        var pointer = this.lastTouch;
	        var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
	        var from = this.body.nodes[this.temporaryIds.nodes[0]];
	        var to = this.body.nodes[this.temporaryIds.nodes[1]];
	        var edge = this.body.edges[this.edgeBeingEditedId];
	        this.selectedControlNode = undefined;

	        var fromSelect = from.isOverlappingWith(pointerObj);
	        var toSelect = to.isOverlappingWith(pointerObj);

	        if (fromSelect === true) {
	          this.selectedControlNode = from;
	          edge.edgeType.from = from;
	        } else if (toSelect === true) {
	          this.selectedControlNode = to;
	          edge.edgeType.to = to;
	        }

	        // we use the selection to find the node that is being dragged. We explicitly select it here.
	        if (this.selectedControlNode !== undefined) {
	          this.selectionHandler.selectObject(this.selectedControlNode);
	        }

	        this.body.emitter.emit('_redraw');
	      }

	      /**
	       * dragging the control nodes or the canvas
	       * @param event
	       * @private
	       */

	    }, {
	      key: '_controlNodeDrag',
	      value: function _controlNodeDrag(event) {
	        this.body.emitter.emit('disablePhysics');
	        var pointer = this.body.functions.getPointer(event.center);
	        var pos = this.canvas.DOMtoCanvas(pointer);
	        if (this.selectedControlNode !== undefined) {
	          this.selectedControlNode.x = pos.x;
	          this.selectedControlNode.y = pos.y;
	        } else {
	          // if the drag was not started properly because the click started outside the network div, start it now.
	          var diffX = pointer.x - this.lastTouch.x;
	          var diffY = pointer.y - this.lastTouch.y;
	          this.body.view.translation = { x: this.lastTouch.translation.x + diffX, y: this.lastTouch.translation.y + diffY };
	        }
	        this.body.emitter.emit('_redraw');
	      }

	      /**
	       * connecting or restoring the control nodes.
	       * @param event
	       * @private
	       */

	    }, {
	      key: '_controlNodeDragEnd',
	      value: function _controlNodeDragEnd(event) {
	        var pointer = this.body.functions.getPointer(event.center);
	        var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
	        var edge = this.body.edges[this.edgeBeingEditedId];
	        // if the node that was dragged is not a control node, return
	        if (this.selectedControlNode === undefined) {
	          return;
	        }

	        // we use the selection to find the node that is being dragged. We explicitly DEselect the control node here.
	        this.selectionHandler.unselectAll();
	        var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
	        var node = undefined;
	        for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
	          if (overlappingNodeIds[i] !== this.selectedControlNode.id) {
	            node = this.body.nodes[overlappingNodeIds[i]];
	            break;
	          }
	        }
	        // perform the connection
	        if (node !== undefined && this.selectedControlNode !== undefined) {
	          if (node.isCluster === true) {
	            alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
	          } else {
	            var from = this.body.nodes[this.temporaryIds.nodes[0]];
	            if (this.selectedControlNode.id === from.id) {
	              this._performEditEdge(node.id, edge.to.id);
	            } else {
	              this._performEditEdge(edge.from.id, node.id);
	            }
	          }
	        } else {
	          edge.updateEdgeType();
	          this.body.emitter.emit('restorePhysics');
	        }
	        this.body.emitter.emit('_redraw');
	      }

	      // ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//


	      // ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//
	      /**
	       * the function bound to the selection event. It checks if you want to connect a cluster and changes the description
	       * to walk the user through the process.
	       *
	       * @private
	       */

	    }, {
	      key: '_handleConnect',
	      value: function _handleConnect(event) {
	        // check to avoid double fireing of this function.
	        if (new Date().valueOf() - this.touchTime > 100) {
	          this.lastTouch = this.body.functions.getPointer(event.center);
	          this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object

	          var pointer = this.lastTouch;
	          var node = this.selectionHandler.getNodeAt(pointer);

	          if (node !== undefined) {
	            if (node.isCluster === true) {
	              alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
	            } else {
	              // create a node the temporary line can look at
	              var targetNode = this._getNewTargetNode(node.x, node.y);
	              this.body.nodes[targetNode.id] = targetNode;
	              this.body.nodeIndices.push(targetNode.id);

	              // create a temporary edge
	              var connectionEdge = this.body.functions.createEdge({
	                id: 'connectionEdge' + util.randomUUID(),
	                from: node.id,
	                to: targetNode.id,
	                physics: false,
	                smooth: {
	                  enabled: true,
	                  type: 'continuous',
	                  roundness: 0.5
	                }
	              });
	              this.body.edges[connectionEdge.id] = connectionEdge;
	              this.body.edgeIndices.push(connectionEdge.id);

	              this.temporaryIds.nodes.push(targetNode.id);
	              this.temporaryIds.edges.push(connectionEdge.id);
	            }
	          }
	          this.touchTime = new Date().valueOf();
	        }
	      }
	    }, {
	      key: '_dragControlNode',
	      value: function _dragControlNode(event) {
	        var pointer = this.body.functions.getPointer(event.center);
	        if (this.temporaryIds.nodes[0] !== undefined) {
	          var targetNode = this.body.nodes[this.temporaryIds.nodes[0]]; // there is only one temp node in the add edge mode.
	          targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);
	          targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);
	          this.body.emitter.emit('_redraw');
	        } else {
	          var diffX = pointer.x - this.lastTouch.x;
	          var diffY = pointer.y - this.lastTouch.y;
	          this.body.view.translation = { x: this.lastTouch.translation.x + diffX, y: this.lastTouch.translation.y + diffY };
	        }
	      }

	      /**
	       * Connect the new edge to the target if one exists, otherwise remove temp line
	       * @param event
	       * @private
	       */

	    }, {
	      key: '_finishConnect',
	      value: function _finishConnect(event) {
	        var pointer = this.body.functions.getPointer(event.center);
	        var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);

	        // remember the edge id
	        var connectFromId = undefined;
	        if (this.temporaryIds.edges[0] !== undefined) {
	          connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
	        }

	        // get the overlapping node but NOT the temporary node;
	        var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
	        var node = undefined;
	        for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
	          // if the node id is NOT a temporary node, accept the node.
	          if (this.temporaryIds.nodes.indexOf(overlappingNodeIds[i]) === -1) {
	            node = this.body.nodes[overlappingNodeIds[i]];
	            break;
	          }
	        }

	        // clean temporary nodes and edges.
	        this._cleanupTemporaryNodesAndEdges();

	        // perform the connection
	        if (node !== undefined) {
	          if (node.isCluster === true) {
	            alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
	          } else {
	            if (this.body.nodes[connectFromId] !== undefined && this.body.nodes[node.id] !== undefined) {
	              this._performAddEdge(connectFromId, node.id);
	            }
	          }
	        }
	        this.body.emitter.emit('_redraw');
	      }

	      // --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//


	      // ------------------------------ Performing all the actual data manipulation ------------------------//

	      /**
	       * Adds a node on the specified location
	       */

	    }, {
	      key: '_performAddNode',
	      value: function _performAddNode(clickData) {
	        var _this5 = this;

	        var defaultData = {
	          id: util.randomUUID(),
	          x: clickData.pointer.canvas.x,
	          y: clickData.pointer.canvas.y,
	          label: 'new'
	        };

	        if (typeof this.options.addNode === 'function') {
	          if (this.options.addNode.length === 2) {
	            this.options.addNode(defaultData, function (finalizedData) {
	              if (finalizedData !== null && finalizedData !== undefined && _this5.inMode === 'addNode') {
	                // if for whatever reason the mode has changes (due to dataset change) disregard the callback
	                _this5.body.data.nodes.getDataSet().add(finalizedData);
	                _this5.showManipulatorToolbar();
	              }
	            });
	          } else {
	            throw new Error('The function for add does not support two arguments (data,callback)');
	            this.showManipulatorToolbar();
	          }
	        } else {
	          this.body.data.nodes.getDataSet().add(defaultData);
	          this.showManipulatorToolbar();
	        }
	      }

	      /**
	       * connect two nodes with a new edge.
	       *
	       * @private
	       */

	    }, {
	      key: '_performAddEdge',
	      value: function _performAddEdge(sourceNodeId, targetNodeId) {
	        var _this6 = this;

	        var defaultData = { from: sourceNodeId, to: targetNodeId };
	        if (typeof this.options.addEdge === 'function') {
	          if (this.options.addEdge.length === 2) {
	            this.options.addEdge(defaultData, function (finalizedData) {
	              if (finalizedData !== null && finalizedData !== undefined && _this6.inMode === 'addEdge') {
	                // if for whatever reason the mode has changes (due to dataset change) disregard the callback
	                _this6.body.data.edges.getDataSet().add(finalizedData);
	                _this6.selectionHandler.unselectAll();
	                _this6.showManipulatorToolbar();
	              }
	            });
	          } else {
	            throw new Error('The function for connect does not support two arguments (data,callback)');
	          }
	        } else {
	          this.body.data.edges.getDataSet().add(defaultData);
	          this.selectionHandler.unselectAll();
	          this.showManipulatorToolbar();
	        }
	      }

	      /**
	       * connect two nodes with a new edge.
	       *
	       * @private
	       */

	    }, {
	      key: '_performEditEdge',
	      value: function _performEditEdge(sourceNodeId, targetNodeId) {
	        var _this7 = this;

	        var defaultData = { id: this.edgeBeingEditedId, from: sourceNodeId, to: targetNodeId };
	        if (typeof this.options.editEdge === 'function') {
	          if (this.options.editEdge.length === 2) {
	            this.options.editEdge(defaultData, function (finalizedData) {
	              if (finalizedData === null || finalizedData === undefined || _this7.inMode !== 'editEdge') {
	                // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	                _this7.body.edges[defaultData.id].updateEdgeType();
	                _this7.body.emitter.emit('_redraw');
	              } else {
	                _this7.body.data.edges.getDataSet().update(finalizedData);
	                _this7.selectionHandler.unselectAll();
	                _this7.showManipulatorToolbar();
	              }
	            });
	          } else {
	            throw new Error('The function for edit does not support two arguments (data, callback)');
	          }
	        } else {
	          this.body.data.edges.getDataSet().update(defaultData);
	          this.selectionHandler.unselectAll();
	          this.showManipulatorToolbar();
	        }
	      }
	    }]);

	    return ManipulationSystem;
	  }();

	  exports.default = ManipulationSystem;

	/***/ },
	/* 116 */
	/***/ function(module, exports) {

	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  /**
	   * This object contains all possible options. It will check if the types are correct, if required if the option is one
	   * of the allowed values.
	   *
	   * __any__ means that the name of the property does not matter.
	   * __type__ is a required field for all objects and contains the allowed types of all objects
	   */
	  var string = 'string';
	  var boolean = 'boolean';
	  var number = 'number';
	  var array = 'array';
	  var object = 'object'; // should only be in a __type__ property
	  var dom = 'dom';
	  var any = 'any';

	  var allOptions = {
	    configure: {
	      enabled: { boolean: boolean },
	      filter: { boolean: boolean, string: string, array: array, 'function': 'function' },
	      container: { dom: dom },
	      showButton: { boolean: boolean },
	      __type__: { object: object, boolean: boolean, string: string, array: array, 'function': 'function' }
	    },
	    edges: {
	      arrows: {
	        to: { enabled: { boolean: boolean }, scaleFactor: { number: number }, type: { string: ['arrow', 'circle'] }, __type__: { object: object, boolean: boolean } },
	        middle: { enabled: { boolean: boolean }, scaleFactor: { number: number }, type: { string: ['arrow', 'circle'] }, __type__: { object: object, boolean: boolean } },
	        from: { enabled: { boolean: boolean }, scaleFactor: { number: number }, type: { string: ['arrow', 'circle'] }, __type__: { object: object, boolean: boolean } },
	        __type__: { string: ['from', 'to', 'middle'], object: object }
	      },
	      arrowStrikethrough: { boolean: boolean },
	      color: {
	        color: { string: string },
	        highlight: { string: string },
	        hover: { string: string },
	        inherit: { string: ['from', 'to', 'both'], boolean: boolean },
	        opacity: { number: number },
	        __type__: { object: object, string: string }
	      },
	      dashes: { boolean: boolean, array: array },
	      font: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        background: { string: string },
	        strokeWidth: { number: number }, // px
	        strokeColor: { string: string },
	        align: { string: ['horizontal', 'top', 'middle', 'bottom'] },
	        __type__: { object: object, string: string }
	      },
	      hidden: { boolean: boolean },
	      hoverWidth: { 'function': 'function', number: number },
	      label: { string: string, 'undefined': 'undefined' },
	      labelHighlightBold: { boolean: boolean },
	      length: { number: number, 'undefined': 'undefined' },
	      physics: { boolean: boolean },
	      scaling: {
	        min: { number: number },
	        max: { number: number },
	        label: {
	          enabled: { boolean: boolean },
	          min: { number: number },
	          max: { number: number },
	          maxVisible: { number: number },
	          drawThreshold: { number: number },
	          __type__: { object: object, boolean: boolean }
	        },
	        customScalingFunction: { 'function': 'function' },
	        __type__: { object: object }
	      },
	      selectionWidth: { 'function': 'function', number: number },
	      selfReferenceSize: { number: number },
	      shadow: {
	        enabled: { boolean: boolean },
	        color: { string: string },
	        size: { number: number },
	        x: { number: number },
	        y: { number: number },
	        __type__: { object: object, boolean: boolean }
	      },
	      smooth: {
	        enabled: { boolean: boolean },
	        type: { string: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'] },
	        roundness: { number: number },
	        forceDirection: { string: ['horizontal', 'vertical', 'none'], boolean: boolean },
	        __type__: { object: object, boolean: boolean }
	      },
	      title: { string: string, 'undefined': 'undefined' },
	      width: { number: number },
	      value: { number: number, 'undefined': 'undefined' },
	      __type__: { object: object }
	    },
	    groups: {
	      useDefaultGroups: { boolean: boolean },
	      __any__: 'get from nodes, will be overwritten below',
	      __type__: { object: object }
	    },
	    interaction: {
	      dragNodes: { boolean: boolean },
	      dragView: { boolean: boolean },
	      hideEdgesOnDrag: { boolean: boolean },
	      hideNodesOnDrag: { boolean: boolean },
	      hover: { boolean: boolean },
	      keyboard: {
	        enabled: { boolean: boolean },
	        speed: { x: { number: number }, y: { number: number }, zoom: { number: number }, __type__: { object: object } },
	        bindToWindow: { boolean: boolean },
	        __type__: { object: object, boolean: boolean }
	      },
	      multiselect: { boolean: boolean },
	      navigationButtons: { boolean: boolean },
	      selectable: { boolean: boolean },
	      selectConnectedEdges: { boolean: boolean },
	      hoverConnectedEdges: { boolean: boolean },
	      tooltipDelay: { number: number },
	      zoomView: { boolean: boolean },
	      __type__: { object: object }
	    },
	    layout: {
	      randomSeed: { 'undefined': 'undefined', number: number },
	      improvedLayout: { boolean: boolean },
	      hierarchical: {
	        enabled: { boolean: boolean },
	        levelSeparation: { number: number },
	        nodeSpacing: { number: number },
	        treeSpacing: { number: number },
	        blockShifting: { boolean: boolean },
	        edgeMinimization: { boolean: boolean },
	        parentCentralization: { boolean: boolean },
	        direction: { string: ['UD', 'DU', 'LR', 'RL'] }, // UD, DU, LR, RL
	        sortMethod: { string: ['hubsize', 'directed'] }, // hubsize, directed
	        __type__: { object: object, boolean: boolean }
	      },
	      __type__: { object: object }
	    },
	    manipulation: {
	      enabled: { boolean: boolean },
	      initiallyActive: { boolean: boolean },
	      addNode: { boolean: boolean, 'function': 'function' },
	      addEdge: { boolean: boolean, 'function': 'function' },
	      editNode: { 'function': 'function' },
	      editEdge: { boolean: boolean, 'function': 'function' },
	      deleteNode: { boolean: boolean, 'function': 'function' },
	      deleteEdge: { boolean: boolean, 'function': 'function' },
	      controlNodeStyle: 'get from nodes, will be overwritten below',
	      __type__: { object: object, boolean: boolean }
	    },
	    nodes: {
	      borderWidth: { number: number },
	      borderWidthSelected: { number: number, 'undefined': 'undefined' },
	      brokenImage: { string: string, 'undefined': 'undefined' },
	      color: {
	        border: { string: string },
	        background: { string: string },
	        highlight: {
	          border: { string: string },
	          background: { string: string },
	          __type__: { object: object, string: string }
	        },
	        hover: {
	          border: { string: string },
	          background: { string: string },
	          __type__: { object: object, string: string }
	        },
	        __type__: { object: object, string: string }
	      },
	      fixed: {
	        x: { boolean: boolean },
	        y: { boolean: boolean },
	        __type__: { object: object, boolean: boolean }
	      },
	      font: {
	        align: { string: string },
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        background: { string: string },
	        strokeWidth: { number: number }, // px
	        strokeColor: { string: string },
	        __type__: { object: object, string: string }
	      },
	      group: { string: string, number: number, 'undefined': 'undefined' },
	      hidden: { boolean: boolean },
	      icon: {
	        face: { string: string },
	        code: { string: string }, //'\uf007',
	        size: { number: number }, //50,
	        color: { string: string },
	        __type__: { object: object }
	      },
	      id: { string: string, number: number },
	      image: { string: string, 'undefined': 'undefined' }, // --> URL
	      label: { string: string, 'undefined': 'undefined' },
	      labelHighlightBold: { boolean: boolean },
	      level: { number: number, 'undefined': 'undefined' },
	      mass: { number: number },
	      physics: { boolean: boolean },
	      scaling: {
	        min: { number: number },
	        max: { number: number },
	        label: {
	          enabled: { boolean: boolean },
	          min: { number: number },
	          max: { number: number },
	          maxVisible: { number: number },
	          drawThreshold: { number: number },
	          __type__: { object: object, boolean: boolean }
	        },
	        customScalingFunction: { 'function': 'function' },
	        __type__: { object: object }
	      },
	      shadow: {
	        enabled: { boolean: boolean },
	        color: { string: string },
	        size: { number: number },
	        x: { number: number },
	        y: { number: number },
	        __type__: { object: object, boolean: boolean }
	      },
	      shape: { string: ['ellipse', 'circle', 'database', 'box', 'text', 'image', 'circularImage', 'diamond', 'dot', 'star', 'triangle', 'triangleDown', 'square', 'icon'] },
	      shapeProperties: {
	        borderDashes: { boolean: boolean, array: array },
	        borderRadius: { number: number },
	        interpolation: { boolean: boolean },
	        useImageSize: { boolean: boolean },
	        useBorderWithImage: { boolean: boolean },
	        __type__: { object: object }
	      },
	      size: { number: number },
	      title: { string: string, 'undefined': 'undefined' },
	      value: { number: number, 'undefined': 'undefined' },
	      x: { number: number },
	      y: { number: number },
	      __type__: { object: object }
	    },
	    physics: {
	      enabled: { boolean: boolean },
	      barnesHut: {
	        gravitationalConstant: { number: number },
	        centralGravity: { number: number },
	        springLength: { number: number },
	        springConstant: { number: number },
	        damping: { number: number },
	        avoidOverlap: { number: number },
	        __type__: { object: object }
	      },
	      forceAtlas2Based: {
	        gravitationalConstant: { number: number },
	        centralGravity: { number: number },
	        springLength: { number: number },
	        springConstant: { number: number },
	        damping: { number: number },
	        avoidOverlap: { number: number },
	        __type__: { object: object }
	      },
	      repulsion: {
	        centralGravity: { number: number },
	        springLength: { number: number },
	        springConstant: { number: number },
	        nodeDistance: { number: number },
	        damping: { number: number },
	        __type__: { object: object }
	      },
	      hierarchicalRepulsion: {
	        centralGravity: { number: number },
	        springLength: { number: number },
	        springConstant: { number: number },
	        nodeDistance: { number: number },
	        damping: { number: number },
	        __type__: { object: object }
	      },
	      maxVelocity: { number: number },
	      minVelocity: { number: number }, // px/s
	      solver: { string: ['barnesHut', 'repulsion', 'hierarchicalRepulsion', 'forceAtlas2Based'] },
	      stabilization: {
	        enabled: { boolean: boolean },
	        iterations: { number: number }, // maximum number of iteration to stabilize
	        updateInterval: { number: number },
	        onlyDynamicEdges: { boolean: boolean },
	        fit: { boolean: boolean },
	        __type__: { object: object, boolean: boolean }
	      },
	      timestep: { number: number },
	      adaptiveTimestep: { boolean: boolean },
	      __type__: { object: object, boolean: boolean }
	    },

	    //globals :
	    autoResize: { boolean: boolean },
	    clickToUse: { boolean: boolean },
	    locale: { string: string },
	    locales: {
	      __any__: { any: any },
	      __type__: { object: object }
	    },
	    height: { string: string },
	    width: { string: string },
	    __type__: { object: object }
	  };

	  allOptions.groups.__any__ = allOptions.nodes;
	  allOptions.manipulation.controlNodeStyle = allOptions.nodes;

	  var configureOptions = {
	    nodes: {
	      borderWidth: [1, 0, 10, 1],
	      borderWidthSelected: [2, 0, 10, 1],
	      color: {
	        border: ['color', '#2B7CE9'],
	        background: ['color', '#97C2FC'],
	        highlight: {
	          border: ['color', '#2B7CE9'],
	          background: ['color', '#D2E5FF']
	        },
	        hover: {
	          border: ['color', '#2B7CE9'],
	          background: ['color', '#D2E5FF']
	        }
	      },
	      fixed: {
	        x: false,
	        y: false
	      },
	      font: {
	        color: ['color', '#343434'],
	        size: [14, 0, 100, 1], // px
	        face: ['arial', 'verdana', 'tahoma'],
	        background: ['color', 'none'],
	        strokeWidth: [0, 0, 50, 1], // px
	        strokeColor: ['color', '#ffffff']
	      },
	      //group: 'string',
	      hidden: false,
	      labelHighlightBold: true,
	      //icon: {
	      //  face: 'string',  //'FontAwesome',
	      //  code: 'string',  //'\uf007',
	      //  size: [50, 0, 200, 1],  //50,
	      //  color: ['color','#2B7CE9']   //'#aa00ff'
	      //},
	      //image: 'string', // --> URL
	      physics: true,
	      scaling: {
	        min: [10, 0, 200, 1],
	        max: [30, 0, 200, 1],
	        label: {
	          enabled: false,
	          min: [14, 0, 200, 1],
	          max: [30, 0, 200, 1],
	          maxVisible: [30, 0, 200, 1],
	          drawThreshold: [5, 0, 20, 1]
	        }
	      },
	      shadow: {
	        enabled: false,
	        color: 'rgba(0,0,0,0.5)',
	        size: [10, 0, 20, 1],
	        x: [5, -30, 30, 1],
	        y: [5, -30, 30, 1]
	      },
	      shape: ['ellipse', 'box', 'circle', 'database', 'diamond', 'dot', 'square', 'star', 'text', 'triangle', 'triangleDown'],
	      shapeProperties: {
	        borderDashes: false,
	        borderRadius: [6, 0, 20, 1],
	        interpolation: true,
	        useImageSize: false
	      },
	      size: [25, 0, 200, 1]
	    },
	    edges: {
	      arrows: {
	        to: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },
	        middle: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },
	        from: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' }
	      },
	      arrowStrikethrough: true,
	      color: {
	        color: ['color', '#848484'],
	        highlight: ['color', '#848484'],
	        hover: ['color', '#848484'],
	        inherit: ['from', 'to', 'both', true, false],
	        opacity: [1, 0, 1, 0.05]
	      },
	      dashes: false,
	      font: {
	        color: ['color', '#343434'],
	        size: [14, 0, 100, 1], // px
	        face: ['arial', 'verdana', 'tahoma'],
	        background: ['color', 'none'],
	        strokeWidth: [2, 0, 50, 1], // px
	        strokeColor: ['color', '#ffffff'],
	        align: ['horizontal', 'top', 'middle', 'bottom']
	      },
	      hidden: false,
	      hoverWidth: [1.5, 0, 5, 0.1],
	      labelHighlightBold: true,
	      physics: true,
	      scaling: {
	        min: [1, 0, 100, 1],
	        max: [15, 0, 100, 1],
	        label: {
	          enabled: true,
	          min: [14, 0, 200, 1],
	          max: [30, 0, 200, 1],
	          maxVisible: [30, 0, 200, 1],
	          drawThreshold: [5, 0, 20, 1]
	        }
	      },
	      selectionWidth: [1.5, 0, 5, 0.1],
	      selfReferenceSize: [20, 0, 200, 1],
	      shadow: {
	        enabled: false,
	        color: 'rgba(0,0,0,0.5)',
	        size: [10, 0, 20, 1],
	        x: [5, -30, 30, 1],
	        y: [5, -30, 30, 1]
	      },
	      smooth: {
	        enabled: true,
	        type: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'],
	        forceDirection: ['horizontal', 'vertical', 'none'],
	        roundness: [0.5, 0, 1, 0.05]
	      },
	      width: [1, 0, 30, 1]
	    },
	    layout: {
	      //randomSeed: [0, 0, 500, 1],
	      //improvedLayout: true,
	      hierarchical: {
	        enabled: false,
	        levelSeparation: [150, 20, 500, 5],
	        nodeSpacing: [100, 20, 500, 5],
	        treeSpacing: [200, 20, 500, 5],
	        blockShifting: true,
	        edgeMinimization: true,
	        parentCentralization: true,
	        direction: ['UD', 'DU', 'LR', 'RL'], // UD, DU, LR, RL
	        sortMethod: ['hubsize', 'directed'] // hubsize, directed
	      }
	    },
	    interaction: {
	      dragNodes: true,
	      dragView: true,
	      hideEdgesOnDrag: false,
	      hideNodesOnDrag: false,
	      hover: false,
	      keyboard: {
	        enabled: false,
	        speed: { x: [10, 0, 40, 1], y: [10, 0, 40, 1], zoom: [0.02, 0, 0.1, 0.005] },
	        bindToWindow: true
	      },
	      multiselect: false,
	      navigationButtons: false,
	      selectable: true,
	      selectConnectedEdges: true,
	      hoverConnectedEdges: true,
	      tooltipDelay: [300, 0, 1000, 25],
	      zoomView: true
	    },
	    manipulation: {
	      enabled: false,
	      initiallyActive: false
	    },
	    physics: {
	      enabled: true,
	      barnesHut: {
	        //theta: [0.5, 0.1, 1, 0.05],
	        gravitationalConstant: [-2000, -30000, 0, 50],
	        centralGravity: [0.3, 0, 10, 0.05],
	        springLength: [95, 0, 500, 5],
	        springConstant: [0.04, 0, 1.2, 0.005],
	        damping: [0.09, 0, 1, 0.01],
	        avoidOverlap: [0, 0, 1, 0.01]
	      },
	      forceAtlas2Based: {
	        //theta: [0.5, 0.1, 1, 0.05],
	        gravitationalConstant: [-50, -500, 0, 1],
	        centralGravity: [0.01, 0, 1, 0.005],
	        springLength: [95, 0, 500, 5],
	        springConstant: [0.08, 0, 1.2, 0.005],
	        damping: [0.4, 0, 1, 0.01],
	        avoidOverlap: [0, 0, 1, 0.01]
	      },
	      repulsion: {
	        centralGravity: [0.2, 0, 10, 0.05],
	        springLength: [200, 0, 500, 5],
	        springConstant: [0.05, 0, 1.2, 0.005],
	        nodeDistance: [100, 0, 500, 5],
	        damping: [0.09, 0, 1, 0.01]
	      },
	      hierarchicalRepulsion: {
	        centralGravity: [0.2, 0, 10, 0.05],
	        springLength: [100, 0, 500, 5],
	        springConstant: [0.01, 0, 1.2, 0.005],
	        nodeDistance: [120, 0, 500, 5],
	        damping: [0.09, 0, 1, 0.01]
	      },
	      maxVelocity: [50, 0, 150, 1],
	      minVelocity: [0.1, 0.01, 0.5, 0.01],
	      solver: ['barnesHut', 'forceAtlas2Based', 'repulsion', 'hierarchicalRepulsion'],
	      timestep: [0.5, 0.01, 1, 0.01]
	    }
	  };

	  exports.allOptions = allOptions;
	  exports.configureOptions = configureOptions;

	/***/ },
	/* 117 */
	/***/ function(module, exports, __webpack_require__) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // distance finding algorithm


	  var _FloydWarshall = __webpack_require__(118);

	  var _FloydWarshall2 = _interopRequireDefault(_FloydWarshall);

	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  /**
	   * KamadaKawai positions the nodes initially based on
	   *
	   * "AN ALGORITHM FOR DRAWING GENERAL UNDIRECTED GRAPHS"
	   * -- Tomihisa KAMADA and Satoru KAWAI in 1989
	   *
	   * Possible optimizations in the distance calculation can be implemented.
	   */
	  var KamadaKawai = function () {
	    function KamadaKawai(body, edgeLength, edgeStrength) {
	      _classCallCheck(this, KamadaKawai);

	      this.body = body;
	      this.springLength = edgeLength;
	      this.springConstant = edgeStrength;
	      this.distanceSolver = new _FloydWarshall2.default();
	    }

	    /**
	     * Not sure if needed but can be used to update the spring length and spring constant
	     * @param options
	     */


	    _createClass(KamadaKawai, [{
	      key: "setOptions",
	      value: function setOptions(options) {
	        if (options) {
	          if (options.springLength) {
	            this.springLength = options.springLength;
	          }
	          if (options.springConstant) {
	            this.springConstant = options.springConstant;
	          }
	        }
	      }

	      /**
	       * Position the system
	       * @param nodesArray
	       * @param edgesArray
	       */

	    }, {
	      key: "solve",
	      value: function solve(nodesArray, edgesArray) {
	        var ignoreClusters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	        // get distance matrix
	        var D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray); // distance matrix

	        // get the L Matrix
	        this._createL_matrix(D_matrix);

	        // get the K Matrix
	        this._createK_matrix(D_matrix);

	        // calculate positions
	        var threshold = 0.01;
	        var innerThreshold = 1;
	        var iterations = 0;
	        var maxIterations = Math.max(1000, Math.min(10 * this.body.nodeIndices.length, 6000));
	        var maxInnerIterations = 5;

	        var maxEnergy = 1e9;
	        var highE_nodeId = 0,
	            dE_dx = 0,
	            dE_dy = 0,
	            delta_m = 0,
	            subIterations = 0;

	        while (maxEnergy > threshold && iterations < maxIterations) {
	          iterations += 1;

	          var _getHighestEnergyNode2 = this._getHighestEnergyNode(ignoreClusters);

	          var _getHighestEnergyNode3 = _slicedToArray(_getHighestEnergyNode2, 4);

	          highE_nodeId = _getHighestEnergyNode3[0];
	          maxEnergy = _getHighestEnergyNode3[1];
	          dE_dx = _getHighestEnergyNode3[2];
	          dE_dy = _getHighestEnergyNode3[3];

	          delta_m = maxEnergy;
	          subIterations = 0;
	          while (delta_m > innerThreshold && subIterations < maxInnerIterations) {
	            subIterations += 1;
	            this._moveNode(highE_nodeId, dE_dx, dE_dy);

	            var _getEnergy2 = this._getEnergy(highE_nodeId);

	            var _getEnergy3 = _slicedToArray(_getEnergy2, 3);

	            delta_m = _getEnergy3[0];
	            dE_dx = _getEnergy3[1];
	            dE_dy = _getEnergy3[2];
	          }
	        }
	      }

	      /**
	       * get the node with the highest energy
	       * @returns {*[]}
	       * @private
	       */

	    }, {
	      key: "_getHighestEnergyNode",
	      value: function _getHighestEnergyNode(ignoreClusters) {
	        var nodesArray = this.body.nodeIndices;
	        var nodes = this.body.nodes;
	        var maxEnergy = 0;
	        var maxEnergyNodeId = nodesArray[0];
	        var dE_dx_max = 0,
	            dE_dy_max = 0;

	        for (var nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {
	          var m = nodesArray[nodeIdx];
	          // by not evaluating nodes with predefined positions we should only move nodes that have no positions.
	          if (nodes[m].predefinedPosition === false || nodes[m].isCluster === true && ignoreClusters === true || nodes[m].options.fixed.x === true || nodes[m].options.fixed.y === true) {
	            var _getEnergy4 = this._getEnergy(m),
	                _getEnergy5 = _slicedToArray(_getEnergy4, 3),
	                delta_m = _getEnergy5[0],
	                dE_dx = _getEnergy5[1],
	                dE_dy = _getEnergy5[2];

	            if (maxEnergy < delta_m) {
	              maxEnergy = delta_m;
	              maxEnergyNodeId = m;
	              dE_dx_max = dE_dx;
	              dE_dy_max = dE_dy;
	            }
	          }
	        }

	        return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];
	      }

	      /**
	       * calculate the energy of a single node
	       * @param m
	       * @returns {*[]}
	       * @private
	       */

	    }, {
	      key: "_getEnergy",
	      value: function _getEnergy(m) {
	        var nodesArray = this.body.nodeIndices;
	        var nodes = this.body.nodes;

	        var x_m = nodes[m].x;
	        var y_m = nodes[m].y;
	        var dE_dx = 0;
	        var dE_dy = 0;
	        for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
	          var i = nodesArray[iIdx];
	          if (i !== m) {
	            var x_i = nodes[i].x;
	            var y_i = nodes[i].y;
	            var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
	            dE_dx += this.K_matrix[m][i] * (x_m - x_i - this.L_matrix[m][i] * (x_m - x_i) * denominator);
	            dE_dy += this.K_matrix[m][i] * (y_m - y_i - this.L_matrix[m][i] * (y_m - y_i) * denominator);
	          }
	        }

	        var delta_m = Math.sqrt(Math.pow(dE_dx, 2) + Math.pow(dE_dy, 2));
	        return [delta_m, dE_dx, dE_dy];
	      }

	      /**
	       * move the node based on it's energy
	       * the dx and dy are calculated from the linear system proposed by Kamada and Kawai
	       * @param m
	       * @param dE_dx
	       * @param dE_dy
	       * @private
	       */

	    }, {
	      key: "_moveNode",
	      value: function _moveNode(m, dE_dx, dE_dy) {
	        var nodesArray = this.body.nodeIndices;
	        var nodes = this.body.nodes;
	        var d2E_dx2 = 0;
	        var d2E_dxdy = 0;
	        var d2E_dy2 = 0;

	        var x_m = nodes[m].x;
	        var y_m = nodes[m].y;
	        for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
	          var i = nodesArray[iIdx];
	          if (i !== m) {
	            var x_i = nodes[i].x;
	            var y_i = nodes[i].y;
	            var denominator = 1.0 / Math.pow(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2), 1.5);
	            d2E_dx2 += this.K_matrix[m][i] * (1 - this.L_matrix[m][i] * Math.pow(y_m - y_i, 2) * denominator);
	            d2E_dxdy += this.K_matrix[m][i] * (this.L_matrix[m][i] * (x_m - x_i) * (y_m - y_i) * denominator);
	            d2E_dy2 += this.K_matrix[m][i] * (1 - this.L_matrix[m][i] * Math.pow(x_m - x_i, 2) * denominator);
	          }
	        }
	        // make the variable names easier to make the solving of the linear system easier to read
	        var A = d2E_dx2,
	            B = d2E_dxdy,
	            C = dE_dx,
	            D = d2E_dy2,
	            E = dE_dy;

	        // solve the linear system for dx and dy
	        var dy = (C / A + E / B) / (B / A - D / B);
	        var dx = -(B * dy + C) / A;

	        // move the node
	        nodes[m].x += dx;
	        nodes[m].y += dy;
	      }

	      /**
	       * Create the L matrix: edge length times shortest path
	       * @param D_matrix
	       * @private
	       */

	    }, {
	      key: "_createL_matrix",
	      value: function _createL_matrix(D_matrix) {
	        var nodesArray = this.body.nodeIndices;
	        var edgeLength = this.springLength;

	        this.L_matrix = [];
	        for (var i = 0; i < nodesArray.length; i++) {
	          this.L_matrix[nodesArray[i]] = {};
	          for (var j = 0; j < nodesArray.length; j++) {
	            this.L_matrix[nodesArray[i]][nodesArray[j]] = edgeLength * D_matrix[nodesArray[i]][nodesArray[j]];
	          }
	        }
	      }

	      /**
	       * Create the K matrix: spring constants times shortest path
	       * @param D_matrix
	       * @private
	       */

	    }, {
	      key: "_createK_matrix",
	      value: function _createK_matrix(D_matrix) {
	        var nodesArray = this.body.nodeIndices;
	        var edgeStrength = this.springConstant;

	        this.K_matrix = [];
	        for (var i = 0; i < nodesArray.length; i++) {
	          this.K_matrix[nodesArray[i]] = {};
	          for (var j = 0; j < nodesArray.length; j++) {
	            this.K_matrix[nodesArray[i]][nodesArray[j]] = edgeStrength * Math.pow(D_matrix[nodesArray[i]][nodesArray[j]], -2);
	          }
	        }
	      }
	    }]);

	    return KamadaKawai;
	  }();

	  exports.default = KamadaKawai;

	/***/ },
	/* 118 */
	/***/ function(module, exports) {

	  "use strict";

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  /**
	   * Created by Alex on 10-Aug-15.
	   */

	  var FloydWarshall = function () {
	    function FloydWarshall() {
	      _classCallCheck(this, FloydWarshall);
	    }

	    _createClass(FloydWarshall, [{
	      key: "getDistances",
	      value: function getDistances(body, nodesArray, edgesArray) {
	        var D_matrix = {};
	        var edges = body.edges;

	        // prepare matrix with large numbers
	        for (var i = 0; i < nodesArray.length; i++) {
	          D_matrix[nodesArray[i]] = {};
	          D_matrix[nodesArray[i]] = {};
	          for (var j = 0; j < nodesArray.length; j++) {
	            D_matrix[nodesArray[i]][nodesArray[j]] = i == j ? 0 : 1e9;
	            D_matrix[nodesArray[i]][nodesArray[j]] = i == j ? 0 : 1e9;
	          }
	        }

	        // put the weights for the edges in. This assumes unidirectionality.
	        for (var _i = 0; _i < edgesArray.length; _i++) {
	          var edge = edges[edgesArray[_i]];
	          // edge has to be connected if it counts to the distances. If it is connected to inner clusters it will crash so we also check if it is in the D_matrix
	          if (edge.connected === true && D_matrix[edge.fromId] !== undefined && D_matrix[edge.toId] !== undefined) {
	            D_matrix[edge.fromId][edge.toId] = 1;
	            D_matrix[edge.toId][edge.fromId] = 1;
	          }
	        }

	        var nodeCount = nodesArray.length;

	        // Adapted FloydWarshall based on unidirectionality to greatly reduce complexity.
	        for (var k = 0; k < nodeCount; k++) {
	          for (var _i2 = 0; _i2 < nodeCount - 1; _i2++) {
	            for (var _j = _i2 + 1; _j < nodeCount; _j++) {
	              D_matrix[nodesArray[_i2]][nodesArray[_j]] = Math.min(D_matrix[nodesArray[_i2]][nodesArray[_j]], D_matrix[nodesArray[_i2]][nodesArray[k]] + D_matrix[nodesArray[k]][nodesArray[_j]]);
	              D_matrix[nodesArray[_j]][nodesArray[_i2]] = D_matrix[nodesArray[_i2]][nodesArray[_j]];
	            }
	          }
	        }

	        return D_matrix;
	      }
	    }]);

	    return FloydWarshall;
	  }();

	  exports.default = FloydWarshall;

	/***/ },
	/* 119 */
	/***/ function(module, exports) {

	  'use strict';

	  /**
	   * Canvas shapes used by Network
	   */
	  if (typeof CanvasRenderingContext2D !== 'undefined') {

	    /**
	     * Draw a circle shape
	     */
	    CanvasRenderingContext2D.prototype.circle = function (x, y, r) {
	      this.beginPath();
	      this.arc(x, y, r, 0, 2 * Math.PI, false);
	      this.closePath();
	    };

	    /**
	     * Draw a square shape
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r   size, width and height of the square
	     */
	    CanvasRenderingContext2D.prototype.square = function (x, y, r) {
	      this.beginPath();
	      this.rect(x - r, y - r, r * 2, r * 2);
	      this.closePath();
	    };

	    /**
	     * Draw a triangle shape
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r   radius, half the length of the sides of the triangle
	     */
	    CanvasRenderingContext2D.prototype.triangle = function (x, y, r) {
	      // http://en.wikipedia.org/wiki/Equilateral_triangle
	      this.beginPath();

	      // the change in radius and the offset is here to center the shape
	      r *= 1.15;
	      y += 0.275 * r;

	      var s = r * 2;
	      var s2 = s / 2;
	      var ir = Math.sqrt(3) / 6 * s; // radius of inner circle
	      var h = Math.sqrt(s * s - s2 * s2); // height


	      this.moveTo(x, y - (h - ir));
	      this.lineTo(x + s2, y + ir);
	      this.lineTo(x - s2, y + ir);
	      this.lineTo(x, y - (h - ir));
	      this.closePath();
	    };

	    /**
	     * Draw a triangle shape in downward orientation
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r radius
	     */
	    CanvasRenderingContext2D.prototype.triangleDown = function (x, y, r) {
	      // http://en.wikipedia.org/wiki/Equilateral_triangle
	      this.beginPath();

	      // the change in radius and the offset is here to center the shape
	      r *= 1.15;
	      y -= 0.275 * r;

	      var s = r * 2;
	      var s2 = s / 2;
	      var ir = Math.sqrt(3) / 6 * s; // radius of inner circle
	      var h = Math.sqrt(s * s - s2 * s2); // height

	      this.moveTo(x, y + (h - ir));
	      this.lineTo(x + s2, y - ir);
	      this.lineTo(x - s2, y - ir);
	      this.lineTo(x, y + (h - ir));
	      this.closePath();
	    };

	    /**
	     * Draw a star shape, a star with 5 points
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r   radius, half the length of the sides of the triangle
	     */
	    CanvasRenderingContext2D.prototype.star = function (x, y, r) {
	      // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
	      this.beginPath();

	      // the change in radius and the offset is here to center the shape
	      r *= 0.82;
	      y += 0.1 * r;

	      for (var n = 0; n < 10; n++) {
	        var radius = n % 2 === 0 ? r * 1.3 : r * 0.5;
	        this.lineTo(x + radius * Math.sin(n * 2 * Math.PI / 10), y - radius * Math.cos(n * 2 * Math.PI / 10));
	      }

	      this.closePath();
	    };

	    /**
	     * Draw a Diamond shape
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r   radius, half the length of the sides of the triangle
	     */
	    CanvasRenderingContext2D.prototype.diamond = function (x, y, r) {
	      // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
	      this.beginPath();

	      this.lineTo(x, y + r);
	      this.lineTo(x + r, y);
	      this.lineTo(x, y - r);
	      this.lineTo(x - r, y);

	      this.closePath();
	    };

	    /**
	     * http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas
	     */
	    CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {
	      var r2d = Math.PI / 180;
	      if (w - 2 * r < 0) {
	        r = w / 2;
	      } //ensure that the radius isn't too large for x
	      if (h - 2 * r < 0) {
	        r = h / 2;
	      } //ensure that the radius isn't too large for y
	      this.beginPath();
	      this.moveTo(x + r, y);
	      this.lineTo(x + w - r, y);
	      this.arc(x + w - r, y + r, r, r2d * 270, r2d * 360, false);
	      this.lineTo(x + w, y + h - r);
	      this.arc(x + w - r, y + h - r, r, 0, r2d * 90, false);
	      this.lineTo(x + r, y + h);
	      this.arc(x + r, y + h - r, r, r2d * 90, r2d * 180, false);
	      this.lineTo(x, y + r);
	      this.arc(x + r, y + r, r, r2d * 180, r2d * 270, false);
	      this.closePath();
	    };

	    /**
	     * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
	     */
	    CanvasRenderingContext2D.prototype.ellipse = function (x, y, w, h) {
	      var kappa = .5522848,
	          ox = w / 2 * kappa,
	          // control point offset horizontal
	      oy = h / 2 * kappa,
	          // control point offset vertical
	      xe = x + w,
	          // x-end
	      ye = y + h,
	          // y-end
	      xm = x + w / 2,
	          // x-middle
	      ym = y + h / 2; // y-middle

	      this.beginPath();
	      this.moveTo(x, ym);
	      this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	      this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
	      this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	      this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
	      this.closePath();
	    };

	    /**
	     * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
	     */
	    CanvasRenderingContext2D.prototype.database = function (x, y, w, h) {
	      var f = 1 / 3;
	      var wEllipse = w;
	      var hEllipse = h * f;

	      var kappa = .5522848,
	          ox = wEllipse / 2 * kappa,
	          // control point offset horizontal
	      oy = hEllipse / 2 * kappa,
	          // control point offset vertical
	      xe = x + wEllipse,
	          // x-end
	      ye = y + hEllipse,
	          // y-end
	      xm = x + wEllipse / 2,
	          // x-middle
	      ym = y + hEllipse / 2,
	          // y-middle
	      ymb = y + (h - hEllipse / 2),
	          // y-midlle, bottom ellipse
	      yeb = y + h; // y-end, bottom ellipse

	      this.beginPath();
	      this.moveTo(xe, ym);

	      this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	      this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);

	      this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	      this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);

	      this.lineTo(xe, ymb);

	      this.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);
	      this.bezierCurveTo(xm - ox, yeb, x, ymb + oy, x, ymb);

	      this.lineTo(x, ym);
	    };

	    /**
	     * Draw an arrow at the end of a line with the given angle.
	     */
	    CanvasRenderingContext2D.prototype.arrowEndpoint = function (x, y, angle, length) {
	      // tail
	      var xt = x - length * Math.cos(angle);
	      var yt = y - length * Math.sin(angle);

	      // inner tail
	      var xi = x - length * 0.9 * Math.cos(angle);
	      var yi = y - length * 0.9 * Math.sin(angle);

	      // left
	      var xl = xt + length / 3 * Math.cos(angle + 0.5 * Math.PI);
	      var yl = yt + length / 3 * Math.sin(angle + 0.5 * Math.PI);

	      // right
	      var xr = xt + length / 3 * Math.cos(angle - 0.5 * Math.PI);
	      var yr = yt + length / 3 * Math.sin(angle - 0.5 * Math.PI);

	      this.beginPath();
	      this.moveTo(x, y);
	      this.lineTo(xl, yl);
	      this.lineTo(xi, yi);
	      this.lineTo(xr, yr);
	      this.closePath();
	    };

	    /**
	     * Draw an circle an the end of an line with the given angle.
	     */
	    CanvasRenderingContext2D.prototype.circleEndpoint = function (x, y, angle, length) {
	      var radius = length * 0.4;
	      var xc = x - radius * Math.cos(angle);
	      var yc = y - radius * Math.sin(angle);
	      this.circle(xc, yc, radius);
	    };

	    /**
	     * Sets up the dashedLine functionality for drawing
	     * Original code came from http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas
	     * @author David Jordan
	     * @date 2012-08-08
	     */
	    CanvasRenderingContext2D.prototype.dashedLine = function (x, y, x2, y2, pattern) {
	      this.beginPath();
	      this.moveTo(x, y);

	      var patternLength = pattern.length;
	      var dx = x2 - x;
	      var dy = y2 - y;
	      var slope = dy / dx;
	      var distRemaining = Math.sqrt(dx * dx + dy * dy);
	      var patternIndex = 0;
	      var draw = true;
	      var xStep = 0;
	      var dashLength = pattern[0];

	      while (distRemaining >= 0.1) {
	        dashLength = pattern[patternIndex++ % patternLength];
	        if (dashLength > distRemaining) {
	          dashLength = distRemaining;
	        }

	        xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
	        xStep = dx < 0 ? -xStep : xStep;
	        x += xStep;
	        y += slope * xStep;

	        if (draw === true) {
	          this.lineTo(x, y);
	        } else {
	          this.moveTo(x, y);
	        }

	        distRemaining -= dashLength;
	        draw = !draw;
	      }
	    };
	  }

	/***/ },
	/* 120 */
	/***/ function(module, exports) {

	  'use strict';

	  /**
	   * Parse a text source containing data in DOT language into a JSON object.
	   * The object contains two lists: one with nodes and one with edges.
	   *
	   * DOT language reference: http://www.graphviz.org/doc/info/lang.html
	   *
	   * DOT language attributes: http://graphviz.org/content/attrs
	   *
	   * @param {String} data     Text containing a graph in DOT-notation
	   * @return {Object} graph   An object containing two parameters:
	   *                          {Object[]} nodes
	   *                          {Object[]} edges
	   */
	  function parseDOT(data) {
	    dot = data;
	    return parseGraph();
	  }

	  // mapping of attributes from DOT (the keys) to vis.js (the values)
	  var NODE_ATTR_MAPPING = {
	    'fontsize': 'font.size',
	    'fontcolor': 'font.color',
	    'labelfontcolor': 'font.color',
	    'fontname': 'font.face',
	    'color': ['color.border', 'color.background'],
	    'fillcolor': 'color.background',
	    'tooltip': 'title',
	    'labeltooltip': 'title'
	  };
	  var EDGE_ATTR_MAPPING = Object.create(NODE_ATTR_MAPPING);
	  EDGE_ATTR_MAPPING.color = 'color.color';

	  // token types enumeration
	  var TOKENTYPE = {
	    NULL: 0,
	    DELIMITER: 1,
	    IDENTIFIER: 2,
	    UNKNOWN: 3
	  };

	  // map with all delimiters
	  var DELIMITERS = {
	    '{': true,
	    '}': true,
	    '[': true,
	    ']': true,
	    ';': true,
	    '=': true,
	    ',': true,

	    '->': true,
	    '--': true
	  };

	  var dot = ''; // current dot file
	  var index = 0; // current index in dot file
	  var c = ''; // current token character in expr
	  var token = ''; // current token
	  var tokenType = TOKENTYPE.NULL; // type of the token

	  /**
	   * Get the first character from the dot file.
	   * The character is stored into the char c. If the end of the dot file is
	   * reached, the function puts an empty string in c.
	   */
	  function first() {
	    index = 0;
	    c = dot.charAt(0);
	  }

	  /**
	   * Get the next character from the dot file.
	   * The character is stored into the char c. If the end of the dot file is
	   * reached, the function puts an empty string in c.
	   */
	  function next() {
	    index++;
	    c = dot.charAt(index);
	  }

	  /**
	   * Preview the next character from the dot file.
	   * @return {String} cNext
	   */
	  function nextPreview() {
	    return dot.charAt(index + 1);
	  }

	  /**
	   * Test whether given character is alphabetic or numeric
	   * @param {String} c
	   * @return {Boolean} isAlphaNumeric
	   */
	  var regexAlphaNumeric = /[a-zA-Z_0-9.:#]/;
	  function isAlphaNumeric(c) {
	    return regexAlphaNumeric.test(c);
	  }

	  /**
	   * Merge all options of object b into object b
	   * @param {Object} a
	   * @param {Object} b
	   * @return {Object} a
	   */
	  function merge(a, b) {
	    if (!a) {
	      a = {};
	    }

	    if (b) {
	      for (var name in b) {
	        if (b.hasOwnProperty(name)) {
	          a[name] = b[name];
	        }
	      }
	    }
	    return a;
	  }

	  /**
	   * Set a value in an object, where the provided parameter name can be a
	   * path with nested parameters. For example:
	   *
	   *     var obj = {a: 2};
	   *     setValue(obj, 'b.c', 3);     // obj = {a: 2, b: {c: 3}}
	   *
	   * @param {Object} obj
	   * @param {String} path  A parameter name or dot-separated parameter path,
	   *                      like "color.highlight.border".
	   * @param {*} value
	   */
	  function setValue(obj, path, value) {
	    var keys = path.split('.');
	    var o = obj;
	    while (keys.length) {
	      var key = keys.shift();
	      if (keys.length) {
	        // this isn't the end point
	        if (!o[key]) {
	          o[key] = {};
	        }
	        o = o[key];
	      } else {
	        // this is the end point
	        o[key] = value;
	      }
	    }
	  }

	  /**
	   * Add a node to a graph object. If there is already a node with
	   * the same id, their attributes will be merged.
	   * @param {Object} graph
	   * @param {Object} node
	   */
	  function addNode(graph, node) {
	    var i, len;
	    var current = null;

	    // find root graph (in case of subgraph)
	    var graphs = [graph]; // list with all graphs from current graph to root graph
	    var root = graph;
	    while (root.parent) {
	      graphs.push(root.parent);
	      root = root.parent;
	    }

	    // find existing node (at root level) by its id
	    if (root.nodes) {
	      for (i = 0, len = root.nodes.length; i < len; i++) {
	        if (node.id === root.nodes[i].id) {
	          current = root.nodes[i];
	          break;
	        }
	      }
	    }

	    if (!current) {
	      // this is a new node
	      current = {
	        id: node.id
	      };
	      if (graph.node) {
	        // clone default attributes
	        current.attr = merge(current.attr, graph.node);
	      }
	    }

	    // add node to this (sub)graph and all its parent graphs
	    for (i = graphs.length - 1; i >= 0; i--) {
	      var g = graphs[i];

	      if (!g.nodes) {
	        g.nodes = [];
	      }
	      if (g.nodes.indexOf(current) === -1) {
	        g.nodes.push(current);
	      }
	    }

	    // merge attributes
	    if (node.attr) {
	      current.attr = merge(current.attr, node.attr);
	    }
	  }

	  /**
	   * Add an edge to a graph object
	   * @param {Object} graph
	   * @param {Object} edge
	   */
	  function addEdge(graph, edge) {
	    if (!graph.edges) {
	      graph.edges = [];
	    }
	    graph.edges.push(edge);
	    if (graph.edge) {
	      var attr = merge({}, graph.edge); // clone default attributes
	      edge.attr = merge(attr, edge.attr); // merge attributes
	    }
	  }

	  /**
	   * Create an edge to a graph object
	   * @param {Object} graph
	   * @param {String | Number | Object} from
	   * @param {String | Number | Object} to
	   * @param {String} type
	   * @param {Object | null} attr
	   * @return {Object} edge
	   */
	  function createEdge(graph, from, to, type, attr) {
	    var edge = {
	      from: from,
	      to: to,
	      type: type
	    };

	    if (graph.edge) {
	      edge.attr = merge({}, graph.edge); // clone default attributes
	    }
	    edge.attr = merge(edge.attr || {}, attr); // merge attributes

	    return edge;
	  }

	  /**
	   * Get next token in the current dot file.
	   * The token and token type are available as token and tokenType
	   */
	  function getToken() {
	    tokenType = TOKENTYPE.NULL;
	    token = '';

	    // skip over whitespaces
	    while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
	      // space, tab, enter
	      next();
	    }

	    do {
	      var isComment = false;

	      // skip comment
	      if (c === '#') {
	        // find the previous non-space character
	        var i = index - 1;
	        while (dot.charAt(i) === ' ' || dot.charAt(i) === '\t') {
	          i--;
	        }
	        if (dot.charAt(i) === '\n' || dot.charAt(i) === '') {
	          // the # is at the start of a line, this is indeed a line comment
	          while (c != '' && c != '\n') {
	            next();
	          }
	          isComment = true;
	        }
	      }
	      if (c === '/' && nextPreview() === '/') {
	        // skip line comment
	        while (c != '' && c != '\n') {
	          next();
	        }
	        isComment = true;
	      }
	      if (c === '/' && nextPreview() === '*') {
	        // skip block comment
	        while (c != '') {
	          if (c === '*' && nextPreview() === '/') {
	            // end of block comment found. skip these last two characters
	            next();
	            next();
	            break;
	          } else {
	            next();
	          }
	        }
	        isComment = true;
	      }

	      // skip over whitespaces
	      while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
	        // space, tab, enter
	        next();
	      }
	    } while (isComment);

	    // check for end of dot file
	    if (c === '') {
	      // token is still empty
	      tokenType = TOKENTYPE.DELIMITER;
	      return;
	    }

	    // check for delimiters consisting of 2 characters
	    var c2 = c + nextPreview();
	    if (DELIMITERS[c2]) {
	      tokenType = TOKENTYPE.DELIMITER;
	      token = c2;
	      next();
	      next();
	      return;
	    }

	    // check for delimiters consisting of 1 character
	    if (DELIMITERS[c]) {
	      tokenType = TOKENTYPE.DELIMITER;
	      token = c;
	      next();
	      return;
	    }

	    // check for an identifier (number or string)
	    // TODO: more precise parsing of numbers/strings (and the port separator ':')
	    if (isAlphaNumeric(c) || c === '-') {
	      token += c;
	      next();

	      while (isAlphaNumeric(c)) {
	        token += c;
	        next();
	      }
	      if (token === 'false') {
	        token = false; // convert to boolean
	      } else if (token === 'true') {
	        token = true; // convert to boolean
	      } else if (!isNaN(Number(token))) {
	        token = Number(token); // convert to number
	      }
	      tokenType = TOKENTYPE.IDENTIFIER;
	      return;
	    }

	    // check for a string enclosed by double quotes
	    if (c === '"') {
	      next();
	      while (c != '' && (c != '"' || c === '"' && nextPreview() === '"')) {
	        token += c;
	        if (c === '"') {
	          // skip the escape character
	          next();
	        }
	        next();
	      }
	      if (c != '"') {
	        throw newSyntaxError('End of string " expected');
	      }
	      next();
	      tokenType = TOKENTYPE.IDENTIFIER;
	      return;
	    }

	    // something unknown is found, wrong characters, a syntax error
	    tokenType = TOKENTYPE.UNKNOWN;
	    while (c != '') {
	      token += c;
	      next();
	    }
	    throw new SyntaxError('Syntax error in part "' + chop(token, 30) + '"');
	  }

	  /**
	   * Parse a graph.
	   * @returns {Object} graph
	   */
	  function parseGraph() {
	    var graph = {};

	    first();
	    getToken();

	    // optional strict keyword
	    if (token === 'strict') {
	      graph.strict = true;
	      getToken();
	    }

	    // graph or digraph keyword
	    if (token === 'graph' || token === 'digraph') {
	      graph.type = token;
	      getToken();
	    }

	    // optional graph id
	    if (tokenType === TOKENTYPE.IDENTIFIER) {
	      graph.id = token;
	      getToken();
	    }

	    // open angle bracket
	    if (token != '{') {
	      throw newSyntaxError('Angle bracket { expected');
	    }
	    getToken();

	    // statements
	    parseStatements(graph);

	    // close angle bracket
	    if (token != '}') {
	      throw newSyntaxError('Angle bracket } expected');
	    }
	    getToken();

	    // end of file
	    if (token !== '') {
	      throw newSyntaxError('End of file expected');
	    }
	    getToken();

	    // remove temporary default options
	    delete graph.node;
	    delete graph.edge;
	    delete graph.graph;

	    return graph;
	  }

	  /**
	   * Parse a list with statements.
	   * @param {Object} graph
	   */
	  function parseStatements(graph) {
	    while (token !== '' && token != '}') {
	      parseStatement(graph);
	      if (token === ';') {
	        getToken();
	      }
	    }
	  }

	  /**
	   * Parse a single statement. Can be a an attribute statement, node
	   * statement, a series of node statements and edge statements, or a
	   * parameter.
	   * @param {Object} graph
	   */
	  function parseStatement(graph) {
	    // parse subgraph
	    var subgraph = parseSubgraph(graph);
	    if (subgraph) {
	      // edge statements
	      parseEdge(graph, subgraph);

	      return;
	    }

	    // parse an attribute statement
	    var attr = parseAttributeStatement(graph);
	    if (attr) {
	      return;
	    }

	    // parse node
	    if (tokenType != TOKENTYPE.IDENTIFIER) {
	      throw newSyntaxError('Identifier expected');
	    }
	    var id = token; // id can be a string or a number
	    getToken();

	    if (token === '=') {
	      // id statement
	      getToken();
	      if (tokenType != TOKENTYPE.IDENTIFIER) {
	        throw newSyntaxError('Identifier expected');
	      }
	      graph[id] = token;
	      getToken();
	      // TODO: implement comma separated list with "a_list: ID=ID [','] [a_list] "
	    } else {
	      parseNodeStatement(graph, id);
	    }
	  }

	  /**
	   * Parse a subgraph
	   * @param {Object} graph    parent graph object
	   * @return {Object | null} subgraph
	   */
	  function parseSubgraph(graph) {
	    var subgraph = null;

	    // optional subgraph keyword
	    if (token === 'subgraph') {
	      subgraph = {};
	      subgraph.type = 'subgraph';
	      getToken();

	      // optional graph id
	      if (tokenType === TOKENTYPE.IDENTIFIER) {
	        subgraph.id = token;
	        getToken();
	      }
	    }

	    // open angle bracket
	    if (token === '{') {
	      getToken();

	      if (!subgraph) {
	        subgraph = {};
	      }
	      subgraph.parent = graph;
	      subgraph.node = graph.node;
	      subgraph.edge = graph.edge;
	      subgraph.graph = graph.graph;

	      // statements
	      parseStatements(subgraph);

	      // close angle bracket
	      if (token != '}') {
	        throw newSyntaxError('Angle bracket } expected');
	      }
	      getToken();

	      // remove temporary default options
	      delete subgraph.node;
	      delete subgraph.edge;
	      delete subgraph.graph;
	      delete subgraph.parent;

	      // register at the parent graph
	      if (!graph.subgraphs) {
	        graph.subgraphs = [];
	      }
	      graph.subgraphs.push(subgraph);
	    }

	    return subgraph;
	  }

	  /**
	   * parse an attribute statement like "node [shape=circle fontSize=16]".
	   * Available keywords are 'node', 'edge', 'graph'.
	   * The previous list with default attributes will be replaced
	   * @param {Object} graph
	   * @returns {String | null} keyword Returns the name of the parsed attribute
	   *                                  (node, edge, graph), or null if nothing
	   *                                  is parsed.
	   */
	  function parseAttributeStatement(graph) {
	    // attribute statements
	    if (token === 'node') {
	      getToken();

	      // node attributes
	      graph.node = parseAttributeList();
	      return 'node';
	    } else if (token === 'edge') {
	      getToken();

	      // edge attributes
	      graph.edge = parseAttributeList();
	      return 'edge';
	    } else if (token === 'graph') {
	      getToken();

	      // graph attributes
	      graph.graph = parseAttributeList();
	      return 'graph';
	    }

	    return null;
	  }

	  /**
	   * parse a node statement
	   * @param {Object} graph
	   * @param {String | Number} id
	   */
	  function parseNodeStatement(graph, id) {
	    // node statement
	    var node = {
	      id: id
	    };
	    var attr = parseAttributeList();
	    if (attr) {
	      node.attr = attr;
	    }
	    addNode(graph, node);

	    // edge statements
	    parseEdge(graph, id);
	  }

	  /**
	   * Parse an edge or a series of edges
	   * @param {Object} graph
	   * @param {String | Number} from        Id of the from node
	   */
	  function parseEdge(graph, from) {
	    while (token === '->' || token === '--') {
	      var to;
	      var type = token;
	      getToken();

	      var subgraph = parseSubgraph(graph);
	      if (subgraph) {
	        to = subgraph;
	      } else {
	        if (tokenType != TOKENTYPE.IDENTIFIER) {
	          throw newSyntaxError('Identifier or subgraph expected');
	        }
	        to = token;
	        addNode(graph, {
	          id: to
	        });
	        getToken();
	      }

	      // parse edge attributes
	      var attr = parseAttributeList();

	      // create edge
	      var edge = createEdge(graph, from, to, type, attr);
	      addEdge(graph, edge);

	      from = to;
	    }
	  }

	  /**
	   * Parse a set with attributes,
	   * for example [label="1.000", shape=solid]
	   * @return {Object | null} attr
	   */
	  function parseAttributeList() {
	    var attr = null;

	    while (token === '[') {
	      getToken();
	      attr = {};
	      while (token !== '' && token != ']') {
	        if (tokenType != TOKENTYPE.IDENTIFIER) {
	          throw newSyntaxError('Attribute name expected');
	        }
	        var name = token;

	        getToken();
	        if (token != '=') {
	          throw newSyntaxError('Equal sign = expected');
	        }
	        getToken();

	        if (tokenType != TOKENTYPE.IDENTIFIER) {
	          throw newSyntaxError('Attribute value expected');
	        }
	        var value = token;
	        setValue(attr, name, value); // name can be a path

	        getToken();
	        if (token == ',') {
	          getToken();
	        }
	      }

	      if (token != ']') {
	        throw newSyntaxError('Bracket ] expected');
	      }
	      getToken();
	    }

	    return attr;
	  }

	  /**
	   * Create a syntax error with extra information on current token and index.
	   * @param {String} message
	   * @returns {SyntaxError} err
	   */
	  function newSyntaxError(message) {
	    return new SyntaxError(message + ', got "' + chop(token, 30) + '" (char ' + index + ')');
	  }

	  /**
	   * Chop off text after a maximum length
	   * @param {String} text
	   * @param {Number} maxLength
	   * @returns {String}
	   */
	  function chop(text, maxLength) {
	    return text.length <= maxLength ? text : text.substr(0, 27) + '...';
	  }

	  /**
	   * Execute a function fn for each pair of elements in two arrays
	   * @param {Array | *} array1
	   * @param {Array | *} array2
	   * @param {function} fn
	   */
	  function forEach2(array1, array2, fn) {
	    if (Array.isArray(array1)) {
	      array1.forEach(function (elem1) {
	        if (Array.isArray(array2)) {
	          array2.forEach(function (elem2) {
	            fn(elem1, elem2);
	          });
	        } else {
	          fn(elem1, array2);
	        }
	      });
	    } else {
	      if (Array.isArray(array2)) {
	        array2.forEach(function (elem2) {
	          fn(array1, elem2);
	        });
	      } else {
	        fn(array1, array2);
	      }
	    }
	  }

	  /**
	   * Set a nested property on an object
	   * When nested objects are missing, they will be created.
	   * For example setProp({}, 'font.color', 'red') will return {font: {color: 'red'}}
	   * @param {Object} object
	   * @param {string} path   A dot separated string like 'font.color'
	   * @param {*} value       Value for the property
	   * @return {Object} Returns the original object, allows for chaining.
	   */
	  function setProp(object, path, value) {
	    var names = path.split('.');
	    var prop = names.pop();

	    // traverse over the nested objects
	    var obj = object;
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      if (!(name in obj)) {
	        obj[name] = {};
	      }
	      obj = obj[name];
	    }

	    // set the property value
	    obj[prop] = value;

	    return object;
	  }

	  /**
	   * Convert an object with DOT attributes to their vis.js equivalents.
	   * @param {Object} attr     Object with DOT attributes
	   * @param {Object} mapping
	   * @return {Object}         Returns an object with vis.js attributes
	   */
	  function convertAttr(attr, mapping) {
	    var converted = {};

	    for (var prop in attr) {
	      if (attr.hasOwnProperty(prop)) {
	        var visProp = mapping[prop];
	        if (Array.isArray(visProp)) {
	          visProp.forEach(function (visPropI) {
	            setProp(converted, visPropI, attr[prop]);
	          });
	        } else if (typeof visProp === 'string') {
	          setProp(converted, visProp, attr[prop]);
	        } else {
	          setProp(converted, prop, attr[prop]);
	        }
	      }
	    }

	    return converted;
	  }

	  /**
	   * Convert a string containing a graph in DOT language into a map containing
	   * with nodes and edges in the format of graph.
	   * @param {String} data         Text containing a graph in DOT-notation
	   * @return {Object} graphData
	   */
	  function DOTToGraph(data) {
	    // parse the DOT file
	    var dotData = parseDOT(data);
	    var graphData = {
	      nodes: [],
	      edges: [],
	      options: {}
	    };

	    // copy the nodes
	    if (dotData.nodes) {
	      dotData.nodes.forEach(function (dotNode) {
	        var graphNode = {
	          id: dotNode.id,
	          label: String(dotNode.label || dotNode.id)
	        };
	        merge(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));
	        if (graphNode.image) {
	          graphNode.shape = 'image';
	        }
	        graphData.nodes.push(graphNode);
	      });
	    }

	    // copy the edges
	    if (dotData.edges) {
	      /**
	       * Convert an edge in DOT format to an edge with VisGraph format
	       * @param {Object} dotEdge
	       * @returns {Object} graphEdge
	       */
	      var convertEdge = function convertEdge(dotEdge) {
	        var graphEdge = {
	          from: dotEdge.from,
	          to: dotEdge.to
	        };
	        merge(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));
	        graphEdge.arrows = dotEdge.type === '->' ? 'to' : undefined;

	        return graphEdge;
	      };

	      dotData.edges.forEach(function (dotEdge) {
	        var from, to;
	        if (dotEdge.from instanceof Object) {
	          from = dotEdge.from.nodes;
	        } else {
	          from = {
	            id: dotEdge.from
	          };
	        }

	        // TODO: support of solid/dotted/dashed edges (attr = 'style')
	        // TODO: support for attributes 'dir' and 'arrowhead' (edge arrows)

	        if (dotEdge.to instanceof Object) {
	          to = dotEdge.to.nodes;
	        } else {
	          to = {
	            id: dotEdge.to
	          };
	        }

	        if (dotEdge.from instanceof Object && dotEdge.from.edges) {
	          dotEdge.from.edges.forEach(function (subEdge) {
	            var graphEdge = convertEdge(subEdge);
	            graphData.edges.push(graphEdge);
	          });
	        }

	        forEach2(from, to, function (from, to) {
	          var subEdge = createEdge(graphData, from.id, to.id, dotEdge.type, dotEdge.attr);
	          var graphEdge = convertEdge(subEdge);
	          graphData.edges.push(graphEdge);
	        });

	        if (dotEdge.to instanceof Object && dotEdge.to.edges) {
	          dotEdge.to.edges.forEach(function (subEdge) {
	            var graphEdge = convertEdge(subEdge);
	            graphData.edges.push(graphEdge);
	          });
	        }
	      });
	    }

	    // copy the options
	    if (dotData.attr) {
	      graphData.options = dotData.attr;
	    }

	    return graphData;
	  }

	  // exports
	  exports.parseDOT = parseDOT;
	  exports.DOTToGraph = DOTToGraph;

	/***/ },
	/* 121 */
	/***/ function(module, exports) {

	  'use strict';

	  function parseGephi(gephiJSON, optionsObj) {
	    var edges = [];
	    var nodes = [];
	    var options = {
	      edges: {
	        inheritColor: false
	      },
	      nodes: {
	        fixed: false,
	        parseColor: false
	      }
	    };

	    if (optionsObj !== undefined) {
	      if (optionsObj.fixed !== undefined) {
	        options.nodes.fixed = optionsObj.fixed;
	      }
	      if (optionsObj.parseColor !== undefined) {
	        options.nodes.parseColor = optionsObj.parseColor;
	      }
	      if (optionsObj.inheritColor !== undefined) {
	        options.edges.inheritColor = optionsObj.inheritColor;
	      }
	    }

	    var gEdges = gephiJSON.edges;
	    var gNodes = gephiJSON.nodes;
	    for (var i = 0; i < gEdges.length; i++) {
	      var edge = {};
	      var gEdge = gEdges[i];
	      edge['id'] = gEdge.id;
	      edge['from'] = gEdge.source;
	      edge['to'] = gEdge.target;
	      edge['attributes'] = gEdge.attributes;
	      edge['label'] = gEdge.label;
	      edge['title'] = gEdge.attributes !== undefined ? gEdge.attributes.title : undefined;
	      if (gEdge['type'] === 'Directed') {
	        edge['arrows'] = 'to';
	      }
	      //    edge['value'] = gEdge.attributes !== undefined ? gEdge.attributes.Weight : undefined;
	      //    edge['width'] = edge['value'] !== undefined ? undefined : edgegEdge.size;
	      if (gEdge.color && options.inheritColor === false) {
	        edge['color'] = gEdge.color;
	      }
	      edges.push(edge);
	    }

	    for (var i = 0; i < gNodes.length; i++) {
	      var node = {};
	      var gNode = gNodes[i];
	      node['id'] = gNode.id;
	      node['attributes'] = gNode.attributes;
	      node['title'] = gNode.title;
	      node['x'] = gNode.x;
	      node['y'] = gNode.y;
	      node['label'] = gNode.label;
	      node['title'] = gNode.attributes !== undefined ? gNode.attributes.title : undefined;
	      if (options.nodes.parseColor === true) {
	        node['color'] = gNode.color;
	      } else {
	        node['color'] = gNode.color !== undefined ? { background: gNode.color, border: gNode.color, highlight: { background: gNode.color, border: gNode.color }, hover: { background: gNode.color, border: gNode.color } } : undefined;
	      }
	      node['size'] = gNode.size;
	      node['fixed'] = options.nodes.fixed && gNode.x !== undefined && gNode.y !== undefined;
	      nodes.push(node);
	    }

	    return { nodes: nodes, edges: edges };
	  }

	  exports.parseGephi = parseGephi;

	/***/ },
	/* 122 */
	/***/ function(module, exports) {

	  'use strict';

	  // English
	  exports['en'] = {
	    edit: 'Edit',
	    del: 'Delete selected',
	    back: 'Back',
	    addNode: 'Add Node',
	    addEdge: 'Add Edge',
	    editNode: 'Edit Node',
	    editEdge: 'Edit Edge',
	    addDescription: 'Click in an empty space to place a new node.',
	    edgeDescription: 'Click on a node and drag the edge to another node to connect them.',
	    editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',
	    createEdgeError: 'Cannot link edges to a cluster.',
	    deleteClusterError: 'Clusters cannot be deleted.',
	    editClusterError: 'Clusters cannot be edited.'
	  };
	  exports['en_EN'] = exports['en'];
	  exports['en_US'] = exports['en'];

	  // German
	  exports['de'] = {
	    edit: 'Editieren',
	    del: 'L\xF6sche Auswahl',
	    back: 'Zur\xFCck',
	    addNode: 'Knoten hinzuf\xFCgen',
	    addEdge: 'Kante hinzuf\xFCgen',
	    editNode: 'Knoten editieren',
	    editEdge: 'Kante editieren',
	    addDescription: 'Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.',
	    edgeDescription: 'Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.',
	    editEdgeDescription: 'Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.',
	    createEdgeError: 'Es ist nicht m\xF6glich, Kanten mit Clustern zu verbinden.',
	    deleteClusterError: 'Cluster k\xF6nnen nicht gel\xF6scht werden.',
	    editClusterError: 'Cluster k\xF6nnen nicht editiert werden.'
	  };
	  exports['de_DE'] = exports['de'];

	  // Spanish
	  exports['es'] = {
	    edit: 'Editar',
	    del: 'Eliminar selecci\xF3n',
	    back: '\xC1tras',
	    addNode: 'A\xF1adir nodo',
	    addEdge: 'A\xF1adir arista',
	    editNode: 'Editar nodo',
	    editEdge: 'Editar arista',
	    addDescription: 'Haga clic en un lugar vac\xEDo para colocar un nuevo nodo.',
	    edgeDescription: 'Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.',
	    editEdgeDescription: 'Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.',
	    createEdgeError: 'No se puede conectar una arista a un grupo.',
	    deleteClusterError: 'No es posible eliminar grupos.',
	    editClusterError: 'No es posible editar grupos.'
	  };
	  exports['es_ES'] = exports['es'];

	  //Italiano
	  exports['it'] = {
	    edit: 'Modifica',
	    del: 'Cancella la selezione',
	    back: 'Indietro',
	    addNode: 'Aggiungi un nodo',
	    addEdge: 'Aggiungi un vertice',
	    editNode: 'Modifica il nodo',
	    editEdge: 'Modifica il vertice',
	    addDescription: 'Clicca per aggiungere un nuovo nodo',
	    edgeDescription: 'Clicca su un nodo e trascinalo ad un altro nodo per connetterli.',
	    editEdgeDescription: 'Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.',
	    createEdgeError: 'Non si possono collegare vertici ad un cluster',
	    deleteClusterError: 'I cluster non possono essere cancellati',
	    editClusterError: 'I clusters non possono essere modificati.'
	  };
	  exports['it_IT'] = exports['it'];

	  // Dutch
	  exports['nl'] = {
	    edit: 'Wijzigen',
	    del: 'Selectie verwijderen',
	    back: 'Terug',
	    addNode: 'Node toevoegen',
	    addEdge: 'Link toevoegen',
	    editNode: 'Node wijzigen',
	    editEdge: 'Link wijzigen',
	    addDescription: 'Klik op een leeg gebied om een nieuwe node te maken.',
	    edgeDescription: 'Klik op een node en sleep de link naar een andere node om ze te verbinden.',
	    editEdgeDescription: 'Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.',
	    createEdgeError: 'Kan geen link maken naar een cluster.',
	    deleteClusterError: 'Clusters kunnen niet worden verwijderd.',
	    editClusterError: 'Clusters kunnen niet worden aangepast.'
	  };
	  exports['nl_NL'] = exports['nl'];
	  exports['nl_BE'] = exports['nl'];

	  // Portuguese Brazil
	  exports['pt-br'] = {
	    edit: 'Editar',
	    del: 'Remover selecionado',
	    back: 'Voltar',
	    addNode: 'Adicionar nó',
	    addEdge: 'Adicionar aresta',
	    editNode: 'Editar nó',
	    editEdge: 'Editar aresta',
	    addDescription: 'Clique em um espaço em branco para adicionar um novo nó',
	    edgeDescription: 'Clique em um nó e arraste a aresta até outro nó para conectá-los',
	    editEdgeDescription: 'Clique nos pontos de controle e os arraste para um nó para conectá-los',
	    createEdgeError: 'Não foi possível linkar arestas a um cluster.',
	    deleteClusterError: 'Clusters não puderam ser removidos.',
	    editClusterError: 'Clusters não puderam ser editados.'
	  };
	  exports['pt-BR'] = exports['pt-br'];
	  exports['pt_BR'] = exports['pt-br'];
	  exports['pt_br'] = exports['pt-br'];

	  // Russian
	  exports['ru'] = {
	    edit: 'Редактировать',
	    del: 'Удалить выбранное',
	    back: 'Назад',
	    addNode: 'Добавить узел',
	    addEdge: 'Добавить ребро',
	    editNode: 'Редактировать узел',
	    editEdge: 'Редактировать ребро',
	    addDescription: 'Кликните в свободное место, чтобы добавить новый узел.',
	    edgeDescription: 'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',
	    editEdgeDescription: 'Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.',
	    createEdgeError: 'Невозможно соединить ребра в кластер.',
	    deleteClusterError: 'Кластеры не могут быть удалены',
	    editClusterError: 'Кластеры недоступны для редактирования.'
	  };
	  exports['ru_RU'] = exports['ru'];

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	var ContactView = function (_React$Component) {
	  _inherits(ContactView, _React$Component);

	  function ContactView() {
	    _classCallCheck(this, ContactView);

	    return _possibleConstructorReturn(this, (ContactView.__proto__ || Object.getPrototypeOf(ContactView)).apply(this, arguments));
	  }

	  _createClass(ContactView, [{
	    key: 'render',
	    value: function render() {
	      return React.createElement(
	        'div',
	        null,
	        React.createElement(
	          'li',
	          { className: 'list-group-item text-left' },
	          React.createElement('img', { src: './assets/GitHub-Mark-32px.png' }),
	          ' ',
	          React.createElement(
	            'a',
	            { href: 'https://github.com/mutaphore' },
	            'https://github.com/mutaphore'
	          )
	        ),
	        React.createElement(
	          'li',
	          { className: 'list-group-item text-left' },
	          React.createElement('img', { src: './assets/In-Black-34px-R.png' }),
	          ' ',
	          React.createElement(
	            'a',
	            { href: 'https://www.linkedin.com/in/dewei-chen-1524aba' },
	            'https://linkedin.com/in/dewei-chen-1524aba'
	          )
	        ),
	        React.createElement(
	          'li',
	          { className: 'list-group-item text-left' },
	          React.createElement('img', { src: './assets/win95/exchng32_12950.ico' }),
	          ' ',
	          React.createElement(
	            'a',
	            { href: 'mailto:dewei.chen@cs.nyu.edu' },
	            'dewei dot chen at cs.nyu.edu'
	          )
	        ),
	        React.createElement(
	          'li',
	          { className: 'list-group-item text-left' },
	          React.createElement('img', { src: './assets/win95/write_1.ico' }),
	          ' ',
	          React.createElement(
	            'a',
	            { href: 'https://mutaphore.github.io' },
	            'https://mutaphore.github.io'
	          )
	        )
	      );
	    }
	  }]);

	  return ContactView;
	}(React.Component);

	module.exports = ContactView;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	var Terminal = __webpack_require__(186);

	var TerminalView = function (_React$Component) {
	  _inherits(TerminalView, _React$Component);

	  function TerminalView(props) {
	    _classCallCheck(this, TerminalView);

	    return _possibleConstructorReturn(this, (TerminalView.__proto__ || Object.getPrototypeOf(TerminalView)).call(this, props));
	  }

	  _createClass(TerminalView, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var term = new Terminal();
	      term.init();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return React.createElement(
	        'div',
	        { className: 'term-window' },
	        React.createElement('div', { id: 'term', className: 'terminal' })
	      );
	    }
	  }]);

	  return TerminalView;
	}(React.Component);

	module.exports = TerminalView;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// import $ from "./jquery.terminal-0.8.7.min.js";

	var _JSInterpreter = __webpack_require__(187);

	var _JSInterpreter2 = _interopRequireDefault(_JSInterpreter);

	var _LinearRegression = __webpack_require__(188);

	var _LinearRegression2 = _interopRequireDefault(_LinearRegression);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Terminal = function Terminal() {
	    this.term = null;
	};

	Terminal.greetingsMsg = "==Welcome to my terminal emulator==\n\nType \"help\" to get a list of commands\nType \"clear\" to clear the screen\nType \"exit\" to exit any nested interpreters\nctrl+r for reverse search through history\n";

	Terminal.prototype.init = function () {

	    this.term = $('#term').terminal({
	        help: function help() {
	            this.echo("echo <arg>        => echoes the argument");
	            this.echo("add <arg1> <arg2> => adds two objects");
	            this.echo("js                => runs the javascript interpreter");
	            // this.echo("lr                   =>      runs linear regression");
	        },
	        echo: function echo(arg1) {
	            this.echo(arg1);
	        },
	        add: function add(a, b) {
	            this.echo(a + b);
	        },
	        js: function js() {
	            this.push(function (cmd, term) {
	                new _JSInterpreter2.default(cmd, term);
	            }, {
	                prompt: 'js> ',
	                name: 'Javascript interpreter',
	                greetings: 'JS interpreter'
	            });
	        },
	        lr: function lr() {
	            this.push(function (cmd, term) {
	                new _LinearRegression2.default(cmd, term);
	            }, {
	                prompt: '> '
	            });
	        },
	        history: function history() {
	            var data = this.history().data();
	            for (var i in data) {
	                this.echo(data[i]);
	            }
	        },
	        exit: function exit() {
	            this.pop();
	        }
	    }, {
	        prompt: '>>> ',
	        name: 'Command line',
	        greetings: Terminal.greetingsMsg,
	        onClear: function onClear(term) {
	            term.echo(Terminal.greetingsMsg);
	        }
	    });
	};

	module.exports = Terminal;

/***/ },
/* 187 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (cmd, term) {
	    if (cmd !== '') {
	        try {
	            var result = window.eval(cmd);
	            if (result !== undefined) {
	                term.echo(new String(result));
	            }
	        } catch (e) {
	            term.error(new String(e));
	        }
	    } else {
	        term.echo('');
	    }
	};

/***/ },
/* 188 */
/***/ function(module, exports) {

	'use strict';

	var LinearRegression = function LinearRegression(cmd, term) {

		term.echo('==Linear regression==');
		term.echo('Enter number of features (n): ');
		if (cmd != '') {} else term.echo('');
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _icon = __webpack_require__(190);

	var _icon2 = _interopRequireDefault(_icon);

	var _explorer = __webpack_require__(191);

	var _explorer2 = _interopRequireDefault(_explorer);

	var _constants = __webpack_require__(3);

	var _constants2 = _interopRequireDefault(_constants);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	var Desktop = function (_React$Component) {
	  _inherits(Desktop, _React$Component);

	  function Desktop(props) {
	    _classCallCheck(this, Desktop);

	    var _this = _possibleConstructorReturn(this, (Desktop.__proto__ || Object.getPrototypeOf(Desktop)).call(this, props));

	    var self = _this;
	    // initialize icons
	    var icons = [];
	    _this.props.views.forEach(function (view) {
	      icons.push(React.createElement(_icon2.default, { key: view,
	        title: _constants2.default.get(view).title,
	        icon: _constants2.default.get(view).icon,
	        selectView: self.selectView.bind(self, view) }));
	    });
	    // add help icon (no view)
	    icons.push(React.createElement(_icon2.default, { key: "help",
	      icon: _constants2.default.get("help").icon,
	      popover: _constants2.default.get("help").popover }));
	    icons.push(React.createElement(_icon2.default, { key: "trash",
	      icon: _constants2.default.get("trash").icon,
	      popover: _constants2.default.get("trash").popover }));
	    _this.state = {
	      icons: icons
	    };
	    return _this;
	  }

	  _createClass(Desktop, [{
	    key: "selectView",
	    value: function selectView(view) {
	      this.props.selectView(view);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var view = this.props.selectedView;
	      return React.createElement(
	        "div",
	        { id: "desktop" },
	        view === "home" && this.state.icons,
	        view !== "home" && React.createElement(_explorer2.default, { selectedView: this.props.selectedView,
	          closeView: this.selectView.bind(this, "home"),
	          width: _constants2.default.get(view).width,
	          height: _constants2.default.get(view).height })
	      );
	    }
	  }]);

	  return Desktop;
	}(React.Component);

	module.exports = Desktop;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	var Icon = function (_React$Component) {
	  _inherits(Icon, _React$Component);

	  function Icon() {
	    _classCallCheck(this, Icon);

	    return _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).apply(this, arguments));
	  }

	  _createClass(Icon, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      $('[data-toggle="popover"]').popover({
	        html: true,
	        trigger: 'focus'
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return React.createElement(
	        'div',
	        { id: this.props.id + "-id", className: 'media' },
	        React.createElement(
	          'div',
	          { className: 'media-left media-middle' },
	          React.createElement(
	            'a',
	            { href: '#', onClick: this.props.selectView, 'data-toggle': this.props.popover && "popover", 'data-content': this.props.popover },
	            React.createElement('img', { className: 'media-object', src: this.props.icon })
	          )
	        ),
	        React.createElement(
	          'div',
	          { className: 'media-body', style: { color: "#F5F5F5" } },
	          React.createElement(
	            'h4',
	            { className: 'media-heading' },
	            this.props.title
	          )
	        )
	      );
	    }
	  }]);

	  return Icon;
	}(React.Component);

	module.exports = Icon;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _constants = __webpack_require__(3);

	var _constants2 = _interopRequireDefault(_constants);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(5);
	var ReactDOM = __webpack_require__(36);

	var Explorer = function (_React$Component) {
	  _inherits(Explorer, _React$Component);

	  function Explorer(props) {
	    _classCallCheck(this, Explorer);

	    return _possibleConstructorReturn(this, (Explorer.__proto__ || Object.getPrototypeOf(Explorer)).call(this, props));
	  }

	  _createClass(Explorer, [{
	    key: 'render',
	    value: function render() {
	      var explorerStyle = {
	        width: this.props.width
	      };
	      var explorerAreaStyle = {
	        height: this.props.height
	      };
	      // create the view component
	      var view = React.createElement(_constants2.default.get(this.props.selectedView).view);
	      return React.createElement(
	        'div',
	        { className: 'explorer', style: explorerStyle },
	        React.createElement(
	          'div',
	          { className: 'explorer-bar text-center' },
	          React.createElement(
	            'div',
	            { className: 'explorer-close-btn' },
	            React.createElement(
	              'button',
	              { className: 'btn btn-danger btn-xs', onClick: this.props.closeView },
	              React.createElement('span', { className: 'glyphicon glyphicon-remove' })
	            )
	          ),
	          React.createElement(
	            'span',
	            null,
	            this.props.selectedView.toUpperCase()
	          )
	        ),
	        React.createElement(
	          'div',
	          { className: 'explorer-area', style: explorerAreaStyle },
	          view
	        )
	      );
	    }
	  }]);

	  return Explorer;
	}(React.Component);

	module.exports = Explorer;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createMemoryHistory = exports.hashHistory = exports.browserHistory = exports.applyRouterMiddleware = exports.formatPattern = exports.useRouterHistory = exports.match = exports.routerShape = exports.locationShape = exports.RouterContext = exports.createRoutes = exports.Route = exports.Redirect = exports.IndexRoute = exports.IndexRedirect = exports.withRouter = exports.IndexLink = exports.Link = exports.Router = undefined;

	var _RouteUtils = __webpack_require__(193);

	Object.defineProperty(exports, 'createRoutes', {
	  enumerable: true,
	  get: function get() {
	    return _RouteUtils.createRoutes;
	  }
	});

	var _PropTypes = __webpack_require__(194);

	Object.defineProperty(exports, 'locationShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes.locationShape;
	  }
	});
	Object.defineProperty(exports, 'routerShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes.routerShape;
	  }
	});

	var _PatternUtils = __webpack_require__(195);

	Object.defineProperty(exports, 'formatPattern', {
	  enumerable: true,
	  get: function get() {
	    return _PatternUtils.formatPattern;
	  }
	});

	var _Router2 = __webpack_require__(197);

	var _Router3 = _interopRequireDefault(_Router2);

	var _Link2 = __webpack_require__(213);

	var _Link3 = _interopRequireDefault(_Link2);

	var _IndexLink2 = __webpack_require__(214);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	var _withRouter2 = __webpack_require__(215);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	var _IndexRedirect2 = __webpack_require__(217);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	var _IndexRoute2 = __webpack_require__(219);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	var _Redirect2 = __webpack_require__(218);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(220);

	var _Route3 = _interopRequireDefault(_Route2);

	var _RouterContext2 = __webpack_require__(209);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	var _match2 = __webpack_require__(221);

	var _match3 = _interopRequireDefault(_match2);

	var _useRouterHistory2 = __webpack_require__(234);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	var _applyRouterMiddleware2 = __webpack_require__(235);

	var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);

	var _browserHistory2 = __webpack_require__(236);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	var _hashHistory2 = __webpack_require__(244);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	var _createMemoryHistory2 = __webpack_require__(223);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Router = _Router3.default; /* components */

	exports.Link = _Link3.default;
	exports.IndexLink = _IndexLink3.default;
	exports.withRouter = _withRouter3.default;

	/* components (configuration) */

	exports.IndexRedirect = _IndexRedirect3.default;
	exports.IndexRoute = _IndexRoute3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;

	/* utils */

	exports.RouterContext = _RouterContext3.default;
	exports.match = _match3.default;
	exports.useRouterHistory = _useRouterHistory3.default;
	exports.applyRouterMiddleware = _applyRouterMiddleware3.default;

	/* histories */

	exports.browserHistory = _browserHistory3.default;
	exports.hashHistory = _hashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isValidChild(object) {
	  return object == null || _react2.default.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */
	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2.default.Children.forEach(children, function (element) {
	    if (_react2.default.isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */
	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.locationShape = exports.routerShape = undefined;

	var _react = __webpack_require__(5);

	var func = _react.PropTypes.func,
	    object = _react.PropTypes.object,
	    shape = _react.PropTypes.shape,
	    string = _react.PropTypes.string;
	var routerShape = exports.routerShape = shape({
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired,
	  setRouteLeaveHook: func.isRequired,
	  isActive: func.isRequired
	});

	var locationShape = exports.locationShape = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = void 0,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '(.*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '(.*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = Object.create(null);

	function compilePattern(pattern) {
	  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 *  The function calls callback(error, matched) when finished.
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */
	function matchPattern(pattern, pathname) {
	  // Ensure pattern starts with leading slash for consistency with pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }

	  var _compilePattern2 = compilePattern(pattern),
	      regexpSource = _compilePattern2.regexpSource,
	      paramNames = _compilePattern2.paramNames,
	      tokens = _compilePattern2.tokens;

	  if (pattern.charAt(pattern.length - 1) !== '/') {
	    regexpSource += '/?'; // Allow optional path separator at end.
	  }

	  // Special-case patterns like '*' for catch-all routes.
	  if (tokens[tokens.length - 1] === '*') {
	    regexpSource += '$';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));
	  if (match == null) {
	    return null;
	  }

	  var matchedPath = match[0];
	  var remainingPathname = pathname.substr(matchedPath.length);

	  if (remainingPathname) {
	    // Require that the match ends at a path separator, if we didn't match
	    // the full path, so any remaining pathname is a new path segment.
	    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
	      return null;
	    }

	    // If there is a remaining pathname, treat the path separator as part of
	    // the remaining pathname for properly continuing the match.
	    remainingPathname = '/' + remainingPathname;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: match.slice(1).map(function (v) {
	      return v && decodeURIComponent(v);
	    })
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var match = matchPattern(pattern, pathname);
	  if (!match) {
	    return null;
	  }

	  var paramNames = match.paramNames,
	      paramValues = match.paramValues;

	  var params = {};

	  paramNames.forEach(function (paramName, index) {
	    params[paramName] = paramValues[index];
	  });

	  return params;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */
	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern),
	      tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0,
	      parenHistory = [];

	  var token = void 0,
	      paramName = void 0,
	      paramValue = void 0;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenHistory[parenCount] = '';
	      parenCount += 1;
	    } else if (token === ')') {
	      var parenText = parenHistory.pop();
	      parenCount -= 1;

	      if (parenCount) parenHistory[parenCount - 1] += parenText;else pathname += parenText;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue == null) {
	        if (parenCount) {
	          parenHistory[parenCount - 1] = '';

	          var curTokenIdx = tokens.indexOf(token);
	          var tokensSubset = tokens.slice(curTokenIdx, tokens.length);
	          var nextParenIdx = -1;

	          for (var _i = 0; _i < tokensSubset.length; _i++) {
	            if (tokensSubset[_i] == ')') {
	              nextParenIdx = _i;
	              break;
	            }
	          }

	          !(nextParenIdx > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren at segment "%s"', pattern, tokensSubset.join('')) : (0, _invariant2.default)(false) : void 0;

	          // jump to ending paren
	          i = curTokenIdx + nextParenIdx - 1;
	        }
	      } else if (parenCount) parenHistory[parenCount - 1] += encodeURIComponent(paramValue);else pathname += encodeURIComponent(paramValue);
	    } else {
	      if (parenCount) parenHistory[parenCount - 1] += token;else pathname += token;
	    }
	  }

	  !(parenCount <= 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren', pattern) : (0, _invariant2.default)(false) : void 0;

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager2 = __webpack_require__(198);

	var _createTransitionManager3 = _interopRequireDefault(_createTransitionManager2);

	var _InternalPropTypes = __webpack_require__(208);

	var _RouterContext = __webpack_require__(209);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(193);

	var _RouterUtils = __webpack_require__(212);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _React$PropTypes = _react2.default.PropTypes,
	    func = _React$PropTypes.func,
	    object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */

	var Router = _react2.default.createClass({
	  displayName: 'Router',


	  propTypes: {
	    history: object,
	    children: _InternalPropTypes.routes,
	    routes: _InternalPropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2.default.createElement(_RouterContext2.default, props);
	      }
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },
	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },
	  createRouterObject: function createRouterObject(state) {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext.router;
	    }

	    var history = this.props.history;

	    return (0, _RouterUtils.createRouterObject)(history, this.transitionManager, state);
	  },
	  createTransitionManager: function createTransitionManager() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext.transitionManager;
	    }

	    var history = this.props.history;
	    var _props = this.props,
	        routes = _props.routes,
	        children = _props.children;


	    !history.getCurrentLocation ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You have provided a history object created with history v2.x or ' + 'earlier. This version of React Router is only compatible with v3 ' + 'history objects. Please upgrade to history v3.x.') : (0, _invariant2.default)(false) : void 0;

	    return (0, _createTransitionManager3.default)(history, (0, _RouteUtils.createRoutes)(routes || children));
	  },
	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    this.transitionManager = this.createTransitionManager();
	    this.router = this.createRouterObject(this.state);

	    this._unlisten = this.transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        // Keep the identity of this.router because of a caveat in ContextUtils:
	        // they only work if the object identity is preserved.
	        (0, _RouterUtils.assignRouterState)(_this.router, state);
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });
	  },


	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : void 0;

	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : void 0;
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },
	  render: function render() {
	    var _state = this.state,
	        location = _state.location,
	        routes = _state.routes,
	        params = _state.params,
	        components = _state.components;

	    var _props2 = this.props,
	        createElement = _props2.createElement,
	        render = _props2.render,
	        props = _objectWithoutProperties(_props2, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }
	});

	exports.default = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = createTransitionManager;

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _computeChangedRoutes2 = __webpack_require__(201);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(202);

	var _isActive2 = __webpack_require__(204);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(205);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(207);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location, indexOnly) {
	    location = history.createLocation(location);

	    return (0, _isActive3.default)(location, indexOnly, state.location, state.routes, state.params);
	  }

	  var partialNextState = void 0;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = (0, _computeChangedRoutes3.default)(state, nextState),
	        leaveRoutes = _computeChangedRoutes.leaveRoutes,
	        changeRoutes = _computeChangedRoutes.changeRoutes,
	        enterRoutes = _computeChangedRoutes.enterRoutes;

	    (0, _TransitionUtils.runLeaveHooks)(leaveRoutes, state);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    // change and enter hooks are run in series
	    (0, _TransitionUtils.runChangeHooks)(changeRoutes, state, nextState, function (error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      (0, _TransitionUtils.runEnterHooks)(enterRoutes, nextState, finishEnterHooks);
	    });

	    function finishEnterHooks(error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      // TODO: Fetch components after state is updated.
	      (0, _getComponents2.default)(nextState, function (error, components) {
	        if (error) {
	          callback(error);
	        } else {
	          // TODO: Make match a pure function and have some other API
	          // for "match and update state".
	          callback(null, null, state = _extends({}, nextState, { components: components }));
	        }
	      });
	    }

	    function handleErrorOrRedirect(error, redirectInfo) {
	      if (error) callback(error);else callback(null, redirectInfo);
	    }
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = Object.create(null);

	  function getRouteHooksForRoutes(routes) {
	    return routes.map(function (route) {
	      return RouteHooks[getRouteID(route)];
	    }).filter(function (hook) {
	      return hook;
	    });
	  }

	  function transitionHook(location, callback) {
	    (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes((0, _computeChangedRoutes3.default)(state, partialNextState).leaveRoutes);

	      var result = void 0;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = void 0;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = void 0,
	      unlistenBeforeUnload = void 0;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and can return either a prompt message (string) to show the user,
	   * to make sure they want to leave the page; or `false`, to prevent the transition.
	   * Any other return value will have no effect.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);
	    var routeID = getRouteID(route, true);

	    RouteHooks[routeID] = hook;

	    if (thereWereNoRouteHooks) {
	      // setup transition & beforeunload hooks
	      unlistenBefore = history.listenBefore(transitionHook);

	      if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	    }

	    return function () {
	      removeListenBeforeHooksForRoute(route);
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    function historyListener(location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.replace(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : void 0;
	          }
	        });
	      }
	    }

	    // TODO: Only use a single history listener. Otherwise we'll end up with
	    // multiple concurrent calls to match.

	    // Set up the history listener first in case the initial match redirects.
	    var unsubscribe = history.listen(historyListener);

	    if (state.location) {
	      // Picking up on a matchContext.
	      listener(null, state);
	    } else {
	      historyListener(history.getCurrentLocation());
	    }

	    return unsubscribe;
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = routerWarning;
	exports._resetWarned = _resetWarned;

	var _warning = __webpack_require__(200);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var warned = {};

	function routerWarning(falseToWarn, message) {
	  // Only issue deprecation warnings once.
	  if (message.indexOf('deprecated') !== -1) {
	    if (warned[message]) {
	      return;
	    }

	    warned[message] = true;
	  }

	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  _warning2.default.apply(undefined, [falseToWarn, message].concat(args));
	}

	function _resetWarned() {
	  warned = {};
	}

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(195);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = (0, _PatternUtils.getParamNames)(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 *
	 * changeRoutes are any routes that didn't leave or enter during
	 * the transition.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = void 0,
	      changeRoutes = void 0,
	      enterRoutes = void 0;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = [];
	      changeRoutes = [];

	      nextRoutes.forEach(function (route) {
	        var isNew = prevRoutes.indexOf(route) === -1;
	        var paramsChanged = leaveRoutes.indexOf(route) !== -1;

	        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    changeRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    changeRoutes: changeRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports.default = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runChangeHooks = runChangeHooks;
	exports.runLeaveHooks = runLeaveHooks;

	var _AsyncUtils = __webpack_require__(203);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PendingHooks = function PendingHooks() {
	  var _this = this;

	  _classCallCheck(this, PendingHooks);

	  this.hooks = [];

	  this.add = function (hook) {
	    return _this.hooks.push(hook);
	  };

	  this.remove = function (hook) {
	    return _this.hooks = _this.hooks.filter(function (h) {
	      return h !== hook;
	    });
	  };

	  this.has = function (hook) {
	    return _this.hooks.indexOf(hook) !== -1;
	  };

	  this.clear = function () {
	    return _this.hooks = [];
	  };
	};

	var enterHooks = new PendingHooks();
	var changeHooks = new PendingHooks();

	function createTransitionHook(hook, route, asyncArity, pendingHooks) {
	  var isSync = hook.length < asyncArity;

	  var transitionHook = function transitionHook() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    hook.apply(route, args);

	    if (isSync) {
	      var callback = args[args.length - 1];
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };

	  pendingHooks.add(transitionHook);

	  return transitionHook;
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3, enterHooks));
	    return hooks;
	  }, []);
	}

	function getChangeHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4, changeHooks));
	    return hooks;
	  }, []);
	}

	function runTransitionHooks(length, iter, callback) {
	  if (!length) {
	    callback();
	    return;
	  }

	  var redirectInfo = void 0;
	  function replace(location) {
	    redirectInfo = location;
	  }

	  (0, _AsyncUtils.loopAsync)(length, function (index, next, done) {
	    iter(index, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runEnterHooks(routes, nextState, callback) {
	  enterHooks.clear();
	  var hooks = getEnterHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    var wrappedNext = function wrappedNext() {
	      if (enterHooks.has(hooks[index])) {
	        next();
	        enterHooks.remove(hooks[index]);
	      }
	    };
	    hooks[index](nextState, replace, wrappedNext);
	  }, callback);
	}

	/**
	 * Runs all onChange hooks in the given array of routes in order
	 * with onChange(prevState, nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runChangeHooks(routes, state, nextState, callback) {
	  changeHooks.clear();
	  var hooks = getChangeHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    var wrappedNext = function wrappedNext() {
	      if (changeHooks.has(hooks[index])) {
	        next();
	        changeHooks.remove(hooks[index]);
	      }
	    };
	    hooks[index](state, nextState, replace, wrappedNext);
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */
	function runLeaveHooks(routes, prevState) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i], prevState);
	  }
	}

/***/ },
/* 203 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(Array.prototype.slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.default = isActive;

	var _PatternUtils = __webpack_require__(195);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
	    for (var p in a) {
	      if (!Object.prototype.hasOwnProperty.call(a, p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	/**
	 * Returns true if the current pathname matches the supplied one, net of
	 * leading and trailing slash normalization. This is sufficient for an
	 * indexOnly route match.
	 */
	function pathIsActive(pathname, currentPathname) {
	  // Normalize leading slash for consistency. Leading slash on pathname has
	  // already been normalized in isActive. See caveat there.
	  if (currentPathname.charAt(0) !== '/') {
	    currentPathname = '/' + currentPathname;
	  }

	  // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
	  // `/foo` as active, but in this case, we would already have failed the
	  // match.
	  if (pathname.charAt(pathname.length - 1) !== '/') {
	    pathname += '/';
	  }
	  if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
	    currentPathname += '/';
	  }

	  return currentPathname === pathname;
	}

	/**
	 * Returns true if the given pathname matches the active routes and params.
	 */
	function routeIsActive(pathname, routes, params) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  // for...of would work here but it's probably slower post-transpilation.
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    var route = routes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null && pattern) {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }

	      if (remainingPathname === '') {
	        // We have an exact match on the route. Just check that all the params
	        // match.
	        // FIXME: This doesn't work on repeated params.
	        return paramNames.every(function (paramName, index) {
	          return String(paramValues[index]) === String(params[paramName]);
	        });
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */
	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname,
	      query = _ref.query;

	  if (currentLocation == null) return false;

	  // TODO: This is a bit ugly. It keeps around support for treating pathnames
	  // without preceding slashes as absolute paths, but possibly also works
	  // around the same quirks with basenames as in matchRoutes.
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  if (!pathIsActive(pathname, currentLocation.pathname)) {
	    // The path check is necessary and sufficient for indexOnly, but otherwise
	    // we still need to check the routes.
	    if (indexOnly || !routeIsActive(pathname, routes, params)) {
	      return false;
	    }
	  }

	  return queryIsActive(query, currentLocation.query);
	}
	module.exports = exports['default'];

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(203);

	var _PromiseUtils = __webpack_require__(206);

	function getComponentsForRoute(nextState, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	    return;
	  }

	  var getComponent = route.getComponent || route.getComponents;
	  if (getComponent) {
	    var componentReturn = getComponent.call(route, nextState, callback);
	    if ((0, _PromiseUtils.isPromise)(componentReturn)) componentReturn.then(function (component) {
	      return callback(null, component);
	    }, callback);
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  (0, _AsyncUtils.mapAsync)(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState, route, callback);
	  }, callback);
	}

	exports.default = getComponents;
	module.exports = exports['default'];

/***/ },
/* 206 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.isPromise = isPromise;
	function isPromise(obj) {
	  return obj && typeof obj.then === 'function';
	}

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.default = matchRoutes;

	var _AsyncUtils = __webpack_require__(203);

	var _PromiseUtils = __webpack_require__(206);

	var _PatternUtils = __webpack_require__(195);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _RouteUtils = __webpack_require__(193);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getChildRoutes(route, location, paramNames, paramValues, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = void 0;

	  var partialNextState = {
	    location: location,
	    params: createParams(paramNames, paramValues)
	  };

	  var childRoutesReturn = route.getChildRoutes(partialNextState, function (error, childRoutes) {
	    childRoutes = !error && (0, _RouteUtils.createRoutes)(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  if ((0, _PromiseUtils.isPromise)(childRoutesReturn)) childRoutesReturn.then(function (childRoutes) {
	    return callback(null, (0, _RouteUtils.createRoutes)(childRoutes));
	  }, callback);

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, paramNames, paramValues, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    var partialNextState = {
	      location: location,
	      params: createParams(paramNames, paramValues)
	    };

	    var indexRoutesReturn = route.getIndexRoute(partialNextState, function (error, indexRoute) {
	      callback(error, !error && (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    });

	    if ((0, _PromiseUtils.isPromise)(indexRoutesReturn)) indexRoutesReturn.then(function (indexRoute) {
	      return callback(null, (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    }, callback);
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (childRoute) {
	        return !childRoute.path;
	      });

	      (0, _AsyncUtils.loopAsync)(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, paramNames, paramValues, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  // Only try to match the path if the route actually has a pattern, and if
	  // we're not just searching for potential nested absolute paths.
	  if (remainingPathname !== null && pattern) {
	    try {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }
	    } catch (error) {
	      callback(error);
	    }

	    // By assumption, pattern is non-empty here, which is the prerequisite for
	    // actually terminating a match.
	    if (remainingPathname === '') {
	      var _ret2 = function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, paramNames, paramValues, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : void 0;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!indexRoute.path, 'Index routes should not have paths') : void 0;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });

	        return {
	          v: void 0
	        };
	      }();

	      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback, remainingPathname) {
	  var paramNames = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
	  var paramValues = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];

	  if (remainingPathname === undefined) {
	    // TODO: This is a little bit ugly, but it works around a quirk in history
	    // that strips the leading slash from pathnames when using basenames with
	    // trailing slashes.
	    if (location.pathname.charAt(0) !== '/') {
	      location = _extends({}, location, {
	        pathname: '/' + location.pathname
	      });
	    }
	    remainingPathname = location.pathname;
	  }

	  (0, _AsyncUtils.loopAsync)(routes.length, function (index, next, done) {
	    matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	      if (error || match) {
	        done(error, match);
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.routes = exports.route = exports.components = exports.component = exports.history = undefined;
	exports.falsy = falsy;

	var _react = __webpack_require__(5);

	var func = _react.PropTypes.func,
	    object = _react.PropTypes.object,
	    arrayOf = _react.PropTypes.arrayOf,
	    oneOfType = _react.PropTypes.oneOfType,
	    element = _react.PropTypes.element,
	    shape = _react.PropTypes.shape,
	    string = _react.PropTypes.string;
	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = exports.history = shape({
	  listen: func.isRequired,
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired
	});

	var component = exports.component = oneOfType([func, string]);
	var components = exports.components = oneOfType([component, object]);
	var route = exports.route = oneOfType([object, element]);
	var routes = exports.routes = oneOfType([route, arrayOf(route)]);

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _getRouteParams = __webpack_require__(210);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _ContextUtils = __webpack_require__(211);

	var _RouteUtils = __webpack_require__(193);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    array = _React$PropTypes.array,
	    func = _React$PropTypes.func,
	    object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */

	var RouterContext = _react2.default.createClass({
	  displayName: 'RouterContext',


	  mixins: [(0, _ContextUtils.ContextProvider)('router')],

	  propTypes: {
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2.default.createElement
	    };
	  },


	  childContextTypes: {
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      router: this.props.router
	    };
	  },
	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },
	  render: function render() {
	    var _this = this;

	    var _props = this.props,
	        location = _props.location,
	        routes = _props.routes,
	        params = _props.params,
	        components = _props.components,
	        router = _props.router;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = (0, _getRouteParams2.default)(route, params);
	        var props = {
	          location: location,
	          params: params,
	          route: route,
	          router: router,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if ((0, _RouteUtils.isReactChildren)(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
	          }
	        }

	        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (Object.prototype.hasOwnProperty.call(components, key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2.default.isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The root route must render a single element') : (0, _invariant2.default)(false) : void 0;

	    return element;
	  }
	});

	exports.default = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(195);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  (0, _PatternUtils.getParamNames)(route.path).forEach(function (p) {
	    if (Object.prototype.hasOwnProperty.call(params, p)) {
	      routeParams[p] = params[p];
	    }
	  });

	  return routeParams;
	}

	exports.default = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ContextProvider = ContextProvider;
	exports.ContextSubscriber = ContextSubscriber;

	var _react = __webpack_require__(5);

	// Works around issues with context updates failing to propagate.
	// Caveat: the context value is expected to never change its identity.
	// https://github.com/facebook/react/issues/2517
	// https://github.com/reactjs/react-router/issues/470

	var contextProviderShape = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  eventIndex: _react.PropTypes.number.isRequired
	});

	function makeContextName(name) {
	  return '@@contextSubscriber/' + name;
	}

	function ContextProvider(name) {
	  var _childContextTypes, _ref2;

	  var contextName = makeContextName(name);
	  var listenersKey = contextName + '/listeners';
	  var eventIndexKey = contextName + '/eventIndex';
	  var subscribeKey = contextName + '/subscribe';

	  return _ref2 = {
	    childContextTypes: (_childContextTypes = {}, _childContextTypes[contextName] = contextProviderShape.isRequired, _childContextTypes),

	    getChildContext: function getChildContext() {
	      var _ref;

	      return _ref = {}, _ref[contextName] = {
	        eventIndex: this[eventIndexKey],
	        subscribe: this[subscribeKey]
	      }, _ref;
	    },
	    componentWillMount: function componentWillMount() {
	      this[listenersKey] = [];
	      this[eventIndexKey] = 0;
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this[eventIndexKey]++;
	    },
	    componentDidUpdate: function componentDidUpdate() {
	      var _this = this;

	      this[listenersKey].forEach(function (listener) {
	        return listener(_this[eventIndexKey]);
	      });
	    }
	  }, _ref2[subscribeKey] = function (listener) {
	    var _this2 = this;

	    // No need to immediately call listener here.
	    this[listenersKey].push(listener);

	    return function () {
	      _this2[listenersKey] = _this2[listenersKey].filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }, _ref2;
	}

	function ContextSubscriber(name) {
	  var _contextTypes, _ref4;

	  var contextName = makeContextName(name);
	  var lastRenderedEventIndexKey = contextName + '/lastRenderedEventIndex';
	  var handleContextUpdateKey = contextName + '/handleContextUpdate';
	  var unsubscribeKey = contextName + '/unsubscribe';

	  return _ref4 = {
	    contextTypes: (_contextTypes = {}, _contextTypes[contextName] = contextProviderShape, _contextTypes),

	    getInitialState: function getInitialState() {
	      var _ref3;

	      if (!this.context[contextName]) {
	        return {};
	      }

	      return _ref3 = {}, _ref3[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _ref3;
	    },
	    componentDidMount: function componentDidMount() {
	      if (!this.context[contextName]) {
	        return;
	      }

	      this[unsubscribeKey] = this.context[contextName].subscribe(this[handleContextUpdateKey]);
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      var _setState;

	      if (!this.context[contextName]) {
	        return;
	      }

	      this.setState((_setState = {}, _setState[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _setState));
	    },
	    componentWillUnmount: function componentWillUnmount() {
	      if (!this[unsubscribeKey]) {
	        return;
	      }

	      this[unsubscribeKey]();
	      this[unsubscribeKey] = null;
	    }
	  }, _ref4[handleContextUpdateKey] = function (eventIndex) {
	    if (eventIndex !== this.state[lastRenderedEventIndexKey]) {
	      var _setState2;

	      this.setState((_setState2 = {}, _setState2[lastRenderedEventIndexKey] = eventIndex, _setState2));
	    }
	  }, _ref4;
	}

/***/ },
/* 212 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.createRouterObject = createRouterObject;
	exports.assignRouterState = assignRouterState;
	function createRouterObject(history, transitionManager, state) {
	  var router = _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });

	  return assignRouterState(router, state);
	}

	function assignRouterState(router, _ref) {
	  var location = _ref.location,
	      params = _ref.params,
	      routes = _ref.routes;

	  router.location = location;
	  router.params = params;
	  router.routes = routes;

	  return router;
	}

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PropTypes = __webpack_require__(194);

	var _ContextUtils = __webpack_require__(211);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _React$PropTypes = _react2.default.PropTypes,
	    bool = _React$PropTypes.bool,
	    object = _React$PropTypes.object,
	    string = _React$PropTypes.string,
	    func = _React$PropTypes.func,
	    oneOfType = _React$PropTypes.oneOfType;


	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
	function isEmptyObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return false;
	  }return true;
	}

	function resolveToLocation(to, router) {
	  return typeof to === 'function' ? to(router.location) : to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2.default.createClass({
	  displayName: 'Link',


	  mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

	  contextTypes: {
	    router: _PropTypes.routerShape
	  },

	  propTypes: {
	    to: oneOfType([string, object, func]),
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func,
	    target: string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      style: {}
	    };
	  },
	  handleClick: function handleClick(event) {
	    if (this.props.onClick) this.props.onClick(event);

	    if (event.defaultPrevented) return;

	    var router = this.context.router;

	    !router ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Link>s rendered outside of a router context cannot navigate.') : (0, _invariant2.default)(false) : void 0;

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    // If target prop is set (e.g. to "_blank"), let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) return;

	    event.preventDefault();

	    router.push(resolveToLocation(this.props.to, router));
	  },
	  render: function render() {
	    var _props = this.props,
	        to = _props.to,
	        activeClassName = _props.activeClassName,
	        activeStyle = _props.activeStyle,
	        onlyActiveOnIndex = _props.onlyActiveOnIndex,
	        props = _objectWithoutProperties(_props, ['to', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    // Ignore if rendered outside the context of router to simplify unit testing.


	    var router = this.context.router;


	    if (router) {
	      // If user does not specify a `to` prop, return an empty anchor tag.
	      if (to == null) {
	        return _react2.default.createElement('a', props);
	      }

	      var toLocation = resolveToLocation(to, router);
	      props.href = router.createHref(toLocation);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(toLocation, onlyActiveOnIndex)) {
	          if (activeClassName) {
	            if (props.className) {
	              props.className += ' ' + activeClassName;
	            } else {
	              props.className = activeClassName;
	            }
	          }

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }
	});

	exports.default = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(213);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2.default.createClass({
	  displayName: 'IndexLink',
	  render: function render() {
	    return _react2.default.createElement(_Link2.default, _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }
	});

	exports.default = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = withRouter;

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _hoistNonReactStatics = __webpack_require__(216);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _ContextUtils = __webpack_require__(211);

	var _PropTypes = __webpack_require__(194);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	function withRouter(WrappedComponent, options) {
	  var withRef = options && options.withRef;

	  var WithRouter = _react2.default.createClass({
	    displayName: 'WithRouter',

	    mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

	    contextTypes: { router: _PropTypes.routerShape },
	    propTypes: { router: _PropTypes.routerShape },

	    getWrappedInstance: function getWrappedInstance() {
	      !withRef ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'To access the wrapped instance, you need to specify ' + '`{ withRef: true }` as the second argument of the withRouter() call.') : (0, _invariant2.default)(false) : void 0;

	      return this.wrappedInstance;
	    },
	    render: function render() {
	      var _this = this;

	      var router = this.props.router || this.context.router;
	      var params = router.params,
	          location = router.location,
	          routes = router.routes;

	      var props = _extends({}, this.props, { router: router, params: params, location: location, routes: routes });

	      if (withRef) {
	        props.ref = function (c) {
	          _this.wrappedInstance = c;
	        };
	      }

	      return _react2.default.createElement(WrappedComponent, props);
	    }
	  });

	  WithRouter.displayName = 'withRouter(' + getDisplayName(WrappedComponent) + ')';
	  WithRouter.WrappedComponent = WrappedComponent;

	  return (0, _hoistNonReactStatics2.default)(WithRouter, WrappedComponent);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 216 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);

	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {

	                }
	            }
	        }
	    }

	    return targetComponent;
	};


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(218);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _InternalPropTypes = __webpack_require__(208);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */
	/* eslint-disable react/require-render-return */

	var IndexRedirect = _react2.default.createClass({
	  displayName: 'IndexRedirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2.default.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRedirect> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(193);

	var _PatternUtils = __webpack_require__(195);

	var _InternalPropTypes = __webpack_require__(208);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */
	/* eslint-disable react/require-render-return */

	var Redirect = _react2.default.createClass({
	  displayName: 'Redirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = (0, _RouteUtils.createRouteFromReactElement)(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location,
	            params = nextState.params;


	        var pathname = void 0;
	        if (route.to.charAt(0) === '/') {
	          pathname = (0, _PatternUtils.formatPattern)(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = (0, _PatternUtils.formatPattern)(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },
	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }
	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Redirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(193);

	var _InternalPropTypes = __webpack_require__(208);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var func = _react2.default.PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */
	/* eslint-disable react/require-render-return */

	var IndexRoute = _react2.default.createClass({
	  displayName: 'IndexRoute',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = (0, _RouteUtils.createRouteFromReactElement)(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRoute> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    path: _InternalPropTypes.falsy,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRoute> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(193);

	var _InternalPropTypes = __webpack_require__(208);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */
	/* eslint-disable react/require-render-return */

	var Route = _react2.default.createClass({
	  displayName: 'Route',


	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Route> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _Actions = __webpack_require__(222);

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _createMemoryHistory = __webpack_require__(223);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _createTransitionManager = __webpack_require__(198);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _RouteUtils = __webpack_require__(193);

	var _RouterUtils = __webpack_require__(212);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history,
	      routes = _ref.routes,
	      location = _ref.location,
	      options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

	  !(history || location) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'match needs a history or a location') : (0, _invariant2.default)(false) : void 0;

	  history = history ? history : (0, _createMemoryHistory2.default)(options);
	  var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes));

	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    location = history.getCurrentLocation();
	  }

	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    var renderProps = void 0;

	    if (nextState) {
	      var router = (0, _RouterUtils.createRouterObject)(history, transitionManager, nextState);
	      renderProps = _extends({}, nextState, {
	        router: router,
	        matchContext: { transitionManager: transitionManager, router: router }
	      });
	    }

	    callback(error, redirectLocation && history.createLocation(redirectLocation, _Actions.REPLACE), renderProps);
	  });
	}

	exports.default = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 222 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	var PUSH = exports.PUSH = 'PUSH';

	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = exports.REPLACE = 'REPLACE';

	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = exports.POP = 'POP';

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = createMemoryHistory;

	var _useQueries = __webpack_require__(224);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(230);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	var _createMemoryHistory = __webpack_require__(231);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useQueries` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = (0, _createMemoryHistory2.default)(options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	  return history;
	}
	module.exports = exports['default'];

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _queryString = __webpack_require__(225);

	var _runTransitionHook = __webpack_require__(227);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _LocationUtils = __webpack_require__(228);

	var _PathUtils = __webpack_require__(229);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultStringifyQuery = function defaultStringifyQuery(query) {
	  return (0, _queryString.stringify)(query).replace(/%20/g, '+');
	};

	var defaultParseQueryString = _queryString.parse;

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	var useQueries = function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);
	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;


	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    var decodeQuery = function decodeQuery(location) {
	      if (!location) return location;

	      if (location.query == null) location.query = parseQueryString(location.search.substring(1));

	      return location;
	    };

	    var encodeQuery = function encodeQuery(location, query) {
	      if (query == null) return location;

	      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
	      var queryString = stringifyQuery(query);
	      var search = queryString ? '?' + queryString : '';

	      return _extends({}, object, {
	        search: search
	      });
	    };

	    // Override all read methods with query-aware versions.
	    var getCurrentLocation = function getCurrentLocation() {
	      return decodeQuery(history.getCurrentLocation());
	    };

	    var listenBefore = function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        return (0, _runTransitionHook2.default)(hook, decodeQuery(location), callback);
	      });
	    };

	    var listen = function listen(listener) {
	      return history.listen(function (location) {
	        return listener(decodeQuery(location));
	      });
	    };

	    // Override all write methods with query-aware versions.
	    var push = function push(location) {
	      return history.push(encodeQuery(location, location.query));
	    };

	    var replace = function replace(location) {
	      return history.replace(encodeQuery(location, location.query));
	    };

	    var createPath = function createPath(location) {
	      return history.createPath(encodeQuery(location, location.query));
	    };

	    var createHref = function createHref(location) {
	      return history.createHref(encodeQuery(location, location.query));
	    };

	    var createLocation = function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var newLocation = history.createLocation.apply(history, [encodeQuery(location, location.query)].concat(args));

	      if (location.query) newLocation.query = (0, _LocationUtils.createQuery)(location.query);

	      return decodeQuery(newLocation);
	    };

	    return _extends({}, history, {
	      getCurrentLocation: getCurrentLocation,
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation
	    });
	  };
	};

	exports.default = useQueries;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(226);
	var objectAssign = __webpack_require__(8);

	function encode(value, opts) {
		if (opts.encode) {
			return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
		}

		return value;
	}

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		// Create an object with no prototype
		// https://github.com/sindresorhus/query-string/issues/47
		var ret = Object.create(null);

		if (typeof str !== 'string') {
			return ret;
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return ret;
		}

		str.split('&').forEach(function (param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (ret[key] === undefined) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}
		});

		return ret;
	};

	exports.stringify = function (obj, opts) {
		var defaults = {
			encode: true,
			strict: true
		};

		opts = objectAssign(defaults, opts);

		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return encode(key, opts);
			}

			if (Array.isArray(val)) {
				var result = [];

				val.slice().forEach(function (val2) {
					if (val2 === undefined) {
						return;
					}

					if (val2 === null) {
						result.push(encode(key, opts));
					} else {
						result.push(encode(key, opts) + '=' + encode(val2, opts));
					}
				});

				return result.join('&');
			}

			return encode(key, opts) + '=' + encode(val, opts);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 226 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(200);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var runTransitionHook = function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(result === undefined, 'You should not "return" in a transition hook with a callback argument; ' + 'call the callback instead') : void 0;
	  }
	};

	exports.default = runTransitionHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.locationsAreEqual = exports.statesAreEqual = exports.createLocation = exports.createQuery = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(200);

	var _warning2 = _interopRequireDefault(_warning);

	var _PathUtils = __webpack_require__(229);

	var _Actions = __webpack_require__(222);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createQuery = exports.createQuery = function createQuery(props) {
	  return _extends(Object.create(null), props);
	};

	var createLocation = exports.createLocation = function createLocation() {
	  var input = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var object = typeof input === 'string' ? (0, _PathUtils.parsePath)(input) : input;

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!object.path, 'Location descriptor objects should have a `pathname`, not a `path`.') : void 0;

	  var pathname = object.pathname || '/';
	  var search = object.search || '';
	  var hash = object.hash || '';
	  var state = object.state;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	};

	var isDate = function isDate(object) {
	  return Object.prototype.toString.call(object) === '[object Date]';
	};

	var statesAreEqual = exports.statesAreEqual = function statesAreEqual(a, b) {
	  if (a === b) return true;

	  var typeofA = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var typeofB = typeof b === 'undefined' ? 'undefined' : _typeof(b);

	  if (typeofA !== typeofB) return false;

	  !(typeofA !== 'function') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store functions in location state') : (0, _invariant2.default)(false) : void 0;

	  // Not the same object, but same type.
	  if (typeofA === 'object') {
	    !!(isDate(a) && isDate(b)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store Date objects in location state') : (0, _invariant2.default)(false) : void 0;

	    if (!Array.isArray(a)) {
	      var keysofA = Object.keys(a);
	      var keysofB = Object.keys(b);
	      return keysofA.length === keysofB.length && keysofA.every(function (key) {
	        return statesAreEqual(a[key], b[key]);
	      });
	    }

	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return statesAreEqual(item, b[index]);
	    });
	  }

	  // All other serializable types (string, number, boolean)
	  // should be strict equal.
	  return false;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.key === b.key &&
	  // a.action === b.action && // Different action !== location change.
	  a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && statesAreEqual(a.state, b.state);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.createPath = exports.parsePath = exports.getQueryStringValueFromPath = exports.stripQueryStringValueFromPath = exports.addQueryStringValueToPath = undefined;

	var _warning = __webpack_require__(200);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var addQueryStringValueToPath = exports.addQueryStringValueToPath = function addQueryStringValueToPath(path, key, value) {
	  var _parsePath = parsePath(path);

	  var pathname = _parsePath.pathname;
	  var search = _parsePath.search;
	  var hash = _parsePath.hash;


	  return createPath({
	    pathname: pathname,
	    search: search + (search.indexOf('?') === -1 ? '?' : '&') + key + '=' + value,
	    hash: hash
	  });
	};

	var stripQueryStringValueFromPath = exports.stripQueryStringValueFromPath = function stripQueryStringValueFromPath(path, key) {
	  var _parsePath2 = parsePath(path);

	  var pathname = _parsePath2.pathname;
	  var search = _parsePath2.search;
	  var hash = _parsePath2.hash;


	  return createPath({
	    pathname: pathname,
	    search: search.replace(new RegExp('([?&])' + key + '=[a-zA-Z0-9]+(&?)'), function (match, prefix, suffix) {
	      return prefix === '?' ? prefix : suffix;
	    }),
	    hash: hash
	  });
	};

	var getQueryStringValueFromPath = exports.getQueryStringValueFromPath = function getQueryStringValueFromPath(path, key) {
	  var _parsePath3 = parsePath(path);

	  var search = _parsePath3.search;

	  var match = search.match(new RegExp('[?&]' + key + '=([a-zA-Z0-9]+)'));
	  return match && match[1];
	};

	var extractPath = function extractPath(string) {
	  var match = string.match(/^(https?:)?\/\/[^\/]*/);
	  return match == null ? string : string.substring(match[0].length);
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(path === pathname, 'A path must be pathname + search + hash only, not a full URL like "%s"', path) : void 0;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  if (location == null || typeof location === 'string') return location;

	  var basename = location.basename;
	  var pathname = location.pathname;
	  var search = location.search;
	  var hash = location.hash;

	  var path = (basename || '') + pathname;

	  if (search && search !== '?') path += search;

	  if (hash) path += hash;

	  return path;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _runTransitionHook = __webpack_require__(227);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(229);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var useBasename = function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);
	    var basename = options.basename;


	    var addBasename = function addBasename(location) {
	      if (!location) return location;

	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    };

	    var prependBasename = function prependBasename(location) {
	      if (!basename) return location;

	      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
	      var pname = object.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, object, {
	        pathname: pathname
	      });
	    };

	    // Override all read methods with basename-aware versions.
	    var getCurrentLocation = function getCurrentLocation() {
	      return addBasename(history.getCurrentLocation());
	    };

	    var listenBefore = function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        return (0, _runTransitionHook2.default)(hook, addBasename(location), callback);
	      });
	    };

	    var listen = function listen(listener) {
	      return history.listen(function (location) {
	        return listener(addBasename(location));
	      });
	    };

	    // Override all write methods with basename-aware versions.
	    var push = function push(location) {
	      return history.push(prependBasename(location));
	    };

	    var replace = function replace(location) {
	      return history.replace(prependBasename(location));
	    };

	    var createPath = function createPath(location) {
	      return history.createPath(prependBasename(location));
	    };

	    var createHref = function createHref(location) {
	      return history.createHref(prependBasename(location));
	    };

	    var createLocation = function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    };

	    return _extends({}, history, {
	      getCurrentLocation: getCurrentLocation,
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation
	    });
	  };
	};

	exports.default = useBasename;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(200);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(228);

	var _PathUtils = __webpack_require__(229);

	var _createHistory = __webpack_require__(232);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	var _Actions = __webpack_require__(222);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createStateStorage = function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	};

	var createMemoryHistory = function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var getCurrentLocation = function getCurrentLocation() {
	    var entry = entries[current];
	    var path = (0, _PathUtils.createPath)(entry);

	    var key = void 0,
	        state = void 0;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    }

	    var init = (0, _PathUtils.parsePath)(path);

	    return (0, _LocationUtils.createLocation)(_extends({}, init, { state: state }), undefined, key);
	  };

	  var canGo = function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  };

	  var go = function go(n) {
	    if (!n) return;

	    if (!canGo(n)) {
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Cannot go(%s) there is not enough history', n) : void 0;

	      return;
	    }

	    current += n;
	    var currentLocation = getCurrentLocation();

	    // Change action to POP
	    history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	  };

	  var pushLocation = function pushLocation(location) {
	    current += 1;

	    if (current < entries.length) entries.splice(current);

	    entries.push(location);

	    saveState(location.key, location.state);
	  };

	  var replaceLocation = function replaceLocation(location) {
	    entries[current] = location;
	    saveState(location.key, location.state);
	  };

	  var history = (0, _createHistory2.default)(_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;


	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    return (0, _LocationUtils.createLocation)(entry);
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : (0, _invariant2.default)(false) : void 0;
	  }

	  var storage = createStateStorage(entries);

	  var saveState = function saveState(key, state) {
	    return storage[key] = state;
	  };

	  var readState = function readState(key) {
	    return storage[key];
	  };

	  return _extends({}, history, {
	    canGo: canGo
	  });
	};

	exports.default = createMemoryHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(233);

	var _PathUtils = __webpack_require__(229);

	var _runTransitionHook = __webpack_require__(227);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _Actions = __webpack_require__(222);

	var _LocationUtils = __webpack_require__(228);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createHistory = function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var getUserConfirmation = options.getUserConfirmation;
	  var pushLocation = options.pushLocation;
	  var replaceLocation = options.replaceLocation;
	  var go = options.go;
	  var keyLength = options.keyLength;


	  var currentLocation = void 0;
	  var pendingLocation = void 0;
	  var beforeListeners = [];
	  var listeners = [];
	  var allKeys = [];

	  var getCurrentIndex = function getCurrentIndex() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) return allKeys.indexOf(pendingLocation.key);

	    if (currentLocation) return allKeys.indexOf(currentLocation.key);

	    return -1;
	  };

	  var updateLocation = function updateLocation(nextLocation) {
	    var currentIndex = getCurrentIndex();

	    currentLocation = nextLocation;

	    if (currentLocation.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, currentIndex + 1), [currentLocation.key]);
	    } else if (currentLocation.action === _Actions.REPLACE) {
	      allKeys[currentIndex] = currentLocation.key;
	    }

	    listeners.forEach(function (listener) {
	      return listener(currentLocation);
	    });
	  };

	  var listenBefore = function listenBefore(listener) {
	    beforeListeners.push(listener);

	    return function () {
	      return beforeListeners = beforeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var listen = function listen(listener) {
	    listeners.push(listener);

	    return function () {
	      return listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, callback) {
	    (0, _AsyncUtils.loopAsync)(beforeListeners.length, function (index, next, done) {
	      (0, _runTransitionHook2.default)(beforeListeners[index], location, function (result) {
	        return result != null ? done(result) : next();
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          return callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  };

	  var transitionTo = function transitionTo(nextLocation) {
	    if (currentLocation && (0, _LocationUtils.locationsAreEqual)(currentLocation, nextLocation) || pendingLocation && (0, _LocationUtils.locationsAreEqual)(pendingLocation, nextLocation)) return; // Nothing to do

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted during confirmation

	      pendingLocation = null;

	      if (ok) {
	        // Treat PUSH to same path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = (0, _PathUtils.createPath)(currentLocation);
	          var nextPath = (0, _PathUtils.createPath)(nextLocation);

	          if (nextPath === prevPath && (0, _LocationUtils.statesAreEqual)(currentLocation.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (nextLocation.action === _Actions.POP) {
	          updateLocation(nextLocation);
	        } else if (nextLocation.action === _Actions.PUSH) {
	          if (pushLocation(nextLocation) !== false) updateLocation(nextLocation);
	        } else if (nextLocation.action === _Actions.REPLACE) {
	          if (replaceLocation(nextLocation) !== false) updateLocation(nextLocation);
	        }
	      } else if (currentLocation && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(currentLocation.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL
	      }
	    });
	  };

	  var push = function push(input) {
	    return transitionTo(createLocation(input, _Actions.PUSH));
	  };

	  var replace = function replace(input) {
	    return transitionTo(createLocation(input, _Actions.REPLACE));
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength || 6);
	  };

	  var createHref = function createHref(location) {
	    return (0, _PathUtils.createPath)(location);
	  };

	  var createLocation = function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];
	    return (0, _LocationUtils.createLocation)(location, action, key);
	  };

	  return {
	    getCurrentLocation: getCurrentLocation,
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: _PathUtils.createPath,
	    createHref: createHref,
	    createLocation: createLocation
	  };
	};

	exports.default = createHistory;

/***/ },
/* 233 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var loopAsync = exports.loopAsync = function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var isSync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  var done = function done() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    isDone = true;

	    if (isSync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = args;
	      return;
	    }

	    callback.apply(undefined, args);
	  };

	  var next = function next() {
	    if (isDone) return;

	    hasNext = true;

	    if (isSync) return; // Iterate instead of recursing if possible.

	    isSync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work(currentTurn++, next, done);
	    }

	    isSync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(undefined, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  };

	  next();
	};

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = useRouterHistory;

	var _useQueries = __webpack_require__(224);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(230);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	    return history;
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(5);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(209);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    middlewares.forEach(function (middleware, index) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(middleware.renderRouterContext || middleware.renderRouteComponent, 'The middleware specified at index ' + index + ' does not appear to be ' + 'a valid React Router middleware.') : void 0;
	    });
	  }

	  var withContext = middlewares.map(function (middleware) {
	    return middleware.renderRouterContext;
	  }).filter(Boolean);
	  var withComponent = middlewares.map(function (middleware) {
	    return middleware.renderRouteComponent;
	  }).filter(Boolean);

	  var makeCreateElement = function makeCreateElement() {
	    var baseCreateElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _react.createElement;
	    return function (Component, props) {
	      return withComponent.reduceRight(function (previous, renderRouteComponent) {
	        return renderRouteComponent(previous, props);
	      }, baseCreateElement(Component, props));
	    };
	  };

	  return function (renderProps) {
	    return withContext.reduceRight(function (previous, renderRouterContext) {
	      return renderRouterContext(previous, renderProps);
	    }, _react2.default.createElement(_RouterContext2.default, _extends({}, renderProps, {
	      createElement: makeCreateElement(renderProps.createElement)
	    })));
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createBrowserHistory = __webpack_require__(237);

	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

	var _createRouterHistory = __webpack_require__(243);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createBrowserHistory2.default);
	module.exports = exports['default'];

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(238);

	var _BrowserProtocol = __webpack_require__(239);

	var BrowserProtocol = _interopRequireWildcard(_BrowserProtocol);

	var _RefreshProtocol = __webpack_require__(242);

	var RefreshProtocol = _interopRequireWildcard(_RefreshProtocol);

	var _DOMUtils = __webpack_require__(240);

	var _createHistory = __webpack_require__(232);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve clean URLs. You can force this
	 * behavior using { forceRefresh: true } in options.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Browser history needs a DOM') : (0, _invariant2.default)(false) : void 0;

	  var useRefresh = options.forceRefresh || !(0, _DOMUtils.supportsHistory)();
	  var Protocol = useRefresh ? RefreshProtocol : BrowserProtocol;

	  var getUserConfirmation = Protocol.getUserConfirmation;
	  var getCurrentLocation = Protocol.getCurrentLocation;
	  var pushLocation = Protocol.pushLocation;
	  var replaceLocation = Protocol.replaceLocation;
	  var go = Protocol.go;


	  var history = (0, _createHistory2.default)(_extends({
	    getUserConfirmation: getUserConfirmation }, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: go
	  }));

	  var listenerCount = 0,
	      stopListener = void 0;

	  var startListener = function startListener(listener, before) {
	    if (++listenerCount === 1) stopListener = BrowserProtocol.startListener(history.transitionTo);

	    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopListener();
	    };
	  };

	  var listenBefore = function listenBefore(listener) {
	    return startListener(listener, true);
	  };

	  var listen = function listen(listener) {
	    return startListener(listener, false);
	  };

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen
	  });
	};

	exports.default = createBrowserHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.go = exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getUserConfirmation = exports.getCurrentLocation = undefined;

	var _LocationUtils = __webpack_require__(228);

	var _DOMUtils = __webpack_require__(240);

	var _DOMStateStorage = __webpack_require__(241);

	var _PathUtils = __webpack_require__(229);

	var _ExecutionEnvironment = __webpack_require__(238);

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var needsHashchangeListener = _ExecutionEnvironment.canUseDOM && !(0, _DOMUtils.supportsPopstateOnHashchange)();

	var _createLocation = function _createLocation(historyState) {
	  var key = historyState && historyState.key;

	  return (0, _LocationUtils.createLocation)({
	    pathname: window.location.pathname,
	    search: window.location.search,
	    hash: window.location.hash,
	    state: key ? (0, _DOMStateStorage.readState)(key) : undefined
	  }, undefined, key);
	};

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
	  var historyState = void 0;
	  try {
	    historyState = window.history.state || {};
	  } catch (error) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    historyState = {};
	  }

	  return _createLocation(historyState);
	};

	var getUserConfirmation = exports.getUserConfirmation = function getUserConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	var startListener = exports.startListener = function startListener(listener) {
	  var handlePopState = function handlePopState(event) {
	    if (event.state !== undefined) // Ignore extraneous popstate events in WebKit
	      listener(_createLocation(event.state));
	  };

	  (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	  var handleUnpoppedHashChange = function handleUnpoppedHashChange() {
	    return listener(getCurrentLocation());
	  };

	  if (needsHashchangeListener) {
	    (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
	  }

	  return function () {
	    (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	    if (needsHashchangeListener) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
	    }
	  };
	};

	var updateLocation = function updateLocation(location, updateState) {
	  var state = location.state;
	  var key = location.key;


	  if (state !== undefined) (0, _DOMStateStorage.saveState)(key, state);

	  updateState({ key: key }, (0, _PathUtils.createPath)(location));
	};

	var pushLocation = exports.pushLocation = function pushLocation(location) {
	  return updateLocation(location, function (state, path) {
	    return window.history.pushState(state, null, path);
	  });
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
	  return updateLocation(location, function (state, path) {
	    return window.history.replaceState(state, null, path);
	  });
	};

	var go = exports.go = function go(n) {
	  if (n) window.history.go(n);
	};

/***/ },
/* 240 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopstateOnHashchange = exports.supportsPopstateOnHashchange = function supportsPopstateOnHashchange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.readState = exports.saveState = undefined;

	var _warning = __webpack_require__(200);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var QuotaExceededErrors = {
	  QuotaExceededError: true,
	  QUOTA_EXCEEDED_ERR: true
	};

	var SecurityErrors = {
	  SecurityError: true
	};

	var KeyPrefix = '@@History/';

	var createKey = function createKey(key) {
	  return KeyPrefix + key;
	};

	var saveState = exports.saveState = function saveState(key, state) {
	  if (!window.sessionStorage) {
	    // Session storage is not available or hidden.
	    // sessionStorage is undefined in Internet Explorer when served via file protocol.
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available') : void 0;

	    return;
	  }

	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (SecurityErrors[error.name]) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available due to security settings') : void 0;

	      return;
	    }

	    if (QuotaExceededErrors[error.name] && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : void 0;

	      return;
	    }

	    throw error;
	  }
	};

	var readState = exports.readState = function readState(key) {
	  var json = void 0;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (SecurityErrors[error.name]) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to read state; sessionStorage is not available due to security settings') : void 0;

	      return undefined;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return undefined;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.replaceLocation = exports.pushLocation = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

	var _BrowserProtocol = __webpack_require__(239);

	Object.defineProperty(exports, 'getUserConfirmation', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.getUserConfirmation;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.go;
	  }
	});

	var _LocationUtils = __webpack_require__(228);

	var _PathUtils = __webpack_require__(229);

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
	  return (0, _LocationUtils.createLocation)(window.location);
	};

	var pushLocation = exports.pushLocation = function pushLocation(location) {
	  window.location.href = (0, _PathUtils.createPath)(location);
	  return false; // Don't update location
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
	  window.location.replace((0, _PathUtils.createPath)(location));
	  return false; // Don't update location
	};

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	exports.default = function (createHistory) {
	  var history = void 0;
	  if (canUseDOM) history = (0, _useRouterHistory2.default)(createHistory)();
	  return history;
	};

	var _useRouterHistory = __webpack_require__(234);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	module.exports = exports['default'];

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createHashHistory = __webpack_require__(245);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _createRouterHistory = __webpack_require__(243);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createHashHistory2.default);
	module.exports = exports['default'];

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(200);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(196);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(238);

	var _DOMUtils = __webpack_require__(240);

	var _HashProtocol = __webpack_require__(246);

	var HashProtocol = _interopRequireWildcard(_HashProtocol);

	var _createHistory = __webpack_require__(232);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DefaultQueryKey = '_k';

	var addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!' + path;
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substring(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '/' ? path.substring(1) : path;
	    },
	    decodePath: addLeadingSlash
	  },
	  slash: {
	    encodePath: addLeadingSlash,
	    decodePath: addLeadingSlash
	  }
	};

	var createHashHistory = function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Hash history needs a DOM') : (0, _invariant2.default)(false) : void 0;

	  var queryKey = options.queryKey;
	  var hashType = options.hashType;


	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(queryKey !== false, 'Using { queryKey: false } no longer works. Instead, just don\'t ' + 'use location state if you don\'t want a key in your URL query string') : void 0;

	  if (typeof queryKey !== 'string') queryKey = DefaultQueryKey;

	  if (hashType == null) hashType = 'slash';

	  if (!(hashType in HashPathCoders)) {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Invalid hash type: %s', hashType) : void 0;

	    hashType = 'slash';
	  }

	  var pathCoder = HashPathCoders[hashType];

	  var getUserConfirmation = HashProtocol.getUserConfirmation;


	  var getCurrentLocation = function getCurrentLocation() {
	    return HashProtocol.getCurrentLocation(pathCoder, queryKey);
	  };

	  var pushLocation = function pushLocation(location) {
	    return HashProtocol.pushLocation(location, pathCoder, queryKey);
	  };

	  var replaceLocation = function replaceLocation(location) {
	    return HashProtocol.replaceLocation(location, pathCoder, queryKey);
	  };

	  var history = (0, _createHistory2.default)(_extends({
	    getUserConfirmation: getUserConfirmation }, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: HashProtocol.go
	  }));

	  var listenerCount = 0,
	      stopListener = void 0;

	  var startListener = function startListener(listener, before) {
	    if (++listenerCount === 1) stopListener = HashProtocol.startListener(history.transitionTo, pathCoder, queryKey);

	    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopListener();
	    };
	  };

	  var listenBefore = function listenBefore(listener) {
	    return startListener(listener, true);
	  };

	  var listen = function listen(listener) {
	    return startListener(listener, false);
	  };

	  var goIsSupportedWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var go = function go(n) {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;

	    history.go(n);
	  };

	  var createHref = function createHref(path) {
	    return '#' + pathCoder.encodePath(history.createHref(path));
	  };

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    go: go,
	    createHref: createHref
	  });
	};

	exports.default = createHashHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

	var _BrowserProtocol = __webpack_require__(239);

	Object.defineProperty(exports, 'getUserConfirmation', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.getUserConfirmation;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.go;
	  }
	});

	var _warning = __webpack_require__(200);

	var _warning2 = _interopRequireDefault(_warning);

	var _LocationUtils = __webpack_require__(228);

	var _DOMUtils = __webpack_require__(240);

	var _DOMStateStorage = __webpack_require__(241);

	var _PathUtils = __webpack_require__(229);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HashChangeEvent = 'hashchange';

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation(pathCoder, queryKey) {
	  var path = pathCoder.decodePath(getHashPath());
	  var key = (0, _PathUtils.getQueryStringValueFromPath)(path, queryKey);

	  var state = void 0;
	  if (key) {
	    path = (0, _PathUtils.stripQueryStringValueFromPath)(path, queryKey);
	    state = (0, _DOMStateStorage.readState)(key);
	  }

	  var init = (0, _PathUtils.parsePath)(path);
	  init.state = state;

	  return (0, _LocationUtils.createLocation)(init, undefined, key);
	};

	var prevLocation = void 0;

	var startListener = exports.startListener = function startListener(listener, pathCoder, queryKey) {
	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = pathCoder.encodePath(path);

	    if (path !== encodedPath) {
	      // Always be sure we have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var currentLocation = getCurrentLocation(pathCoder, queryKey);

	      if (prevLocation && currentLocation.key && prevLocation.key === currentLocation.key) return; // Ignore extraneous hashchange events

	      prevLocation = currentLocation;

	      listener(currentLocation);
	    }
	  };

	  // Ensure the hash is encoded properly.
	  var path = getHashPath();
	  var encodedPath = pathCoder.encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);

	  return function () {
	    return (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	  };
	};

	var updateLocation = function updateLocation(location, pathCoder, queryKey, updateHash) {
	  var state = location.state;
	  var key = location.key;


	  var path = pathCoder.encodePath((0, _PathUtils.createPath)(location));

	  if (state !== undefined) {
	    path = (0, _PathUtils.addQueryStringValueToPath)(path, queryKey, key);
	    (0, _DOMStateStorage.saveState)(key, state);
	  }

	  prevLocation = location;

	  updateHash(path);
	};

	var pushLocation = exports.pushLocation = function pushLocation(location, pathCoder, queryKey) {
	  return updateLocation(location, pathCoder, queryKey, function (path) {
	    if (getHashPath() !== path) {
	      pushHashPath(path);
	    } else {
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'You cannot PUSH the same path using hash history') : void 0;
	    }
	  });
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location, pathCoder, queryKey) {
	  return updateLocation(location, pathCoder, queryKey, function (path) {
	    if (getHashPath() !== path) replaceHashPath(path);
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }
/******/ ]);